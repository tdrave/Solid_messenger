{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","dependencies":[{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js.map","includedInParent":true,"mtime":1652099631554},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts","includedInParent":true,"mtime":1652099631786},{"name":"/Users/tdrave/demo-solid-app/package.json","includedInParent":true,"mtime":1652099771977},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1652099631546},{"name":"@inrupt/oidc-client-ext","loc":{"line":3,"column":34,"index":111},"parent":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","resolved":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nclass AuthorizationCodeWithPkceOidcHandler {\n    constructor(storageUtility, redirector) {\n        this.storageUtility = storageUtility;\n        this.redirector = redirector;\n    }\n    async canHandle(oidcLoginOptions) {\n        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\n            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\"authorization_code\") > -1);\n    }\n    async handle(oidcLoginOptions) {\n        var _a;\n        const oidcOptions = {\n            authority: oidcLoginOptions.issuer.toString(),\n            client_id: oidcLoginOptions.client.clientId,\n            client_secret: oidcLoginOptions.client.clientSecret,\n            redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n            response_type: \"code\",\n            scope: \"openid offline_access webid\",\n            filterProtocolClaims: true,\n            loadUserInfo: false,\n            code_verifier: true,\n            prompt: (_a = oidcLoginOptions.prompt) !== null && _a !== void 0 ? _a : \"consent\",\n        };\n        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);\n        const { redirector } = this;\n        const storage = this.storageUtility;\n        try {\n            const signingRequest = await oidcClientLibrary.createSigninRequest();\n            await Promise.all([\n                storage.setForUser(signingRequest.state._id, {\n                    sessionId: oidcLoginOptions.sessionId,\n                }),\n                storage.setForUser(oidcLoginOptions.sessionId, {\n                    codeVerifier: signingRequest.state._code_verifier,\n                    issuer: oidcLoginOptions.issuer.toString(),\n                    redirectUrl: oidcLoginOptions.redirectUrl,\n                    dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n                }),\n            ]);\n            redirector.redirect(signingRequest.url.toString(), {\n                handleRedirect: oidcLoginOptions.handleRedirect,\n                redirectInIframe: oidcLoginOptions.inIframe,\n            });\n        }\n        catch (err) {\n            console.error(err);\n        }\n        return undefined;\n    }\n}\nexports.default = AuthorizationCodeWithPkceOidcHandler;\n"},"sourceMaps":{"js":{"version":3,"file":"AuthorizationCodeWithPkceOidcHandler.js","sourceRoot":"","sources":["../../../../src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts"],"names":[],"mappings":";;AAoCA,6DAAqD;AAOrD,MAAqB,oCAAoC;IAGvD,YACU,cAA+B,EAC/B,UAAuB;QADvB,mBAAc,GAAd,cAAc,CAAiB;QAC/B,eAAU,GAAV,UAAU,CAAa;IAC9B,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,gBAA8B;QAC5C,OAAO,CAAC,CAAC,CACP,gBAAgB,CAAC,mBAAmB,CAAC,mBAAmB;YACxD,gBAAgB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,OAAO,CAC9D,oBAAoB,CACrB,GAAG,CAAC,CAAC,CACP,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,gBAA8B;;QAEzC,MAAM,WAAW,GAAG;YAClB,SAAS,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC7C,SAAS,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ;YAC3C,aAAa,EAAE,gBAAgB,CAAC,MAAM,CAAC,YAAY;YACnD,YAAY,EAAE,gBAAgB,CAAC,WAAW,CAAC,QAAQ,EAAE;YACrD,wBAAwB,EAAE,gBAAgB,CAAC,WAAW,CAAC,QAAQ,EAAE;YACjE,aAAa,EAAE,MAAM;YAGrB,KAAK,EAAE,6BAA6B;YACpC,oBAAoB,EAAE,IAAI;YAI1B,YAAY,EAAE,KAAK;YACnB,aAAa,EAAE,IAAI;YACnB,MAAM,EAAE,MAAA,gBAAgB,CAAC,MAAM,mCAAI,SAAS;SAC7C,CAAC;QAGF,MAAM,iBAAiB,GAAG,IAAI,4BAAU,CAAC,WAAW,CAAC,CAAC;QAEtD,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAEpC,IAAI;YACF,MAAM,cAAc,GAAG,MAAM,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;YACrE,MAAM,OAAO,CAAC,GAAG,CAAC;gBAWhB,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE;oBAC3C,SAAS,EAAE,gBAAgB,CAAC,SAAS;iBACtC,CAAC;gBAMF,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE;oBAE7C,YAAY,EAAE,cAAc,CAAC,KAAK,CAAC,cAAc;oBACjD,MAAM,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAE1C,WAAW,EAAE,gBAAgB,CAAC,WAAW;oBACzC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;iBAC/C,CAAC;aACH,CAAC,CAAC;YAEH,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;gBACjD,cAAc,EAAE,gBAAgB,CAAC,cAAc;gBAC/C,gBAAgB,EAAE,gBAAgB,CAAC,QAAQ;aAC5C,CAAC,CAAC;SACJ;QAAC,OAAO,GAAY,EAAE;YAErB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpB;QAGD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAvFD,uDAuFC","sourcesContent":["/*\n * Copyright 2022 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Authorization Code with PKCE Flow\n */\nimport {\n  IOidcHandler,\n  IOidcOptions,\n  IRedirector,\n  IStorageUtility,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport { OidcClient } from \"@inrupt/oidc-client-ext\";\n\n/**\n * @hidden\n * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth\n * PKCE: https://tools.ietf.org/html/rfc7636\n */\nexport default class AuthorizationCodeWithPkceOidcHandler\n  implements IOidcHandler\n{\n  constructor(\n    private storageUtility: IStorageUtility,\n    private redirector: IRedirector\n  ) {}\n\n  async canHandle(oidcLoginOptions: IOidcOptions): Promise<boolean> {\n    return !!(\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\n        \"authorization_code\"\n      ) > -1\n    );\n  }\n\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    /* eslint-disable camelcase */\n    const oidcOptions = {\n      authority: oidcLoginOptions.issuer.toString(),\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n      redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\n      response_type: \"code\",\n      // The offline_access scope requests that a refresh token be returned.\n      // The webid scope is required as per https://solid.github.io/solid-oidc/#webid-scope\n      scope: \"openid offline_access webid\",\n      filterProtocolClaims: true,\n      // The userinfo endpoint on NSS fails, so disable this for now\n      // Note that in Solid, information should be retrieved from the\n      // profile referenced by the WebId.\n      loadUserInfo: false,\n      code_verifier: true,\n      prompt: oidcLoginOptions.prompt ?? \"consent\",\n    };\n    /* eslint-enable camelcase */\n\n    const oidcClientLibrary = new OidcClient(oidcOptions);\n\n    const { redirector } = this;\n    const storage = this.storageUtility;\n\n    try {\n      const signingRequest = await oidcClientLibrary.createSigninRequest();\n      await Promise.all([\n        // We use the OAuth 'state' value (which should be crypto-random) as\n        // the key in our storage to store our actual SessionID. We do this\n        // 'cos we'll need to lookup our session information again when the\n        // browser is redirected back to us (i.e. the OAuth client\n        // application) from the Authorization Server.\n        // We don't want to use our session ID as the OAuth 'state' value, as\n        // that session ID can be any developer-specified value, and therefore\n        // may not be appropriate (since the OAuth 'state' value should really\n        // be an unguessable crypto-random value).\n        // eslint-disable-next-line no-underscore-dangle\n        storage.setForUser(signingRequest.state._id, {\n          sessionId: oidcLoginOptions.sessionId,\n        }),\n\n        // Store our login-process state using the session ID as the key.\n        // Strictly speaking, this indirection from our OAuth state value to\n        // our session ID is unnecessary, but it provides a slightly cleaner\n        // separation of concerns.\n        storage.setForUser(oidcLoginOptions.sessionId, {\n          // eslint-disable-next-line no-underscore-dangle\n          codeVerifier: signingRequest.state._code_verifier,\n          issuer: oidcLoginOptions.issuer.toString(),\n          // The redirect URL is read after redirect, so it must be stored now.\n          redirectUrl: oidcLoginOptions.redirectUrl,\n          dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n        }),\n      ]);\n\n      redirector.redirect(signingRequest.url.toString(), {\n        handleRedirect: oidcLoginOptions.handleRedirect,\n        redirectInIframe: oidcLoginOptions.inIframe,\n      });\n    } catch (err: unknown) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    // The login is only completed AFTER redirect, so nothing to return here.\n    return undefined;\n  }\n}\n"]}},"error":null,"hash":"9ed6b7bc5a82ab8dc9718237acc79a6e","cacheData":{"env":{}}}