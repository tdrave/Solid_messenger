import { BlankNode, Comparable, DataFactory, DataFactoryOpts, Feature, Indexable, Literal, NamedNode, Node, Quad, Quadruple, SomeTerm, Term } from "./types";
/**
 * Plain JS/functional implementation of the RDF/JS: Data model specification, limited to a strict
 * rdf subset (no Variable, no Literal as predicate, etc.).
 */
export declare class PlainFactory implements DataFactory {
    bnIndex: number;
    supports: Record<Feature, boolean>;
    constructor(opts?: DataFactoryOpts);
    /**
     * Checks if the object {obj} is a Quad.
     */
    static isQuad(obj: any): obj is Quad;
    namedNode(value: string): NamedNode;
    blankNode(value?: string): BlankNode;
    literal(value: string | unknown, languageOrDatatype?: string | NamedNode): Literal;
    defaultGraph(): NamedNode;
    /**
     * Create an RDF statement in object form.
     * @param subject The subject of the statement
     * @param predicate The predicate of the statement
     * @param object The object of the statement
     * @param graph The graph of the statement
     */
    quad(subject: Node, predicate: NamedNode, object: SomeTerm, graph?: NamedNode): Quad;
    isQuad(obj: any): obj is Quad;
    /**
     * * Returns an RDF statement in array form.
     * @param subject The subject of the statement
     * @param predicate The predicate of the statement
     * @param object The object of the statement
     * @param graph The graph of the statement
     */
    quadruple(subject: Node, predicate: NamedNode, object: SomeTerm, graph?: NamedNode): Quadruple;
    fromTerm(original: Literal | Term): Term;
    fromQuad(original: Quad): Quad;
    fromQdr(original: Quadruple): Quad;
    qdrFromQuad(original: Quad): Quadruple;
    qdrFromQdr(original: Quadruple): Quadruple;
    /**
     * Compare if two RDF objects are the same.
     *
     * Should work with non-standard rdf libraries as well (e.g. supporting Variable and Collection).
     */
    equals(a: Comparable, b: Comparable): boolean;
    fromId(id: Indexable): SomeTerm | unknown;
    id(obj: SomeTerm | Quad | Quadruple): Indexable;
    termFromNQ(nq: string): SomeTerm;
    toNQ(term: SomeTerm | Quadruple | Quad): string;
    protected parseLiteral(value: unknown): Literal;
    protected termToNQ(term: BlankNode | NamedNode | Literal): string;
    protected quadrupleToNQ(quad: Quadruple): string;
    protected quadToNQ(quad: Quad): string;
}
/**
 * Plain JS/functional implementation of the RDF/JS: Data model specification, limited to a strict
 * rdf subset (no Variable, no Literal as predicate, etc.).
 */
export declare const DefaultFactory: PlainFactory;
