import "@ungap/global-this";
import { DefaultFactory, PlainFactory } from "./PlainFactory";
let setup;
let globalFactory;
let globalSymbol;
function shouldOverride(rdfFactory, override) {
    const factory = globalThis[rdfFactory];
    return typeof factory === "undefined" || factory === DefaultFactory || override;
}
function changeFactory(rdfFactory, factory, override) {
    if (shouldOverride(rdfFactory, override)) {
        globalThis[rdfFactory] = factory;
        globalFactory = factory;
    }
    else if (typeof globalFactory === "undefined" || override) {
        globalThis[rdfFactory] = factory;
        globalFactory = factory;
    }
}
if (typeof Symbol !== "undefined") {
    const rdfFactory = Symbol.for('rdfFactory');
    setup = function setup(factory = DefaultFactory, override = true) {
        changeFactory(rdfFactory, factory, override);
        globalFactory = globalThis[rdfFactory];
    };
    globalSymbol = rdfFactory;
}
else {
    const rdfFactory = 'rdfFactory';
    setup = function setup(factory = DefaultFactory, override = true) {
        changeFactory(rdfFactory, factory, override);
    };
    globalSymbol = rdfFactory;
    globalFactory = globalThis[rdfFactory];
}
setup(DefaultFactory);
export const createNS = (ns) => (term) => globalFactory.namedNode(`${ns}${term}`);
let proxy;
if (typeof Proxy !== "undefined") {
    proxy = new Proxy(globalFactory || {}, {
        ownKeys() {
            return globalFactory && Object.keys(globalFactory) || [];
        },
        getOwnPropertyDescriptor(_, k) {
            return Object.getOwnPropertyDescriptor(globalFactory, k);
        },
        set(_, property, value) {
            globalFactory[property] = value;
            return true;
        },
        get(_, property) {
            return globalFactory[property];
        },
    });
}
else {
    proxy = [
        'namedNode',
        'blankNode',
        'literal',
        'defaultGraph',
        'quad',
        'quadruple',
        'fromTerm',
        'fromQuad',
        'fromQdr',
        'qdrFromQuad',
        'qdrFromQdr',
        'equals',
        'id',
        'toNQ',
        'fromId',
        'termToNQ',
        'termFromNQ',
        'quadrupleToNQ',
        'quadToNQ',
        'supports',
    ].reduce((acc, key) => {
        acc[key] = (...args) => globalFactory[key](...args);
        return acc;
    }, {});
}
export { setup, globalFactory, globalSymbol, PlainFactory, };
export * from './types';
export * from './utilities';
export default proxy;
