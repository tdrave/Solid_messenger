{"id":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js","dependencies":[{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js.map","includedInParent":true,"mtime":1652099631139},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/src/login/oidc/IClientRegistrar.ts","includedInParent":true,"mtime":1652099631199},{"name":"/Users/tdrave/demo-solid-app/package.json","includedInParent":true,"mtime":1652099771977},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/package.json","includedInParent":true,"mtime":1652099631124}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleRegistration = exports.determineSigningAlg = void 0;\nfunction isValidUrl(url) {\n    try {\n        new URL(url);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction determineSigningAlg(supported, preferred) {\n    var _a;\n    return ((_a = preferred.find((signingAlg) => {\n        return supported.includes(signingAlg);\n    })) !== null && _a !== void 0 ? _a : null);\n}\nexports.determineSigningAlg = determineSigningAlg;\nfunction determineClientType(options, issuerConfig) {\n    if (options.clientId !== undefined && !isValidUrl(options.clientId)) {\n        return \"static\";\n    }\n    if (issuerConfig.scopesSupported.includes(\"webid\") &&\n        options.clientId !== undefined &&\n        isValidUrl(options.clientId)) {\n        return \"solid-oidc\";\n    }\n    return \"dynamic\";\n}\nasync function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {\n    const clientType = determineClientType(options, issuerConfig);\n    if (clientType === \"dynamic\") {\n        return clientRegistrar.getClient({\n            sessionId: options.sessionId,\n            clientName: options.clientName,\n            redirectUrl: options.redirectUrl,\n        }, issuerConfig);\n    }\n    await storageUtility.setForUser(options.sessionId, {\n        clientId: options.clientId,\n    });\n    if (options.clientSecret) {\n        await storageUtility.setForUser(options.sessionId, {\n            clientSecret: options.clientSecret,\n        });\n    }\n    if (options.clientName) {\n        await storageUtility.setForUser(options.sessionId, {\n            clientName: options.clientName,\n        });\n    }\n    return {\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        clientName: options.clientName,\n        clientType,\n    };\n}\nexports.handleRegistration = handleRegistration;\n"},"sourceMaps":{"js":{"version":3,"file":"IClientRegistrar.js","sourceRoot":"","sources":["../../../src/login/oidc/IClientRegistrar.ts"],"names":[],"mappings":";;;AAgDA,SAAS,UAAU,CAAC,GAAW;IAC7B,IAAI;QAIF,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QACb,OAAO,IAAI,CAAC;KACb;IAAC,WAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAED,SAAgB,mBAAmB,CACjC,SAAmB,EACnB,SAAmB;;IAEnB,OAAO,CACL,MAAA,SAAS,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QAC5B,OAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC,CAAC,mCAAI,IAAI,CACX,CAAC;AACJ,CAAC;AATD,kDASC;AAED,SAAS,mBAAmB,CAC1B,OAAsB,EACtB,YAA2B;IAE3B,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACnE,OAAO,QAAQ,CAAC;KACjB;IACD,IACE,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC9C,OAAO,CAAC,QAAQ,KAAK,SAAS;QAC9B,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAC5B;QACA,OAAO,YAAY,CAAC;KACrB;IAKD,OAAO,SAAS,CAAC;AACnB,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,OAAsB,EACtB,YAA2B,EAC3B,cAA+B,EAC/B,eAAiC;IAEjC,MAAM,UAAU,GAAG,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAC9D,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,OAAO,eAAe,CAAC,SAAS,CAC9B;YACE,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,WAAW,EAAE,OAAO,CAAC,WAAW;SACjC,EACD,YAAY,CACb,CAAC;KACH;IAKD,MAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE;QAGjD,QAAQ,EAAE,OAAO,CAAC,QAAS;KAC5B,CAAC,CAAC;IACH,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,MAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE;YACjD,YAAY,EAAE,OAAO,CAAC,YAAY;SACnC,CAAC,CAAC;KACJ;IACD,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,MAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE;YACjD,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B,CAAC,CAAC;KACJ;IACD,OAAO;QAEL,QAAQ,EAAE,OAAO,CAAC,QAAS;QAC3B,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,UAAU;KACX,CAAC;AACJ,CAAC;AA3CD,gDA2CC","sourcesContent":["/*\n * Copyright 2022 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport IStorageUtility from \"../../storage/IStorageUtility\";\nimport ILoginOptions from \"../ILoginOptions\";\nimport { ClientType, IClient } from \"./IClient\";\nimport { IIssuerConfig } from \"./IIssuerConfig\";\n\nexport interface IClientRegistrarOptions {\n  sessionId: string;\n  clientName?: string;\n  redirectUrl?: string;\n  registrationAccessToken?: string;\n}\n\n/**\n * @hidden\n */\nexport interface IClientRegistrar {\n  getClient(\n    options: IClientRegistrarOptions,\n    issuerConfig: IIssuerConfig\n  ): Promise<IClient>;\n}\n\nfunction isValidUrl(url: string): boolean {\n  try {\n    // Here, the URL constructor is just called to parse the given string and\n    // verify if it is a well-formed IRI.\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function determineSigningAlg(\n  supported: string[],\n  preferred: string[]\n): string | null {\n  return (\n    preferred.find((signingAlg) => {\n      return supported.includes(signingAlg);\n    }) ?? null\n  );\n}\n\nfunction determineClientType(\n  options: ILoginOptions,\n  issuerConfig: IIssuerConfig\n): ClientType {\n  if (options.clientId !== undefined && !isValidUrl(options.clientId)) {\n    return \"static\";\n  }\n  if (\n    issuerConfig.scopesSupported.includes(\"webid\") &&\n    options.clientId !== undefined &&\n    isValidUrl(options.clientId)\n  ) {\n    return \"solid-oidc\";\n  }\n  // If no client_id is provided, the client must go through Dynamic Client Registration.\n  // If a client_id is provided and it looks like a URI, yet the Identity Provider\n  // does *not* support Solid-OIDC, then we also perform DCR (and discard the\n  // provided client_id).\n  return \"dynamic\";\n}\n\nexport async function handleRegistration(\n  options: ILoginOptions,\n  issuerConfig: IIssuerConfig,\n  storageUtility: IStorageUtility,\n  clientRegistrar: IClientRegistrar\n): Promise<IClient> {\n  const clientType = determineClientType(options, issuerConfig);\n  if (clientType === \"dynamic\") {\n    return clientRegistrar.getClient(\n      {\n        sessionId: options.sessionId,\n        clientName: options.clientName,\n        redirectUrl: options.redirectUrl,\n      },\n      issuerConfig\n    );\n  }\n  // If a client_id was provided, and the Identity Provider is Solid-OIDC compliant,\n  // or it is not compliant but the client_id isn't an IRI (we assume it has already\n  // been registered with the IdP), then the client registration information needs\n  // to be stored so that it can be retrieved later after redirect.\n  await storageUtility.setForUser(options.sessionId, {\n    // If the client is either static or solid-oidc compliant, its client ID cannot be undefined.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    clientId: options.clientId!,\n  });\n  if (options.clientSecret) {\n    await storageUtility.setForUser(options.sessionId, {\n      clientSecret: options.clientSecret,\n    });\n  }\n  if (options.clientName) {\n    await storageUtility.setForUser(options.sessionId, {\n      clientName: options.clientName,\n    });\n  }\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    clientId: options.clientId!,\n    clientSecret: options.clientSecret,\n    clientName: options.clientName,\n    clientType,\n  };\n}\n"]}},"error":null,"hash":"5a3a83a483220dc9f9e657cc57fd9ee9","cacheData":{"env":{}}}