{"id":"node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js","dependencies":[{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js.map","includedInParent":true,"mtime":1652099631161},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/src/storage/StorageUtility.ts","includedInParent":true,"mtime":1652099631259},{"name":"/Users/tdrave/demo-solid-app/package.json","includedInParent":true,"mtime":1652099771977},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/package.json","includedInParent":true,"mtime":1652099631124},{"name":"jose","loc":{"line":7,"column":23,"index":356},"parent":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js","resolved":"/Users/tdrave/demo-solid-app/node_modules/jose/dist/browser/index.js"},{"name":"../errors/InruptError","loc":{"line":8,"column":46,"index":411},"parent":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js","resolved":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveSessionInfoToStorage = exports.loadOidcContextFromStorage = exports.getSessionIdFromOauthState = void 0;\nconst jose_1 = require(\"jose\");\nconst InruptError_1 = __importDefault(require(\"../errors/InruptError\"));\nasync function getSessionIdFromOauthState(storageUtility, oauthState) {\n    return storageUtility.getForUser(oauthState, \"sessionId\");\n}\nexports.getSessionIdFromOauthState = getSessionIdFromOauthState;\nasync function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {\n    try {\n        const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([\n            storageUtility.getForUser(sessionId, \"issuer\", {\n                errorIfNull: true,\n            }),\n            storageUtility.getForUser(sessionId, \"codeVerifier\"),\n            storageUtility.getForUser(sessionId, \"redirectUrl\"),\n            storageUtility.getForUser(sessionId, \"dpop\", { errorIfNull: true }),\n        ]);\n        await storageUtility.deleteForUser(sessionId, \"codeVerifier\");\n        const issuerConfig = await configFetcher.fetchConfig(issuerIri);\n        return {\n            codeVerifier,\n            redirectUrl: storedRedirectIri,\n            issuerConfig,\n            dpop: dpop === \"true\",\n        };\n    }\n    catch (e) {\n        throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`);\n    }\n}\nexports.loadOidcContextFromStorage = loadOidcContextFromStorage;\nasync function saveSessionInfoToStorage(storageUtility, sessionId, webId, isLoggedIn, refreshToken, secure, dpopKey) {\n    if (refreshToken !== undefined) {\n        await storageUtility.setForUser(sessionId, { refreshToken }, { secure });\n    }\n    if (webId !== undefined) {\n        await storageUtility.setForUser(sessionId, { webId }, { secure });\n    }\n    if (isLoggedIn !== undefined) {\n        await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });\n    }\n    if (dpopKey !== undefined) {\n        await storageUtility.setForUser(sessionId, {\n            publicKey: JSON.stringify(dpopKey.publicKey),\n            privateKey: JSON.stringify(await (0, jose_1.exportJWK)(dpopKey.privateKey)),\n        }, { secure });\n    }\n}\nexports.saveSessionInfoToStorage = saveSessionInfoToStorage;\nclass StorageUtility {\n    constructor(secureStorage, insecureStorage) {\n        this.secureStorage = secureStorage;\n        this.insecureStorage = insecureStorage;\n        this.RESOURCE_SERVER_SESSION_INFORMATION_KEY = \"tmp-resource-server-session-info\";\n    }\n    getKey(userId) {\n        return `solidClientAuthenticationUser:${userId}`;\n    }\n    async getUserData(userId, secure) {\n        const stored = await (secure\n            ? this.secureStorage\n            : this.insecureStorage).get(this.getKey(userId));\n        if (stored === undefined) {\n            return {};\n        }\n        try {\n            return JSON.parse(stored);\n        }\n        catch (err) {\n            throw new InruptError_1.default(`Data for user [${userId}] in [${secure ? \"secure\" : \"unsecure\"}] storage is corrupted - expected valid JSON, but got: ${stored}`);\n        }\n    }\n    async setUserData(userId, data, secure) {\n        await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));\n    }\n    async get(key, options) {\n        const value = await ((options === null || options === void 0 ? void 0 : options.secure)\n            ? this.secureStorage\n            : this.insecureStorage).get(key);\n        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {\n            throw new InruptError_1.default(`[${key}] is not stored`);\n        }\n        return value;\n    }\n    async set(key, value, options) {\n        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);\n    }\n    async delete(key, options) {\n        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);\n    }\n    async getForUser(userId, key, options) {\n        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);\n        let value;\n        if (!userData || !userData[key]) {\n            value = undefined;\n        }\n        value = userData[key];\n        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {\n            throw new InruptError_1.default(`Field [${key}] for user [${userId}] is not stored`);\n        }\n        return value || undefined;\n    }\n    async setForUser(userId, values, options) {\n        let userData;\n        try {\n            userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);\n        }\n        catch (_a) {\n            userData = {};\n        }\n        await this.setUserData(userId, { ...userData, ...values }, options === null || options === void 0 ? void 0 : options.secure);\n    }\n    async deleteForUser(userId, key, options) {\n        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);\n        delete userData[key];\n        await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);\n    }\n    async deleteAllUserData(userId, options) {\n        await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));\n    }\n    async storeResourceServerSessionInfo(webId, resourceServerIri, expiration) {\n        var _a;\n        const sessions = JSON.parse((_a = (await this.insecureStorage.get(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY))) !== null && _a !== void 0 ? _a : \"{}\");\n        if (sessions.webId !== webId) {\n            sessions.sessions = {};\n        }\n        sessions.webId = webId;\n        sessions.sessions[resourceServerIri] = {\n            expiration,\n        };\n        await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, JSON.stringify(sessions));\n    }\n    async clearResourceServerSessionInfo(resourceServerIri) {\n        var _a;\n        const sessions = JSON.parse((_a = (await this.insecureStorage.get(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY))) !== null && _a !== void 0 ? _a : \"{}\");\n        if (sessions.sessions !== undefined) {\n            delete sessions.sessions[resourceServerIri];\n            if (Object.keys(sessions.sessions).length === 0) {\n                await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, \"{}\");\n            }\n            else {\n                await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, JSON.stringify(sessions));\n            }\n        }\n    }\n}\nexports.default = StorageUtility;\n"},"sourceMaps":{"js":{"version":3,"file":"StorageUtility.js","sourceRoot":"","sources":["../../src/storage/StorageUtility.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2022 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * A helper class that will validate items taken from local storage\n */\nimport { exportJWK } from \"jose\";\nimport IStorage from \"./IStorage\";\nimport IStorageUtility from \"./IStorageUtility\";\nimport InruptError from \"../errors/InruptError\";\nimport { IIssuerConfig } from \"../login/oidc/IIssuerConfig\";\nimport { IIssuerConfigFetcher } from \"../login/oidc/IIssuerConfigFetcher\";\nimport { KeyPair } from \"../authenticatedFetch/dpopUtils\";\n\nexport type OidcContext = {\n  issuerConfig: IIssuerConfig;\n  codeVerifier?: string;\n  redirectUrl?: string;\n  dpop: boolean;\n};\n\nexport async function getSessionIdFromOauthState(\n  storageUtility: IStorageUtility,\n  oauthState: string\n): Promise<string | undefined> {\n  return storageUtility.getForUser(oauthState, \"sessionId\");\n}\n\n/**\n * Based on the provided state, this looks up contextual information stored\n * before redirecting the user to the OIDC issuer.\n * @param sessionId The state (~ correlation ID) of the OIDC request\n * @param storageUtility\n * @param configFetcher\n * @returns Information stored about the client issuing the request\n */\nexport async function loadOidcContextFromStorage(\n  sessionId: string,\n  storageUtility: IStorageUtility,\n  configFetcher: IIssuerConfigFetcher\n): Promise<OidcContext> {\n  try {\n    const [issuerIri, codeVerifier, storedRedirectIri, dpop] =\n      await Promise.all([\n        storageUtility.getForUser(sessionId, \"issuer\", {\n          errorIfNull: true,\n        }),\n        storageUtility.getForUser(sessionId, \"codeVerifier\"),\n        storageUtility.getForUser(sessionId, \"redirectUrl\"),\n        storageUtility.getForUser(sessionId, \"dpop\", { errorIfNull: true }),\n      ]);\n    // Clear the code verifier, which is one-time use.\n    await storageUtility.deleteForUser(sessionId, \"codeVerifier\");\n\n    // Unlike openid-client, this looks up the configuration from storage\n    const issuerConfig = await configFetcher.fetchConfig(issuerIri as string);\n    return {\n      codeVerifier,\n      redirectUrl: storedRedirectIri,\n      issuerConfig,\n      dpop: dpop === \"true\",\n    };\n  } catch (e) {\n    throw new Error(\n      `Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`\n    );\n  }\n}\n\n/**\n * Stores information about the session in the provided storage. Note that not\n * all storage are equally secure, and it is strongly advised not to store either\n * the refresh token or the DPoP key in the browser's local storage.\n *\n * @param storageUtility\n * @param sessionId\n * @param webId\n * @param isLoggedIn\n * @param refreshToken\n * @param secure\n * @param dpopKey\n */\nexport async function saveSessionInfoToStorage(\n  storageUtility: IStorageUtility,\n  sessionId: string,\n  webId?: string,\n  isLoggedIn?: string,\n  refreshToken?: string,\n  secure?: boolean,\n  dpopKey?: KeyPair\n): Promise<void> {\n  // TODO: Investigate why this does not work with a Promise.all\n  if (refreshToken !== undefined) {\n    await storageUtility.setForUser(sessionId, { refreshToken }, { secure });\n  }\n  if (webId !== undefined) {\n    await storageUtility.setForUser(sessionId, { webId }, { secure });\n  }\n  if (isLoggedIn !== undefined) {\n    await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });\n  }\n  if (dpopKey !== undefined) {\n    await storageUtility.setForUser(\n      sessionId,\n      {\n        publicKey: JSON.stringify(dpopKey.publicKey),\n        privateKey: JSON.stringify(await exportJWK(dpopKey.privateKey)),\n      },\n      { secure }\n    );\n  }\n}\n\nexport type ResourceServerSession = {\n  webId: string;\n  sessions: Record<\n    string,\n    {\n      expiration: number;\n    }\n  >;\n};\n\n// TOTEST: this does not handle all possible bad inputs for example what if it's not proper JSON\n/**\n * @hidden\n */\nexport default class StorageUtility implements IStorageUtility {\n  constructor(\n    private secureStorage: IStorage,\n    private insecureStorage: IStorage\n  ) {}\n\n  private getKey(userId: string): string {\n    return `solidClientAuthenticationUser:${userId}`;\n  }\n\n  private RESOURCE_SERVER_SESSION_INFORMATION_KEY =\n    \"tmp-resource-server-session-info\";\n\n  private async getUserData(\n    userId: string,\n    secure?: boolean\n  ): Promise<Record<string, string>> {\n    const stored = await (secure\n      ? this.secureStorage\n      : this.insecureStorage\n    ).get(this.getKey(userId));\n\n    if (stored === undefined) {\n      return {};\n    }\n\n    try {\n      return JSON.parse(stored);\n    } catch (err) {\n      throw new InruptError(\n        `Data for user [${userId}] in [${\n          secure ? \"secure\" : \"unsecure\"\n        }] storage is corrupted - expected valid JSON, but got: ${stored}`\n      );\n    }\n  }\n\n  private async setUserData(\n    userId: string,\n    data: Record<string, string>,\n    secure?: boolean\n  ): Promise<void> {\n    await (secure ? this.secureStorage : this.insecureStorage).set(\n      this.getKey(userId),\n      JSON.stringify(data)\n    );\n  }\n\n  async get(\n    key: string,\n    options?: { errorIfNull?: boolean; secure?: boolean }\n  ): Promise<string | undefined> {\n    const value = await (options?.secure\n      ? this.secureStorage\n      : this.insecureStorage\n    ).get(key);\n    if (value === undefined && options?.errorIfNull) {\n      throw new InruptError(`[${key}] is not stored`);\n    }\n    return value;\n  }\n\n  async set(\n    key: string,\n    value: string,\n    options?: { secure?: boolean }\n  ): Promise<void> {\n    return (options?.secure ? this.secureStorage : this.insecureStorage).set(\n      key,\n      value\n    );\n  }\n\n  async delete(key: string, options?: { secure?: boolean }): Promise<void> {\n    return (options?.secure ? this.secureStorage : this.insecureStorage).delete(\n      key\n    );\n  }\n\n  async getForUser(\n    userId: string,\n    key: string,\n    options?: { errorIfNull?: boolean; secure?: boolean }\n  ): Promise<string | undefined> {\n    const userData = await this.getUserData(userId, options?.secure);\n    let value;\n    if (!userData || !userData[key]) {\n      value = undefined;\n    }\n    value = userData[key];\n    if (value === undefined && options?.errorIfNull) {\n      throw new InruptError(\n        `Field [${key}] for user [${userId}] is not stored`\n      );\n    }\n    return value || undefined;\n  }\n\n  async setForUser(\n    userId: string,\n    values: Record<string, string>,\n    options?: { secure?: boolean }\n  ): Promise<void> {\n    let userData: Record<string, string>;\n    try {\n      userData = await this.getUserData(userId, options?.secure);\n    } catch {\n      // if reading the user data throws, the data is corrupted, and we want to write over it\n      userData = {};\n    }\n\n    await this.setUserData(userId, { ...userData, ...values }, options?.secure);\n  }\n\n  async deleteForUser(\n    userId: string,\n    key: string,\n    options?: { secure?: boolean }\n  ): Promise<void> {\n    const userData = await this.getUserData(userId, options?.secure);\n    delete userData[key];\n    await this.setUserData(userId, userData, options?.secure);\n  }\n\n  async deleteAllUserData(\n    userId: string,\n    options?: { secure?: boolean }\n  ): Promise<void> {\n    await (options?.secure ? this.secureStorage : this.insecureStorage).delete(\n      this.getKey(userId)\n    );\n  }\n\n  async storeResourceServerSessionInfo(\n    webId: string,\n    resourceServerIri: string,\n    expiration: number\n  ): Promise<void> {\n    const sessions: ResourceServerSession = JSON.parse(\n      (await this.insecureStorage.get(\n        this.RESOURCE_SERVER_SESSION_INFORMATION_KEY\n      )) ?? \"{}\"\n    );\n    if (sessions.webId !== webId) {\n      // Clear all previously active sessions.\n      sessions.sessions = {};\n    }\n    sessions.webId = webId;\n    sessions.sessions[resourceServerIri] = {\n      expiration,\n    };\n    await this.insecureStorage.set(\n      this.RESOURCE_SERVER_SESSION_INFORMATION_KEY,\n      JSON.stringify(sessions)\n    );\n  }\n\n  async clearResourceServerSessionInfo(\n    resourceServerIri: string\n  ): Promise<void> {\n    const sessions: ResourceServerSession = JSON.parse(\n      (await this.insecureStorage.get(\n        this.RESOURCE_SERVER_SESSION_INFORMATION_KEY\n      )) ?? \"{}\"\n    );\n    if (sessions.sessions !== undefined) {\n      delete sessions.sessions[resourceServerIri];\n\n      if (Object.keys(sessions.sessions).length === 0) {\n        // If there aren't any active sessions left, the whole object is cleared.\n        await this.insecureStorage.set(\n          this.RESOURCE_SERVER_SESSION_INFORMATION_KEY,\n          \"{}\"\n        );\n      } else {\n        await this.insecureStorage.set(\n          this.RESOURCE_SERVER_SESSION_INFORMATION_KEY,\n          JSON.stringify(sessions)\n        );\n      }\n    }\n  }\n}\n"]}},"error":null,"hash":"5b10b503a13292ac57030dc5193413c6","cacheData":{"env":{}}}