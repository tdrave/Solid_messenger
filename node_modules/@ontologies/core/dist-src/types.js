export var TermType;
(function (TermType) {
    TermType["NamedNode"] = "NamedNode";
    TermType["BlankNode"] = "BlankNode";
    TermType["Literal"] = "Literal";
})(TermType || (TermType = {}));
export var QuadPosition;
(function (QuadPosition) {
    QuadPosition[QuadPosition["subject"] = 0] = "subject";
    QuadPosition[QuadPosition["predicate"] = 1] = "predicate";
    QuadPosition[QuadPosition["object"] = 2] = "object";
    QuadPosition[QuadPosition["graph"] = 3] = "graph";
})(QuadPosition || (QuadPosition = {}));
export var Feature;
(function (Feature) {
    /** Whether the factory supports termType:Collection terms */
    Feature["collections"] = "COLLECTIONS";
    /** Whether the factory supports termType:DefaultGraph terms */
    Feature["defaultGraphType"] = "DEFAULT_GRAPH_TYPE";
    /** Whether the factory supports equals on produced instances */
    Feature["equalsMethod"] = "EQUALS_METHOD";
    /** Whether the factory can create a unique idempotent identifier for the given term. */
    Feature["id"] = "ID";
    /** Whether the factory stores its unique idempotent identifier for the given term on the instance with the `id` property (implies Feature.id). */
    Feature["idStamp"] = "ID_STAMP";
    /** Whether the factory will return the same instance for subsequent calls (implies implies Feature.id and `===`). */
    Feature["identity"] = "IDENTITY";
    /** Whether the factory supports mapping ids back to instances (should adhere to the identity setting) */
    Feature["reversibleId"] = "REVERSIBLE_ID";
    /** Whether the factory supports termType:Variable terms */
    Feature["variableType"] = "VARIABLE_TYPE";
})(Feature || (Feature = {}));
