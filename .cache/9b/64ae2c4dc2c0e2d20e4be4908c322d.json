{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js","dependencies":[{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js.map","includedInParent":true,"mtime":1652099631558},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/src/sessionInfo/SessionInfoManager.ts","includedInParent":true,"mtime":1652099631837},{"name":"/Users/tdrave/demo-solid-app/package.json","includedInParent":true,"mtime":1652099771977},{"name":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1652099631546},{"name":"@inrupt/solid-client-authn-core","loc":{"line":4,"column":42,"index":208},"parent":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js","resolved":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-core/dist/index.js"},{"name":"uuid","loc":{"line":5,"column":23,"index":267},"parent":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js","resolved":"/Users/tdrave/demo-solid-app/node_modules/uuid/dist/esm-browser/index.js"},{"name":"@inrupt/oidc-client-ext","loc":{"line":6,"column":34,"index":310},"parent":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js","resolved":"/Users/tdrave/demo-solid-app/node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionInfoManager = exports.clear = exports.getUnauthenticatedSession = void 0;\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nconst uuid_1 = require(\"uuid\");\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nfunction getUnauthenticatedSession() {\n    return {\n        isLoggedIn: false,\n        sessionId: (0, uuid_1.v4)(),\n        fetch,\n    };\n}\nexports.getUnauthenticatedSession = getUnauthenticatedSession;\nasync function clear(sessionId, storage) {\n    const storedSessionCookieReference = await storage.get(\"tmp-resource-server-session-info\");\n    const reference = JSON.parse(storedSessionCookieReference !== null && storedSessionCookieReference !== void 0 ? storedSessionCookieReference : \"{}\");\n    const { webId } = reference;\n    if (webId !== undefined) {\n        const webIdAsUrl = new URL(webId);\n        const resourceServerIri = webIdAsUrl.origin;\n        await storage.clearResourceServerSessionInfo(resourceServerIri);\n    }\n    await Promise.all([\n        storage.deleteAllUserData(sessionId, { secure: false }),\n        storage.deleteAllUserData(sessionId, { secure: true }),\n        storage.delete(\"clientKey\", { secure: false }),\n    ]);\n    await (0, oidc_client_ext_1.clearOidcPersistentStorage)();\n}\nexports.clear = clear;\nclass SessionInfoManager {\n    constructor(storageUtility) {\n        this.storageUtility = storageUtility;\n    }\n    update(_sessionId, _options) {\n        throw new Error(\"Not Implemented\");\n    }\n    async get(sessionId) {\n        var _a;\n        const isLoggedIn = await this.storageUtility.getForUser(sessionId, \"isLoggedIn\", {\n            secure: true,\n        });\n        const webId = await this.storageUtility.getForUser(sessionId, \"webId\", {\n            secure: true,\n        });\n        const clientId = await this.storageUtility.getForUser(sessionId, \"clientId\", {\n            secure: false,\n        });\n        const clientSecret = await this.storageUtility.getForUser(sessionId, \"clientSecret\", {\n            secure: false,\n        });\n        const redirectUrl = await this.storageUtility.getForUser(sessionId, \"redirectUrl\", {\n            secure: false,\n        });\n        const refreshToken = await this.storageUtility.getForUser(sessionId, \"refreshToken\", {\n            secure: true,\n        });\n        const issuer = await this.storageUtility.getForUser(sessionId, \"issuer\", {\n            secure: false,\n        });\n        const tokenType = (_a = (await this.storageUtility.getForUser(sessionId, \"tokenType\", {\n            secure: false,\n        }))) !== null && _a !== void 0 ? _a : \"DPoP\";\n        if (!(0, solid_client_authn_core_1.isSupportedTokenType)(tokenType)) {\n            throw new Error(`Tokens of type [${tokenType}] are not supported.`);\n        }\n        if (clientId === undefined &&\n            isLoggedIn === undefined &&\n            webId === undefined &&\n            refreshToken === undefined) {\n            return undefined;\n        }\n        return {\n            sessionId,\n            webId,\n            isLoggedIn: isLoggedIn === \"true\",\n            redirectUrl,\n            refreshToken,\n            issuer,\n            clientAppId: clientId,\n            clientAppSecret: clientSecret,\n            tokenType,\n        };\n    }\n    async getAll() {\n        throw new Error(\"Not implemented\");\n    }\n    async clear(sessionId) {\n        return clear(sessionId, this.storageUtility);\n    }\n    async register(_sessionId) {\n        throw new Error(\"Not implemented\");\n    }\n    async getRegisteredSessionIdAll() {\n        throw new Error(\"Not implemented\");\n    }\n    async clearAll() {\n        throw new Error(\"Not implemented\");\n    }\n}\nexports.SessionInfoManager = SessionInfoManager;\n"},"sourceMaps":{"js":{"version":3,"file":"SessionInfoManager.js","sourceRoot":"","sources":["../../src/sessionInfo/SessionInfoManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2022 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  ISessionInfo,\n  ISessionInfoManager,\n  ISessionInternalInfo,\n  ISessionInfoManagerOptions,\n  IStorageUtility,\n  isSupportedTokenType,\n} from \"@inrupt/solid-client-authn-core\";\nimport { v4 } from \"uuid\";\nimport { clearOidcPersistentStorage } from \"@inrupt/oidc-client-ext\";\n\nexport function getUnauthenticatedSession(): ISessionInfo & {\n  fetch: typeof fetch;\n} {\n  return {\n    isLoggedIn: false,\n    sessionId: v4(),\n    fetch,\n  };\n}\n\n/**\n * @param sessionId\n * @param storage\n * @hidden\n */\nexport async function clear(\n  sessionId: string,\n  storage: IStorageUtility\n): Promise<void> {\n  const storedSessionCookieReference = await storage.get(\n    \"tmp-resource-server-session-info\"\n  );\n  const reference = JSON.parse(storedSessionCookieReference ?? \"{}\");\n  const { webId } = reference;\n  if (webId !== undefined) {\n    const webIdAsUrl = new URL(webId);\n    const resourceServerIri = webIdAsUrl.origin;\n    await storage.clearResourceServerSessionInfo(resourceServerIri);\n  }\n  await Promise.all([\n    storage.deleteAllUserData(sessionId, { secure: false }),\n    storage.deleteAllUserData(sessionId, { secure: true }),\n    // FIXME: This is needed until the DPoP key is stored safely\n    storage.delete(\"clientKey\", { secure: false }),\n  ]);\n  await clearOidcPersistentStorage();\n}\n\n/**\n * @hidden\n */\nexport class SessionInfoManager implements ISessionInfoManager {\n  constructor(private storageUtility: IStorageUtility) {}\n\n  // eslint-disable-next-line class-methods-use-this\n  update(\n    _sessionId: string,\n    _options: ISessionInfoManagerOptions\n  ): Promise<void> {\n    // const localUserId: string = options.localUserId || this.uuidGenerator.v4();\n    // if (options.loggedIn) {\n    //   return {\n    //     sessionId,\n    //     loggedIn: true,\n    //     webId: options.webId as string,\n    //     neededAction: options.neededAction || { actionType: \"inaction\" },\n    //     state: options.state,\n    //     logout: async (): Promise<void> => {\n    //       // TODO: handle if webid isn't here\n    //       return this.logoutHandler.handle(localUserId);\n    //     },\n    //     fetch: (url: RequestInfo, init?: RequestInit): Promise<Response> => {\n    //       // TODO: handle if webid isn't here\n    //       return this.authenticatedFetcher.handle(\n    //         {\n    //           localUserId,\n    //           type: \"dpop\"\n    //         },\n    //         url,\n    //         init\n    //       );\n    //     }\n    //   };\n    // } else {\n    //   return {\n    //     localUserId,\n    //     loggedIn: false,\n    //     neededAction: options.neededAction || { actionType: \"inaction\" }\n    //   };\n    // }\n    throw new Error(\"Not Implemented\");\n  }\n\n  async get(\n    sessionId: string\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | undefined> {\n    const isLoggedIn = await this.storageUtility.getForUser(\n      sessionId,\n      \"isLoggedIn\",\n      {\n        secure: true,\n      }\n    );\n\n    const webId = await this.storageUtility.getForUser(sessionId, \"webId\", {\n      secure: true,\n    });\n\n    const clientId = await this.storageUtility.getForUser(\n      sessionId,\n      \"clientId\",\n      {\n        secure: false,\n      }\n    );\n\n    const clientSecret = await this.storageUtility.getForUser(\n      sessionId,\n      \"clientSecret\",\n      {\n        secure: false,\n      }\n    );\n\n    const redirectUrl = await this.storageUtility.getForUser(\n      sessionId,\n      \"redirectUrl\",\n      {\n        secure: false,\n      }\n    );\n\n    const refreshToken = await this.storageUtility.getForUser(\n      sessionId,\n      \"refreshToken\",\n      {\n        secure: true,\n      }\n    );\n\n    const issuer = await this.storageUtility.getForUser(sessionId, \"issuer\", {\n      secure: false,\n    });\n\n    const tokenType =\n      (await this.storageUtility.getForUser(sessionId, \"tokenType\", {\n        secure: false,\n      })) ?? \"DPoP\";\n\n    if (!isSupportedTokenType(tokenType)) {\n      throw new Error(`Tokens of type [${tokenType}] are not supported.`);\n    }\n\n    if (\n      clientId === undefined &&\n      isLoggedIn === undefined &&\n      webId === undefined &&\n      refreshToken === undefined\n    ) {\n      return undefined;\n    }\n\n    return {\n      sessionId,\n      webId,\n      isLoggedIn: isLoggedIn === \"true\",\n      redirectUrl,\n      refreshToken,\n      issuer,\n      clientAppId: clientId,\n      clientAppSecret: clientSecret,\n      tokenType,\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getAll(): Promise<(ISessionInfo & ISessionInternalInfo)[]> {\n    throw new Error(\"Not implemented\");\n  }\n\n  /**\n   * This function removes all session-related information from storage.\n   * @param sessionId the session identifier\n   * @param storage the storage where session info is stored\n   * @hidden\n   */\n  async clear(sessionId: string): Promise<void> {\n    return clear(sessionId, this.storageUtility);\n  }\n\n  /**\n   * Registers a new session, so that its ID can be retrieved.\n   * @param sessionId\n   */\n  async register(_sessionId: string): Promise<void> {\n    throw new Error(\"Not implemented\");\n  }\n\n  /**\n   * Returns all the registered session IDs. Differs from getAll, which also\n   * returns additional session information.\n   */\n  async getRegisteredSessionIdAll(): Promise<string[]> {\n    throw new Error(\"Not implemented\");\n  }\n\n  /**\n   * Deletes all information about all sessions, including their registrations.\n   */\n  async clearAll(): Promise<void> {\n    throw new Error(\"Not implemented\");\n  }\n}\n"]}},"error":null,"hash":"93618f31df7f23db8790967252cfbe41","cacheData":{"env":{}}}