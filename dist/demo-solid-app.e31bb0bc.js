// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/http-link-header/lib/link.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

var COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i;
var WS_TRIM_PATTERN = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
var WS_CHAR_PATTERN = /\s|\uFEFF|\xA0/;
var WS_FOLD_PATTERN = /\r?\n[\x20\x09]+/g;
var DELIMITER_PATTERN = /[;,"]/;
var WS_DELIMITER_PATTERN = /[;,"]|\s/;
/**
 * Token character pattern
 * @type {RegExp}
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 */

var TOKEN_PATTERN = /^[!#$%&'*+\-\.^_`|~\da-zA-Z]+$/;
var STATE = {
  IDLE: 1 << 0,
  URI: 1 << 1,
  ATTR: 1 << 2
};

function trim(value) {
  return value.replace(WS_TRIM_PATTERN, '');
}

function hasWhitespace(value) {
  return WS_CHAR_PATTERN.test(value);
}

function skipWhitespace(value, offset) {
  while (hasWhitespace(value[offset])) {
    offset++;
  }

  return offset;
}

function needsQuotes(value) {
  return WS_DELIMITER_PATTERN.test(value) || !TOKEN_PATTERN.test(value);
}

class Link {
  /**
   * Link
   * @constructor
   * @param {String} [value]
   * @returns {Link}
   */
  constructor(value) {
    /** @type {Array} URI references */
    this.refs = [];

    if (value) {
      this.parse(value);
    }
  }
  /**
   * Get refs with given relation type
   * @param {String} value
   * @returns {Array<Object>}
   */


  rel(value) {
    var links = [];
    var type = value.toLowerCase();

    for (var i = 0; i < this.refs.length; i++) {
      if (this.refs[i].rel.toLowerCase() === type) {
        links.push(this.refs[i]);
      }
    }

    return links;
  }
  /**
   * Get refs where given attribute has a given value
   * @param {String} attr
   * @param {String} value
   * @returns {Array<Object>}
   */


  get(attr, value) {
    attr = attr.toLowerCase();
    var links = [];

    for (var i = 0; i < this.refs.length; i++) {
      if (this.refs[i][attr] === value) {
        links.push(this.refs[i]);
      }
    }

    return links;
  }

  set(link) {
    this.refs.push(link);
    return this;
  }

  has(attr, value) {
    attr = attr.toLowerCase();

    for (var i = 0; i < this.refs.length; i++) {
      if (this.refs[i][attr] === value) {
        return true;
      }
    }

    return false;
  }

  parse(value, offset) {
    offset = offset || 0;
    value = offset ? value.slice(offset) : value; // Trim & unfold folded lines

    value = trim(value).replace(WS_FOLD_PATTERN, '');
    var state = STATE.IDLE;
    var length = value.length;
    var offset = 0;
    var ref = null;

    while (offset < length) {
      if (state === STATE.IDLE) {
        if (hasWhitespace(value[offset])) {
          offset++;
          continue;
        } else if (value[offset] === '<') {
          if (ref != null) {
            ref.rel != null ? this.refs.push(...Link.expandRelations(ref)) : this.refs.push(ref);
          }

          var end = value.indexOf('>', offset);
          if (end === -1) throw new Error('Expected end of URI delimiter at offset ' + offset);
          ref = {
            uri: value.slice(offset + 1, end)
          }; // this.refs.push( ref )

          offset = end;
          state = STATE.URI;
        } else {
          throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
        }

        offset++;
      } else if (state === STATE.URI) {
        if (hasWhitespace(value[offset])) {
          offset++;
          continue;
        } else if (value[offset] === ';') {
          state = STATE.ATTR;
          offset++;
        } else if (value[offset] === ',') {
          state = STATE.IDLE;
          offset++;
        } else {
          throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
        }
      } else if (state === STATE.ATTR) {
        if (value[offset] === ';' || hasWhitespace(value[offset])) {
          offset++;
          continue;
        }

        var end = value.indexOf('=', offset);
        if (end === -1) throw new Error('Expected attribute delimiter at offset ' + offset);
        var attr = trim(value.slice(offset, end)).toLowerCase();
        var attrValue = '';
        offset = end + 1;
        offset = skipWhitespace(value, offset);

        if (value[offset] === '"') {
          offset++;

          while (offset < length) {
            if (value[offset] === '"') {
              offset++;
              break;
            }

            if (value[offset] === '\\') {
              offset++;
            }

            attrValue += value[offset];
            offset++;
          }
        } else {
          var end = offset + 1;

          while (!DELIMITER_PATTERN.test(value[end]) && end < length) {
            end++;
          }

          attrValue = value.slice(offset, end);
          offset = end;
        }

        if (ref[attr] && Link.isSingleOccurenceAttr(attr)) {// Ignore multiples of attributes which may only appear once
        } else if (attr[attr.length - 1] === '*') {
          ref[attr] = Link.parseExtendedValue(attrValue);
        } else {
          attrValue = attr === 'type' ? attrValue.toLowerCase() : attrValue;

          if (ref[attr] != null) {
            if (Array.isArray(ref[attr])) {
              ref[attr].push(attrValue);
            } else {
              ref[attr] = [ref[attr], attrValue];
            }
          } else {
            ref[attr] = attrValue;
          }
        }

        switch (value[offset]) {
          case ',':
            state = STATE.IDLE;
            break;

          case ';':
            state = STATE.ATTR;
            break;
        }

        offset++;
      } else {
        throw new Error('Unknown parser state "' + state + '"');
      }
    }

    if (ref != null) {
      ref.rel != null ? this.refs.push(...Link.expandRelations(ref)) : this.refs.push(ref);
    }

    ref = null;
    return this;
  }

  toString() {
    var refs = [];
    var link = '';
    var ref = null;

    for (var i = 0; i < this.refs.length; i++) {
      ref = this.refs[i];
      link = Object.keys(this.refs[i]).reduce(function (link, attr) {
        if (attr === 'uri') return link;
        return link + '; ' + Link.formatAttribute(attr, ref[attr]);
      }, '<' + ref.uri + '>');
      refs.push(link);
    }

    return refs.join(', ');
  }

}
/**
 * Determines whether an encoding can be
 * natively handled with a `Buffer`
 * @param {String} value
 * @returns {Boolean}
 */


Link.isCompatibleEncoding = function (value) {
  return COMPATIBLE_ENCODING_PATTERN.test(value);
};

Link.parse = function (value, offset) {
  return new Link().parse(value, offset);
};

Link.isSingleOccurenceAttr = function (attr) {
  return attr === 'rel' || attr === 'type' || attr === 'media' || attr === 'title' || attr === 'title*';
};

Link.isTokenAttr = function (attr) {
  return attr === 'rel' || attr === 'type' || attr === 'anchor';
};

Link.escapeQuotes = function (value) {
  return value.replace(/"/g, '\\"');
};

Link.expandRelations = function (ref) {
  var rels = ref.rel.split(' ');
  return rels.map(function (rel) {
    var value = Object.assign({}, ref);
    value.rel = rel;
    return value;
  });
};
/**
 * Parses an extended value and attempts to decode it
 * @internal
 * @param {String} value
 * @return {Object}
 */


Link.parseExtendedValue = function (value) {
  var parts = /([^']+)?(?:'([^']+)')?(.+)/.exec(value);
  return {
    language: parts[2].toLowerCase(),
    encoding: Link.isCompatibleEncoding(parts[1]) ? null : parts[1].toLowerCase(),
    value: Link.isCompatibleEncoding(parts[1]) ? decodeURIComponent(parts[3]) : parts[3]
  };
};
/**
 * Format a given extended attribute and it's value
 * @param {String} attr
 * @param {Object} data
 * @return {String}
 */


Link.formatExtendedAttribute = function (attr, data) {
  var encoding = (data.encoding || 'utf-8').toUpperCase();
  var language = data.language || 'en';
  var encodedValue = '';

  if (Buffer.isBuffer(data.value) && Link.isCompatibleEncoding(encoding)) {
    encodedValue = data.value.toString(encoding);
  } else if (Buffer.isBuffer(data.value)) {
    encodedValue = data.value.toString('hex').replace(/[0-9a-f]{2}/gi, '%$1');
  } else {
    encodedValue = encodeURIComponent(data.value);
  }

  return attr + '=' + encoding + '\'' + language + '\'' + encodedValue;
};
/**
 * Format a given attribute and it's value
 * @param {String} attr
 * @param {String|Object} value
 * @return {String}
 */


Link.formatAttribute = function (attr, value) {
  if (Array.isArray(value)) {
    return value.map(item => {
      return Link.formatAttribute(attr, item);
    }).join('; ');
  }

  if (attr[attr.length - 1] === '*' || typeof value !== 'string') {
    return Link.formatExtendedAttribute(attr, value);
  }

  if (Link.isTokenAttr(attr)) {
    value = needsQuotes(value) ? '"' + Link.escapeQuotes(value) + '"' : Link.escapeQuotes(value);
  } else if (needsQuotes(value)) {
    value = encodeURIComponent(value); // We don't need to escape <SP> <,> <;> within quotes

    value = value.replace(/%20/g, ' ').replace(/%2C/g, ',').replace(/%3B/g, ';');
    value = '"' + value + '"';
  }

  return attr + '=' + value;
};

module.exports = Link;
},{"buffer":"node_modules/buffer/index.js"}],"node_modules/@rdfjs/data-model/lib/BlankNode.js":[function(require,module,exports) {
class BlankNode {
  constructor (id) {
    this.value = id || ('b' + (++BlankNode.nextId))
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value
  }
}

BlankNode.prototype.termType = 'BlankNode'

BlankNode.nextId = 0

module.exports = BlankNode

},{}],"node_modules/@rdfjs/data-model/lib/DefaultGraph.js":[function(require,module,exports) {
class DefaultGraph {
  equals (other) {
    return !!other && other.termType === this.termType
  }
}

DefaultGraph.prototype.termType = 'DefaultGraph'
DefaultGraph.prototype.value = ''

module.exports = DefaultGraph

},{}],"node_modules/@rdfjs/data-model/lib/fromTerm.js":[function(require,module,exports) {
function fromTerm (original) {
  if (!original) {
    return null
  }

  if (original.termType === 'BlankNode') {
    return this.blankNode(original.value)
  }

  if (original.termType === 'DefaultGraph') {
    return this.defaultGraph()
  }

  if (original.termType === 'Literal') {
    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))
  }

  if (original.termType === 'NamedNode') {
    return this.namedNode(original.value)
  }

  if (original.termType === 'Quad') {
    const subject = this.fromTerm(original.subject)
    const predicate = this.fromTerm(original.predicate)
    const object = this.fromTerm(original.object)
    const graph = this.fromTerm(original.graph)

    return this.quad(subject, predicate, object, graph)
  }

  if (original.termType === 'Variable') {
    return this.variable(original.value)
  }

  throw new Error(`unknown termType ${original.termType}`)
}

module.exports = fromTerm

},{}],"node_modules/@rdfjs/data-model/lib/NamedNode.js":[function(require,module,exports) {
class NamedNode {
  constructor (iri) {
    this.value = iri
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value
  }
}

NamedNode.prototype.termType = 'NamedNode'

module.exports = NamedNode

},{}],"node_modules/@rdfjs/data-model/lib/Literal.js":[function(require,module,exports) {
const NamedNode = require('./NamedNode.js')

class Literal {
  constructor (value, language, datatype) {
    this.value = value
    this.datatype = Literal.stringDatatype
    this.language = ''

    if (language) {
      this.language = language
      this.datatype = Literal.langStringDatatype
    } else if (datatype) {
      this.datatype = datatype
    }
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value &&
      other.language === this.language && other.datatype.equals(this.datatype)
  }
}

Literal.prototype.termType = 'Literal'

Literal.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')
Literal.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')

module.exports = Literal

},{"./NamedNode.js":"node_modules/@rdfjs/data-model/lib/NamedNode.js"}],"node_modules/@rdfjs/data-model/lib/Quad.js":[function(require,module,exports) {
const DefaultGraph = require('./DefaultGraph.js')

class Quad {
  constructor (subject, predicate, object, graph) {
    this.subject = subject
    this.predicate = predicate
    this.object = object

    if (graph) {
      this.graph = graph
    } else {
      this.graph = new DefaultGraph()
    }
  }

  equals (other) {
    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
    return !!other && (other.termType === 'Quad' || !other.termType) &&
      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&
      other.object.equals(this.object) && other.graph.equals(this.graph)
  }
}

Quad.prototype.termType = 'Quad'
Quad.prototype.value = ''

module.exports = Quad

},{"./DefaultGraph.js":"node_modules/@rdfjs/data-model/lib/DefaultGraph.js"}],"node_modules/@rdfjs/data-model/lib/Variable.js":[function(require,module,exports) {
class Variable {
  constructor (name) {
    this.value = name
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value
  }
}

Variable.prototype.termType = 'Variable'

module.exports = Variable

},{}],"node_modules/@rdfjs/data-model/lib/DataFactory.js":[function(require,module,exports) {
const BlankNode = require('./BlankNode.js')
const DefaultGraph = require('./DefaultGraph.js')
const fromTermRaw = require('./fromTerm.js')
const Literal = require('./Literal.js')
const NamedNode = require('./NamedNode.js')
const Quad = require('./Quad.js')
const Variable = require('./Variable.js')

function namedNode (value) {
  return new NamedNode(value)
}

function blankNode (value) {
  return new BlankNode(value)
}

function literal (value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new Literal(value, languageOrDatatype)
    }

    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))
  }

  return new Literal(value, null, languageOrDatatype)
}

function variable (value) {
  return new Variable(value)
}

function defaultGraph () {
  return DataFactory.defaultGraphInstance
}

function triple (subject, predicate, object) {
  return DataFactory.quad(subject, predicate, object)
}

function quad (subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)
}

function fromTerm (original) {
  return fromTermRaw.call(DataFactory, original)
}

function fromQuad (original) {
  return fromTermRaw.call(DataFactory, original)
}

const DataFactory = {
  namedNode,
  blankNode,
  literal,
  variable,
  defaultGraph,
  triple,
  quad,
  fromTerm,
  fromQuad,
  defaultGraphInstance: new DefaultGraph()
}

module.exports = DataFactory

},{"./BlankNode.js":"node_modules/@rdfjs/data-model/lib/BlankNode.js","./DefaultGraph.js":"node_modules/@rdfjs/data-model/lib/DefaultGraph.js","./fromTerm.js":"node_modules/@rdfjs/data-model/lib/fromTerm.js","./Literal.js":"node_modules/@rdfjs/data-model/lib/Literal.js","./NamedNode.js":"node_modules/@rdfjs/data-model/lib/NamedNode.js","./Quad.js":"node_modules/@rdfjs/data-model/lib/Quad.js","./Variable.js":"node_modules/@rdfjs/data-model/lib/Variable.js"}],"node_modules/@rdfjs/data-model/index.js":[function(require,module,exports) {
const DataFactory = require('./lib/DataFactory.js')

module.exports = DataFactory

},{"./lib/DataFactory.js":"node_modules/@rdfjs/data-model/lib/DataFactory.js"}],"node_modules/@rdfjs/dataset/DatasetCore.js":[function(require,module,exports) {
function isString (s) {
  return typeof s === 'string' || s instanceof String
}

const xsdString = 'http://www.w3.org/2001/XMLSchema#string'

function termToId (term) {
  if (typeof term === 'string') {
    return term
  }

  if (!term) {
    return ''
  }

  if (typeof term.id !== 'undefined' && term.termType !== 'Quad') {
    return term.id
  }

  let subject, predicate, object, graph

  // Term instantiated with another library
  switch (term.termType) {
    case 'NamedNode':
      return term.value

    case 'BlankNode':
      return `_:${term.value}`

    case 'Variable':
      return `?${term.value}`

    case 'DefaultGraph':
      return ''

    case 'Literal':
      if (term.language) {
        return `"${term.value}"@${term.language}`
      }

      return `"${term.value}"${term.datatype && term.datatype.value !== xsdString ? `^^${term.datatype.value}` : ''}`

    case 'Quad':
      // To identify RDF* quad components, we escape quotes by doubling them.
      // This avoids the overhead of backslash parsing of Turtle-like syntaxes.
      subject = escapeQuotes(termToId(term.subject))
      predicate = escapeQuotes(termToId(term.predicate))
      object = escapeQuotes(termToId(term.object))
      graph = term.graph.termType === 'DefaultGraph' ? '' : ` ${termToId(term.graph)}`

      return `<<${subject} ${predicate} ${object}${graph}>>`

    default:
      throw new Error(`Unexpected termType: ${term.termType}`)
  }
}

const escapedLiteral = /^"(.*".*)(?="[^"]*$)/

function escapeQuotes (id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/"/g, '""')}`)
}

class DatasetCore {
  constructor (quads) {
    // The number of quads is initially zero
    this._size = 0
    // `_graphs` contains subject, predicate, and object indexes per graph
    this._graphs = Object.create(null)
    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
    // saving memory by using only numbers as keys in `_graphs`
    this._id = 0
    this._ids = Object.create(null)
    this._ids['><'] = 0 // dummy entry, so the first actual key is non-zero
    this._entities = Object.create(null) // inverse of `_ids`

    this._quads = new Map()

    // Add quads if passed
    if (quads) {
      for (const quad of quads) {
        this.add(quad)
      }
    }
  }

  get size () {
    // Return the quad count if if was cached
    let size = this._size

    if (size !== null) {
      return size
    }

    // Calculate the number of quads by counting to the deepest level
    size = 0
    const graphs = this._graphs
    let subjects, subject

    for (const graphKey in graphs) {
      for (const subjectKey in (subjects = graphs[graphKey].subjects)) {
        for (const predicateKey in (subject = subjects[subjectKey])) {
          size += Object.keys(subject[predicateKey]).length
        }
      }
    }

    this._size = size

    return this._size
  }

  add (quad) {
    // Convert terms to internal string representation
    let subject = termToId(quad.subject)
    let predicate = termToId(quad.predicate)
    let object = termToId(quad.object)
    const graph = termToId(quad.graph)

    // Find the graph that will contain the triple
    let graphItem = this._graphs[graph]
    // Create the graph if it doesn't exist yet
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} }
      // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway
      Object.freeze(graphItem)
    }

    // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.
    const ids = this._ids
    const entities = this._entities
    subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id)
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id)
    object = ids[object] || (ids[entities[++this._id] = object] = this._id)

    this._addToIndex(graphItem.subjects, subject, predicate, object)
    this._addToIndex(graphItem.predicates, predicate, object, subject)
    this._addToIndex(graphItem.objects, object, subject, predicate)

    this._setQuad(subject, predicate, object, graph, quad)

    // The cached quad count is now invalid
    this._size = null

    return this
  }

  delete (quad) {
    // Convert terms to internal string representation
    let subject = termToId(quad.subject)
    let predicate = termToId(quad.predicate)
    let object = termToId(quad.object)
    const graph = termToId(quad.graph)

    // Find internal identifiers for all components
    // and verify the quad exists.
    const ids = this._ids
    const graphs = this._graphs
    let graphItem, subjects, predicates

    if (!(subject = ids[subject]) || !(predicate = ids[predicate]) ||
      !(object = ids[object]) || !(graphItem = graphs[graph]) ||
      !(subjects = graphItem.subjects[subject]) ||
      !(predicates = subjects[predicate]) ||
      !(object in predicates)
    ) {
      return this
    }

    // Remove it from all indexes
    this._removeFromIndex(graphItem.subjects, subject, predicate, object)
    this._removeFromIndex(graphItem.predicates, predicate, object, subject)
    this._removeFromIndex(graphItem.objects, object, subject, predicate)

    if (this._size !== null) {
      this._size--
    }

    this._deleteQuad(subject, predicate, object, graph)

    // Remove the graph if it is empty
    for (subject in graphItem.subjects) { // eslint-disable-line no-unreachable-loop
      return this
    }

    delete graphs[graph]

    return this
  }

  has (quad) {
    // Convert terms to internal string representation
    const subject = termToId(quad.subject)
    const predicate = termToId(quad.predicate)
    const object = termToId(quad.object)
    const graph = termToId(quad.graph)

    const graphItem = this._graphs[graph]

    if (!graphItem) {
      return false
    }

    const ids = this._ids
    let subjectId, predicateId, objectId

    // Translate IRIs to internal index keys.
    if (
      (isString(subject) && !(subjectId = ids[subject])) ||
      (isString(predicate) && !(predicateId = ids[predicate])) ||
      (isString(object) && !(objectId = ids[object]))
    ) {
      return false
    }

    return this._countInIndex(graphItem.objects, objectId, subjectId, predicateId) === 1
  }

  match (subject, predicate, object, graph) {
    return this._createDataset(this._match(subject, predicate, object, graph))
  }

  [Symbol.iterator] () {
    return this._match()[Symbol.iterator]()
  }

  // ## Private methods

  // ### `_addToIndex` adds a quad to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.
  _addToIndex (index0, key0, key1, key2) {
    // Create layers as necessary
    const index1 = index0[key0] || (index0[key0] = {})
    const index2 = index1[key1] || (index1[key1] = {})
    // Setting the key to _any_ value signals the presence of the quad
    const existed = key2 in index2

    if (!existed) {
      index2[key2] = null
    }

    return !existed
  }

  // ### `_removeFromIndex` removes a quad from a three-layered index
  _removeFromIndex (index0, key0, key1, key2) {
    // Remove the quad from the index
    const index1 = index0[key0]
    const index2 = index1[key1]
    delete index2[key2]

    // Remove intermediary index layers if they are empty
    for (const key in index2) { // eslint-disable-line no-unreachable-loop
      return
    }

    delete index1[key1]

    for (const key in index1) { // eslint-disable-line no-unreachable-loop
      return
    }

    delete index0[key0]
  }

  // ### `_findInIndex` finds a set of quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting quad
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created quads.
  // If `callback` is given, each result is passed through it
  // and iteration halts when it returns truthy for any quad.
  // If instead `array` is given, each result is added to the array.
  _findInIndex (index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
    let tmp, index1, index2

    // If a key is specified, use only that part of index 0.
    if (key0) {
      (tmp = index0, index0 = {})[key0] = tmp[key0]
    }

    for (const value0 in index0) {
      index1 = index0[value0]

      if (index1) {
        // If a key is specified, use only that part of index 1.
        if (key1) {
          (tmp = index1, index1 = {})[key1] = tmp[key1]
        }

        for (const value1 in index1) {
          index2 = index1[value1]

          if (index2) {
            // If a key is specified, use only that part of index 2, if it exists.
            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2)
            // Create quads for all items found in index 2.
            for (let l = 0; l < values.length; l++) {
              const parts = {
                [name0]: value0,
                [name1]: value1,
                [name2]: values[l]
              }

              const quad = this._getQuad(parts.subject, parts.predicate, parts.object, graph)

              if (array) {
                array.push(quad)
              } else if (callback(quad)) {
                return true
              }
            }
          }
        }
      }
    }

    return array
  }

  // ### `_countInIndex` counts matching quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  _countInIndex (index0, key0, key1, key2) {
    let count = 0
    let tmp, index1, index2

    // If a key is specified, count only that part of index 0
    if (key0) {
      (tmp = index0, index0 = {})[key0] = tmp[key0]
    }

    for (const value0 in index0) {
      index1 = index0[value0]

      if (index1) {
        // If a key is specified, count only that part of index 1
        if (key1) {
          (tmp = index1, index1 = {})[key1] = tmp[key1]
        }

        for (const value1 in index1) {
          index2 = index1[value1]

          if (index2) {
            if (key2) {
              // If a key is specified, count the quad if it exists
              (key2 in index2) && count++
            } else {
              // Otherwise, count all quads
              count += Object.keys(index2).length
            }
          }
        }
      }
    }

    return count
  }

  // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.
  _getGraphs (graph) {
    if (!isString(graph)) {
      return this._graphs
    }

    return {
      [graph]: this._graphs[graph]
    }
  }

  _match (subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject)
    predicate = predicate && termToId(predicate)
    object = object && termToId(object)
    graph = graph && termToId(graph)

    const quads = []
    const graphs = this._getGraphs(graph)
    const ids = this._ids
    let content, subjectId, predicateId, objectId

    // Translate IRIs to internal index keys.
    if (
      (isString(subject) && !(subjectId = ids[subject])) ||
      (isString(predicate) && !(predicateId = ids[predicate])) ||
      (isString(object) && !(objectId = ids[object]))
    ) {
      return quads
    }

    for (const graphId in graphs) {
      content = graphs[graphId]

      // Only if the specified graph contains triples, there can be results
      if (content) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId) {
            // If subject and object are given, the object index will be the fastest
            this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId, null, quads)
          } else {
            // If only subject and possibly predicate are given, the subject index will be the fastest
            this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId, null, quads)
          }
        } else if (predicateId) {
          // if only predicate and possibly object are given, the predicate index will be the fastest
          this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId, null, quads)
        } else if (objectId) {
          // If only object is given, the object index will be the fastest
          this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId, null, quads)
        } else {
          // If nothing is given, iterate subjects and predicates first
          this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId, null, quads)
        }
      }
    }

    return quads
  }

  _getQuad (subjectId, predicateId, objectId, graphId) {
    return this._quads.get(this._toId(subjectId, predicateId, objectId, graphId))
  }

  _setQuad (subjectId, predicateId, objectId, graphId, quad) {
    this._quads.set(this._toId(subjectId, predicateId, objectId, graphId), quad)
  }

  _deleteQuad (subjectId, predicateId, objectId, graphId) {
    this._quads.delete(this._toId(subjectId, predicateId, objectId, graphId))
  }

  _createDataset (quads) {
    return new this.constructor(quads)
  }

  _toId (subjectId, predicateId, objectId, graphId) {
    return `${subjectId}:${predicateId}:${objectId}:${graphId}`
  }
}

module.exports = DatasetCore

},{}],"node_modules/@rdfjs/dataset/index.js":[function(require,module,exports) {
const rdf = require('@rdfjs/data-model')
const DatasetCore = require('./DatasetCore')

function dataset (quads) {
  return new DatasetCore(quads)
}

module.exports = Object.assign({ dataset }, rdf)

},{"@rdfjs/data-model":"node_modules/@rdfjs/data-model/index.js","./DatasetCore":"node_modules/@rdfjs/dataset/DatasetCore.js"}],"node_modules/rdf-canonize/lib/IdentifierIssuer.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

module.exports = class IdentifierIssuer {
  /**
   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
   * identifiers, keeping track of any previously issued identifiers.
   *
   * @param prefix the prefix to use ('<prefix><counter>').
   * @param existing an existing Map to use.
   * @param counter the counter to use.
   */
  constructor(prefix) {
    let existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
    let counter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    this.prefix = prefix;
    this._existing = existing;
    this.counter = counter;
  }
  /**
   * Copies this IdentifierIssuer.
   *
   * @return a copy of this IdentifierIssuer.
   */


  clone() {
    const {
      prefix,
      _existing,
      counter
    } = this;
    return new IdentifierIssuer(prefix, new Map(_existing), counter);
  }
  /**
   * Gets the new identifier for the given old identifier, where if no old
   * identifier is given a new identifier will be generated.
   *
   * @param [old] the old identifier to get the new identifier for.
   *
   * @return the new identifier.
   */


  getId(old) {
    // return existing old identifier
    const existing = old && this._existing.get(old);

    if (existing) {
      return existing;
    } // get next identifier


    const identifier = this.prefix + this.counter;
    this.counter++; // save mapping

    if (old) {
      this._existing.set(old, identifier);
    }

    return identifier;
  }
  /**
   * Returns true if the given old identifer has already been assigned a new
   * identifier.
   *
   * @param old the old identifier to check.
   *
   * @return true if the old identifier has been assigned a new identifier,
   *   false if not.
   */


  hasId(old) {
    return this._existing.has(old);
  }
  /**
   * Returns all of the IDs that have been issued new IDs in the order in
   * which they were issued new IDs.
   *
   * @return the list of old IDs that has been issued new IDs in order.
   */


  getOldIds() {
    return [...this._existing.keys()];
  }

};
},{}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/setimmediate/setImmediate.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

},{"process":"node_modules/process/browser.js"}],"node_modules/rdf-canonize/lib/MessageDigest-browser.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

require('setimmediate');

const crypto = self.crypto || self.msCrypto; // TODO: synchronous version no longer supported in browser

module.exports = class MessageDigest {
  /**
   * Creates a new MessageDigest.
   *
   * @param algorithm the algorithm to use.
   */
  constructor(algorithm) {
    // check if crypto.subtle is available
    // check is here rather than top-level to only fail if class is used
    if (!(crypto && crypto.subtle)) {
      throw new Error('crypto.subtle not found.');
    }

    if (algorithm === 'sha256') {
      this.algorithm = {
        name: 'SHA-256'
      };
    } else if (algorithm === 'sha1') {
      this.algorithm = {
        name: 'SHA-1'
      };
    } else {
      throw new Error(`Unsupport algorithm "${algorithm}".`);
    }

    this._content = '';
  }

  update(msg) {
    this._content += msg;
  }

  async digest() {
    const data = new TextEncoder().encode(this._content);
    const buffer = new Uint8Array(await crypto.subtle.digest(this.algorithm, data)); // return digest in hex

    let hex = '';

    for (let i = 0; i < buffer.length; ++i) {
      hex += buffer[i].toString(16).padStart(2, '0');
    }

    return hex;
  }

};
},{"setimmediate":"node_modules/setimmediate/setImmediate.js"}],"node_modules/rdf-canonize/lib/Permuter.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict'; // TODO: convert to ES6 iterable?

module.exports = class Permuter {
  /**
   * A Permuter iterates over all possible permutations of the given array
   * of elements.
   *
   * @param list the array of elements to iterate over.
   */
  constructor(list) {
    // original array
    this.current = list.sort(); // indicates whether there are more permutations

    this.done = false; // directional info for permutation algorithm

    this.dir = new Map();

    for (let i = 0; i < list.length; ++i) {
      this.dir.set(list[i], true);
    }
  }
  /**
   * Returns true if there is another permutation.
   *
   * @return true if there is another permutation, false if not.
   */


  hasNext() {
    return !this.done;
  }
  /**
   * Gets the next permutation. Call hasNext() to ensure there is another one
   * first.
   *
   * @return the next permutation.
   */


  next() {
    // copy current permutation to return it
    const {
      current,
      dir
    } = this;
    const rval = current.slice();
    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
     permutation algorithm. */
    // get largest mobile element k
    // (mobile: element is greater than the one it is looking at)

    let k = null;
    let pos = 0;
    const length = current.length;

    for (let i = 0; i < length; ++i) {
      const element = current[i];
      const left = dir.get(element);

      if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {
        k = element;
        pos = i;
      }
    } // no more permutations


    if (k === null) {
      this.done = true;
    } else {
      // swap k and the element it is looking at
      const swap = dir.get(k) ? pos - 1 : pos + 1;
      current[pos] = current[swap];
      current[swap] = k; // reverse the direction of all elements larger than k

      for (const element of current) {
        if (element > k) {
          dir.set(element, !dir.get(element));
        }
      }
    }

    return rval;
  }

};
},{}],"node_modules/rdf-canonize/lib/NQuads.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict'; // eslint-disable-next-line no-unused-vars

const TERMS = ['subject', 'predicate', 'object', 'graph'];
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const RDF_LANGSTRING = RDF + 'langString';
const XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';
const TYPE_NAMED_NODE = 'NamedNode';
const TYPE_BLANK_NODE = 'BlankNode';
const TYPE_LITERAL = 'Literal';
const TYPE_DEFAULT_GRAPH = 'DefaultGraph'; // build regexes

const REGEX = {};

(() => {
  const iri = '(?:<([^:]+:[^>]*)>)'; // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL

  const PN_CHARS_BASE = 'A-Z' + 'a-z' + '\u00C0-\u00D6' + '\u00D8-\u00F6' + '\u00F8-\u02FF' + '\u0370-\u037D' + '\u037F-\u1FFF' + '\u200C-\u200D' + '\u2070-\u218F' + '\u2C00-\u2FEF' + '\u3001-\uD7FF' + '\uF900-\uFDCF' + '\uFDF0-\uFFFD'; // TODO:
  //'\u10000-\uEFFFF';

  const PN_CHARS_U = PN_CHARS_BASE + '_';
  const PN_CHARS = PN_CHARS_U + '0-9' + '-' + '\u00B7' + '\u0300-\u036F' + '\u203F-\u2040';
  const BLANK_NODE_LABEL = '(_:' + '(?:[' + PN_CHARS_U + '0-9])' + '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' + ')';
  const bnode = BLANK_NODE_LABEL;
  const plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
  const datatype = '(?:\\^\\^' + iri + ')';
  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';
  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
  const ws = '[ \\t]+';
  const wso = '[ \\t]*'; // define quad part regexes

  const subject = '(?:' + iri + '|' + bnode + ')' + ws;
  const property = iri + ws;
  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
  const graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))'; // end of line and empty regexes

  REGEX.eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
  REGEX.empty = new RegExp('^' + wso + '$'); // full quad regex

  REGEX.quad = new RegExp('^' + wso + subject + property + object + graphName + wso + '$');
})();

module.exports = class NQuads {
  /**
   * Parses RDF in the form of N-Quads.
   *
   * @param input the N-Quads input to parse.
   *
   * @return an RDF dataset (an array of quads per http://rdf.js.org/).
   */
  static parse(input) {
    // build RDF dataset
    const dataset = [];
    const graphs = {}; // split N-Quad input into lines

    const lines = input.split(REGEX.eoln);
    let lineNumber = 0;

    for (const line of lines) {
      lineNumber++; // skip empty lines

      if (REGEX.empty.test(line)) {
        continue;
      } // parse quad


      const match = line.match(REGEX.quad);

      if (match === null) {
        throw new Error('N-Quads parse error on line ' + lineNumber + '.');
      } // create RDF quad


      const quad = {
        subject: null,
        predicate: null,
        object: null,
        graph: null
      }; // get subject

      if (match[1] !== undefined) {
        quad.subject = {
          termType: TYPE_NAMED_NODE,
          value: match[1]
        };
      } else {
        quad.subject = {
          termType: TYPE_BLANK_NODE,
          value: match[2]
        };
      } // get predicate


      quad.predicate = {
        termType: TYPE_NAMED_NODE,
        value: match[3]
      }; // get object

      if (match[4] !== undefined) {
        quad.object = {
          termType: TYPE_NAMED_NODE,
          value: match[4]
        };
      } else if (match[5] !== undefined) {
        quad.object = {
          termType: TYPE_BLANK_NODE,
          value: match[5]
        };
      } else {
        quad.object = {
          termType: TYPE_LITERAL,
          value: undefined,
          datatype: {
            termType: TYPE_NAMED_NODE
          }
        };

        if (match[7] !== undefined) {
          quad.object.datatype.value = match[7];
        } else if (match[8] !== undefined) {
          quad.object.datatype.value = RDF_LANGSTRING;
          quad.object.language = match[8];
        } else {
          quad.object.datatype.value = XSD_STRING;
        }

        quad.object.value = _unescape(match[6]);
      } // get graph


      if (match[9] !== undefined) {
        quad.graph = {
          termType: TYPE_NAMED_NODE,
          value: match[9]
        };
      } else if (match[10] !== undefined) {
        quad.graph = {
          termType: TYPE_BLANK_NODE,
          value: match[10]
        };
      } else {
        quad.graph = {
          termType: TYPE_DEFAULT_GRAPH,
          value: ''
        };
      } // only add quad if it is unique in its graph


      if (!(quad.graph.value in graphs)) {
        graphs[quad.graph.value] = [quad];
        dataset.push(quad);
      } else {
        let unique = true;
        const quads = graphs[quad.graph.value];

        for (const q of quads) {
          if (_compareTriples(q, quad)) {
            unique = false;
            break;
          }
        }

        if (unique) {
          quads.push(quad);
          dataset.push(quad);
        }
      }
    }

    return dataset;
  }
  /**
   * Converts an RDF dataset to N-Quads.
   *
   * @param dataset (array of quads) the RDF dataset to convert.
   *
   * @return the N-Quads string.
   */


  static serialize(dataset) {
    if (!Array.isArray(dataset)) {
      dataset = NQuads.legacyDatasetToQuads(dataset);
    }

    const quads = [];

    for (const quad of dataset) {
      quads.push(NQuads.serializeQuad(quad));
    }

    return quads.sort().join('');
  }
  /**
   * Converts an RDF quad to an N-Quad string (a single quad).
   *
   * @param quad the RDF quad convert.
   *
   * @return the N-Quad string.
   */


  static serializeQuad(quad) {
    const s = quad.subject;
    const p = quad.predicate;
    const o = quad.object;
    const g = quad.graph;
    let nquad = ''; // subject can only be NamedNode or BlankNode

    if (s.termType === TYPE_NAMED_NODE) {
      nquad += `<${s.value}>`;
    } else {
      nquad += `${s.value}`;
    } // predicate can only be NamedNode


    nquad += ` <${p.value}> `; // object is NamedNode, BlankNode, or Literal

    if (o.termType === TYPE_NAMED_NODE) {
      nquad += `<${o.value}>`;
    } else if (o.termType === TYPE_BLANK_NODE) {
      nquad += o.value;
    } else {
      nquad += `"${_escape(o.value)}"`;

      if (o.datatype.value === RDF_LANGSTRING) {
        if (o.language) {
          nquad += `@${o.language}`;
        }
      } else if (o.datatype.value !== XSD_STRING) {
        nquad += `^^<${o.datatype.value}>`;
      }
    } // graph can only be NamedNode or BlankNode (or DefaultGraph, but that
    // does not add to `nquad`)


    if (g.termType === TYPE_NAMED_NODE) {
      nquad += ` <${g.value}>`;
    } else if (g.termType === TYPE_BLANK_NODE) {
      nquad += ` ${g.value}`;
    }

    nquad += ' .\n';
    return nquad;
  }
  /**
   * Converts a legacy-formatted dataset to an array of quads dataset per
   * http://rdf.js.org/.
   *
   * @param dataset the legacy dataset to convert.
   *
   * @return the array of quads dataset.
   */


  static legacyDatasetToQuads(dataset) {
    const quads = [];
    const termTypeMap = {
      'blank node': TYPE_BLANK_NODE,
      IRI: TYPE_NAMED_NODE,
      literal: TYPE_LITERAL
    };

    for (const graphName in dataset) {
      const triples = dataset[graphName];
      triples.forEach(triple => {
        const quad = {};

        for (const componentName in triple) {
          const oldComponent = triple[componentName];
          const newComponent = {
            termType: termTypeMap[oldComponent.type],
            value: oldComponent.value
          };

          if (newComponent.termType === TYPE_LITERAL) {
            newComponent.datatype = {
              termType: TYPE_NAMED_NODE
            };

            if ('datatype' in oldComponent) {
              newComponent.datatype.value = oldComponent.datatype;
            }

            if ('language' in oldComponent) {
              if (!('datatype' in oldComponent)) {
                newComponent.datatype.value = RDF_LANGSTRING;
              }

              newComponent.language = oldComponent.language;
            } else if (!('datatype' in oldComponent)) {
              newComponent.datatype.value = XSD_STRING;
            }
          }

          quad[componentName] = newComponent;
        }

        if (graphName === '@default') {
          quad.graph = {
            termType: TYPE_DEFAULT_GRAPH,
            value: ''
          };
        } else {
          quad.graph = {
            termType: graphName.startsWith('_:') ? TYPE_BLANK_NODE : TYPE_NAMED_NODE,
            value: graphName
          };
        }

        quads.push(quad);
      });
    }

    return quads;
  }

};
/**
 * Compares two RDF triples for equality.
 *
 * @param t1 the first triple.
 * @param t2 the second triple.
 *
 * @return true if the triples are the same, false if not.
 */

function _compareTriples(t1, t2) {
  // compare subject and object types first as it is the quickest check
  if (!(t1.subject.termType === t2.subject.termType && t1.object.termType === t2.object.termType)) {
    return false;
  } // compare values


  if (!(t1.subject.value === t2.subject.value && t1.predicate.value === t2.predicate.value && t1.object.value === t2.object.value)) {
    return false;
  }

  if (t1.object.termType !== TYPE_LITERAL) {
    // no `datatype` or `language` to check
    return true;
  }

  return t1.object.datatype.termType === t2.object.datatype.termType && t1.object.language === t2.object.language && t1.object.datatype.value === t2.object.datatype.value;
}

const _escapeRegex = /["\\\n\r]/g;
/**
 * Escape string to N-Quads literal
 */

function _escape(s) {
  return s.replace(_escapeRegex, function (match) {
    switch (match) {
      case '"':
        return '\\"';

      case '\\':
        return '\\\\';

      case '\n':
        return '\\n';

      case '\r':
        return '\\r';
    }
  });
}

const _unescapeRegex = /(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;
/**
 * Unescape N-Quads literal to string
 */

function _unescape(s) {
  return s.replace(_unescapeRegex, function (match, code, u, U) {
    if (code) {
      switch (code) {
        case 't':
          return '\t';

        case 'b':
          return '\b';

        case 'n':
          return '\n';

        case 'r':
          return '\r';

        case 'f':
          return '\f';

        case '"':
          return '"';

        case '\'':
          return '\'';

        case '\\':
          return '\\';
      }
    }

    if (u) {
      return String.fromCharCode(parseInt(u, 16));
    }

    if (U) {
      // FIXME: support larger values
      throw new Error('Unsupported U escape');
    }
  });
}
},{}],"node_modules/rdf-canonize/lib/URDNA2015.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const IdentifierIssuer = require('./IdentifierIssuer');

const MessageDigest = require('./MessageDigest');

const Permuter = require('./Permuter');

const NQuads = require('./NQuads');

module.exports = class URDNA2015 {
  constructor() {
    this.name = 'URDNA2015';
    this.blankNodeInfo = new Map();
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads = null;
  } // 4.4) Normalization Algorithm


  async main(dataset) {
    this.quads = dataset; // 1) Create the normalization state.
    // 2) For every quad in input dataset:

    for (const quad of dataset) {
      // 2.1) For each blank node that occurs in the quad, add a reference
      // to the quad using the blank node identifier in the blank node to
      // quads map, creating a new entry if necessary.
      this._addBlankNodeQuadInfo({
        quad,
        component: quad.subject
      });

      this._addBlankNodeQuadInfo({
        quad,
        component: quad.object
      });

      this._addBlankNodeQuadInfo({
        quad,
        component: quad.graph
      });
    } // 3) Create a list of non-normalized blank node identifiers
    // non-normalized identifiers and populate it using the keys from the
    // blank node to quads map.
    // Note: We use a map here and it was generated during step 2.
    // 4) `simple` flag is skipped -- loop is optimized away. This optimization
    // is permitted because there was a typo in the hash first degree quads
    // algorithm in the URDNA2015 spec that was implemented widely making it
    // such that it could not be fixed; the result was that the loop only
    // needs to be run once and the first degree quad hashes will never change.
    // 5.1-5.2 are skipped; first degree quad hashes are generated just once
    // for all non-normalized blank nodes.
    // 5.3) For each blank node identifier identifier in non-normalized
    // identifiers:


    const hashToBlankNodes = new Map();
    const nonNormalized = [...this.blankNodeInfo.keys()];
    let i = 0;

    for (const id of nonNormalized) {
      // Note: batch hashing first degree quads 100 at a time
      if (++i % 100 === 0) {
        await this._yield();
      } // steps 5.3.1 and 5.3.2:


      await this._hashAndTrackBlankNode({
        id,
        hashToBlankNodes
      });
    } // 5.4) For each hash to identifier list mapping in hash to blank
    // nodes map, lexicographically-sorted by hash:


    const hashes = [...hashToBlankNodes.keys()].sort(); // optimize away second sort, gather non-unique hashes in order as we go

    const nonUnique = [];

    for (const hash of hashes) {
      // 5.4.1) If the length of identifier list is greater than 1,
      // continue to the next mapping.
      const idList = hashToBlankNodes.get(hash);

      if (idList.length > 1) {
        nonUnique.push(idList);
        continue;
      } // 5.4.2) Use the Issue Identifier algorithm, passing canonical
      // issuer and the single blank node identifier in identifier
      // list, identifier, to issue a canonical replacement identifier
      // for identifier.


      const id = idList[0];
      this.canonicalIssuer.getId(id); // Note: These steps are skipped, optimized away since the loop
      // only needs to be run once.
      // 5.4.3) Remove identifier from non-normalized identifiers.
      // 5.4.4) Remove hash from the hash to blank nodes map.
      // 5.4.5) Set simple to true.
    } // 6) For each hash to identifier list mapping in hash to blank nodes map,
    // lexicographically-sorted by hash:
    // Note: sort optimized away, use `nonUnique`.


    for (const idList of nonUnique) {
      // 6.1) Create hash path list where each item will be a result of
      // running the Hash N-Degree Quads algorithm.
      const hashPathList = []; // 6.2) For each blank node identifier identifier in identifier list:

      for (const id of idList) {
        // 6.2.1) If a canonical identifier has already been issued for
        // identifier, continue to the next identifier.
        if (this.canonicalIssuer.hasId(id)) {
          continue;
        } // 6.2.2) Create temporary issuer, an identifier issuer
        // initialized with the prefix _:b.


        const issuer = new IdentifierIssuer('_:b'); // 6.2.3) Use the Issue Identifier algorithm, passing temporary
        // issuer and identifier, to issue a new temporary blank node
        // identifier for identifier.

        issuer.getId(id); // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
        // temporary issuer, and append the result to the hash path list.

        const result = await this.hashNDegreeQuads(id, issuer);
        hashPathList.push(result);
      } // 6.3) For each result in the hash path list,
      // lexicographically-sorted by the hash in result:


      hashPathList.sort(_stringHashCompare);

      for (const result of hashPathList) {
        // 6.3.1) For each blank node identifier, existing identifier,
        // that was issued a temporary identifier by identifier issuer
        // in result, issue a canonical identifier, in the same order,
        // using the Issue Identifier algorithm, passing canonical
        // issuer and existing identifier.
        const oldIds = result.issuer.getOldIds();

        for (const id of oldIds) {
          this.canonicalIssuer.getId(id);
        }
      }
    }
    /* Note: At this point all blank nodes in the set of RDF quads have been
    assigned canonical identifiers, which have been stored in the canonical
    issuer. Here each quad is updated by assigning each of its blank nodes
    its new identifier. */
    // 7) For each quad, quad, in input dataset:


    const normalized = [];

    for (const quad of this.quads) {
      // 7.1) Create a copy, quad copy, of quad and replace any existing
      // blank node identifiers using the canonical identifiers
      // previously issued by canonical issuer.
      // Note: We optimize with shallow copies here.
      const q = { ...quad
      };
      q.subject = this._useCanonicalId({
        component: q.subject
      });
      q.object = this._useCanonicalId({
        component: q.object
      });
      q.graph = this._useCanonicalId({
        component: q.graph
      }); // 7.2) Add quad copy to the normalized dataset.

      normalized.push(NQuads.serializeQuad(q));
    } // sort normalized output


    normalized.sort(); // 8) Return the normalized dataset.

    return normalized.join('');
  } // 4.6) Hash First Degree Quads


  async hashFirstDegreeQuads(id) {
    // 1) Initialize nquads to an empty list. It will be used to store quads in
    // N-Quads format.
    const nquads = []; // 2) Get the list of quads `quads` associated with the reference blank node
    // identifier in the blank node to quads map.

    const info = this.blankNodeInfo.get(id);
    const quads = info.quads; // 3) For each quad `quad` in `quads`:

    for (const quad of quads) {
      // 3.1) Serialize the quad in N-Quads format with the following special
      // rule:
      // 3.1.1) If any component in quad is an blank node, then serialize it
      // using a special identifier as follows:
      const copy = {
        subject: null,
        predicate: quad.predicate,
        object: null,
        graph: null
      }; // 3.1.2) If the blank node's existing blank node identifier matches
      // the reference blank node identifier then use the blank node
      // identifier _:a, otherwise, use the blank node identifier _:z.

      copy.subject = this.modifyFirstDegreeComponent(id, quad.subject, 'subject');
      copy.object = this.modifyFirstDegreeComponent(id, quad.object, 'object');
      copy.graph = this.modifyFirstDegreeComponent(id, quad.graph, 'graph');
      nquads.push(NQuads.serializeQuad(copy));
    } // 4) Sort nquads in lexicographical order.


    nquads.sort(); // 5) Return the hash that results from passing the sorted, joined nquads
    // through the hash algorithm.

    const md = new MessageDigest(this.hashAlgorithm);

    for (const nquad of nquads) {
      md.update(nquad);
    }

    info.hash = await md.digest();
    return info.hash;
  } // 4.7) Hash Related Blank Node


  async hashRelatedBlankNode(related, quad, issuer, position) {
    // 1) Set the identifier to use for related, preferring first the canonical
    // identifier for related if issued, second the identifier issued by issuer
    // if issued, and last, if necessary, the result of the Hash First Degree
    // Quads algorithm, passing related.
    let id;

    if (this.canonicalIssuer.hasId(related)) {
      id = this.canonicalIssuer.getId(related);
    } else if (issuer.hasId(related)) {
      id = issuer.getId(related);
    } else {
      id = this.blankNodeInfo.get(related).hash;
    } // 2) Initialize a string input to the value of position.
    // Note: We use a hash object instead.


    const md = new MessageDigest(this.hashAlgorithm);
    md.update(position); // 3) If position is not g, append <, the value of the predicate in quad,
    // and > to input.

    if (position !== 'g') {
      md.update(this.getRelatedPredicate(quad));
    } // 4) Append identifier to input.


    md.update(id); // 5) Return the hash that results from passing input through the hash
    // algorithm.

    return md.digest();
  } // 4.8) Hash N-Degree Quads


  async hashNDegreeQuads(id, issuer) {
    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    // Note: 2) and 3) handled within `createHashToRelated`
    const md = new MessageDigest(this.hashAlgorithm);
    const hashToRelated = await this.createHashToRelated(id, issuer); // 4) Create an empty string, data to hash.
    // Note: We created a hash object `md` above instead.
    // 5) For each related hash to blank node list mapping in hash to related
    // blank nodes map, sorted lexicographically by related hash:

    const hashes = [...hashToRelated.keys()].sort();

    for (const hash of hashes) {
      // 5.1) Append the related hash to the data to hash.
      md.update(hash); // 5.2) Create a string chosen path.

      let chosenPath = ''; // 5.3) Create an unset chosen issuer variable.

      let chosenIssuer; // 5.4) For each permutation of blank node list:

      const permuter = new Permuter(hashToRelated.get(hash));
      let i = 0;

      while (permuter.hasNext()) {
        const permutation = permuter.next(); // Note: batch permutations 3 at a time

        if (++i % 3 === 0) {
          await this._yield();
        } // 5.4.1) Create a copy of issuer, issuer copy.


        let issuerCopy = issuer.clone(); // 5.4.2) Create a string path.

        let path = ''; // 5.4.3) Create a recursion list, to store blank node identifiers
        // that must be recursively processed by this algorithm.

        const recursionList = []; // 5.4.4) For each related in permutation:

        let nextPermutation = false;

        for (const related of permutation) {
          // 5.4.4.1) If a canonical identifier has been issued for
          // related, append it to path.
          if (this.canonicalIssuer.hasId(related)) {
            path += this.canonicalIssuer.getId(related);
          } else {
            // 5.4.4.2) Otherwise:
            // 5.4.4.2.1) If issuer copy has not issued an identifier for
            // related, append related to recursion list.
            if (!issuerCopy.hasId(related)) {
              recursionList.push(related);
            } // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
            // issuer copy and related and append the result to path.


            path += issuerCopy.getId(related);
          } // 5.4.4.3) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.


          if (chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if (nextPermutation) {
          continue;
        } // 5.4.5) For each related in recursion list:


        for (const related of recursionList) {
          // 5.4.5.1) Set result to the result of recursively executing
          // the Hash N-Degree Quads algorithm, passing related for
          // identifier and issuer copy for path identifier issuer.
          const result = await this.hashNDegreeQuads(related, issuerCopy); // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
          // copy and related and append the result to path.

          path += issuerCopy.getId(related); // 5.4.5.3) Append <, the hash in result, and > to path.

          path += `<${result.hash}>`; // 5.4.5.4) Set issuer copy to the identifier issuer in
          // result.

          issuerCopy = result.issuer; // 5.4.5.5) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.

          if (chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if (nextPermutation) {
          continue;
        } // 5.4.6) If chosen path is empty or path is lexicographically
        // less than chosen path, set chosen path to path and chosen
        // issuer to issuer copy.


        if (chosenPath.length === 0 || path < chosenPath) {
          chosenPath = path;
          chosenIssuer = issuerCopy;
        }
      } // 5.5) Append chosen path to data to hash.


      md.update(chosenPath); // 5.6) Replace issuer, by reference, with chosen issuer.

      issuer = chosenIssuer;
    } // 6) Return issuer and the hash that results from passing data to hash
    // through the hash algorithm.


    return {
      hash: await md.digest(),
      issuer
    };
  } // helper for modifying component during Hash First Degree Quads


  modifyFirstDegreeComponent(id, component) {
    if (component.termType !== 'BlankNode') {
      return component;
    }
    /* Note: A mistake in the URDNA2015 spec that made its way into
    implementations (and therefore must stay to avoid interop breakage)
    resulted in an assigned canonical ID, if available for
    `component.value`, not being used in place of `_:a`/`_:z`, so
    we don't use it here. */


    return {
      termType: 'BlankNode',
      value: component.value === id ? '_:a' : '_:z'
    };
  } // helper for getting a related predicate


  getRelatedPredicate(quad) {
    return `<${quad.predicate.value}>`;
  } // helper for creating hash to related blank nodes map


  async createHashToRelated(id, issuer) {
    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.

    const quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

    let i = 0;

    for (const quad of quads) {
      // Note: batch hashing related blank node quads 100 at a time
      if (++i % 100 === 0) {
        await this._yield();
      } // 3.1) For each component in quad, if component is the subject, object,
      // and graph name and it is a blank node that is not identified by
      // identifier:
      // steps 3.1.1 and 3.1.2 occur in helpers:


      await Promise.all([this._addRelatedBlankNodeHash({
        quad,
        component: quad.subject,
        position: 's',
        id,
        issuer,
        hashToRelated
      }), this._addRelatedBlankNodeHash({
        quad,
        component: quad.object,
        position: 'o',
        id,
        issuer,
        hashToRelated
      }), this._addRelatedBlankNodeHash({
        quad,
        component: quad.graph,
        position: 'g',
        id,
        issuer,
        hashToRelated
      })]);
    }

    return hashToRelated;
  }

  async _hashAndTrackBlankNode(_ref) {
    let {
      id,
      hashToBlankNodes
    } = _ref;
    // 5.3.1) Create a hash, hash, according to the Hash First Degree
    // Quads algorithm.
    const hash = await this.hashFirstDegreeQuads(id); // 5.3.2) Add hash and identifier to hash to blank nodes map,
    // creating a new entry if necessary.

    const idList = hashToBlankNodes.get(hash);

    if (!idList) {
      hashToBlankNodes.set(hash, [id]);
    } else {
      idList.push(id);
    }
  }

  _addBlankNodeQuadInfo(_ref2) {
    let {
      quad,
      component
    } = _ref2;

    if (component.termType !== 'BlankNode') {
      return;
    }

    const id = component.value;
    const info = this.blankNodeInfo.get(id);

    if (info) {
      info.quads.add(quad);
    } else {
      this.blankNodeInfo.set(id, {
        quads: new Set([quad]),
        hash: null
      });
    }
  }

  async _addRelatedBlankNodeHash(_ref3) {
    let {
      quad,
      component,
      position,
      id,
      issuer,
      hashToRelated
    } = _ref3;

    if (!(component.termType === 'BlankNode' && component.value !== id)) {
      return;
    } // 3.1.1) Set hash to the result of the Hash Related Blank Node
    // algorithm, passing the blank node identifier for component as
    // related, quad, path identifier issuer as issuer, and position as
    // either s, o, or g based on whether component is a subject, object,
    // graph name, respectively.


    const related = component.value;
    const hash = await this.hashRelatedBlankNode(related, quad, issuer, position); // 3.1.2) Add a mapping of hash to the blank node identifier for
    // component to hash to related blank nodes map, adding an entry as
    // necessary.

    const entries = hashToRelated.get(hash);

    if (entries) {
      entries.push(related);
    } else {
      hashToRelated.set(hash, [related]);
    }
  }

  _useCanonicalId(_ref4) {
    let {
      component
    } = _ref4;

    if (component.termType === 'BlankNode' && !component.value.startsWith(this.canonicalIssuer.prefix)) {
      return {
        termType: 'BlankNode',
        value: this.canonicalIssuer.getId(component.value)
      };
    }

    return component;
  }

  async _yield() {
    return new Promise(resolve => setImmediate(resolve));
  }

};

function _stringHashCompare(a, b) {
  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
}
},{"./IdentifierIssuer":"node_modules/rdf-canonize/lib/IdentifierIssuer.js","./MessageDigest":"node_modules/rdf-canonize/lib/MessageDigest-browser.js","./Permuter":"node_modules/rdf-canonize/lib/Permuter.js","./NQuads":"node_modules/rdf-canonize/lib/NQuads.js"}],"node_modules/rdf-canonize/lib/URGNA2012.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const URDNA2015 = require('./URDNA2015');

module.exports = class URDNA2012 extends URDNA2015 {
  constructor() {
    super();
    this.name = 'URGNA2012';
    this.hashAlgorithm = 'sha1';
  } // helper for modifying component during Hash First Degree Quads


  modifyFirstDegreeComponent(id, component, key) {
    if (component.termType !== 'BlankNode') {
      return component;
    }

    if (key === 'graph') {
      return {
        termType: 'BlankNode',
        value: '_:g'
      };
    }

    return {
      termType: 'BlankNode',
      value: component.value === id ? '_:a' : '_:z'
    };
  } // helper for getting a related predicate


  getRelatedPredicate(quad) {
    return quad.predicate.value;
  } // helper for creating hash to related blank nodes map


  async createHashToRelated(id, issuer) {
    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.

    const quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

    let i = 0;

    for (const quad of quads) {
      // 3.1) If the quad's subject is a blank node that does not match
      // identifier, set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for subject as related,
      // quad, path identifier issuer as issuer, and p as position.
      let position;
      let related;

      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
        related = quad.subject.value;
        position = 'p';
      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {
        // 3.2) Otherwise, if quad's object is a blank node that does not match
        // identifier, to the result of the Hash Related Blank Node algorithm,
        // passing the blank node identifier for object as related, quad, path
        // identifier issuer as issuer, and r as position.
        related = quad.object.value;
        position = 'r';
      } else {
        // 3.3) Otherwise, continue to the next quad.
        continue;
      } // Note: batch hashing related blank nodes 100 at a time


      if (++i % 100 === 0) {
        await this._yield();
      } // 3.4) Add a mapping of hash to the blank node identifier for the
      // component that matched (subject or object) to hash to related blank
      // nodes map, adding an entry as necessary.


      const hash = await this.hashRelatedBlankNode(related, quad, issuer, position);
      const entries = hashToRelated.get(hash);

      if (entries) {
        entries.push(related);
      } else {
        hashToRelated.set(hash, [related]);
      }
    }

    return hashToRelated;
  }

};
},{"./URDNA2015":"node_modules/rdf-canonize/lib/URDNA2015.js"}],"node_modules/rdf-canonize/lib/URDNA2015Sync.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const IdentifierIssuer = require('./IdentifierIssuer');

const MessageDigest = require('./MessageDigest');

const Permuter = require('./Permuter');

const NQuads = require('./NQuads');

module.exports = class URDNA2015Sync {
  constructor() {
    this.name = 'URDNA2015';
    this.blankNodeInfo = new Map();
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads = null;
  } // 4.4) Normalization Algorithm


  main(dataset) {
    this.quads = dataset; // 1) Create the normalization state.
    // 2) For every quad in input dataset:

    for (const quad of dataset) {
      // 2.1) For each blank node that occurs in the quad, add a reference
      // to the quad using the blank node identifier in the blank node to
      // quads map, creating a new entry if necessary.
      this._addBlankNodeQuadInfo({
        quad,
        component: quad.subject
      });

      this._addBlankNodeQuadInfo({
        quad,
        component: quad.object
      });

      this._addBlankNodeQuadInfo({
        quad,
        component: quad.graph
      });
    } // 3) Create a list of non-normalized blank node identifiers
    // non-normalized identifiers and populate it using the keys from the
    // blank node to quads map.
    // Note: We use a map here and it was generated during step 2.
    // 4) `simple` flag is skipped -- loop is optimized away. This optimization
    // is permitted because there was a typo in the hash first degree quads
    // algorithm in the URDNA2015 spec that was implemented widely making it
    // such that it could not be fixed; the result was that the loop only
    // needs to be run once and the first degree quad hashes will never change.
    // 5.1-5.2 are skipped; first degree quad hashes are generated just once
    // for all non-normalized blank nodes.
    // 5.3) For each blank node identifier identifier in non-normalized
    // identifiers:


    const hashToBlankNodes = new Map();
    const nonNormalized = [...this.blankNodeInfo.keys()];

    for (const id of nonNormalized) {
      // steps 5.3.1 and 5.3.2:
      this._hashAndTrackBlankNode({
        id,
        hashToBlankNodes
      });
    } // 5.4) For each hash to identifier list mapping in hash to blank
    // nodes map, lexicographically-sorted by hash:


    const hashes = [...hashToBlankNodes.keys()].sort(); // optimize away second sort, gather non-unique hashes in order as we go

    const nonUnique = [];

    for (const hash of hashes) {
      // 5.4.1) If the length of identifier list is greater than 1,
      // continue to the next mapping.
      const idList = hashToBlankNodes.get(hash);

      if (idList.length > 1) {
        nonUnique.push(idList);
        continue;
      } // 5.4.2) Use the Issue Identifier algorithm, passing canonical
      // issuer and the single blank node identifier in identifier
      // list, identifier, to issue a canonical replacement identifier
      // for identifier.


      const id = idList[0];
      this.canonicalIssuer.getId(id); // Note: These steps are skipped, optimized away since the loop
      // only needs to be run once.
      // 5.4.3) Remove identifier from non-normalized identifiers.
      // 5.4.4) Remove hash from the hash to blank nodes map.
      // 5.4.5) Set simple to true.
    } // 6) For each hash to identifier list mapping in hash to blank nodes map,
    // lexicographically-sorted by hash:
    // Note: sort optimized away, use `nonUnique`.


    for (const idList of nonUnique) {
      // 6.1) Create hash path list where each item will be a result of
      // running the Hash N-Degree Quads algorithm.
      const hashPathList = []; // 6.2) For each blank node identifier identifier in identifier list:

      for (const id of idList) {
        // 6.2.1) If a canonical identifier has already been issued for
        // identifier, continue to the next identifier.
        if (this.canonicalIssuer.hasId(id)) {
          continue;
        } // 6.2.2) Create temporary issuer, an identifier issuer
        // initialized with the prefix _:b.


        const issuer = new IdentifierIssuer('_:b'); // 6.2.3) Use the Issue Identifier algorithm, passing temporary
        // issuer and identifier, to issue a new temporary blank node
        // identifier for identifier.

        issuer.getId(id); // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
        // temporary issuer, and append the result to the hash path list.

        const result = this.hashNDegreeQuads(id, issuer);
        hashPathList.push(result);
      } // 6.3) For each result in the hash path list,
      // lexicographically-sorted by the hash in result:


      hashPathList.sort(_stringHashCompare);

      for (const result of hashPathList) {
        // 6.3.1) For each blank node identifier, existing identifier,
        // that was issued a temporary identifier by identifier issuer
        // in result, issue a canonical identifier, in the same order,
        // using the Issue Identifier algorithm, passing canonical
        // issuer and existing identifier.
        const oldIds = result.issuer.getOldIds();

        for (const id of oldIds) {
          this.canonicalIssuer.getId(id);
        }
      }
    }
    /* Note: At this point all blank nodes in the set of RDF quads have been
    assigned canonical identifiers, which have been stored in the canonical
    issuer. Here each quad is updated by assigning each of its blank nodes
    its new identifier. */
    // 7) For each quad, quad, in input dataset:


    const normalized = [];

    for (const quad of this.quads) {
      // 7.1) Create a copy, quad copy, of quad and replace any existing
      // blank node identifiers using the canonical identifiers
      // previously issued by canonical issuer.
      // Note: We optimize with shallow copies here.
      const q = { ...quad
      };
      q.subject = this._useCanonicalId({
        component: q.subject
      });
      q.object = this._useCanonicalId({
        component: q.object
      });
      q.graph = this._useCanonicalId({
        component: q.graph
      }); // 7.2) Add quad copy to the normalized dataset.

      normalized.push(NQuads.serializeQuad(q));
    } // sort normalized output


    normalized.sort(); // 8) Return the normalized dataset.

    return normalized.join('');
  } // 4.6) Hash First Degree Quads


  hashFirstDegreeQuads(id) {
    // 1) Initialize nquads to an empty list. It will be used to store quads in
    // N-Quads format.
    const nquads = []; // 2) Get the list of quads `quads` associated with the reference blank node
    // identifier in the blank node to quads map.

    const info = this.blankNodeInfo.get(id);
    const quads = info.quads; // 3) For each quad `quad` in `quads`:

    for (const quad of quads) {
      // 3.1) Serialize the quad in N-Quads format with the following special
      // rule:
      // 3.1.1) If any component in quad is an blank node, then serialize it
      // using a special identifier as follows:
      const copy = {
        subject: null,
        predicate: quad.predicate,
        object: null,
        graph: null
      }; // 3.1.2) If the blank node's existing blank node identifier matches
      // the reference blank node identifier then use the blank node
      // identifier _:a, otherwise, use the blank node identifier _:z.

      copy.subject = this.modifyFirstDegreeComponent(id, quad.subject, 'subject');
      copy.object = this.modifyFirstDegreeComponent(id, quad.object, 'object');
      copy.graph = this.modifyFirstDegreeComponent(id, quad.graph, 'graph');
      nquads.push(NQuads.serializeQuad(copy));
    } // 4) Sort nquads in lexicographical order.


    nquads.sort(); // 5) Return the hash that results from passing the sorted, joined nquads
    // through the hash algorithm.

    const md = new MessageDigest(this.hashAlgorithm);

    for (const nquad of nquads) {
      md.update(nquad);
    }

    info.hash = md.digest();
    return info.hash;
  } // 4.7) Hash Related Blank Node


  hashRelatedBlankNode(related, quad, issuer, position) {
    // 1) Set the identifier to use for related, preferring first the canonical
    // identifier for related if issued, second the identifier issued by issuer
    // if issued, and last, if necessary, the result of the Hash First Degree
    // Quads algorithm, passing related.
    let id;

    if (this.canonicalIssuer.hasId(related)) {
      id = this.canonicalIssuer.getId(related);
    } else if (issuer.hasId(related)) {
      id = issuer.getId(related);
    } else {
      id = this.blankNodeInfo.get(related).hash;
    } // 2) Initialize a string input to the value of position.
    // Note: We use a hash object instead.


    const md = new MessageDigest(this.hashAlgorithm);
    md.update(position); // 3) If position is not g, append <, the value of the predicate in quad,
    // and > to input.

    if (position !== 'g') {
      md.update(this.getRelatedPredicate(quad));
    } // 4) Append identifier to input.


    md.update(id); // 5) Return the hash that results from passing input through the hash
    // algorithm.

    return md.digest();
  } // 4.8) Hash N-Degree Quads


  hashNDegreeQuads(id, issuer) {
    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    // Note: 2) and 3) handled within `createHashToRelated`
    const md = new MessageDigest(this.hashAlgorithm);
    const hashToRelated = this.createHashToRelated(id, issuer); // 4) Create an empty string, data to hash.
    // Note: We created a hash object `md` above instead.
    // 5) For each related hash to blank node list mapping in hash to related
    // blank nodes map, sorted lexicographically by related hash:

    const hashes = [...hashToRelated.keys()].sort();

    for (const hash of hashes) {
      // 5.1) Append the related hash to the data to hash.
      md.update(hash); // 5.2) Create a string chosen path.

      let chosenPath = ''; // 5.3) Create an unset chosen issuer variable.

      let chosenIssuer; // 5.4) For each permutation of blank node list:

      const permuter = new Permuter(hashToRelated.get(hash));

      while (permuter.hasNext()) {
        const permutation = permuter.next(); // 5.4.1) Create a copy of issuer, issuer copy.

        let issuerCopy = issuer.clone(); // 5.4.2) Create a string path.

        let path = ''; // 5.4.3) Create a recursion list, to store blank node identifiers
        // that must be recursively processed by this algorithm.

        const recursionList = []; // 5.4.4) For each related in permutation:

        let nextPermutation = false;

        for (const related of permutation) {
          // 5.4.4.1) If a canonical identifier has been issued for
          // related, append it to path.
          if (this.canonicalIssuer.hasId(related)) {
            path += this.canonicalIssuer.getId(related);
          } else {
            // 5.4.4.2) Otherwise:
            // 5.4.4.2.1) If issuer copy has not issued an identifier for
            // related, append related to recursion list.
            if (!issuerCopy.hasId(related)) {
              recursionList.push(related);
            } // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
            // issuer copy and related and append the result to path.


            path += issuerCopy.getId(related);
          } // 5.4.4.3) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.


          if (chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if (nextPermutation) {
          continue;
        } // 5.4.5) For each related in recursion list:


        for (const related of recursionList) {
          // 5.4.5.1) Set result to the result of recursively executing
          // the Hash N-Degree Quads algorithm, passing related for
          // identifier and issuer copy for path identifier issuer.
          const result = this.hashNDegreeQuads(related, issuerCopy); // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
          // copy and related and append the result to path.

          path += issuerCopy.getId(related); // 5.4.5.3) Append <, the hash in result, and > to path.

          path += `<${result.hash}>`; // 5.4.5.4) Set issuer copy to the identifier issuer in
          // result.

          issuerCopy = result.issuer; // 5.4.5.5) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.

          if (chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if (nextPermutation) {
          continue;
        } // 5.4.6) If chosen path is empty or path is lexicographically
        // less than chosen path, set chosen path to path and chosen
        // issuer to issuer copy.


        if (chosenPath.length === 0 || path < chosenPath) {
          chosenPath = path;
          chosenIssuer = issuerCopy;
        }
      } // 5.5) Append chosen path to data to hash.


      md.update(chosenPath); // 5.6) Replace issuer, by reference, with chosen issuer.

      issuer = chosenIssuer;
    } // 6) Return issuer and the hash that results from passing data to hash
    // through the hash algorithm.


    return {
      hash: md.digest(),
      issuer
    };
  } // helper for modifying component during Hash First Degree Quads


  modifyFirstDegreeComponent(id, component) {
    if (component.termType !== 'BlankNode') {
      return component;
    }
    /* Note: A mistake in the URDNA2015 spec that made its way into
    implementations (and therefore must stay to avoid interop breakage)
    resulted in an assigned canonical ID, if available for
    `component.value`, not being used in place of `_:a`/`_:z`, so
    we don't use it here. */


    return {
      termType: 'BlankNode',
      value: component.value === id ? '_:a' : '_:z'
    };
  } // helper for getting a related predicate


  getRelatedPredicate(quad) {
    return `<${quad.predicate.value}>`;
  } // helper for creating hash to related blank nodes map


  createHashToRelated(id, issuer) {
    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.

    const quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

    for (const quad of quads) {
      // 3.1) For each component in quad, if component is the subject, object,
      // or graph name and it is a blank node that is not identified by
      // identifier:
      // steps 3.1.1 and 3.1.2 occur in helpers:
      this._addRelatedBlankNodeHash({
        quad,
        component: quad.subject,
        position: 's',
        id,
        issuer,
        hashToRelated
      });

      this._addRelatedBlankNodeHash({
        quad,
        component: quad.object,
        position: 'o',
        id,
        issuer,
        hashToRelated
      });

      this._addRelatedBlankNodeHash({
        quad,
        component: quad.graph,
        position: 'g',
        id,
        issuer,
        hashToRelated
      });
    }

    return hashToRelated;
  }

  _hashAndTrackBlankNode(_ref) {
    let {
      id,
      hashToBlankNodes
    } = _ref;
    // 5.3.1) Create a hash, hash, according to the Hash First Degree
    // Quads algorithm.
    const hash = this.hashFirstDegreeQuads(id); // 5.3.2) Add hash and identifier to hash to blank nodes map,
    // creating a new entry if necessary.

    const idList = hashToBlankNodes.get(hash);

    if (!idList) {
      hashToBlankNodes.set(hash, [id]);
    } else {
      idList.push(id);
    }
  }

  _addBlankNodeQuadInfo(_ref2) {
    let {
      quad,
      component
    } = _ref2;

    if (component.termType !== 'BlankNode') {
      return;
    }

    const id = component.value;
    const info = this.blankNodeInfo.get(id);

    if (info) {
      info.quads.add(quad);
    } else {
      this.blankNodeInfo.set(id, {
        quads: new Set([quad]),
        hash: null
      });
    }
  }

  _addRelatedBlankNodeHash(_ref3) {
    let {
      quad,
      component,
      position,
      id,
      issuer,
      hashToRelated
    } = _ref3;

    if (!(component.termType === 'BlankNode' && component.value !== id)) {
      return;
    } // 3.1.1) Set hash to the result of the Hash Related Blank Node
    // algorithm, passing the blank node identifier for component as
    // related, quad, path identifier issuer as issuer, and position as
    // either s, o, or g based on whether component is a subject, object,
    // graph name, respectively.


    const related = component.value;
    const hash = this.hashRelatedBlankNode(related, quad, issuer, position); // 3.1.2) Add a mapping of hash to the blank node identifier for
    // component to hash to related blank nodes map, adding an entry as
    // necessary.

    const entries = hashToRelated.get(hash);

    if (entries) {
      entries.push(related);
    } else {
      hashToRelated.set(hash, [related]);
    }
  }

  _useCanonicalId(_ref4) {
    let {
      component
    } = _ref4;

    if (component.termType === 'BlankNode' && !component.value.startsWith(this.canonicalIssuer.prefix)) {
      return {
        termType: 'BlankNode',
        value: this.canonicalIssuer.getId(component.value)
      };
    }

    return component;
  }

};

function _stringHashCompare(a, b) {
  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;
}
},{"./IdentifierIssuer":"node_modules/rdf-canonize/lib/IdentifierIssuer.js","./MessageDigest":"node_modules/rdf-canonize/lib/MessageDigest-browser.js","./Permuter":"node_modules/rdf-canonize/lib/Permuter.js","./NQuads":"node_modules/rdf-canonize/lib/NQuads.js"}],"node_modules/rdf-canonize/lib/URGNA2012Sync.js":[function(require,module,exports) {
/*
 * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const URDNA2015Sync = require('./URDNA2015Sync');

module.exports = class URDNA2012Sync extends URDNA2015Sync {
  constructor() {
    super();
    this.name = 'URGNA2012';
    this.hashAlgorithm = 'sha1';
  } // helper for modifying component during Hash First Degree Quads


  modifyFirstDegreeComponent(id, component, key) {
    if (component.termType !== 'BlankNode') {
      return component;
    }

    if (key === 'graph') {
      return {
        termType: 'BlankNode',
        value: '_:g'
      };
    }

    return {
      termType: 'BlankNode',
      value: component.value === id ? '_:a' : '_:z'
    };
  } // helper for getting a related predicate


  getRelatedPredicate(quad) {
    return quad.predicate.value;
  } // helper for creating hash to related blank nodes map


  createHashToRelated(id, issuer) {
    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.

    const quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:

    for (const quad of quads) {
      // 3.1) If the quad's subject is a blank node that does not match
      // identifier, set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for subject as related,
      // quad, path identifier issuer as issuer, and p as position.
      let position;
      let related;

      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
        related = quad.subject.value;
        position = 'p';
      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {
        // 3.2) Otherwise, if quad's object is a blank node that does not match
        // identifier, to the result of the Hash Related Blank Node algorithm,
        // passing the blank node identifier for object as related, quad, path
        // identifier issuer as issuer, and r as position.
        related = quad.object.value;
        position = 'r';
      } else {
        // 3.3) Otherwise, continue to the next quad.
        continue;
      } // 3.4) Add a mapping of hash to the blank node identifier for the
      // component that matched (subject or object) to hash to related blank
      // nodes map, adding an entry as necessary.


      const hash = this.hashRelatedBlankNode(related, quad, issuer, position);
      const entries = hashToRelated.get(hash);

      if (entries) {
        entries.push(related);
      } else {
        hashToRelated.set(hash, [related]);
      }
    }

    return hashToRelated;
  }

};
},{"./URDNA2015Sync":"node_modules/rdf-canonize/lib/URDNA2015Sync.js"}],"node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/rdf-canonize/lib/index.js":[function(require,module,exports) {
/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2021 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
'use strict';

const URDNA2015 = require('./URDNA2015');

const URGNA2012 = require('./URGNA2012');

const URDNA2015Sync = require('./URDNA2015Sync');

const URGNA2012Sync = require('./URGNA2012Sync'); // optional native support


let rdfCanonizeNative;

try {
  rdfCanonizeNative = require('rdf-canonize-native');
} catch (e) {}

const api = {};
module.exports = api; // expose helpers

api.NQuads = require('./NQuads');
api.IdentifierIssuer = require('./IdentifierIssuer');
/**
 * Get or set native API.
 *
 * @param api the native API.
 *
 * @return the currently set native API.
 */

api._rdfCanonizeNative = function (api) {
  if (api) {
    rdfCanonizeNative = api;
  }

  return rdfCanonizeNative;
};
/**
 * Asynchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return a Promise that resolves to the canonicalized RDF Dataset.
 */


api.canonize = async function (dataset, options) {
  // back-compat with legacy dataset
  if (!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  if (options.useNative) {
    if (!rdfCanonizeNative) {
      throw new Error('rdf-canonize-native not available');
    } // TODO: convert native algorithm to Promise-based async


    return new Promise((resolve, reject) => rdfCanonizeNative.canonize(dataset, options, (err, canonical) => err ? reject(err) : resolve(canonical)));
  }

  if (options.algorithm === 'URDNA2015') {
    return new URDNA2015(options).main(dataset);
  }

  if (options.algorithm === 'URGNA2012') {
    return new URGNA2012(options).main(dataset);
  }

  if (!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }

  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};
/**
 * This method is no longer available in the public API, it is for testing
 * only. It synchronously canonizes an RDF dataset and does not work in the
 * browser.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return the RDF dataset in canonical form.
 */


api._canonizeSync = function (dataset, options) {
  // back-compat with legacy dataset
  if (!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  if (options.useNative) {
    if (rdfCanonizeNative) {
      return rdfCanonizeNative.canonizeSync(dataset, options);
    }

    throw new Error('rdf-canonize-native not available');
  }

  if (options.algorithm === 'URDNA2015') {
    return new URDNA2015Sync(options).main(dataset);
  }

  if (options.algorithm === 'URGNA2012') {
    return new URGNA2012Sync(options).main(dataset);
  }

  if (!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }

  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};
},{"./URDNA2015":"node_modules/rdf-canonize/lib/URDNA2015.js","./URGNA2012":"node_modules/rdf-canonize/lib/URGNA2012.js","./URDNA2015Sync":"node_modules/rdf-canonize/lib/URDNA2015Sync.js","./URGNA2012Sync":"node_modules/rdf-canonize/lib/URGNA2012Sync.js","rdf-canonize-native":"node_modules/parcel-bundler/src/builtins/_empty.js","./NQuads":"node_modules/rdf-canonize/lib/NQuads.js","./IdentifierIssuer":"node_modules/rdf-canonize/lib/IdentifierIssuer.js"}],"node_modules/rdf-canonize/index.js":[function(require,module,exports) {
/**
 * An implementation of the RDF Dataset Normalization specification.
 *
 * @author Dave Longley
 *
 * Copyright 2010-2021 Digital Bazaar, Inc.
 */
module.exports = require('./lib');
},{"./lib":"node_modules/rdf-canonize/lib/index.js"}],"node_modules/jsonld/lib/types.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const api = {};
module.exports = api;
/**
 * Returns true if the given value is an Array.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Array, false if not.
 */

api.isArray = Array.isArray;
/**
 * Returns true if the given value is a Boolean.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Boolean, false if not.
 */

api.isBoolean = v => typeof v === 'boolean' || Object.prototype.toString.call(v) === '[object Boolean]';
/**
 * Returns true if the given value is a double.
 *
 * @param v the value to check.
 *
 * @return true if the value is a double, false if not.
 */


api.isDouble = v => api.isNumber(v) && (String(v).indexOf('.') !== -1 || Math.abs(v) >= 1e21);
/**
 * Returns true if the given value is an empty Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an empty Object, false if not.
 */


api.isEmptyObject = v => api.isObject(v) && Object.keys(v).length === 0;
/**
 * Returns true if the given value is a Number.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Number, false if not.
 */


api.isNumber = v => typeof v === 'number' || Object.prototype.toString.call(v) === '[object Number]';
/**
 * Returns true if the given value is numeric.
 *
 * @param v the value to check.
 *
 * @return true if the value is numeric, false if not.
 */


api.isNumeric = v => !isNaN(parseFloat(v)) && isFinite(v);
/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */


api.isObject = v => Object.prototype.toString.call(v) === '[object Object]';
/**
 * Returns true if the given value is a String.
 *
 * @param v the value to check.
 *
 * @return true if the value is a String, false if not.
 */


api.isString = v => typeof v === 'string' || Object.prototype.toString.call(v) === '[object String]';
/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */


api.isUndefined = v => typeof v === 'undefined';
},{}],"node_modules/jsonld/lib/graphTypes.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const types = require('./types');

const api = {};
module.exports = api;
/**
 * Returns true if the given value is a subject with properties.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject with properties, false if not.
 */

api.isSubject = v => {
  // Note: A value is a subject if all of these hold true:
  // 1. It is an Object.
  // 2. It is not a @value, @set, or @list.
  // 3. It has more than 1 key OR any existing key is not @id.
  if (types.isObject(v) && !('@value' in v || '@set' in v || '@list' in v)) {
    const keyCount = Object.keys(v).length;
    return keyCount > 1 || !('@id' in v);
  }

  return false;
};
/**
 * Returns true if the given value is a subject reference.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject reference, false if not.
 */


api.isSubjectReference = v => // Note: A value is a subject reference if all of these hold true:
// 1. It is an Object.
// 2. It has a single key: @id.
types.isObject(v) && Object.keys(v).length === 1 && '@id' in v;
/**
 * Returns true if the given value is a @value.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @value, false if not.
 */


api.isValue = v => // Note: A value is a @value if all of these hold true:
// 1. It is an Object.
// 2. It has the @value property.
types.isObject(v) && '@value' in v;
/**
 * Returns true if the given value is a @list.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @list, false if not.
 */


api.isList = v => // Note: A value is a @list if all of these hold true:
// 1. It is an Object.
// 2. It has the @list property.
types.isObject(v) && '@list' in v;
/**
 * Returns true if the given value is a @graph.
 *
 * @return true if the value is a @graph, false if not.
 */


api.isGraph = v => {
  // Note: A value is a graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It may have '@id' or '@index'
  return types.isObject(v) && '@graph' in v && Object.keys(v).filter(key => key !== '@id' && key !== '@index').length === 1;
};
/**
 * Returns true if the given value is a simple @graph.
 *
 * @return true if the value is a simple @graph, false if not.
 */


api.isSimpleGraph = v => {
  // Note: A value is a simple graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It has only 1 key or 2 keys where one of them is `@index`.
  return api.isGraph(v) && !('@id' in v);
};
/**
 * Returns true if the given value is a blank node.
 *
 * @param v the value to check.
 *
 * @return true if the value is a blank node, false if not.
 */


api.isBlankNode = v => {
  // Note: A value is a blank node if all of these hold true:
  // 1. It is an Object.
  // 2. If it has an @id key its value begins with '_:'.
  // 3. It has no keys OR is not a @value, @set, or @list.
  if (types.isObject(v)) {
    if ('@id' in v) {
      return v['@id'].indexOf('_:') === 0;
    }

    return Object.keys(v).length === 0 || !('@value' in v || '@set' in v || '@list' in v);
  }

  return false;
};
},{"./types":"node_modules/jsonld/lib/types.js"}],"node_modules/jsonld/lib/JsonLdError.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

module.exports = class JsonLdError extends Error {
  /**
   * Creates a JSON-LD Error.
   *
   * @param msg the error message.
   * @param type the error type.
   * @param details the error details.
   */
  constructor() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'An unspecified JSON-LD error occurred.';
    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'jsonld.Error';
    let details = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    super(message);
    this.name = name;
    this.message = message;
    this.details = details;
  }

};
},{}],"node_modules/jsonld/lib/util.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const graphTypes = require('./graphTypes');

const types = require('./types'); // TODO: move `IdentifierIssuer` to its own package


const IdentifierIssuer = require('rdf-canonize').IdentifierIssuer;

const JsonLdError = require('./JsonLdError'); // constants


const REGEX_LINK_HEADERS = /(?:<[^>]*?>|"[^"]*?"|[^,])+/g;
const REGEX_LINK_HEADER = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
const REGEX_LINK_HEADER_PARAMS = /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;
const DEFAULTS = {
  headers: {
    accept: 'application/ld+json, application/json'
  }
};
const api = {};
module.exports = api;
api.IdentifierIssuer = IdentifierIssuer;
/**
 * Clones an object, array, Map, Set, or string/number. If a typed JavaScript
 * object is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */

api.clone = function (value) {
  if (value && typeof value === 'object') {
    let rval;

    if (types.isArray(value)) {
      rval = [];

      for (let i = 0; i < value.length; ++i) {
        rval[i] = api.clone(value[i]);
      }
    } else if (value instanceof Map) {
      rval = new Map();

      for (const [k, v] of value) {
        rval.set(k, api.clone(v));
      }
    } else if (value instanceof Set) {
      rval = new Set();

      for (const v of value) {
        rval.add(api.clone(v));
      }
    } else if (types.isObject(value)) {
      rval = {};

      for (const key in value) {
        rval[key] = api.clone(value[key]);
      }
    } else {
      rval = value.toString();
    }

    return rval;
  }

  return value;
};
/**
 * Ensure a value is an array. If the value is an array, it is returned.
 * Otherwise, it is wrapped in an array.
 *
 * @param value the value to return as an array.
 *
 * @return the value as an array.
 */


api.asArray = function (value) {
  return Array.isArray(value) ? value : [value];
};
/**
 * Builds an HTTP headers object for making a JSON-LD request from custom
 * headers and asserts the `accept` header isn't overridden.
 *
 * @param headers an object of headers with keys as header names and values
 *          as header values.
 *
 * @return an object of headers with a valid `accept` header.
 */


api.buildHeaders = function () {
  let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const hasAccept = Object.keys(headers).some(h => h.toLowerCase() === 'accept');

  if (hasAccept) {
    throw new RangeError('Accept header may not be specified; only "' + DEFAULTS.headers.accept + '" is supported.');
  }

  return Object.assign({
    Accept: DEFAULTS.headers.accept
  }, headers);
};
/**
 * Parses a link header. The results will be key'd by the value of "rel".
 *
 * Link: <http://json-ld.org/contexts/person.jsonld>;
 * rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
 *
 * Parses as: {
 *   'http://www.w3.org/ns/json-ld#context': {
 *     target: http://json-ld.org/contexts/person.jsonld,
 *     type: 'application/ld+json'
 *   }
 * }
 *
 * If there is more than one "rel" with the same IRI, then entries in the
 * resulting map for that "rel" will be arrays.
 *
 * @param header the link header to parse.
 */


api.parseLinkHeader = header => {
  const rval = {}; // split on unbracketed/unquoted commas

  const entries = header.match(REGEX_LINK_HEADERS);

  for (let i = 0; i < entries.length; ++i) {
    let match = entries[i].match(REGEX_LINK_HEADER);

    if (!match) {
      continue;
    }

    const result = {
      target: match[1]
    };
    const params = match[2];

    while (match = REGEX_LINK_HEADER_PARAMS.exec(params)) {
      result[match[1]] = match[2] === undefined ? match[3] : match[2];
    }

    const rel = result['rel'] || '';

    if (Array.isArray(rval[rel])) {
      rval[rel].push(result);
    } else if (rval.hasOwnProperty(rel)) {
      rval[rel] = [rval[rel], result];
    } else {
      rval[rel] = result;
    }
  }

  return rval;
};
/**
 * Throws an exception if the given value is not a valid @type value.
 *
 * @param v the value to check.
 */


api.validateTypeValue = (v, isFrame) => {
  if (types.isString(v)) {
    return;
  }

  if (types.isArray(v) && v.every(vv => types.isString(vv))) {
    return;
  }

  if (isFrame && types.isObject(v)) {
    switch (Object.keys(v).length) {
      case 0:
        // empty object is wildcard
        return;

      case 1:
        // default entry is all strings
        if ('@default' in v && api.asArray(v['@default']).every(vv => types.isString(vv))) {
          return;
        }

    }
  }

  throw new JsonLdError('Invalid JSON-LD syntax; "@type" value must a string, an array of ' + 'strings, an empty object, ' + 'or a default object.', 'jsonld.SyntaxError', {
    code: 'invalid type value',
    value: v
  });
};
/**
 * Returns true if the given subject has the given property.
 *
 * @param subject the subject to check.
 * @param property the property to look for.
 *
 * @return true if the subject has the given property, false if not.
 */


api.hasProperty = (subject, property) => {
  if (subject.hasOwnProperty(property)) {
    const value = subject[property];
    return !types.isArray(value) || value.length > 0;
  }

  return false;
};
/**
 * Determines if the given value is a property of the given subject.
 *
 * @param subject the subject to check.
 * @param property the property to check.
 * @param value the value to check.
 *
 * @return true if the value exists, false if not.
 */


api.hasValue = (subject, property, value) => {
  if (api.hasProperty(subject, property)) {
    let val = subject[property];
    const isList = graphTypes.isList(val);

    if (types.isArray(val) || isList) {
      if (isList) {
        val = val['@list'];
      }

      for (let i = 0; i < val.length; ++i) {
        if (api.compareValues(value, val[i])) {
          return true;
        }
      }
    } else if (!types.isArray(value)) {
      // avoid matching the set of values with an array value parameter
      return api.compareValues(value, val);
    }
  }

  return false;
};
/**
 * Adds a value to a subject. If the value is an array, all values in the
 * array will be added.
 *
 * @param subject the subject to add the value to.
 * @param property the property that relates the value to the subject.
 * @param value the value to add.
 * @param [options] the options to use:
 *        [propertyIsArray] true if the property is always an array, false
 *          if not (default: false).
 *        [valueIsArray] true if the value to be added should be preserved as
 *          an array (lists) (default: false).
 *        [allowDuplicate] true to allow duplicates, false not to (uses a
 *          simple shallow comparison of subject ID or value) (default: true).
 *        [prependValue] false to prepend value to any existing values.
 *          (default: false)
 */


api.addValue = (subject, property, value, options) => {
  options = options || {};

  if (!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }

  if (!('valueIsArray' in options)) {
    options.valueIsArray = false;
  }

  if (!('allowDuplicate' in options)) {
    options.allowDuplicate = true;
  }

  if (!('prependValue' in options)) {
    options.prependValue = false;
  }

  if (options.valueIsArray) {
    subject[property] = value;
  } else if (types.isArray(value)) {
    if (value.length === 0 && options.propertyIsArray && !subject.hasOwnProperty(property)) {
      subject[property] = [];
    }

    if (options.prependValue) {
      value = value.concat(subject[property]);
      subject[property] = [];
    }

    for (let i = 0; i < value.length; ++i) {
      api.addValue(subject, property, value[i], options);
    }
  } else if (subject.hasOwnProperty(property)) {
    // check if subject already has value if duplicates not allowed
    const hasValue = !options.allowDuplicate && api.hasValue(subject, property, value); // make property an array if value not present or always an array

    if (!types.isArray(subject[property]) && (!hasValue || options.propertyIsArray)) {
      subject[property] = [subject[property]];
    } // add new value


    if (!hasValue) {
      if (options.prependValue) {
        subject[property].unshift(value);
      } else {
        subject[property].push(value);
      }
    }
  } else {
    // add new value as set or single value
    subject[property] = options.propertyIsArray ? [value] : value;
  }
};
/**
 * Gets all of the values for a subject's property as an array.
 *
 * @param subject the subject.
 * @param property the property.
 *
 * @return all of the values for a subject's property as an array.
 */


api.getValues = (subject, property) => [].concat(subject[property] || []);
/**
 * Removes a property from a subject.
 *
 * @param subject the subject.
 * @param property the property.
 */


api.removeProperty = (subject, property) => {
  delete subject[property];
};
/**
 * Removes a value from a subject.
 *
 * @param subject the subject.
 * @param property the property that relates the value to the subject.
 * @param value the value to remove.
 * @param [options] the options to use:
 *          [propertyIsArray] true if the property is always an array, false
 *            if not (default: false).
 */


api.removeValue = (subject, property, value, options) => {
  options = options || {};

  if (!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  } // filter out value


  const values = api.getValues(subject, property).filter(e => !api.compareValues(e, value));

  if (values.length === 0) {
    api.removeProperty(subject, property);
  } else if (values.length === 1 && !options.propertyIsArray) {
    subject[property] = values[0];
  } else {
    subject[property] = values;
  }
};
/**
 * Relabels all blank nodes in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [issuer] an IdentifierIssuer to use to label blank nodes.
 */


api.relabelBlankNodes = (input, options) => {
  options = options || {};
  const issuer = options.issuer || new IdentifierIssuer('_:b');
  return _labelBlankNodes(issuer, input);
};
/**
 * Compares two JSON-LD values for equality. Two JSON-LD values will be
 * considered equal if:
 *
 * 1. They are both primitives of the same type and value.
 * 2. They are both @values with the same @value, @type, @language,
 *   and @index, OR
 * 3. They both have @ids they are the same.
 *
 * @param v1 the first value.
 * @param v2 the second value.
 *
 * @return true if v1 and v2 are considered equal, false if not.
 */


api.compareValues = (v1, v2) => {
  // 1. equal primitives
  if (v1 === v2) {
    return true;
  } // 2. equal @values


  if (graphTypes.isValue(v1) && graphTypes.isValue(v2) && v1['@value'] === v2['@value'] && v1['@type'] === v2['@type'] && v1['@language'] === v2['@language'] && v1['@index'] === v2['@index']) {
    return true;
  } // 3. equal @ids


  if (types.isObject(v1) && '@id' in v1 && types.isObject(v2) && '@id' in v2) {
    return v1['@id'] === v2['@id'];
  }

  return false;
};
/**
 * Compares two strings first based on length and then lexicographically.
 *
 * @param a the first string.
 * @param b the second string.
 *
 * @return -1 if a < b, 1 if a > b, 0 if a === b.
 */


api.compareShortestLeast = (a, b) => {
  if (a.length < b.length) {
    return -1;
  }

  if (b.length < a.length) {
    return 1;
  }

  if (a === b) {
    return 0;
  }

  return a < b ? -1 : 1;
};
/**
 * Labels the blank nodes in the given value using the given IdentifierIssuer.
 *
 * @param issuer the IdentifierIssuer to use.
 * @param element the element with blank nodes to rename.
 *
 * @return the element.
 */


function _labelBlankNodes(issuer, element) {
  if (types.isArray(element)) {
    for (let i = 0; i < element.length; ++i) {
      element[i] = _labelBlankNodes(issuer, element[i]);
    }
  } else if (graphTypes.isList(element)) {
    element['@list'] = _labelBlankNodes(issuer, element['@list']);
  } else if (types.isObject(element)) {
    // relabel blank node
    if (graphTypes.isBlankNode(element)) {
      element['@id'] = issuer.getId(element['@id']);
    } // recursively apply to all keys


    const keys = Object.keys(element).sort();

    for (let ki = 0; ki < keys.length; ++ki) {
      const key = keys[ki];

      if (key !== '@id') {
        element[key] = _labelBlankNodes(issuer, element[key]);
      }
    }
  }

  return element;
}
},{"./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./types":"node_modules/jsonld/lib/types.js","rdf-canonize":"node_modules/rdf-canonize/index.js","./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js"}],"node_modules/jsonld/lib/constants.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const XSD = 'http://www.w3.org/2001/XMLSchema#';
module.exports = {
  // TODO: Deprecated and will be removed later. Use LINK_HEADER_CONTEXT.
  LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',
  LINK_HEADER_CONTEXT: 'http://www.w3.org/ns/json-ld#context',
  RDF,
  RDF_LIST: RDF + 'List',
  RDF_FIRST: RDF + 'first',
  RDF_REST: RDF + 'rest',
  RDF_NIL: RDF + 'nil',
  RDF_TYPE: RDF + 'type',
  RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',
  RDF_XML_LITERAL: RDF + 'XMLLiteral',
  RDF_JSON_LITERAL: RDF + 'JSON',
  RDF_OBJECT: RDF + 'object',
  RDF_LANGSTRING: RDF + 'langString',
  XSD,
  XSD_BOOLEAN: XSD + 'boolean',
  XSD_DOUBLE: XSD + 'double',
  XSD_INTEGER: XSD + 'integer',
  XSD_STRING: XSD + 'string'
};
},{}],"node_modules/jsonld/lib/RequestQueue.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

module.exports = class RequestQueue {
  /**
   * Creates a simple queue for requesting documents.
   */
  constructor() {
    this._requests = {};
  }

  wrapLoader(loader) {
    const self = this;
    self._loader = loader;
    return function
      /* url */
    () {
      return self.add.apply(self, arguments);
    };
  }

  async add(url) {
    let promise = this._requests[url];

    if (promise) {
      // URL already queued, wait for it to load
      return Promise.resolve(promise);
    } // queue URL and load it


    promise = this._requests[url] = this._loader(url);

    try {
      return await promise;
    } finally {
      delete this._requests[url];
    }
  }

};
},{}],"node_modules/jsonld/lib/url.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const types = require('./types');

const api = {};
module.exports = api; // define URL parser
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
// with local jsonld.js modifications

api.parsers = {
  simple: {
    // RFC 3986 basic parts
    keys: ['href', 'scheme', 'authority', 'path', 'query', 'fragment'],

    /* eslint-disable-next-line max-len */
    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
  },
  full: {
    keys: ['href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password', 'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'],

    /* eslint-disable-next-line max-len */
    regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
};

api.parse = (str, parser) => {
  const parsed = {};
  const o = api.parsers[parser || 'full'];
  const m = o.regex.exec(str);
  let i = o.keys.length;

  while (i--) {
    parsed[o.keys[i]] = m[i] === undefined ? null : m[i];
  } // remove default ports in found in URLs


  if (parsed.scheme === 'https' && parsed.port === '443' || parsed.scheme === 'http' && parsed.port === '80') {
    parsed.href = parsed.href.replace(':' + parsed.port, '');
    parsed.authority = parsed.authority.replace(':' + parsed.port, '');
    parsed.port = null;
  }

  parsed.normalizedPath = api.removeDotSegments(parsed.path);
  return parsed;
};
/**
 * Prepends a base IRI to the given relative IRI.
 *
 * @param base the base IRI.
 * @param iri the relative IRI.
 *
 * @return the absolute IRI.
 */


api.prependBase = (base, iri) => {
  // skip IRI processing
  if (base === null) {
    return iri;
  } // already an absolute IRI


  if (api.isAbsolute(iri)) {
    return iri;
  } // parse base if it is a string


  if (!base || types.isString(base)) {
    base = api.parse(base || '');
  } // parse given IRI


  const rel = api.parse(iri); // per RFC3986 5.2.2

  const transform = {
    protocol: base.protocol || ''
  };

  if (rel.authority !== null) {
    transform.authority = rel.authority;
    transform.path = rel.path;
    transform.query = rel.query;
  } else {
    transform.authority = base.authority;

    if (rel.path === '') {
      transform.path = base.path;

      if (rel.query !== null) {
        transform.query = rel.query;
      } else {
        transform.query = base.query;
      }
    } else {
      if (rel.path.indexOf('/') === 0) {
        // IRI represents an absolute path
        transform.path = rel.path;
      } else {
        // merge paths
        let path = base.path; // append relative path to the end of the last directory from base

        path = path.substr(0, path.lastIndexOf('/') + 1);

        if ((path.length > 0 || base.authority) && path.substr(-1) !== '/') {
          path += '/';
        }

        path += rel.path;
        transform.path = path;
      }

      transform.query = rel.query;
    }
  }

  if (rel.path !== '') {
    // remove slashes and dots in path
    transform.path = api.removeDotSegments(transform.path);
  } // construct URL


  let rval = transform.protocol;

  if (transform.authority !== null) {
    rval += '//' + transform.authority;
  }

  rval += transform.path;

  if (transform.query !== null) {
    rval += '?' + transform.query;
  }

  if (rel.fragment !== null) {
    rval += '#' + rel.fragment;
  } // handle empty base


  if (rval === '') {
    rval = './';
  }

  return rval;
};
/**
 * Removes a base IRI from the given absolute IRI.
 *
 * @param base the base IRI.
 * @param iri the absolute IRI.
 *
 * @return the relative IRI if relative to base, otherwise the absolute IRI.
 */


api.removeBase = (base, iri) => {
  // skip IRI processing
  if (base === null) {
    return iri;
  }

  if (!base || types.isString(base)) {
    base = api.parse(base || '');
  } // establish base root


  let root = '';

  if (base.href !== '') {
    root += (base.protocol || '') + '//' + (base.authority || '');
  } else if (iri.indexOf('//')) {
    // support network-path reference with empty base
    root += '//';
  } // IRI not relative to base


  if (iri.indexOf(root) !== 0) {
    return iri;
  } // remove root from IRI and parse remainder


  const rel = api.parse(iri.substr(root.length)); // remove path segments that match (do not remove last segment unless there
  // is a hash or query)

  const baseSegments = base.normalizedPath.split('/');
  const iriSegments = rel.normalizedPath.split('/');
  const last = rel.fragment || rel.query ? 0 : 1;

  while (baseSegments.length > 0 && iriSegments.length > last) {
    if (baseSegments[0] !== iriSegments[0]) {
      break;
    }

    baseSegments.shift();
    iriSegments.shift();
  } // use '../' for each non-matching base segment


  let rval = '';

  if (baseSegments.length > 0) {
    // don't count the last segment (if it ends with '/' last path doesn't
    // count and if it doesn't end with '/' it isn't a path)
    baseSegments.pop();

    for (let i = 0; i < baseSegments.length; ++i) {
      rval += '../';
    }
  } // prepend remaining segments


  rval += iriSegments.join('/'); // add query and hash

  if (rel.query !== null) {
    rval += '?' + rel.query;
  }

  if (rel.fragment !== null) {
    rval += '#' + rel.fragment;
  } // handle empty base


  if (rval === '') {
    rval = './';
  }

  return rval;
};
/**
 * Removes dot segments from a URL path.
 *
 * @param path the path to remove dot segments from.
 */


api.removeDotSegments = path => {
  // RFC 3986 5.2.4 (reworked)
  // empty path shortcut
  if (path.length === 0) {
    return '';
  }

  const input = path.split('/');
  const output = [];

  while (input.length > 0) {
    const next = input.shift();
    const done = input.length === 0;

    if (next === '.') {
      if (done) {
        // ensure output has trailing /
        output.push('');
      }

      continue;
    }

    if (next === '..') {
      output.pop();

      if (done) {
        // ensure output has trailing /
        output.push('');
      }

      continue;
    }

    output.push(next);
  } // if path was absolute, ensure output has leading /


  if (path[0] === '/' && output.length > 0 && output[0] !== '') {
    output.unshift('');
  }

  if (output.length === 1 && output[0] === '') {
    return '/';
  }

  return output.join('/');
}; // TODO: time better isAbsolute/isRelative checks using full regexes:
// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html
// regex to check for absolute IRI (starting scheme and ':') or blank node IRI


const isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;
/**
 * Returns true if the given value is an absolute IRI or blank node IRI, false
 * if not.
 * Note: This weak check only checks for a correct starting scheme.
 *
 * @param v the value to check.
 *
 * @return true if the value is an absolute IRI, false if not.
 */

api.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);
/**
 * Returns true if the given value is a relative IRI, false if not.
 * Note: this is a weak check.
 *
 * @param v the value to check.
 *
 * @return true if the value is a relative IRI, false if not.
 */


api.isRelative = v => types.isString(v);
},{"./types":"node_modules/jsonld/lib/types.js"}],"node_modules/jsonld/lib/documentLoaders/xhr.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const {
  parseLinkHeader,
  buildHeaders
} = require('../util');

const {
  LINK_HEADER_CONTEXT
} = require('../constants');

const JsonLdError = require('../JsonLdError');

const RequestQueue = require('../RequestQueue');

const {
  prependBase
} = require('../url');

const REGEX_LINK_HEADER = /(^|(\r\n))link:/i;
/**
 * Creates a built-in XMLHttpRequest document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *          [xhr]: the XMLHttpRequest API to use.
 *
 * @return the XMLHttpRequest document loader.
 */

module.exports = function () {
  let {
    secure,
    headers = {},
    xhr
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    headers: {}
  };
  headers = buildHeaders(headers);
  const queue = new RequestQueue();
  return queue.wrapLoader(loader);

  async function loader(url) {
    if (url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      throw new JsonLdError('URL could not be dereferenced; only "http" and "https" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {
        code: 'loading document failed',
        url
      });
    }

    if (secure && url.indexOf('https') !== 0) {
      throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\'s scheme is not "https".', 'jsonld.InvalidUrl', {
        code: 'loading document failed',
        url
      });
    }

    let req;

    try {
      req = await _get(xhr, url, headers);
    } catch (e) {
      throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {
        code: 'loading document failed',
        url,
        cause: e
      });
    }

    if (req.status >= 400) {
      throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {
        code: 'loading document failed',
        url,
        httpStatusCode: req.status
      });
    }

    let doc = {
      contextUrl: null,
      documentUrl: url,
      document: req.response
    };
    let alternate = null; // handle Link Header (avoid unsafe header warning by existence testing)

    const contentType = req.getResponseHeader('Content-Type');
    let linkHeader;

    if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {
      linkHeader = req.getResponseHeader('Link');
    }

    if (linkHeader && contentType !== 'application/ld+json') {
      // only 1 related link header permitted
      const linkHeaders = parseLinkHeader(linkHeader);
      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];

      if (Array.isArray(linkedContext)) {
        throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {
          code: 'multiple context link headers',
          url
        });
      }

      if (linkedContext) {
        doc.contextUrl = linkedContext.target;
      } // "alternate" link header is a redirect


      alternate = linkHeaders['alternate'];

      if (alternate && alternate.type == 'application/ld+json' && !(contentType || '').match(/^application\/(\w*\+)?json$/)) {
        doc = await loader(prependBase(url, alternate.target));
      }
    }

    return doc;
  }
};

function _get(xhr, url, headers) {
  xhr = xhr || XMLHttpRequest;
  const req = new xhr();
  return new Promise((resolve, reject) => {
    req.onload = () => resolve(req);

    req.onerror = err => reject(err);

    req.open('GET', url, true);

    for (const k in headers) {
      req.setRequestHeader(k, headers[k]);
    }

    req.send();
  });
}
},{"../util":"node_modules/jsonld/lib/util.js","../constants":"node_modules/jsonld/lib/constants.js","../JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","../RequestQueue":"node_modules/jsonld/lib/RequestQueue.js","../url":"node_modules/jsonld/lib/url.js"}],"node_modules/jsonld/lib/platform-browser.js":[function(require,module,exports) {
/*
 * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const xhrLoader = require('./documentLoaders/xhr');

const api = {};
module.exports = api;
/**
 * Setup browser document loaders.
 *
 * @param jsonld the jsonld api.
 */

api.setupDocumentLoaders = function (jsonld) {
  if (typeof XMLHttpRequest !== 'undefined') {
    jsonld.documentLoaders.xhr = xhrLoader; // use xhr document loader by default

    jsonld.useDocumentLoader('xhr');
  }
};
/**
 * Setup browser globals.
 *
 * @param jsonld the jsonld api.
 */


api.setupGlobals = function (jsonld) {
  // setup browser global JsonLdProcessor
  if (typeof globalThis.JsonLdProcessor === 'undefined') {
    Object.defineProperty(globalThis, 'JsonLdProcessor', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: jsonld.JsonLdProcessor
    });
  }
};
},{"./documentLoaders/xhr":"node_modules/jsonld/lib/documentLoaders/xhr.js"}],"node_modules/yallist/iterator.js":[function(require,module,exports) {
'use strict'
module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = function* () {
    for (let walker = this.head; walker; walker = walker.next) {
      yield walker.value
    }
  }
}

},{}],"node_modules/yallist/yallist.js":[function(require,module,exports) {
'use strict'
module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) {
  var self = this
  if (!(self instanceof Yallist)) {
    self = new Yallist()
  }

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item)
    })
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i])
    }
  }

  return self
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next
  var prev = node.prev

  if (next) {
    next.prev = prev
  }

  if (prev) {
    prev.next = next
  }

  if (node === this.head) {
    this.head = next
  }
  if (node === this.tail) {
    this.tail = prev
  }

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null

  return next
}

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var head = this.head
  node.list = this
  node.next = head
  if (head) {
    head.prev = node
  }

  this.head = node
  if (!this.tail) {
    this.tail = node
  }
  this.length++
}

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) {
    tail.next = node
  }

  this.tail = node
  if (!this.head) {
    this.head = node
  }
  this.length++
}

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) {
    this.tail.next = null
  } else {
    this.head = null
  }
  this.length--
  return res
}

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value
  this.head = this.head.next
  if (this.head) {
    this.head.prev = null
  } else {
    this.tail = null
  }
  this.length--
  return res
}

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  }
}

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  }
}

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  }
  return res
}

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  }
  return res
}

Yallist.prototype.reduce = function (fn, initial) {
  var acc
  var walker = this.head
  if (arguments.length > 1) {
    acc = initial
  } else if (this.head) {
    walker = this.head.next
    acc = this.head.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i)
    walker = walker.next
  }

  return acc
}

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc
  var walker = this.tail
  if (arguments.length > 1) {
    acc = initial
  } else if (this.tail) {
    walker = this.tail.prev
    acc = this.tail.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  }

  return acc
}

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.next
  }
  return arr
}

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.prev
  }
  return arr
}

Yallist.prototype.slice = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
  if (start > this.length) {
    start = this.length - 1
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next
  }

  var ret = []
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value)
    walker = this.removeNode(walker)
  }
  if (walker === null) {
    walker = this.tail
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev
  }

  for (var i = 0; i < nodes.length; i++) {
    walker = insert(this, walker, nodes[i])
  }
  return ret;
}

Yallist.prototype.reverse = function () {
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  }
  this.head = tail
  this.tail = head
  return this
}

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self)

  if (inserted.next === null) {
    self.tail = inserted
  }
  if (inserted.prev === null) {
    self.head = inserted
  }

  self.length++

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) {
    self.head = self.tail
  }
  self.length++
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) {
    self.tail = self.head
  }
  self.length++
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list
  this.value = value

  if (prev) {
    prev.next = this
    this.prev = prev
  } else {
    this.prev = null
  }

  if (next) {
    next.prev = this
    this.next = next
  } else {
    this.next = null
  }
}

try {
  // add if support for Symbol.iterator is present
  require('./iterator.js')(Yallist)
} catch (er) {}

},{"./iterator.js":"node_modules/yallist/iterator.js"}],"node_modules/lru-cache/index.js":[function(require,module,exports) {
'use strict'; // A linked list to keep track of recently-used-ness

const Yallist = require('yallist');

const MAX = Symbol('max');
const LENGTH = Symbol('length');
const LENGTH_CALCULATOR = Symbol('lengthCalculator');
const ALLOW_STALE = Symbol('allowStale');
const MAX_AGE = Symbol('maxAge');
const DISPOSE = Symbol('dispose');
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
const LRU_LIST = Symbol('lruList');
const CACHE = Symbol('cache');
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

const naiveLength = () => 1; // lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.


class LRUCache {
  constructor(options) {
    if (typeof options === 'number') options = {
      max: options
    };
    if (!options) options = {};
    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.

    const max = this[MAX] = options.max || Infinity;
    const lc = options.length || naiveLength;
    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
    this[ALLOW_STALE] = options.stale || false;
    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
    this[MAX_AGE] = options.maxAge || 0;
    this[DISPOSE] = options.dispose;
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    this.reset();
  } // resize the cache when the max changes.


  set max(mL) {
    if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
    this[MAX] = mL || Infinity;
    trim(this);
  }

  get max() {
    return this[MAX];
  }

  set allowStale(allowStale) {
    this[ALLOW_STALE] = !!allowStale;
  }

  get allowStale() {
    return this[ALLOW_STALE];
  }

  set maxAge(mA) {
    if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
    this[MAX_AGE] = mA;
    trim(this);
  }

  get maxAge() {
    return this[MAX_AGE];
  } // resize the cache when the lengthCalculator changes.


  set lengthCalculator(lC) {
    if (typeof lC !== 'function') lC = naiveLength;

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC;
      this[LENGTH] = 0;
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
        this[LENGTH] += hit.length;
      });
    }

    trim(this);
  }

  get lengthCalculator() {
    return this[LENGTH_CALCULATOR];
  }

  get length() {
    return this[LENGTH];
  }

  get itemCount() {
    return this[LRU_LIST].length;
  }

  rforEach(fn, thisp) {
    thisp = thisp || this;

    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev;
      forEachStep(this, fn, walker, thisp);
      walker = prev;
    }
  }

  forEach(fn, thisp) {
    thisp = thisp || this;

    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next;
      forEachStep(this, fn, walker, thisp);
      walker = next;
    }
  }

  keys() {
    return this[LRU_LIST].toArray().map(k => k.key);
  }

  values() {
    return this[LRU_LIST].toArray().map(k => k.value);
  }

  reset() {
    if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
    }

    this[CACHE] = new Map(); // hash of items by key

    this[LRU_LIST] = new Yallist(); // list of items in order of use recency

    this[LENGTH] = 0; // length of items in the list
  }

  dump() {
    return this[LRU_LIST].map(hit => isStale(this, hit) ? false : {
      k: hit.key,
      v: hit.value,
      e: hit.now + (hit.maxAge || 0)
    }).toArray().filter(h => h);
  }

  dumpLru() {
    return this[LRU_LIST];
  }

  set(key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE];
    if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
    const now = maxAge ? Date.now() : 0;
    const len = this[LENGTH_CALCULATOR](value, key);

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key));
        return false;
      }

      const node = this[CACHE].get(key);
      const item = node.value; // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking

      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
      }

      item.now = now;
      item.maxAge = maxAge;
      item.value = value;
      this[LENGTH] += len - item.length;
      item.length = len;
      this.get(key);
      trim(this);
      return true;
    }

    const hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.

    if (hit.length > this[MAX]) {
      if (this[DISPOSE]) this[DISPOSE](key, value);
      return false;
    }

    this[LENGTH] += hit.length;
    this[LRU_LIST].unshift(hit);
    this[CACHE].set(key, this[LRU_LIST].head);
    trim(this);
    return true;
  }

  has(key) {
    if (!this[CACHE].has(key)) return false;
    const hit = this[CACHE].get(key).value;
    return !isStale(this, hit);
  }

  get(key) {
    return get(this, key, true);
  }

  peek(key) {
    return get(this, key, false);
  }

  pop() {
    const node = this[LRU_LIST].tail;
    if (!node) return null;
    del(this, node);
    return node.value;
  }

  del(key) {
    del(this, this[CACHE].get(key));
  }

  load(arr) {
    // reset the cache
    this.reset();
    const now = Date.now(); // A previous serialized cache has the most recent items first

    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l];
      const expiresAt = hit.e || 0;
      if (expiresAt === 0) // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v);else {
        const maxAge = expiresAt - now; // dont add already expired items

        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge);
        }
      }
    }
  }

  prune() {
    this[CACHE].forEach((value, key) => get(this, key, false));
  }

}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key);

  if (node) {
    const hit = node.value;

    if (isStale(self, hit)) {
      del(self, node);
      if (!self[ALLOW_STALE]) return undefined;
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
        self[LRU_LIST].unshiftNode(node);
      }
    }

    return hit.value;
  }
};

const isStale = (self, hit) => {
  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
  const diff = Date.now() - hit.now;
  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};

const trim = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev;
      del(self, walker);
      walker = prev;
    }
  }
};

const del = (self, node) => {
  if (node) {
    const hit = node.value;
    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
    self[LENGTH] -= hit.length;
    self[CACHE].delete(hit.key);
    self[LRU_LIST].removeNode(node);
  }
};

class Entry {
  constructor(key, value, length, now, maxAge) {
    this.key = key;
    this.value = value;
    this.length = length;
    this.now = now;
    this.maxAge = maxAge || 0;
  }

}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value;

  if (isStale(self, hit)) {
    del(self, node);
    if (!self[ALLOW_STALE]) hit = undefined;
  }

  if (hit) fn.call(thisp, hit.value, hit.key, self);
};

module.exports = LRUCache;
},{"yallist":"node_modules/yallist/yallist.js"}],"node_modules/jsonld/lib/ResolvedContext.js":[function(require,module,exports) {
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const LRU = require('lru-cache');

const MAX_ACTIVE_CONTEXTS = 10;
module.exports = class ResolvedContext {
  /**
   * Creates a ResolvedContext.
   *
   * @param document the context document.
   */
  constructor(_ref) {
    let {
      document
    } = _ref;
    this.document = document; // TODO: enable customization of processed context cache
    // TODO: limit based on size of processed contexts vs. number of them

    this.cache = new LRU({
      max: MAX_ACTIVE_CONTEXTS
    });
  }

  getProcessed(activeCtx) {
    return this.cache.get(activeCtx);
  }

  setProcessed(activeCtx, processedCtx) {
    this.cache.set(activeCtx, processedCtx);
  }

};
},{"lru-cache":"node_modules/lru-cache/index.js"}],"node_modules/jsonld/lib/ContextResolver.js":[function(require,module,exports) {
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString
} = require('./types');

const {
  asArray: _asArray
} = require('./util');

const {
  prependBase
} = require('./url');

const JsonLdError = require('./JsonLdError');

const ResolvedContext = require('./ResolvedContext');

const MAX_CONTEXT_URLS = 10;
module.exports = class ContextResolver {
  /**
   * Creates a ContextResolver.
   *
   * @param sharedCache a shared LRU cache with `get` and `set` APIs.
   */
  constructor(_ref) {
    let {
      sharedCache
    } = _ref;
    this.perOpCache = new Map();
    this.sharedCache = sharedCache;
  }

  async resolve(_ref2) {
    let {
      activeCtx,
      context,
      documentLoader,
      base,
      cycles = new Set()
    } = _ref2;

    // process `@context`
    if (context && _isObject(context) && context['@context']) {
      context = context['@context'];
    } // context is one or more contexts


    context = _asArray(context); // resolve each context in the array

    const allResolved = [];

    for (const ctx of context) {
      if (_isString(ctx)) {
        // see if `ctx` has been resolved before...
        let resolved = this._get(ctx);

        if (!resolved) {
          // not resolved yet, resolve
          resolved = await this._resolveRemoteContext({
            activeCtx,
            url: ctx,
            documentLoader,
            base,
            cycles
          });
        } // add to output and continue


        if (_isArray(resolved)) {
          allResolved.push(...resolved);
        } else {
          allResolved.push(resolved);
        }

        continue;
      }

      if (ctx === null) {
        // handle `null` context, nothing to cache
        allResolved.push(new ResolvedContext({
          document: null
        }));
        continue;
      }

      if (!_isObject(ctx)) {
        _throwInvalidLocalContext(context);
      } // context is an object, get/create `ResolvedContext` for it


      const key = JSON.stringify(ctx);

      let resolved = this._get(key);

      if (!resolved) {
        // create a new static `ResolvedContext` and cache it
        resolved = new ResolvedContext({
          document: ctx
        });

        this._cacheResolvedContext({
          key,
          resolved,
          tag: 'static'
        });
      }

      allResolved.push(resolved);
    }

    return allResolved;
  }

  _get(key) {
    // get key from per operation cache; no `tag` is used with this cache so
    // any retrieved context will always be the same during a single operation
    let resolved = this.perOpCache.get(key);

    if (!resolved) {
      // see if the shared cache has a `static` entry for this URL
      const tagMap = this.sharedCache.get(key);

      if (tagMap) {
        resolved = tagMap.get('static');

        if (resolved) {
          this.perOpCache.set(key, resolved);
        }
      }
    }

    return resolved;
  }

  _cacheResolvedContext(_ref3) {
    let {
      key,
      resolved,
      tag
    } = _ref3;
    this.perOpCache.set(key, resolved);

    if (tag !== undefined) {
      let tagMap = this.sharedCache.get(key);

      if (!tagMap) {
        tagMap = new Map();
        this.sharedCache.set(key, tagMap);
      }

      tagMap.set(tag, resolved);
    }

    return resolved;
  }

  async _resolveRemoteContext(_ref4) {
    let {
      activeCtx,
      url,
      documentLoader,
      base,
      cycles
    } = _ref4;
    // resolve relative URL and fetch context
    url = prependBase(base, url);
    const {
      context,
      remoteDoc
    } = await this._fetchContext({
      activeCtx,
      url,
      documentLoader,
      cycles
    }); // update base according to remote document and resolve any relative URLs

    base = remoteDoc.documentUrl || url;

    _resolveContextUrls({
      context,
      base
    }); // resolve, cache, and return context


    const resolved = await this.resolve({
      activeCtx,
      context,
      documentLoader,
      base,
      cycles
    });

    this._cacheResolvedContext({
      key: url,
      resolved,
      tag: remoteDoc.tag
    });

    return resolved;
  }

  async _fetchContext(_ref5) {
    let {
      activeCtx,
      url,
      documentLoader,
      cycles
    } = _ref5;

    // check for max context URLs fetched during a resolve operation
    if (cycles.size > MAX_CONTEXT_URLS) {
      throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {
        code: activeCtx.processingMode === 'json-ld-1.0' ? 'loading remote context failed' : 'context overflow',
        max: MAX_CONTEXT_URLS
      });
    } // check for context URL cycle
    // shortcut to avoid extra work that would eventually hit the max above


    if (cycles.has(url)) {
      throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {
        code: activeCtx.processingMode === 'json-ld-1.0' ? 'recursive context inclusion' : 'context overflow',
        url
      });
    } // track cycles


    cycles.add(url);
    let context;
    let remoteDoc;

    try {
      remoteDoc = await documentLoader(url);
      context = remoteDoc.document || null; // parse string context as JSON

      if (_isString(context)) {
        context = JSON.parse(context);
      }
    } catch (e) {
      throw new JsonLdError('Dereferencing a URL did not result in a valid JSON-LD object. ' + 'Possible causes are an inaccessible URL perhaps due to ' + 'a same-origin policy (ensure the server uses CORS if you are ' + 'using client-side JavaScript), too many redirects, a ' + 'non-JSON response, or more than one HTTP Link Header was ' + 'provided for a remote context.', 'jsonld.InvalidUrl', {
        code: 'loading remote context failed',
        url,
        cause: e
      });
    } // ensure ctx is an object


    if (!_isObject(context)) {
      throw new JsonLdError('Dereferencing a URL did not result in a JSON object. The ' + 'response was valid JSON, but it was not a JSON object.', 'jsonld.InvalidUrl', {
        code: 'invalid remote context',
        url
      });
    } // use empty context if no @context key is present


    if (!('@context' in context)) {
      context = {
        '@context': {}
      };
    } else {
      context = {
        '@context': context['@context']
      };
    } // append @context URL to context if given


    if (remoteDoc.contextUrl) {
      if (!_isArray(context['@context'])) {
        context['@context'] = [context['@context']];
      }

      context['@context'].push(remoteDoc.contextUrl);
    }

    return {
      context,
      remoteDoc
    };
  }

};

function _throwInvalidLocalContext(ctx) {
  throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {
    code: 'invalid local context',
    context: ctx
  });
}
/**
 * Resolve all relative `@context` URLs in the given context by inline
 * replacing them with absolute URLs.
 *
 * @param context the context.
 * @param base the base IRI to use to resolve relative IRIs.
 */


function _resolveContextUrls(_ref6) {
  let {
    context,
    base
  } = _ref6;

  if (!context) {
    return;
  }

  const ctx = context['@context'];

  if (_isString(ctx)) {
    context['@context'] = prependBase(base, ctx);
    return;
  }

  if (_isArray(ctx)) {
    for (let i = 0; i < ctx.length; ++i) {
      const element = ctx[i];

      if (_isString(element)) {
        ctx[i] = prependBase(base, element);
        continue;
      }

      if (_isObject(element)) {
        _resolveContextUrls({
          context: {
            '@context': element
          },
          base
        });
      }
    }

    return;
  }

  if (!_isObject(ctx)) {
    // no @context URLs can be found in non-object
    return;
  } // ctx is an object, resolve any context URLs in terms


  for (const term in ctx) {
    _resolveContextUrls({
      context: ctx[term],
      base
    });
  }
}
},{"./types":"node_modules/jsonld/lib/types.js","./util":"node_modules/jsonld/lib/util.js","./url":"node_modules/jsonld/lib/url.js","./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","./ResolvedContext":"node_modules/jsonld/lib/ResolvedContext.js"}],"node_modules/jsonld/lib/NQuads.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict'; // TODO: move `NQuads` to its own package

module.exports = require('rdf-canonize').NQuads;
},{"rdf-canonize":"node_modules/rdf-canonize/index.js"}],"node_modules/jsonld/lib/context.js":[function(require,module,exports) {
var process = require("process");
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const util = require('./util');

const JsonLdError = require('./JsonLdError');

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
  isUndefined: _isUndefined
} = require('./types');

const {
  isAbsolute: _isAbsoluteIri,
  isRelative: _isRelativeIri,
  prependBase
} = require('./url');

const {
  asArray: _asArray,
  compareShortestLeast: _compareShortestLeast
} = require('./util');

const INITIAL_CONTEXT_CACHE = new Map();
const INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;
const KEYWORD_PATTERN = /^@[a-zA-Z]+$/;
const api = {};
module.exports = api;
/**
 * Processes a local context and returns a new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param options the context processing options.
 * @param propagate `true` if `false`, retains any previously defined term,
 *   which can be rolled back when the descending into a new node object.
 * @param overrideProtected `false` allows protected terms to be modified.
 *
 * @return a Promise that resolves to the new active context.
 */

api.process = async _ref => {
  let {
    activeCtx,
    localCtx,
    options,
    propagate = true,
    overrideProtected = false,
    cycles = new Set()
  } = _ref;

  // normalize local context to an array of @context objects
  if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {
    localCtx = localCtx['@context'];
  }

  const ctxs = _asArray(localCtx); // no contexts in array, return current active context w/o changes


  if (ctxs.length === 0) {
    return activeCtx;
  } // resolve contexts


  const resolved = await options.contextResolver.resolve({
    activeCtx,
    context: localCtx,
    documentLoader: options.documentLoader,
    base: options.base
  }); // override propagate if first resolved context has `@propagate`

  if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') {
    // retrieve early, error checking done later
    propagate = resolved[0].document['@propagate'];
  } // process each context in order, update active context
  // on each iteration to ensure proper caching


  let rval = activeCtx; // track the previous context
  // if not propagating, make sure rval has a previous context

  if (!propagate && !rval.previousContext) {
    // clone `rval` context before updating
    rval = rval.clone();
    rval.previousContext = activeCtx;
  }

  for (const resolvedContext of resolved) {
    let {
      document: ctx
    } = resolvedContext; // update active context to one computed from last iteration

    activeCtx = rval; // reset to initial context

    if (ctx === null) {
      // We can't nullify if there are protected terms and we're
      // not allowing overrides (e.g. processing a property term scoped context)
      if (!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {
        const protectedMode = options && options.protectedMode || 'error';

        if (protectedMode === 'error') {
          throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {
            code: 'invalid context nullification'
          });
        } else if (protectedMode === 'warn') {
          // FIXME: remove logging and use a handler
          console.warn('WARNING: invalid context nullification'); // get processed context from cache if available

          const processed = resolvedContext.getProcessed(activeCtx);

          if (processed) {
            rval = activeCtx = processed;
            continue;
          }

          const oldActiveCtx = activeCtx; // copy all protected term definitions to fresh initial context

          rval = activeCtx = api.getInitialContext(options).clone();

          for (const [term, _protected] of Object.entries(oldActiveCtx.protected)) {
            if (_protected) {
              activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);
            }
          }

          activeCtx.protected = util.clone(oldActiveCtx.protected); // cache processed result

          resolvedContext.setProcessed(oldActiveCtx, rval);
          continue;
        }

        throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {
          code: 'invalid protected mode',
          context: localCtx,
          protectedMode
        });
      }

      rval = activeCtx = api.getInitialContext(options).clone();
      continue;
    } // get processed context from cache if available


    const processed = resolvedContext.getProcessed(activeCtx);

    if (processed) {
      rval = activeCtx = processed;
      continue;
    } // dereference @context key if present


    if (_isObject(ctx) && '@context' in ctx) {
      ctx = ctx['@context'];
    } // context must be an object by now, all URLs retrieved before this call


    if (!_isObject(ctx)) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {
        code: 'invalid local context',
        context: ctx
      });
    } // TODO: there is likely a `previousContext` cloning optimization that
    // could be applied here (no need to copy it under certain conditions)
    // clone context before updating it


    rval = rval.clone(); // define context mappings for keys in local context

    const defined = new Map(); // handle @version

    if ('@version' in ctx) {
      if (ctx['@version'] !== 1.1) {
        throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {
          code: 'invalid @version value',
          context: ctx
        });
      }

      if (activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {
          code: 'processing mode conflict',
          context: ctx
        });
      }

      rval.processingMode = 'json-ld-1.1';
      rval['@version'] = ctx['@version'];
      defined.set('@version', true);
    } // if not set explicitly, set processingMode to "json-ld-1.1"


    rval.processingMode = rval.processingMode || activeCtx.processingMode; // handle @base

    if ('@base' in ctx) {
      let base = ctx['@base'];

      if (base === null || _isAbsoluteIri(base)) {// no action
      } else if (_isRelativeIri(base)) {
        base = prependBase(rval['@base'], base);
      } else {
        throw new JsonLdError('Invalid JSON-LD syntax; the value of "@base" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {
          code: 'invalid base IRI',
          context: ctx
        });
      }

      rval['@base'] = base;
      defined.set('@base', true);
    } // handle @vocab


    if ('@vocab' in ctx) {
      const value = ctx['@vocab'];

      if (value === null) {
        delete rval['@vocab'];
      } else if (!_isString(value)) {
        throw new JsonLdError('Invalid JSON-LD syntax; the value of "@vocab" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {
          code: 'invalid vocab mapping',
          context: ctx
        });
      } else if (!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {
        throw new JsonLdError('Invalid JSON-LD syntax; the value of "@vocab" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {
          code: 'invalid vocab mapping',
          context: ctx
        });
      } else {
        rval['@vocab'] = _expandIri(rval, value, {
          vocab: true,
          base: true
        }, undefined, undefined, options);
      }

      defined.set('@vocab', true);
    } // handle @language


    if ('@language' in ctx) {
      const value = ctx['@language'];

      if (value === null) {
        delete rval['@language'];
      } else if (!_isString(value)) {
        throw new JsonLdError('Invalid JSON-LD syntax; the value of "@language" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {
          code: 'invalid default language',
          context: ctx
        });
      } else {
        rval['@language'] = value.toLowerCase();
      }

      defined.set('@language', true);
    } // handle @direction


    if ('@direction' in ctx) {
      const value = ctx['@direction'];

      if (activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError('Invalid JSON-LD syntax; @direction not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
          code: 'invalid context member',
          context: ctx
        });
      }

      if (value === null) {
        delete rval['@direction'];
      } else if (value !== 'ltr' && value !== 'rtl') {
        throw new JsonLdError('Invalid JSON-LD syntax; the value of "@direction" in a ' + '@context must be null, "ltr", or "rtl".', 'jsonld.SyntaxError', {
          code: 'invalid base direction',
          context: ctx
        });
      } else {
        rval['@direction'] = value;
      }

      defined.set('@direction', true);
    } // handle @propagate
    // note: we've already extracted it, here we just do error checking


    if ('@propagate' in ctx) {
      const value = ctx['@propagate'];

      if (activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
          code: 'invalid context entry',
          context: ctx
        });
      }

      if (typeof value !== 'boolean') {
        throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {
          code: 'invalid @propagate value',
          context: localCtx
        });
      }

      defined.set('@propagate', true);
    } // handle @import


    if ('@import' in ctx) {
      const value = ctx['@import'];

      if (activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError('Invalid JSON-LD syntax; @import not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {
          code: 'invalid context entry',
          context: ctx
        });
      }

      if (!_isString(value)) {
        throw new JsonLdError('Invalid JSON-LD syntax; @import must be a string.', 'jsonld.SyntaxError', {
          code: 'invalid @import value',
          context: localCtx
        });
      } // resolve contexts


      const resolvedImport = await options.contextResolver.resolve({
        activeCtx,
        context: value,
        documentLoader: options.documentLoader,
        base: options.base
      });

      if (resolvedImport.length !== 1) {
        throw new JsonLdError('Invalid JSON-LD syntax; @import must reference a single context.', 'jsonld.SyntaxError', {
          code: 'invalid remote context',
          context: localCtx
        });
      }

      const processedImport = resolvedImport[0].getProcessed(activeCtx);

      if (processedImport) {
        // Note: if the same context were used in this active context
        // as a reference context, then processed_input might not
        // be a dict.
        ctx = processedImport;
      } else {
        const importCtx = resolvedImport[0].document;

        if ('@import' in importCtx) {
          throw new JsonLdError('Invalid JSON-LD syntax: ' + 'imported context must not include @import.', 'jsonld.SyntaxError', {
            code: 'invalid context entry',
            context: localCtx
          });
        } // merge ctx into importCtx and replace rval with the result


        for (const key in importCtx) {
          if (!ctx.hasOwnProperty(key)) {
            ctx[key] = importCtx[key];
          }
        } // Note: this could potenially conflict if the import
        // were used in the same active context as a referenced
        // context and an import. In this case, we
        // could override the cached result, but seems unlikely.


        resolvedImport[0].setProcessed(activeCtx, ctx);
      }

      defined.set('@import', true);
    } // handle @protected; determine whether this sub-context is declaring
    // all its terms to be "protected" (exceptions can be made on a
    // per-definition basis)


    defined.set('@protected', ctx['@protected'] || false); // process all other keys

    for (const key in ctx) {
      api.createTermDefinition({
        activeCtx: rval,
        localCtx: ctx,
        term: key,
        defined,
        options,
        overrideProtected
      });

      if (_isObject(ctx[key]) && '@context' in ctx[key]) {
        const keyCtx = ctx[key]['@context'];
        let process = true;

        if (_isString(keyCtx)) {
          const url = prependBase(options.base, keyCtx); // track processed contexts to avoid scoped context recursion

          if (cycles.has(url)) {
            process = false;
          } else {
            cycles.add(url);
          }
        } // parse context to validate


        if (process) {
          try {
            await api.process({
              activeCtx: rval.clone(),
              localCtx: ctx[key]['@context'],
              overrideProtected: true,
              options,
              cycles
            });
          } catch (e) {
            throw new JsonLdError('Invalid JSON-LD syntax; invalid scoped context.', 'jsonld.SyntaxError', {
              code: 'invalid scoped context',
              context: ctx[key]['@context'],
              term: key
            });
          }
        }
      }
    } // cache processed result


    resolvedContext.setProcessed(activeCtx, rval);
  }

  return rval;
};
/**
 * Creates a term definition during context processing.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context being processed.
 * @param term the term in the local context to define the mapping for.
 * @param defined a map of defining/defined keys to detect cycles and prevent
 *          double definitions.
 * @param {Object} [options] - creation options.
 * @param {string} [options.protectedMode="error"] - "error" to throw error
 *   on `@protected` constraint violation, "warn" to allow violations and
 *   signal a warning.
 * @param overrideProtected `false` allows protected terms to be modified.
 */


api.createTermDefinition = _ref2 => {
  let {
    activeCtx,
    localCtx,
    term,
    defined,
    options,
    overrideProtected = false
  } = _ref2;

  if (defined.has(term)) {
    // term already defined
    if (defined.get(term)) {
      return;
    } // cycle detected


    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {
      code: 'cyclic IRI mapping',
      context: localCtx,
      term
    });
  } // now defining term


  defined.set(term, false); // get context term value

  let value;

  if (localCtx.hasOwnProperty(term)) {
    value = localCtx[term];
  }

  if (term === '@type' && _isObject(value) && (value['@container'] || '@set') === '@set' && api.processingMode(activeCtx, 1.1)) {
    const validKeys = ['@container', '@id', '@protected'];
    const keys = Object.keys(value);

    if (keys.length === 0 || keys.some(k => !validKeys.includes(k))) {
      throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {
        code: 'keyword redefinition',
        context: localCtx,
        term
      });
    }
  } else if (api.isKeyword(term)) {
    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {
      code: 'keyword redefinition',
      context: localCtx,
      term
    });
  } else if (term.match(KEYWORD_PATTERN)) {
    // FIXME: remove logging and use a handler
    console.warn('WARNING: terms beginning with "@" are reserved' + ' for future use and ignored', {
      term
    });
    return;
  } else if (term === '') {
    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {
      code: 'invalid term definition',
      context: localCtx
    });
  } // keep reference to previous mapping for potential `@protected` check


  const previousMapping = activeCtx.mappings.get(term); // remove old mapping

  if (activeCtx.mappings.has(term)) {
    activeCtx.mappings.delete(term);
  } // convert short-hand value to object w/@id


  let simpleTerm = false;

  if (_isString(value) || value === null) {
    simpleTerm = true;
    value = {
      '@id': value
    };
  }

  if (!_isObject(value)) {
    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {
      code: 'invalid term definition',
      context: localCtx
    });
  } // create new mapping


  const mapping = {};
  activeCtx.mappings.set(term, mapping);
  mapping.reverse = false; // make sure term definition only has expected keywords

  const validKeys = ['@container', '@id', '@language', '@reverse', '@type']; // JSON-LD 1.1 support

  if (api.processingMode(activeCtx, 1.1)) {
    validKeys.push('@context', '@direction', '@index', '@nest', '@prefix', '@protected');
  }

  for (const kw in value) {
    if (!validKeys.includes(kw)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }
  } // always compute whether term has a colon as an optimization for
  // _compactIri


  const colon = term.indexOf(':');
  mapping._termHasColon = colon > 0;

  if ('@reverse' in value) {
    if ('@id' in value) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {
        code: 'invalid reverse property',
        context: localCtx
      });
    }

    if ('@nest' in value) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {
        code: 'invalid reverse property',
        context: localCtx
      });
    }

    const reverse = value['@reverse'];

    if (!_isString(reverse)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {
        code: 'invalid IRI mapping',
        context: localCtx
      });
    }

    if (!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' + ' for future use and ignored', {
        reverse
      });

      if (previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings.delete(term);
      }

      return;
    } // expand and add @id mapping


    const id = _expandIri(activeCtx, reverse, {
      vocab: true,
      base: false
    }, localCtx, defined, options);

    if (!_isAbsoluteIri(id)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {
        code: 'invalid IRI mapping',
        context: localCtx
      });
    }

    mapping['@id'] = id;
    mapping.reverse = true;
  } else if ('@id' in value) {
    let id = value['@id'];

    if (id && !_isString(id)) {
      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {
        code: 'invalid IRI mapping',
        context: localCtx
      });
    }

    if (id === null) {
      // reserve a null term, which may be protected
      mapping['@id'] = null;
    } else if (!api.isKeyword(id) && id.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' + ' for future use and ignored', {
        id
      });

      if (previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings.delete(term);
      }

      return;
    } else if (id !== term) {
      // expand and add @id mapping
      id = _expandIri(activeCtx, id, {
        vocab: true,
        base: false
      }, localCtx, defined, options);

      if (!_isAbsoluteIri(id) && !api.isKeyword(id)) {
        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {
          code: 'invalid IRI mapping',
          context: localCtx
        });
      } // if term has the form of an IRI it must map the same


      if (term.match(/(?::[^:])|\//)) {
        const termDefined = new Map(defined).set(term, true);

        const termIri = _expandIri(activeCtx, term, {
          vocab: true,
          base: false
        }, localCtx, termDefined, options);

        if (termIri !== id) {
          throw new JsonLdError('Invalid JSON-LD syntax; term in form of IRI must ' + 'expand to definition.', 'jsonld.SyntaxError', {
            code: 'invalid IRI mapping',
            context: localCtx
          });
        }
      }

      mapping['@id'] = id; // indicate if this term may be used as a compact IRI prefix

      mapping._prefix = simpleTerm && !mapping._termHasColon && id.match(/[:\/\?#\[\]@]$/);
    }
  }

  if (!('@id' in mapping)) {
    // see if the term has a prefix
    if (mapping._termHasColon) {
      const prefix = term.substr(0, colon);

      if (localCtx.hasOwnProperty(prefix)) {
        // define parent prefix
        api.createTermDefinition({
          activeCtx,
          localCtx,
          term: prefix,
          defined,
          options
        });
      }

      if (activeCtx.mappings.has(prefix)) {
        // set @id based on prefix parent
        const suffix = term.substr(colon + 1);
        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;
      } else {
        // term is an absolute IRI
        mapping['@id'] = term;
      }
    } else if (term === '@type') {
      // Special case, were we've previously determined that container is @set
      mapping['@id'] = term;
    } else {
      // non-IRIs *must* define @ids if @vocab is not available
      if (!('@vocab' in activeCtx)) {
        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {
          code: 'invalid IRI mapping',
          context: localCtx,
          term
        });
      } // prepend vocab to term


      mapping['@id'] = activeCtx['@vocab'] + term;
    }
  } // Handle term protection


  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {
    activeCtx.protected[term] = true;
    mapping.protected = true;
  } // IRI mapping now defined


  defined.set(term, true);

  if ('@type' in value) {
    let type = value['@type'];

    if (!_isString(type)) {
      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {
        code: 'invalid type mapping',
        context: localCtx
      });
    }

    if (type === '@json' || type === '@none') {
      if (api.processingMode(activeCtx, 1.0)) {
        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + `"${type}" in JSON-LD 1.0 mode.`, 'jsonld.SyntaxError', {
          code: 'invalid type mapping',
          context: localCtx
        });
      }
    } else if (type !== '@id' && type !== '@vocab') {
      // expand @type to full IRI
      type = _expandIri(activeCtx, type, {
        vocab: true,
        base: false
      }, localCtx, defined, options);

      if (!_isAbsoluteIri(type)) {
        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {
          code: 'invalid type mapping',
          context: localCtx
        });
      }

      if (type.indexOf('_:') === 0) {
        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {
          code: 'invalid type mapping',
          context: localCtx
        });
      }
    } // add @type to mapping


    mapping['@type'] = type;
  }

  if ('@container' in value) {
    // normalize container to an array form
    const container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];
    const validContainers = ['@list', '@set', '@index', '@language'];
    let isValid = true;
    const hasSet = container.includes('@set'); // JSON-LD 1.1 support

    if (api.processingMode(activeCtx, 1.1)) {
      validContainers.push('@graph', '@id', '@type'); // check container length

      if (container.includes('@list')) {
        if (container.length !== 1) {
          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {
            code: 'invalid container mapping',
            context: localCtx
          });
        }
      } else if (container.includes('@graph')) {
        if (container.some(key => key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set')) {
          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {
            code: 'invalid container mapping',
            context: localCtx
          });
        }
      } else {
        // otherwise, container may also include @set
        isValid &= container.length <= (hasSet ? 2 : 1);
      }

      if (container.includes('@type')) {
        // If mapping does not have an @type,
        // set it to @id
        mapping['@type'] = mapping['@type'] || '@id'; // type mapping must be either @id or @vocab

        if (!['@id', '@vocab'].includes(mapping['@type'])) {
          throw new JsonLdError('Invalid JSON-LD syntax; container: @type requires @type to be ' + '@id or @vocab.', 'jsonld.SyntaxError', {
            code: 'invalid type mapping',
            context: localCtx
          });
        }
      }
    } else {
      // in JSON-LD 1.0, container must not be an array (it must be a string,
      // which is one of the validContainers)
      isValid &= !_isArray(value['@container']); // check container length

      isValid &= container.length <= 1;
    } // check against valid containers


    isValid &= container.every(c => validContainers.includes(c)); // @set not allowed with @list

    isValid &= !(hasSet && container.includes('@list'));

    if (!isValid) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {
        code: 'invalid container mapping',
        context: localCtx
      });
    }

    if (mapping.reverse && !container.every(c => ['@index', '@set'].includes(c))) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {
        code: 'invalid reverse property',
        context: localCtx
      });
    } // add @container to mapping


    mapping['@container'] = container;
  } // property indexing


  if ('@index' in value) {
    if (!('@container' in value) || !mapping['@container'].includes('@index')) {
      throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {
      throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    mapping['@index'] = value['@index'];
  } // scoped contexts


  if ('@context' in value) {
    mapping['@context'] = value['@context'];
  }

  if ('@language' in value && !('@type' in value)) {
    let language = value['@language'];

    if (language !== null && !_isString(language)) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {
        code: 'invalid language mapping',
        context: localCtx
      });
    } // add @language to mapping


    if (language !== null) {
      language = language.toLowerCase();
    }

    mapping['@language'] = language;
  } // term may be used as a prefix


  if ('@prefix' in value) {
    if (term.match(/:|\//)) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    if (api.isKeyword(mapping['@id'])) {
      throw new JsonLdError('Invalid JSON-LD syntax; keywords may not be used as prefixes', 'jsonld.SyntaxError', {
        code: 'invalid term definition',
        context: localCtx
      });
    }

    if (typeof value['@prefix'] === 'boolean') {
      mapping._prefix = value['@prefix'] === true;
    } else {
      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {
        code: 'invalid @prefix value',
        context: localCtx
      });
    }
  }

  if ('@direction' in value) {
    const direction = value['@direction'];

    if (direction !== null && direction !== 'ltr' && direction !== 'rtl') {
      throw new JsonLdError('Invalid JSON-LD syntax; @direction value must be ' + 'null, "ltr", or "rtl".', 'jsonld.SyntaxError', {
        code: 'invalid base direction',
        context: localCtx
      });
    }

    mapping['@direction'] = direction;
  }

  if ('@nest' in value) {
    const nest = value['@nest'];

    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {
      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {
        code: 'invalid @nest value',
        context: localCtx
      });
    }

    mapping['@nest'] = nest;
  } // disallow aliasing @context and @preserve


  const id = mapping['@id'];

  if (id === '@context' || id === '@preserve') {
    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {
      code: 'invalid keyword alias',
      context: localCtx
    });
  } // Check for overriding protected terms


  if (previousMapping && previousMapping.protected && !overrideProtected) {
    // force new term to continue to be protected and see if the mappings would
    // be equal
    activeCtx.protected[term] = true;
    mapping.protected = true;

    if (!_deepCompare(previousMapping, mapping)) {
      const protectedMode = options && options.protectedMode || 'error';

      if (protectedMode === 'error') {
        throw new JsonLdError(`Invalid JSON-LD syntax; tried to redefine "${term}" which is a ` + 'protected term.', 'jsonld.SyntaxError', {
          code: 'protected term redefinition',
          context: localCtx,
          term
        });
      } else if (protectedMode === 'warn') {
        // FIXME: remove logging and use a handler
        console.warn('WARNING: protected term redefinition', {
          term
        });
        return;
      }

      throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {
        code: 'invalid protected mode',
        context: localCtx,
        term,
        protectedMode
      });
    }
  }
};
/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */


api.expandIri = (activeCtx, value, relativeTo, options) => {
  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);
};
/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param localCtx the local context being processed (only given if called
 *          during context processing).
 * @param defined a map for tracking cycles in context definitions (only given
 *          if called during context processing).
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */


function _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {
  // already expanded
  if (value === null || !_isString(value) || api.isKeyword(value)) {
    return value;
  } // ignore non-keyword things that look like a keyword


  if (value.match(KEYWORD_PATTERN)) {
    return null;
  } // define term dependency if not defined


  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {
    api.createTermDefinition({
      activeCtx,
      localCtx,
      term: value,
      defined,
      options
    });
  }

  relativeTo = relativeTo || {};

  if (relativeTo.vocab) {
    const mapping = activeCtx.mappings.get(value); // value is explicitly ignored with a null mapping

    if (mapping === null) {
      return null;
    }

    if (_isObject(mapping) && '@id' in mapping) {
      // value is a term
      return mapping['@id'];
    }
  } // split value into prefix:suffix


  const colon = value.indexOf(':');

  if (colon > 0) {
    const prefix = value.substr(0, colon);
    const suffix = value.substr(colon + 1); // do not expand blank nodes (prefix of '_') or already-absolute
    // IRIs (suffix of '//')

    if (prefix === '_' || suffix.indexOf('//') === 0) {
      return value;
    } // prefix dependency not defined, define it


    if (localCtx && localCtx.hasOwnProperty(prefix)) {
      api.createTermDefinition({
        activeCtx,
        localCtx,
        term: prefix,
        defined,
        options
      });
    } // use mapping if prefix is defined


    const mapping = activeCtx.mappings.get(prefix);

    if (mapping && mapping._prefix) {
      return mapping['@id'] + suffix;
    } // already absolute IRI


    if (_isAbsoluteIri(value)) {
      return value;
    }
  } // prepend vocab


  if (relativeTo.vocab && '@vocab' in activeCtx) {
    return activeCtx['@vocab'] + value;
  } // prepend base


  if (relativeTo.base && '@base' in activeCtx) {
    if (activeCtx['@base']) {
      // The null case preserves value as potentially relative
      return prependBase(prependBase(options.base, activeCtx['@base']), value);
    }
  } else if (relativeTo.base) {
    return prependBase(options.base, value);
  }

  return value;
}
/**
 * Gets the initial context.
 *
 * @param options the options to use:
 *          [base] the document base IRI.
 *
 * @return the initial context.
 */


api.getInitialContext = options => {
  const key = JSON.stringify({
    processingMode: options.processingMode
  });
  const cached = INITIAL_CONTEXT_CACHE.get(key);

  if (cached) {
    return cached;
  }

  const initialContext = {
    processingMode: options.processingMode,
    mappings: new Map(),
    inverse: null,
    getInverse: _createInverseContext,
    clone: _cloneActiveContext,
    revertToPreviousContext: _revertToPreviousContext,
    protected: {}
  }; // TODO: consider using LRU cache instead

  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {
    // clear whole cache -- assumes scenario where the cache fills means
    // the cache isn't being used very efficiently anyway
    INITIAL_CONTEXT_CACHE.clear();
  }

  INITIAL_CONTEXT_CACHE.set(key, initialContext);
  return initialContext;
  /**
   * Generates an inverse context for use in the compaction algorithm, if
   * not already generated for the given active context.
   *
   * @return the inverse context.
   */

  function _createInverseContext() {
    const activeCtx = this; // lazily create inverse

    if (activeCtx.inverse) {
      return activeCtx.inverse;
    }

    const inverse = activeCtx.inverse = {}; // variables for building fast CURIE map

    const fastCurieMap = activeCtx.fastCurieMap = {};
    const irisToTerms = {}; // handle default language

    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase(); // handle default direction

    const defaultDirection = activeCtx['@direction']; // create term selections for each mapping in the context, ordered by
    // shortest and then lexicographically least

    const mappings = activeCtx.mappings;
    const terms = [...mappings.keys()].sort(_compareShortestLeast);

    for (const term of terms) {
      const mapping = mappings.get(term);

      if (mapping === null) {
        continue;
      }

      let container = mapping['@container'] || '@none';
      container = [].concat(container).sort().join('');

      if (mapping['@id'] === null) {
        continue;
      } // iterate over every IRI in the mapping


      const ids = _asArray(mapping['@id']);

      for (const iri of ids) {
        let entry = inverse[iri];
        const isKeyword = api.isKeyword(iri);

        if (!entry) {
          // initialize entry
          inverse[iri] = entry = {};

          if (!isKeyword && !mapping._termHasColon) {
            // init IRI to term map and fast CURIE prefixes
            irisToTerms[iri] = [term];
            const fastCurieEntry = {
              iri,
              terms: irisToTerms[iri]
            };

            if (iri[0] in fastCurieMap) {
              fastCurieMap[iri[0]].push(fastCurieEntry);
            } else {
              fastCurieMap[iri[0]] = [fastCurieEntry];
            }
          }
        } else if (!isKeyword && !mapping._termHasColon) {
          // add IRI to term match
          irisToTerms[iri].push(term);
        } // add new entry


        if (!entry[container]) {
          entry[container] = {
            '@language': {},
            '@type': {},
            '@any': {}
          };
        }

        entry = entry[container];

        _addPreferredTerm(term, entry['@any'], '@none');

        if (mapping.reverse) {
          // term is preferred for values using @reverse
          _addPreferredTerm(term, entry['@type'], '@reverse');
        } else if (mapping['@type'] === '@none') {
          _addPreferredTerm(term, entry['@any'], '@none');

          _addPreferredTerm(term, entry['@language'], '@none');

          _addPreferredTerm(term, entry['@type'], '@none');
        } else if ('@type' in mapping) {
          // term is preferred for values using specific type
          _addPreferredTerm(term, entry['@type'], mapping['@type']);
        } else if ('@language' in mapping && '@direction' in mapping) {
          // term is preferred for values using specific language and direction
          const language = mapping['@language'];
          const direction = mapping['@direction'];

          if (language && direction) {
            _addPreferredTerm(term, entry['@language'], `${language}_${direction}`.toLowerCase());
          } else if (language) {
            _addPreferredTerm(term, entry['@language'], language.toLowerCase());
          } else if (direction) {
            _addPreferredTerm(term, entry['@language'], `_${direction}`);
          } else {
            _addPreferredTerm(term, entry['@language'], '@null');
          }
        } else if ('@language' in mapping) {
          _addPreferredTerm(term, entry['@language'], (mapping['@language'] || '@null').toLowerCase());
        } else if ('@direction' in mapping) {
          if (mapping['@direction']) {
            _addPreferredTerm(term, entry['@language'], `_${mapping['@direction']}`);
          } else {
            _addPreferredTerm(term, entry['@language'], '@none');
          }
        } else if (defaultDirection) {
          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);

          _addPreferredTerm(term, entry['@language'], '@none');

          _addPreferredTerm(term, entry['@type'], '@none');
        } else {
          // add entries for no type and no language
          _addPreferredTerm(term, entry['@language'], defaultLanguage);

          _addPreferredTerm(term, entry['@language'], '@none');

          _addPreferredTerm(term, entry['@type'], '@none');
        }
      }
    } // build fast CURIE map


    for (const key in fastCurieMap) {
      _buildIriMap(fastCurieMap, key, 1);
    }

    return inverse;
  }
  /**
   * Runs a recursive algorithm to build a lookup map for quickly finding
   * potential CURIEs.
   *
   * @param iriMap the map to build.
   * @param key the current key in the map to work on.
   * @param idx the index into the IRI to compare.
   */


  function _buildIriMap(iriMap, key, idx) {
    const entries = iriMap[key];
    const next = iriMap[key] = {};
    let iri;
    let letter;

    for (const entry of entries) {
      iri = entry.iri;

      if (idx >= iri.length) {
        letter = '';
      } else {
        letter = iri[idx];
      }

      if (letter in next) {
        next[letter].push(entry);
      } else {
        next[letter] = [entry];
      }
    }

    for (const key in next) {
      if (key === '') {
        continue;
      }

      _buildIriMap(next, key, idx + 1);
    }
  }
  /**
   * Adds the term for the given entry if not already added.
   *
   * @param term the term to add.
   * @param entry the inverse context typeOrLanguage entry to add to.
   * @param typeOrLanguageValue the key in the entry to add to.
   */


  function _addPreferredTerm(term, entry, typeOrLanguageValue) {
    if (!entry.hasOwnProperty(typeOrLanguageValue)) {
      entry[typeOrLanguageValue] = term;
    }
  }
  /**
   * Clones an active context, creating a child active context.
   *
   * @return a clone (child) of the active context.
   */


  function _cloneActiveContext() {
    const child = {};
    child.mappings = util.clone(this.mappings);
    child.clone = this.clone;
    child.inverse = null;
    child.getInverse = this.getInverse;
    child.protected = util.clone(this.protected);

    if (this.previousContext) {
      child.previousContext = this.previousContext.clone();
    }

    child.revertToPreviousContext = this.revertToPreviousContext;

    if ('@base' in this) {
      child['@base'] = this['@base'];
    }

    if ('@language' in this) {
      child['@language'] = this['@language'];
    }

    if ('@vocab' in this) {
      child['@vocab'] = this['@vocab'];
    }

    return child;
  }
  /**
   * Reverts any type-scoped context in this active context to the previous
   * context.
   */


  function _revertToPreviousContext() {
    if (!this.previousContext) {
      return this;
    }

    return this.previousContext.clone();
  }
};
/**
 * Gets the value for the given active context key and type, null if none is
 * set or undefined if none is set and type is '@context'.
 *
 * @param ctx the active context.
 * @param key the context key.
 * @param [type] the type of value to get (eg: '@id', '@type'), if not
 *          specified gets the entire entry for a key, null if not found.
 *
 * @return the value, null, or undefined.
 */


api.getContextValue = (ctx, key, type) => {
  // invalid key
  if (key === null) {
    if (type === '@context') {
      return undefined;
    }

    return null;
  } // get specific entry information


  if (ctx.mappings.has(key)) {
    const entry = ctx.mappings.get(key);

    if (_isUndefined(type)) {
      // return whole entry
      return entry;
    }

    if (entry.hasOwnProperty(type)) {
      // return entry value for type
      return entry[type];
    }
  } // get default language


  if (type === '@language' && type in ctx) {
    return ctx[type];
  } // get default direction


  if (type === '@direction' && type in ctx) {
    return ctx[type];
  }

  if (type === '@context') {
    return undefined;
  }

  return null;
};
/**
 * Processing Mode check.
 *
 * @param activeCtx the current active context.
 * @param version the string or numeric version to check.
 *
 * @return boolean.
 */


api.processingMode = (activeCtx, version) => {
  if (version.toString() >= '1.1') {
    return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();
  } else {
    return activeCtx.processingMode === 'json-ld-1.0';
  }
};
/**
 * Returns whether or not the given value is a keyword.
 *
 * @param v the value to check.
 *
 * @return true if the value is a keyword, false if not.
 */


api.isKeyword = v => {
  if (!_isString(v) || v[0] !== '@') {
    return false;
  }

  switch (v) {
    case '@base':
    case '@container':
    case '@context':
    case '@default':
    case '@direction':
    case '@embed':
    case '@explicit':
    case '@graph':
    case '@id':
    case '@included':
    case '@index':
    case '@json':
    case '@language':
    case '@list':
    case '@nest':
    case '@none':
    case '@omitDefault':
    case '@prefix':
    case '@preserve':
    case '@protected':
    case '@requireAll':
    case '@reverse':
    case '@set':
    case '@type':
    case '@value':
    case '@version':
    case '@vocab':
      return true;
  }

  return false;
};

function _deepCompare(x1, x2) {
  // compare `null` or primitive types directly
  if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) {
    return x1 === x2;
  } // x1 and x2 are objects (also potentially arrays)


  const x1Array = Array.isArray(x1);

  if (x1Array !== Array.isArray(x2)) {
    return false;
  }

  if (x1Array) {
    if (x1.length !== x2.length) {
      return false;
    }

    for (let i = 0; i < x1.length; ++i) {
      if (!_deepCompare(x1[i], x2[i])) {
        return false;
      }
    }

    return true;
  } // x1 and x2 are non-array objects


  const k1s = Object.keys(x1);
  const k2s = Object.keys(x2);

  if (k1s.length !== k2s.length) {
    return false;
  }

  for (const k1 in x1) {
    let v1 = x1[k1];
    let v2 = x2[k1]; // special case: `@container` can be in any order

    if (k1 === '@container') {
      if (Array.isArray(v1) && Array.isArray(v2)) {
        v1 = v1.slice().sort();
        v2 = v2.slice().sort();
      }
    }

    if (!_deepCompare(v1, v2)) {
      return false;
    }
  }

  return true;
}
},{"./util":"node_modules/jsonld/lib/util.js","./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","./types":"node_modules/jsonld/lib/types.js","./url":"node_modules/jsonld/lib/url.js","process":"node_modules/process/browser.js"}],"node_modules/jsonld/lib/expand.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const JsonLdError = require('./JsonLdError');

const {
  isArray: _isArray,
  isObject: _isObject,
  isEmptyObject: _isEmptyObject,
  isString: _isString,
  isUndefined: _isUndefined
} = require('./types');

const {
  isList: _isList,
  isValue: _isValue,
  isGraph: _isGraph,
  isSubject: _isSubject
} = require('./graphTypes');

const {
  expandIri: _expandIri,
  getContextValue: _getContextValue,
  isKeyword: _isKeyword,
  process: _processContext,
  processingMode: _processingMode
} = require('./context');

const {
  isAbsolute: _isAbsoluteIri
} = require('./url');

const {
  addValue: _addValue,
  asArray: _asArray,
  getValues: _getValues,
  validateTypeValue: _validateTypeValue
} = require('./util');

const api = {};
module.exports = api;
const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
/**
 * Recursively expands an element using the given context. Any context in
 * the element will be removed. All context URLs must have been retrieved
 * before calling this method.
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element, null for none.
 * @param element the element to expand.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param insideIndex true if the element is inside an index container,
 *          false if not.
 * @param typeScopedContext an optional type-scoped active context for
 *          expanding values of nodes that were expressed according to
 *          a type-scoped context.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 *
 * @return a Promise that resolves to the expanded value.
 */

api.expand = async _ref => {
  let {
    activeCtx,
    activeProperty = null,
    element,
    options = {},
    insideList = false,
    insideIndex = false,
    typeScopedContext = null,
    expansionMap = () => undefined
  } = _ref;

  // nothing to expand
  if (element === null || element === undefined) {
    return null;
  } // disable framing if activeProperty is @default


  if (activeProperty === '@default') {
    options = Object.assign({}, options, {
      isFrame: false
    });
  }

  if (!_isArray(element) && !_isObject(element)) {
    // drop free-floating scalars that are not in lists unless custom mapped
    if (!insideList && (activeProperty === null || _expandIri(activeCtx, activeProperty, {
      vocab: true
    }, options) === '@graph')) {
      const mapped = await expansionMap({
        unmappedValue: element,
        activeCtx,
        activeProperty,
        options,
        insideList
      });

      if (mapped === undefined) {
        return null;
      }

      return mapped;
    } // expand element according to value expansion rules


    return _expandValue({
      activeCtx,
      activeProperty,
      value: element,
      options
    });
  } // recursively expand array


  if (_isArray(element)) {
    let rval = [];
    const container = _getContextValue(activeCtx, activeProperty, '@container') || [];
    insideList = insideList || container.includes('@list');

    for (let i = 0; i < element.length; ++i) {
      // expand element
      let e = await api.expand({
        activeCtx,
        activeProperty,
        element: element[i],
        options,
        expansionMap,
        insideIndex,
        typeScopedContext
      });

      if (insideList && _isArray(e)) {
        e = {
          '@list': e
        };
      }

      if (e === null) {
        e = await expansionMap({
          unmappedValue: element[i],
          activeCtx,
          activeProperty,
          parent: element,
          index: i,
          options,
          expandedParent: rval,
          insideList
        });

        if (e === undefined) {
          continue;
        }
      }

      if (_isArray(e)) {
        rval = rval.concat(e);
      } else {
        rval.push(e);
      }
    }

    return rval;
  } // recursively expand object:
  // first, expand the active property


  const expandedActiveProperty = _expandIri(activeCtx, activeProperty, {
    vocab: true
  }, options); // Get any property-scoped context for activeProperty


  const propertyScopedCtx = _getContextValue(activeCtx, activeProperty, '@context'); // second, determine if any type-scoped context should be reverted; it
  // should only be reverted when the following are all true:
  // 1. `element` is not a value or subject reference
  // 2. `insideIndex` is false


  typeScopedContext = typeScopedContext || (activeCtx.previousContext ? activeCtx : null);
  let keys = Object.keys(element).sort();
  let mustRevert = !insideIndex;

  if (mustRevert && typeScopedContext && keys.length <= 2 && !keys.includes('@context')) {
    for (const key of keys) {
      const expandedProperty = _expandIri(typeScopedContext, key, {
        vocab: true
      }, options);

      if (expandedProperty === '@value') {
        // value found, ensure type-scoped context is used to expand it
        mustRevert = false;
        activeCtx = typeScopedContext;
        break;
      }

      if (expandedProperty === '@id' && keys.length === 1) {
        // subject reference found, do not revert
        mustRevert = false;
        break;
      }
    }
  }

  if (mustRevert) {
    // revert type scoped context
    activeCtx = activeCtx.revertToPreviousContext();
  } // apply property-scoped context after reverting term-scoped context


  if (!_isUndefined(propertyScopedCtx)) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: propertyScopedCtx,
      propagate: true,
      overrideProtected: true,
      options
    });
  } // if element has a context, process it


  if ('@context' in element) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: element['@context'],
      options
    });
  } // set the type-scoped context to the context on input, for use later


  typeScopedContext = activeCtx; // Remember the first key found expanding to @type

  let typeKey = null; // look for scoped contexts on `@type`

  for (const key of keys) {
    const expandedProperty = _expandIri(activeCtx, key, {
      vocab: true
    }, options);

    if (expandedProperty === '@type') {
      // set scoped contexts from @type
      // avoid sorting if possible
      typeKey = typeKey || key;
      const value = element[key];
      const types = Array.isArray(value) ? value.length > 1 ? value.slice().sort() : value : [value];

      for (const type of types) {
        const ctx = _getContextValue(typeScopedContext, type, '@context');

        if (!_isUndefined(ctx)) {
          activeCtx = await _processContext({
            activeCtx,
            localCtx: ctx,
            options,
            propagate: false
          });
        }
      }
    }
  } // process each key and value in element, ignoring @nest content


  let rval = {};
  await _expandObject({
    activeCtx,
    activeProperty,
    expandedActiveProperty,
    element,
    expandedParent: rval,
    options,
    insideList,
    typeKey,
    typeScopedContext,
    expansionMap
  }); // get property count on expanded output

  keys = Object.keys(rval);
  let count = keys.length;

  if ('@value' in rval) {
    // @value must only have @language or @type
    if ('@type' in rval && ('@language' in rval || '@direction' in rval)) {
      throw new JsonLdError('Invalid JSON-LD syntax; an element containing "@value" may not ' + 'contain both "@type" and either "@language" or "@direction".', 'jsonld.SyntaxError', {
        code: 'invalid value object',
        element: rval
      });
    }

    let validCount = count - 1;

    if ('@type' in rval) {
      validCount -= 1;
    }

    if ('@index' in rval) {
      validCount -= 1;
    }

    if ('@language' in rval) {
      validCount -= 1;
    }

    if ('@direction' in rval) {
      validCount -= 1;
    }

    if (validCount !== 0) {
      throw new JsonLdError('Invalid JSON-LD syntax; an element containing "@value" may only ' + 'have an "@index" property and either "@type" ' + 'or either or both "@language" or "@direction".', 'jsonld.SyntaxError', {
        code: 'invalid value object',
        element: rval
      });
    }

    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);

    const types = _getValues(rval, '@type'); // drop null @values unless custom mapped


    if (_processingMode(activeCtx, 1.1) && types.includes('@json') && types.length === 1) {// Any value of @value is okay if @type: @json
    } else if (values.length === 0) {
      const mapped = await expansionMap({
        unmappedValue: rval,
        activeCtx,
        activeProperty,
        element,
        options,
        insideList
      });

      if (mapped !== undefined) {
        rval = mapped;
      } else {
        rval = null;
      }
    } else if (!values.every(v => _isString(v) || _isEmptyObject(v)) && '@language' in rval) {
      // if @language is present, @value must be a string
      throw new JsonLdError('Invalid JSON-LD syntax; only strings may be language-tagged.', 'jsonld.SyntaxError', {
        code: 'invalid language-tagged value',
        element: rval
      });
    } else if (!types.every(t => _isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) || _isEmptyObject(t))) {
      throw new JsonLdError('Invalid JSON-LD syntax; an element containing "@value" and "@type" ' + 'must have an absolute IRI for the value of "@type".', 'jsonld.SyntaxError', {
        code: 'invalid typed value',
        element: rval
      });
    }
  } else if ('@type' in rval && !_isArray(rval['@type'])) {
    // convert @type to an array
    rval['@type'] = [rval['@type']];
  } else if ('@set' in rval || '@list' in rval) {
    // handle @set and @list
    if (count > 1 && !(count === 2 && '@index' in rval)) {
      throw new JsonLdError('Invalid JSON-LD syntax; if an element has the property "@set" ' + 'or "@list", then it can have at most one other property that is ' + '"@index".', 'jsonld.SyntaxError', {
        code: 'invalid set or list object',
        element: rval
      });
    } // optimize away @set


    if ('@set' in rval) {
      rval = rval['@set'];
      keys = Object.keys(rval);
      count = keys.length;
    }
  } else if (count === 1 && '@language' in rval) {
    // drop objects with only @language unless custom mapped
    const mapped = await expansionMap(rval, {
      unmappedValue: rval,
      activeCtx,
      activeProperty,
      element,
      options,
      insideList
    });

    if (mapped !== undefined) {
      rval = mapped;
    } else {
      rval = null;
    }
  } // drop certain top-level objects that do not occur in lists, unless custom
  // mapped


  if (_isObject(rval) && !options.keepFreeFloatingNodes && !insideList && (activeProperty === null || expandedActiveProperty === '@graph')) {
    // drop empty object, top-level @value/@list, or object with only @id
    if (count === 0 || '@value' in rval || '@list' in rval || count === 1 && '@id' in rval) {
      const mapped = await expansionMap({
        unmappedValue: rval,
        activeCtx,
        activeProperty,
        element,
        options,
        insideList
      });

      if (mapped !== undefined) {
        rval = mapped;
      } else {
        rval = null;
      }
    }
  }

  return rval;
};
/**
 * Expand each key and value of element adding to result
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element.
 * @param expandedActiveProperty the expansion of activeProperty
 * @param element the element to expand.
 * @param expandedParent the expanded result into which to add values.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param typeKey first key found expanding to @type.
 * @param typeScopedContext the context before reverting.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 */


async function _expandObject(_ref2) {
  let {
    activeCtx,
    activeProperty,
    expandedActiveProperty,
    element,
    expandedParent,
    options = {},
    insideList,
    typeKey,
    typeScopedContext,
    expansionMap
  } = _ref2;
  const keys = Object.keys(element).sort();
  const nests = [];
  let unexpandedValue; // Figure out if this is the type for a JSON literal

  const isJsonType = element[typeKey] && _expandIri(activeCtx, _isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey], {
    vocab: true
  }, options) === '@json';

  for (const key of keys) {
    let value = element[key];
    let expandedValue; // skip @context

    if (key === '@context') {
      continue;
    } // expand property


    let expandedProperty = _expandIri(activeCtx, key, {
      vocab: true
    }, options); // drop non-absolute IRI keys that aren't keywords unless custom mapped


    if (expandedProperty === null || !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
      // TODO: use `await` to support async
      expandedProperty = expansionMap({
        unmappedProperty: key,
        activeCtx,
        activeProperty,
        parent: element,
        options,
        insideList,
        value,
        expandedParent
      });

      if (expandedProperty === undefined) {
        continue;
      }
    }

    if (_isKeyword(expandedProperty)) {
      if (expandedActiveProperty === '@reverse') {
        throw new JsonLdError('Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' + 'property.', 'jsonld.SyntaxError', {
          code: 'invalid reverse property map',
          value
        });
      }

      if (expandedProperty in expandedParent && expandedProperty !== '@included' && expandedProperty !== '@type') {
        throw new JsonLdError('Invalid JSON-LD syntax; colliding keywords detected.', 'jsonld.SyntaxError', {
          code: 'colliding keywords',
          keyword: expandedProperty
        });
      }
    } // syntax error if @id is not a string


    if (expandedProperty === '@id') {
      if (!_isString(value)) {
        if (!options.isFrame) {
          throw new JsonLdError('Invalid JSON-LD syntax; "@id" value must a string.', 'jsonld.SyntaxError', {
            code: 'invalid @id value',
            value
          });
        }

        if (_isObject(value)) {
          // empty object is a wildcard
          if (!_isEmptyObject(value)) {
            throw new JsonLdError('Invalid JSON-LD syntax; "@id" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {
              code: 'invalid @id value',
              value
            });
          }
        } else if (_isArray(value)) {
          if (!value.every(v => _isString(v))) {
            throw new JsonLdError('Invalid JSON-LD syntax; "@id" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {
              code: 'invalid @id value',
              value
            });
          }
        } else {
          throw new JsonLdError('Invalid JSON-LD syntax; "@id" value an empty object or array ' + 'of strings, if framing', 'jsonld.SyntaxError', {
            code: 'invalid @id value',
            value
          });
        }
      }

      _addValue(expandedParent, '@id', _asArray(value).map(v => _isString(v) ? _expandIri(activeCtx, v, {
        base: true
      }, options) : v), {
        propertyIsArray: options.isFrame
      });

      continue;
    }

    if (expandedProperty === '@type') {
      // if framing, can be a default object, but need to expand
      // key to determine that
      if (_isObject(value)) {
        value = Object.fromEntries(Object.entries(value).map(_ref3 => {
          let [k, v] = _ref3;
          return [_expandIri(typeScopedContext, k, {
            vocab: true
          }), _asArray(v).map(vv => _expandIri(typeScopedContext, vv, {
            base: true,
            vocab: true
          }))];
        }));
      }

      _validateTypeValue(value, options.isFrame);

      _addValue(expandedParent, '@type', _asArray(value).map(v => _isString(v) ? _expandIri(typeScopedContext, v, {
        base: true,
        vocab: true
      }, options) : v), {
        propertyIsArray: options.isFrame
      });

      continue;
    } // Included blocks are treated as an array of separate object nodes sharing
    // the same referencing active_property.
    // For 1.0, it is skipped as are other unknown keywords


    if (expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {
      const includedResult = _asArray(await api.expand({
        activeCtx,
        activeProperty,
        element: value,
        options,
        expansionMap
      })); // Expanded values must be node objects


      if (!includedResult.every(v => _isSubject(v))) {
        throw new JsonLdError('Invalid JSON-LD syntax; ' + 'values of @included must expand to node objects.', 'jsonld.SyntaxError', {
          code: 'invalid @included value',
          value
        });
      }

      _addValue(expandedParent, '@included', includedResult, {
        propertyIsArray: true
      });

      continue;
    } // @graph must be an array or an object


    if (expandedProperty === '@graph' && !(_isObject(value) || _isArray(value))) {
      throw new JsonLdError('Invalid JSON-LD syntax; "@graph" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {
        code: 'invalid @graph value',
        value
      });
    }

    if (expandedProperty === '@value') {
      // capture value for later
      // "colliding keywords" check prevents this from being set twice
      unexpandedValue = value;

      if (isJsonType && _processingMode(activeCtx, 1.1)) {
        // no coercion to array, and retain all values
        expandedParent['@value'] = value;
      } else {
        _addValue(expandedParent, '@value', value, {
          propertyIsArray: options.isFrame
        });
      }

      continue;
    } // @language must be a string
    // it should match BCP47


    if (expandedProperty === '@language') {
      if (value === null) {
        // drop null @language values, they expand as if they didn't exist
        continue;
      }

      if (!_isString(value) && !options.isFrame) {
        throw new JsonLdError('Invalid JSON-LD syntax; "@language" value must be a string.', 'jsonld.SyntaxError', {
          code: 'invalid language-tagged string',
          value
        });
      } // ensure language value is lowercase


      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v); // ensure language tag matches BCP47

      for (const lang of value) {
        if (_isString(lang) && !lang.match(REGEX_BCP47)) {
          console.warn(`@language must be valid BCP47: ${lang}`);
        }
      }

      _addValue(expandedParent, '@language', value, {
        propertyIsArray: options.isFrame
      });

      continue;
    } // @direction must be "ltr" or "rtl"


    if (expandedProperty === '@direction') {
      if (!_isString(value) && !options.isFrame) {
        throw new JsonLdError('Invalid JSON-LD syntax; "@direction" value must be a string.', 'jsonld.SyntaxError', {
          code: 'invalid base direction',
          value
        });
      }

      value = _asArray(value); // ensure direction is "ltr" or "rtl"

      for (const dir of value) {
        if (_isString(dir) && dir !== 'ltr' && dir !== 'rtl') {
          throw new JsonLdError('Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".', 'jsonld.SyntaxError', {
            code: 'invalid base direction',
            value
          });
        }
      }

      _addValue(expandedParent, '@direction', value, {
        propertyIsArray: options.isFrame
      });

      continue;
    } // @index must be a string


    if (expandedProperty === '@index') {
      if (!_isString(value)) {
        throw new JsonLdError('Invalid JSON-LD syntax; "@index" value must be a string.', 'jsonld.SyntaxError', {
          code: 'invalid @index value',
          value
        });
      }

      _addValue(expandedParent, '@index', value);

      continue;
    } // @reverse must be an object


    if (expandedProperty === '@reverse') {
      if (!_isObject(value)) {
        throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must be an object.', 'jsonld.SyntaxError', {
          code: 'invalid @reverse value',
          value
        });
      }

      expandedValue = await api.expand({
        activeCtx,
        activeProperty: '@reverse',
        element: value,
        options,
        expansionMap
      }); // properties double-reversed

      if ('@reverse' in expandedValue) {
        for (const property in expandedValue['@reverse']) {
          _addValue(expandedParent, property, expandedValue['@reverse'][property], {
            propertyIsArray: true
          });
        }
      } // FIXME: can this be merged with code below to simplify?
      // merge in all reversed properties


      let reverseMap = expandedParent['@reverse'] || null;

      for (const property in expandedValue) {
        if (property === '@reverse') {
          continue;
        }

        if (reverseMap === null) {
          reverseMap = expandedParent['@reverse'] = {};
        }

        _addValue(reverseMap, property, [], {
          propertyIsArray: true
        });

        const items = expandedValue[property];

        for (let ii = 0; ii < items.length; ++ii) {
          const item = items[ii];

          if (_isValue(item) || _isList(item)) {
            throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {
              code: 'invalid reverse property value',
              value: expandedValue
            });
          }

          _addValue(reverseMap, property, item, {
            propertyIsArray: true
          });
        }
      }

      continue;
    } // nested keys


    if (expandedProperty === '@nest') {
      nests.push(key);
      continue;
    } // use potential scoped context for key


    let termCtx = activeCtx;

    const ctx = _getContextValue(activeCtx, key, '@context');

    if (!_isUndefined(ctx)) {
      termCtx = await _processContext({
        activeCtx,
        localCtx: ctx,
        propagate: true,
        overrideProtected: true,
        options
      });
    }

    const container = _getContextValue(termCtx, key, '@container') || [];

    if (container.includes('@language') && _isObject(value)) {
      const direction = _getContextValue(termCtx, key, '@direction'); // handle language map container (skip if value is not an object)


      expandedValue = _expandLanguageMap(termCtx, value, direction, options);
    } else if (container.includes('@index') && _isObject(value)) {
      // handle index container (skip if value is not an object)
      const asGraph = container.includes('@graph');
      const indexKey = _getContextValue(termCtx, key, '@index') || '@index';

      const propertyIndex = indexKey !== '@index' && _expandIri(activeCtx, indexKey, {
        vocab: true
      }, options);

      expandedValue = await _expandIndexMap({
        activeCtx: termCtx,
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph,
        indexKey,
        propertyIndex
      });
    } else if (container.includes('@id') && _isObject(value)) {
      // handle id container (skip if value is not an object)
      const asGraph = container.includes('@graph');
      expandedValue = await _expandIndexMap({
        activeCtx: termCtx,
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph,
        indexKey: '@id'
      });
    } else if (container.includes('@type') && _isObject(value)) {
      // handle type container (skip if value is not an object)
      expandedValue = await _expandIndexMap({
        // since container is `@type`, revert type scoped context when expanding
        activeCtx: termCtx.revertToPreviousContext(),
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph: false,
        indexKey: '@type'
      });
    } else {
      // recurse into @list or @set
      const isList = expandedProperty === '@list';

      if (isList || expandedProperty === '@set') {
        let nextActiveProperty = activeProperty;

        if (isList && expandedActiveProperty === '@graph') {
          nextActiveProperty = null;
        }

        expandedValue = await api.expand({
          activeCtx: termCtx,
          activeProperty: nextActiveProperty,
          element: value,
          options,
          insideList: isList,
          expansionMap
        });
      } else if (_getContextValue(activeCtx, key, '@type') === '@json') {
        expandedValue = {
          '@type': '@json',
          '@value': value
        };
      } else {
        // recursively expand value with key as new active property
        expandedValue = await api.expand({
          activeCtx: termCtx,
          activeProperty: key,
          element: value,
          options,
          insideList: false,
          expansionMap
        });
      }
    } // drop null values if property is not @value


    if (expandedValue === null && expandedProperty !== '@value') {
      // TODO: use `await` to support async
      expandedValue = expansionMap({
        unmappedValue: value,
        expandedProperty,
        activeCtx: termCtx,
        activeProperty,
        parent: element,
        options,
        insideList,
        key,
        expandedParent
      });

      if (expandedValue === undefined) {
        continue;
      }
    } // convert expanded value to @list if container specifies it


    if (expandedProperty !== '@list' && !_isList(expandedValue) && container.includes('@list')) {
      // ensure expanded value in @list is an array
      expandedValue = {
        '@list': _asArray(expandedValue)
      };
    } // convert expanded value to @graph if container specifies it
    // and value is not, itself, a graph
    // index cases handled above


    if (container.includes('@graph') && !container.some(key => key === '@id' || key === '@index')) {
      // ensure expanded values are arrays
      expandedValue = _asArray(expandedValue).map(v => ({
        '@graph': _asArray(v)
      }));
    } // FIXME: can this be merged with code above to simplify?
    // merge in reverse properties


    if (termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {
      const reverseMap = expandedParent['@reverse'] = expandedParent['@reverse'] || {};
      expandedValue = _asArray(expandedValue);

      for (let ii = 0; ii < expandedValue.length; ++ii) {
        const item = expandedValue[ii];

        if (_isValue(item) || _isList(item)) {
          throw new JsonLdError('Invalid JSON-LD syntax; "@reverse" value must not be a ' + '@value or an @list.', 'jsonld.SyntaxError', {
            code: 'invalid reverse property value',
            value: expandedValue
          });
        }

        _addValue(reverseMap, expandedProperty, item, {
          propertyIsArray: true
        });
      }

      continue;
    } // add value for property
    // special keywords handled above


    _addValue(expandedParent, expandedProperty, expandedValue, {
      propertyIsArray: true
    });
  } // @value must not be an object or an array (unless framing) or if @type is
  // @json


  if ('@value' in expandedParent) {
    if (expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) {// allow any value, to be verified when the object is fully expanded and
      // the @type is @json.
    } else if ((_isObject(unexpandedValue) || _isArray(unexpandedValue)) && !options.isFrame) {
      throw new JsonLdError('Invalid JSON-LD syntax; "@value" value must not be an ' + 'object or an array.', 'jsonld.SyntaxError', {
        code: 'invalid value object value',
        value: unexpandedValue
      });
    }
  } // expand each nested key


  for (const key of nests) {
    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];

    for (const nv of nestedValues) {
      if (!_isObject(nv) || Object.keys(nv).some(k => _expandIri(activeCtx, k, {
        vocab: true
      }, options) === '@value')) {
        throw new JsonLdError('Invalid JSON-LD syntax; nested value must be a node object.', 'jsonld.SyntaxError', {
          code: 'invalid @nest value',
          value: nv
        });
      }

      await _expandObject({
        activeCtx,
        activeProperty,
        expandedActiveProperty,
        element: nv,
        expandedParent,
        options,
        insideList,
        typeScopedContext,
        typeKey,
        expansionMap
      });
    }
  }
}
/**
 * Expands the given value by using the coercion and keyword rules in the
 * given context.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the active property the value is associated with.
 * @param value the value to expand.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */


function _expandValue(_ref4) {
  let {
    activeCtx,
    activeProperty,
    value,
    options
  } = _ref4;

  // nothing to expand
  if (value === null || value === undefined) {
    return null;
  } // special-case expand @id and @type (skips '@id' expansion)


  const expandedProperty = _expandIri(activeCtx, activeProperty, {
    vocab: true
  }, options);

  if (expandedProperty === '@id') {
    return _expandIri(activeCtx, value, {
      base: true
    }, options);
  } else if (expandedProperty === '@type') {
    return _expandIri(activeCtx, value, {
      vocab: true,
      base: true
    }, options);
  } // get type definition from context


  const type = _getContextValue(activeCtx, activeProperty, '@type'); // do @id expansion (automatic for @graph)


  if ((type === '@id' || expandedProperty === '@graph') && _isString(value)) {
    return {
      '@id': _expandIri(activeCtx, value, {
        base: true
      }, options)
    };
  } // do @id expansion w/vocab


  if (type === '@vocab' && _isString(value)) {
    return {
      '@id': _expandIri(activeCtx, value, {
        vocab: true,
        base: true
      }, options)
    };
  } // do not expand keyword values


  if (_isKeyword(expandedProperty)) {
    return value;
  }

  const rval = {};

  if (type && !['@id', '@vocab', '@none'].includes(type)) {
    // other type
    rval['@type'] = type;
  } else if (_isString(value)) {
    // check for language tagging for strings
    const language = _getContextValue(activeCtx, activeProperty, '@language');

    if (language !== null) {
      rval['@language'] = language;
    }

    const direction = _getContextValue(activeCtx, activeProperty, '@direction');

    if (direction !== null) {
      rval['@direction'] = direction;
    }
  } // do conversion of values that aren't basic JSON types to strings


  if (!['boolean', 'number', 'string'].includes(typeof value)) {
    value = value.toString();
  }

  rval['@value'] = value;
  return rval;
}
/**
 * Expands a language map.
 *
 * @param activeCtx the active context to use.
 * @param languageMap the language map to expand.
 * @param direction the direction to apply to values.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded language map.
 */


function _expandLanguageMap(activeCtx, languageMap, direction, options) {
  const rval = [];
  const keys = Object.keys(languageMap).sort();

  for (const key of keys) {
    const expandedKey = _expandIri(activeCtx, key, {
      vocab: true
    }, options);

    let val = languageMap[key];

    if (!_isArray(val)) {
      val = [val];
    }

    for (const item of val) {
      if (item === null) {
        // null values are allowed (8.5) but ignored (3.1)
        continue;
      }

      if (!_isString(item)) {
        throw new JsonLdError('Invalid JSON-LD syntax; language map values must be strings.', 'jsonld.SyntaxError', {
          code: 'invalid language map value',
          languageMap
        });
      }

      const val = {
        '@value': item
      };

      if (expandedKey !== '@none') {
        val['@language'] = key.toLowerCase();
      }

      if (direction) {
        val['@direction'] = direction;
      }

      rval.push(val);
    }
  }

  return rval;
}

async function _expandIndexMap(_ref5) {
  let {
    activeCtx,
    options,
    activeProperty,
    value,
    expansionMap,
    asGraph,
    indexKey,
    propertyIndex
  } = _ref5;
  const rval = [];
  const keys = Object.keys(value).sort();
  const isTypeIndex = indexKey === '@type';

  for (let key of keys) {
    // if indexKey is @type, there may be a context defined for it
    if (isTypeIndex) {
      const ctx = _getContextValue(activeCtx, key, '@context');

      if (!_isUndefined(ctx)) {
        activeCtx = await _processContext({
          activeCtx,
          localCtx: ctx,
          propagate: false,
          options
        });
      }
    }

    let val = value[key];

    if (!_isArray(val)) {
      val = [val];
    }

    val = await api.expand({
      activeCtx,
      activeProperty,
      element: val,
      options,
      insideList: false,
      insideIndex: true,
      expansionMap
    }); // expand for @type, but also for @none

    let expandedKey;

    if (propertyIndex) {
      if (key === '@none') {
        expandedKey = '@none';
      } else {
        expandedKey = _expandValue({
          activeCtx,
          activeProperty: indexKey,
          value: key,
          options
        });
      }
    } else {
      expandedKey = _expandIri(activeCtx, key, {
        vocab: true
      }, options);
    }

    if (indexKey === '@id') {
      // expand document relative
      key = _expandIri(activeCtx, key, {
        base: true
      }, options);
    } else if (isTypeIndex) {
      key = expandedKey;
    }

    for (let item of val) {
      // If this is also a @graph container, turn items into graphs
      if (asGraph && !_isGraph(item)) {
        item = {
          '@graph': [item]
        };
      }

      if (indexKey === '@type') {
        if (expandedKey === '@none') {// ignore @none
        } else if (item['@type']) {
          item['@type'] = [key].concat(item['@type']);
        } else {
          item['@type'] = [key];
        }
      } else if (_isValue(item) && !['@language', '@type', '@index'].includes(indexKey)) {
        throw new JsonLdError('Invalid JSON-LD syntax; Attempt to add illegal key to value ' + `object: "${indexKey}".`, 'jsonld.SyntaxError', {
          code: 'invalid value object',
          value: item
        });
      } else if (propertyIndex) {
        // index is a property to be expanded, and values interpreted for that
        // property
        if (expandedKey !== '@none') {
          // expand key as a value
          _addValue(item, propertyIndex, expandedKey, {
            propertyIsArray: true,
            prependValue: true
          });
        }
      } else if (expandedKey !== '@none' && !(indexKey in item)) {
        item[indexKey] = key;
      }

      rval.push(item);
    }
  }

  return rval;
}
},{"./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","./types":"node_modules/jsonld/lib/types.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./context":"node_modules/jsonld/lib/context.js","./url":"node_modules/jsonld/lib/url.js","./util":"node_modules/jsonld/lib/util.js"}],"node_modules/jsonld/lib/nodeMap.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const {
  isKeyword
} = require('./context');

const graphTypes = require('./graphTypes');

const types = require('./types');

const util = require('./util');

const JsonLdError = require('./JsonLdError');

const api = {};
module.exports = api;
/**
 * Creates a merged JSON-LD node map (node ID => node).
 *
 * @param input the expanded JSON-LD to create a node map of.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *
 * @return the node map.
 */

api.createMergedNodeMap = (input, options) => {
  options = options || {}; // produce a map of all subjects and name each bnode

  const issuer = options.issuer || new util.IdentifierIssuer('_:b');
  const graphs = {
    '@default': {}
  };
  api.createNodeMap(input, graphs, '@default', issuer); // add all non-default graphs to default graph

  return api.mergeNodeMaps(graphs);
};
/**
 * Recursively flattens the subjects in the given JSON-LD expanded input
 * into a node map.
 *
 * @param input the JSON-LD expanded input.
 * @param graphs a map of graph name to subject map.
 * @param graph the name of the current graph.
 * @param issuer the blank node identifier issuer.
 * @param name the name assigned to the current input if it is a bnode.
 * @param list the list to append to, null for none.
 */


api.createNodeMap = (input, graphs, graph, issuer, name, list) => {
  // recurse through array
  if (types.isArray(input)) {
    for (const node of input) {
      api.createNodeMap(node, graphs, graph, issuer, undefined, list);
    }

    return;
  } // add non-object to list


  if (!types.isObject(input)) {
    if (list) {
      list.push(input);
    }

    return;
  } // add values to list


  if (graphTypes.isValue(input)) {
    if ('@type' in input) {
      let type = input['@type']; // rename @type blank node

      if (type.indexOf('_:') === 0) {
        input['@type'] = type = issuer.getId(type);
      }
    }

    if (list) {
      list.push(input);
    }

    return;
  } else if (list && graphTypes.isList(input)) {
    const _list = [];
    api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);
    list.push({
      '@list': _list
    });
    return;
  } // Note: At this point, input must be a subject.
  // spec requires @type to be named first, so assign names early


  if ('@type' in input) {
    const types = input['@type'];

    for (const type of types) {
      if (type.indexOf('_:') === 0) {
        issuer.getId(type);
      }
    }
  } // get name for subject


  if (types.isUndefined(name)) {
    name = graphTypes.isBlankNode(input) ? issuer.getId(input['@id']) : input['@id'];
  } // add subject reference to list


  if (list) {
    list.push({
      '@id': name
    });
  } // create new subject or merge into existing one


  const subjects = graphs[graph];
  const subject = subjects[name] = subjects[name] || {};
  subject['@id'] = name;
  const properties = Object.keys(input).sort();

  for (let property of properties) {
    // skip @id
    if (property === '@id') {
      continue;
    } // handle reverse properties


    if (property === '@reverse') {
      const referencedNode = {
        '@id': name
      };
      const reverseMap = input['@reverse'];

      for (const reverseProperty in reverseMap) {
        const items = reverseMap[reverseProperty];

        for (const item of items) {
          let itemName = item['@id'];

          if (graphTypes.isBlankNode(item)) {
            itemName = issuer.getId(itemName);
          }

          api.createNodeMap(item, graphs, graph, issuer, itemName);
          util.addValue(subjects[itemName], reverseProperty, referencedNode, {
            propertyIsArray: true,
            allowDuplicate: false
          });
        }
      }

      continue;
    } // recurse into graph


    if (property === '@graph') {
      // add graph subjects map entry
      if (!(name in graphs)) {
        graphs[name] = {};
      }

      api.createNodeMap(input[property], graphs, name, issuer);
      continue;
    } // recurse into included


    if (property === '@included') {
      api.createNodeMap(input[property], graphs, graph, issuer);
      continue;
    } // copy non-@type keywords


    if (property !== '@type' && isKeyword(property)) {
      if (property === '@index' && property in subject && (input[property] !== subject[property] || input[property]['@id'] !== subject[property]['@id'])) {
        throw new JsonLdError('Invalid JSON-LD syntax; conflicting @index property detected.', 'jsonld.SyntaxError', {
          code: 'conflicting indexes',
          subject
        });
      }

      subject[property] = input[property];
      continue;
    } // iterate over objects


    const objects = input[property]; // if property is a bnode, assign it a new id

    if (property.indexOf('_:') === 0) {
      property = issuer.getId(property);
    } // ensure property is added for empty arrays


    if (objects.length === 0) {
      util.addValue(subject, property, [], {
        propertyIsArray: true
      });
      continue;
    }

    for (let o of objects) {
      if (property === '@type') {
        // rename @type blank nodes
        o = o.indexOf('_:') === 0 ? issuer.getId(o) : o;
      } // handle embedded subject or subject reference


      if (graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {
        // skip null @id
        if ('@id' in o && !o['@id']) {
          continue;
        } // relabel blank node @id


        const id = graphTypes.isBlankNode(o) ? issuer.getId(o['@id']) : o['@id']; // add reference and recurse

        util.addValue(subject, property, {
          '@id': id
        }, {
          propertyIsArray: true,
          allowDuplicate: false
        });
        api.createNodeMap(o, graphs, graph, issuer, id);
      } else if (graphTypes.isValue(o)) {
        util.addValue(subject, property, o, {
          propertyIsArray: true,
          allowDuplicate: false
        });
      } else if (graphTypes.isList(o)) {
        // handle @list
        const _list = [];
        api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
        o = {
          '@list': _list
        };
        util.addValue(subject, property, o, {
          propertyIsArray: true,
          allowDuplicate: false
        });
      } else {
        // handle @value
        api.createNodeMap(o, graphs, graph, issuer, name);
        util.addValue(subject, property, o, {
          propertyIsArray: true,
          allowDuplicate: false
        });
      }
    }
  }
};
/**
 * Merge separate named graphs into a single merged graph including
 * all nodes from the default graph and named graphs.
 *
 * @param graphs a map of graph name to subject map.
 *
 * @return the merged graph map.
 */


api.mergeNodeMapGraphs = graphs => {
  const merged = {};

  for (const name of Object.keys(graphs).sort()) {
    for (const id of Object.keys(graphs[name]).sort()) {
      const node = graphs[name][id];

      if (!(id in merged)) {
        merged[id] = {
          '@id': id
        };
      }

      const mergedNode = merged[id];

      for (const property of Object.keys(node).sort()) {
        if (isKeyword(property) && property !== '@type') {
          // copy keywords
          mergedNode[property] = util.clone(node[property]);
        } else {
          // merge objects
          for (const value of node[property]) {
            util.addValue(mergedNode, property, util.clone(value), {
              propertyIsArray: true,
              allowDuplicate: false
            });
          }
        }
      }
    }
  }

  return merged;
};

api.mergeNodeMaps = graphs => {
  // add all non-default graphs to default graph
  const defaultGraph = graphs['@default'];
  const graphNames = Object.keys(graphs).sort();

  for (const graphName of graphNames) {
    if (graphName === '@default') {
      continue;
    }

    const nodeMap = graphs[graphName];
    let subject = defaultGraph[graphName];

    if (!subject) {
      defaultGraph[graphName] = subject = {
        '@id': graphName,
        '@graph': []
      };
    } else if (!('@graph' in subject)) {
      subject['@graph'] = [];
    }

    const graph = subject['@graph'];

    for (const id of Object.keys(nodeMap).sort()) {
      const node = nodeMap[id]; // only add full subjects

      if (!graphTypes.isSubjectReference(node)) {
        graph.push(node);
      }
    }
  }

  return defaultGraph;
};
},{"./context":"node_modules/jsonld/lib/context.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./types":"node_modules/jsonld/lib/types.js","./util":"node_modules/jsonld/lib/util.js","./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js"}],"node_modules/jsonld/lib/flatten.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const {
  isSubjectReference: _isSubjectReference
} = require('./graphTypes');

const {
  createMergedNodeMap: _createMergedNodeMap
} = require('./nodeMap');

const api = {};
module.exports = api;
/**
 * Performs JSON-LD flattening.
 *
 * @param input the expanded JSON-LD to flatten.
 *
 * @return the flattened output.
 */

api.flatten = input => {
  const defaultGraph = _createMergedNodeMap(input); // produce flattened output


  const flattened = [];
  const keys = Object.keys(defaultGraph).sort();

  for (let ki = 0; ki < keys.length; ++ki) {
    const node = defaultGraph[keys[ki]]; // only add full subjects to top-level

    if (!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }

  return flattened;
};
},{"./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./nodeMap":"node_modules/jsonld/lib/nodeMap.js"}],"node_modules/jsonld/lib/fromRdf.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const JsonLdError = require('./JsonLdError');

const graphTypes = require('./graphTypes');

const types = require('./types');

const util = require('./util'); // constants


const {
  // RDF,
  RDF_LIST,
  RDF_FIRST,
  RDF_REST,
  RDF_NIL,
  RDF_TYPE,
  // RDF_PLAIN_LITERAL,
  // RDF_XML_LITERAL,
  RDF_JSON_LITERAL,
  // RDF_OBJECT,
  // RDF_LANGSTRING,
  // XSD,
  XSD_BOOLEAN,
  XSD_DOUBLE,
  XSD_INTEGER,
  XSD_STRING
} = require('./constants');

const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;
const api = {};
module.exports = api;
/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset the RDF dataset.
 * @param options the RDF serialization options.
 *
 * @return a Promise that resolves to the JSON-LD output.
 */

api.fromRDF = async (dataset, _ref) => {
  let {
    useRdfType = false,
    useNativeTypes = false,
    rdfDirection = null
  } = _ref;
  const defaultGraph = {};
  const graphMap = {
    '@default': defaultGraph
  };
  const referencedOnce = {};

  for (const quad of dataset) {
    // TODO: change 'name' to 'graph'
    const name = quad.graph.termType === 'DefaultGraph' ? '@default' : quad.graph.value;

    if (!(name in graphMap)) {
      graphMap[name] = {};
    }

    if (name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {
        '@id': name
      };
    }

    const nodeMap = graphMap[name]; // get subject, predicate, object

    const s = quad.subject.value;
    const p = quad.predicate.value;
    const o = quad.object;

    if (!(s in nodeMap)) {
      nodeMap[s] = {
        '@id': s
      };
    }

    const node = nodeMap[s];
    const objectIsNode = o.termType.endsWith('Node');

    if (objectIsNode && !(o.value in nodeMap)) {
      nodeMap[o.value] = {
        '@id': o.value
      };
    }

    if (p === RDF_TYPE && !useRdfType && objectIsNode) {
      util.addValue(node, '@type', o.value, {
        propertyIsArray: true
      });
      continue;
    }

    const value = _RDFToObject(o, useNativeTypes, rdfDirection);

    util.addValue(node, p, value, {
      propertyIsArray: true
    }); // object may be an RDF list/partial list node but we can't know easily
    // until all triples are read

    if (objectIsNode) {
      if (o.value === RDF_NIL) {
        // track rdf:nil uniquely per graph
        const object = nodeMap[o.value];

        if (!('usages' in object)) {
          object.usages = [];
        }

        object.usages.push({
          node,
          property: p,
          value
        });
      } else if (o.value in referencedOnce) {
        // object referenced more than once
        referencedOnce[o.value] = false;
      } else {
        // keep track of single reference
        referencedOnce[o.value] = {
          node,
          property: p,
          value
        };
      }
    }
  }
  /*
  for(let name in dataset) {
    const graph = dataset[name];
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }
    const nodeMap = graphMap[name];
    for(let ti = 0; ti < graph.length; ++ti) {
      const triple = graph[ti];
       // get subject, predicate, object
      const s = triple.subject.value;
      const p = triple.predicate.value;
      const o = triple.object;
       if(!(s in nodeMap)) {
        nodeMap[s] = {'@id': s};
      }
      const node = nodeMap[s];
       const objectIsId = (o.type === 'IRI' || o.type === 'blank node');
      if(objectIsId && !(o.value in nodeMap)) {
        nodeMap[o.value] = {'@id': o.value};
      }
       if(p === RDF_TYPE && !useRdfType && objectIsId) {
        util.addValue(node, '@type', o.value, {propertyIsArray: true});
        continue;
      }
       const value = _RDFToObject(o, useNativeTypes);
      util.addValue(node, p, value, {propertyIsArray: true});
       // object may be an RDF list/partial list node but we can't know easily
      // until all triples are read
      if(objectIsId) {
        if(o.value === RDF_NIL) {
          // track rdf:nil uniquely per graph
          const object = nodeMap[o.value];
          if(!('usages' in object)) {
            object.usages = [];
          }
          object.usages.push({
            node: node,
            property: p,
            value: value
          });
        } else if(o.value in referencedOnce) {
          // object referenced more than once
          referencedOnce[o.value] = false;
        } else {
          // keep track of single reference
          referencedOnce[o.value] = {
            node: node,
            property: p,
            value: value
          };
        }
      }
    }
  }*/
  // convert linked lists to @list arrays


  for (const name in graphMap) {
    const graphObject = graphMap[name]; // no @lists to be converted, continue

    if (!(RDF_NIL in graphObject)) {
      continue;
    } // iterate backwards through each RDF list


    const nil = graphObject[RDF_NIL];

    if (!nil.usages) {
      continue;
    }

    for (let usage of nil.usages) {
      let node = usage.node;
      let property = usage.property;
      let head = usage.value;
      const list = [];
      const listNodes = []; // ensure node is a well-formed list node; it must:
      // 1. Be referenced only once.
      // 2. Have an array for rdf:first that has 1 item.
      // 3. Have an array for rdf:rest that has 1 item.
      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
      //   optionally, @type where the value is rdf:List.

      let nodeKeyCount = Object.keys(node).length;

      while (property === RDF_REST && types.isObject(referencedOnce[node['@id']]) && types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 && types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 && (nodeKeyCount === 3 || nodeKeyCount === 4 && types.isArray(node['@type']) && node['@type'].length === 1 && node['@type'][0] === RDF_LIST)) {
        list.push(node[RDF_FIRST][0]);
        listNodes.push(node['@id']); // get next node, moving backwards through list

        usage = referencedOnce[node['@id']];
        node = usage.node;
        property = usage.property;
        head = usage.value;
        nodeKeyCount = Object.keys(node).length; // if node is not a blank node, then list head found

        if (!graphTypes.isBlankNode(node)) {
          break;
        }
      } // transform list into @list object


      delete head['@id'];
      head['@list'] = list.reverse();

      for (const listNode of listNodes) {
        delete graphObject[listNode];
      }
    }

    delete nil.usages;
  }

  const result = [];
  const subjects = Object.keys(defaultGraph).sort();

  for (const subject of subjects) {
    const node = defaultGraph[subject];

    if (subject in graphMap) {
      const graph = node['@graph'] = [];
      const graphObject = graphMap[subject];
      const graphSubjects = Object.keys(graphObject).sort();

      for (const graphSubject of graphSubjects) {
        const node = graphObject[graphSubject]; // only add full subjects to top-level

        if (!graphTypes.isSubjectReference(node)) {
          graph.push(node);
        }
      }
    } // only add full subjects to top-level


    if (!graphTypes.isSubjectReference(node)) {
      result.push(node);
    }
  }

  return result;
};
/**
 * Converts an RDF triple object to a JSON-LD object.
 *
 * @param o the RDF triple object to convert.
 * @param useNativeTypes true to output native types, false not to.
 *
 * @return the JSON-LD object.
 */


function _RDFToObject(o, useNativeTypes, rdfDirection) {
  // convert NamedNode/BlankNode object to JSON-LD
  if (o.termType.endsWith('Node')) {
    return {
      '@id': o.value
    };
  } // convert literal to JSON-LD


  const rval = {
    '@value': o.value
  }; // add language

  if (o.language) {
    rval['@language'] = o.language;
  } else {
    let type = o.datatype.value;

    if (!type) {
      type = XSD_STRING;
    }

    if (type === RDF_JSON_LITERAL) {
      type = '@json';

      try {
        rval['@value'] = JSON.parse(rval['@value']);
      } catch (e) {
        throw new JsonLdError('JSON literal could not be parsed.', 'jsonld.InvalidJsonLiteral', {
          code: 'invalid JSON literal',
          value: rval['@value'],
          cause: e
        });
      }
    } // use native types for certain xsd types


    if (useNativeTypes) {
      if (type === XSD_BOOLEAN) {
        if (rval['@value'] === 'true') {
          rval['@value'] = true;
        } else if (rval['@value'] === 'false') {
          rval['@value'] = false;
        }
      } else if (types.isNumeric(rval['@value'])) {
        if (type === XSD_INTEGER) {
          const i = parseInt(rval['@value'], 10);

          if (i.toFixed(0) === rval['@value']) {
            rval['@value'] = i;
          }
        } else if (type === XSD_DOUBLE) {
          rval['@value'] = parseFloat(rval['@value']);
        }
      } // do not add native type


      if (![XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING].includes(type)) {
        rval['@type'] = type;
      }
    } else if (rdfDirection === 'i18n-datatype' && type.startsWith('https://www.w3.org/ns/i18n#')) {
      const [, language, direction] = type.split(/[#_]/);

      if (language.length > 0) {
        rval['@language'] = language;

        if (!language.match(REGEX_BCP47)) {
          console.warn(`@language must be valid BCP47: ${language}`);
        }
      }

      rval['@direction'] = direction;
    } else if (type !== XSD_STRING) {
      rval['@type'] = type;
    }
  }

  return rval;
}
},{"./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./types":"node_modules/jsonld/lib/types.js","./util":"node_modules/jsonld/lib/util.js","./constants":"node_modules/jsonld/lib/constants.js"}],"node_modules/canonicalize/lib/canonicalize.js":[function(require,module,exports) {
/* jshint esversion: 6 */
/* jslint node: true */
'use strict';

module.exports = function serialize (object) {
  if (object === null || typeof object !== 'object' || object.toJSON != null) {
    return JSON.stringify(object);
  }

  if (Array.isArray(object)) {
    return '[' + object.reduce((t, cv, ci) => {
      const comma = ci === 0 ? '' : ',';
      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;
      return t + comma + serialize(value);
    }, '') + ']';
  }

  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {
    if (object[cv] === undefined ||
        typeof object[cv] === 'symbol') {
      return t;
    }
    const comma = t.length === 0 ? '' : ',';
    return t + comma + serialize(cv) + ':' + serialize(object[cv]);
  }, '') + '}';
};

},{}],"node_modules/jsonld/lib/toRdf.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const {
  createNodeMap
} = require('./nodeMap');

const {
  isKeyword
} = require('./context');

const graphTypes = require('./graphTypes');

const jsonCanonicalize = require('canonicalize');

const types = require('./types');

const util = require('./util');

const {
  // RDF,
  // RDF_LIST,
  RDF_FIRST,
  RDF_REST,
  RDF_NIL,
  RDF_TYPE,
  // RDF_PLAIN_LITERAL,
  // RDF_XML_LITERAL,
  RDF_JSON_LITERAL,
  // RDF_OBJECT,
  RDF_LANGSTRING,
  // XSD,
  XSD_BOOLEAN,
  XSD_DOUBLE,
  XSD_INTEGER,
  XSD_STRING
} = require('./constants');

const {
  isAbsolute: _isAbsoluteIri
} = require('./url');

const api = {};
module.exports = api;
/**
 * Outputs an RDF dataset for the expanded JSON-LD input.
 *
 * @param input the expanded JSON-LD input.
 * @param options the RDF serialization options.
 *
 * @return the RDF dataset.
 */

api.toRDF = (input, options) => {
  // create node map for default graph (and any named graphs)
  const issuer = new util.IdentifierIssuer('_:b');
  const nodeMap = {
    '@default': {}
  };
  createNodeMap(input, nodeMap, '@default', issuer);
  const dataset = [];
  const graphNames = Object.keys(nodeMap).sort();

  for (const graphName of graphNames) {
    let graphTerm;

    if (graphName === '@default') {
      graphTerm = {
        termType: 'DefaultGraph',
        value: ''
      };
    } else if (_isAbsoluteIri(graphName)) {
      if (graphName.startsWith('_:')) {
        graphTerm = {
          termType: 'BlankNode'
        };
      } else {
        graphTerm = {
          termType: 'NamedNode'
        };
      }

      graphTerm.value = graphName;
    } else {
      // skip relative IRIs (not valid RDF)
      continue;
    }

    _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);
  }

  return dataset;
};
/**
 * Adds RDF quads for a particular graph to the given dataset.
 *
 * @param dataset the dataset to append RDF quads to.
 * @param graph the graph to create RDF quads for.
 * @param graphTerm the graph term for each quad.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param options the RDF serialization options.
 *
 * @return the array of RDF triples for the given graph.
 */


function _graphToRDF(dataset, graph, graphTerm, issuer, options) {
  const ids = Object.keys(graph).sort();

  for (const id of ids) {
    const node = graph[id];
    const properties = Object.keys(node).sort();

    for (let property of properties) {
      const items = node[property];

      if (property === '@type') {
        property = RDF_TYPE;
      } else if (isKeyword(property)) {
        continue;
      }

      for (const item of items) {
        // RDF subject
        const subject = {
          termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',
          value: id
        }; // skip relative IRI subjects (not valid RDF)

        if (!_isAbsoluteIri(id)) {
          continue;
        } // RDF predicate


        const predicate = {
          termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',
          value: property
        }; // skip relative IRI predicates (not valid RDF)

        if (!_isAbsoluteIri(property)) {
          continue;
        } // skip blank node predicates unless producing generalized RDF


        if (predicate.termType === 'BlankNode' && !options.produceGeneralizedRdf) {
          continue;
        } // convert list, value or node object to triple


        const object = _objectToRDF(item, issuer, dataset, graphTerm, options.rdfDirection); // skip null objects (they are relative IRIs)


        if (object) {
          dataset.push({
            subject,
            predicate,
            object,
            graph: graphTerm
          });
        }
      }
    }
  }
}
/**
 * Converts a @list value into linked list of blank node RDF quads
 * (an RDF collection).
 *
 * @param list the @list value.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the array of quads to append to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the head of the list.
 */


function _listToRDF(list, issuer, dataset, graphTerm, rdfDirection) {
  const first = {
    termType: 'NamedNode',
    value: RDF_FIRST
  };
  const rest = {
    termType: 'NamedNode',
    value: RDF_REST
  };
  const nil = {
    termType: 'NamedNode',
    value: RDF_NIL
  };
  const last = list.pop(); // Result is the head of the list

  const result = last ? {
    termType: 'BlankNode',
    value: issuer.getId()
  } : nil;
  let subject = result;

  for (const item of list) {
    const object = _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection);

    const next = {
      termType: 'BlankNode',
      value: issuer.getId()
    };
    dataset.push({
      subject,
      predicate: first,
      object,
      graph: graphTerm
    });
    dataset.push({
      subject,
      predicate: rest,
      object: next,
      graph: graphTerm
    });
    subject = next;
  } // Tail of list


  if (last) {
    const object = _objectToRDF(last, issuer, dataset, graphTerm, rdfDirection);

    dataset.push({
      subject,
      predicate: first,
      object,
      graph: graphTerm
    });
    dataset.push({
      subject,
      predicate: rest,
      object: nil,
      graph: graphTerm
    });
  }

  return result;
}
/**
 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,
 * node object to an RDF resource, or adds a list.
 *
 * @param item the JSON-LD value or node object.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the dataset to append RDF quads to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the RDF literal or RDF resource.
 */


function _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection) {
  const object = {}; // convert value object to RDF

  if (graphTypes.isValue(item)) {
    object.termType = 'Literal';
    object.value = undefined;
    object.datatype = {
      termType: 'NamedNode'
    };
    let value = item['@value'];
    const datatype = item['@type'] || null; // convert to XSD/JSON datatypes as appropriate

    if (datatype === '@json') {
      object.value = jsonCanonicalize(value);
      object.datatype.value = RDF_JSON_LITERAL;
    } else if (types.isBoolean(value)) {
      object.value = value.toString();
      object.datatype.value = datatype || XSD_BOOLEAN;
    } else if (types.isDouble(value) || datatype === XSD_DOUBLE) {
      if (!types.isDouble(value)) {
        value = parseFloat(value);
      } // canonical double representation


      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
      object.datatype.value = datatype || XSD_DOUBLE;
    } else if (types.isNumber(value)) {
      object.value = value.toFixed(0);
      object.datatype.value = datatype || XSD_INTEGER;
    } else if (rdfDirection === 'i18n-datatype' && '@direction' in item) {
      const datatype = 'https://www.w3.org/ns/i18n#' + (item['@language'] || '') + `_${item['@direction']}`;
      object.datatype.value = datatype;
      object.value = value;
    } else if ('@language' in item) {
      object.value = value;
      object.datatype.value = datatype || RDF_LANGSTRING;
      object.language = item['@language'];
    } else {
      object.value = value;
      object.datatype.value = datatype || XSD_STRING;
    }
  } else if (graphTypes.isList(item)) {
    const _list = _listToRDF(item['@list'], issuer, dataset, graphTerm, rdfDirection);

    object.termType = _list.termType;
    object.value = _list.value;
  } else {
    // convert string/node object to RDF
    const id = types.isObject(item) ? item['@id'] : item;
    object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';
    object.value = id;
  } // skip relative IRIs, not valid RDF


  if (object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) {
    return null;
  }

  return object;
}
},{"./nodeMap":"node_modules/jsonld/lib/nodeMap.js","./context":"node_modules/jsonld/lib/context.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","canonicalize":"node_modules/canonicalize/lib/canonicalize.js","./types":"node_modules/jsonld/lib/types.js","./util":"node_modules/jsonld/lib/util.js","./constants":"node_modules/jsonld/lib/constants.js","./url":"node_modules/jsonld/lib/url.js"}],"node_modules/jsonld/lib/frame.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const {
  isKeyword
} = require('./context');

const graphTypes = require('./graphTypes');

const types = require('./types');

const util = require('./util');

const url = require('./url');

const JsonLdError = require('./JsonLdError');

const {
  createNodeMap: _createNodeMap,
  mergeNodeMapGraphs: _mergeNodeMapGraphs
} = require('./nodeMap');

const api = {};
module.exports = api;
/**
 * Performs JSON-LD `merged` framing.
 *
 * @param input the expanded JSON-LD to frame.
 * @param frame the expanded JSON-LD frame to use.
 * @param options the framing options.
 *
 * @return the framed output.
 */

api.frameMergedOrDefault = (input, frame, options) => {
  // create framing state
  const state = {
    options,
    embedded: false,
    graph: '@default',
    graphMap: {
      '@default': {}
    },
    subjectStack: [],
    link: {},
    bnodeMap: {}
  }; // produce a map of all graphs and name each bnode
  // FIXME: currently uses subjects from @merged graph only

  const issuer = new util.IdentifierIssuer('_:b');

  _createNodeMap(input, state.graphMap, '@default', issuer);

  if (options.merged) {
    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);
    state.graph = '@merged';
  }

  state.subjects = state.graphMap[state.graph]; // frame the subjects

  const framed = [];
  api.frame(state, Object.keys(state.subjects).sort(), frame, framed); // If pruning blank nodes, find those to prune

  if (options.pruneBlankNodeIdentifiers) {
    // remove all blank nodes appearing only once, done in compaction
    options.bnodesToClear = Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);
  } // remove @preserve from results


  options.link = {};
  return _cleanupPreserve(framed, options);
};
/**
 * Frames subjects according to the given frame.
 *
 * @param state the current framing state.
 * @param subjects the subjects to filter.
 * @param frame the frame.
 * @param parent the parent subject or top-level array.
 * @param property the parent property, initialized to null.
 */


api.frame = function (state, subjects, frame, parent) {
  let property = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  // validate the frame
  _validateFrame(frame);

  frame = frame[0]; // get flags for current frame

  const options = state.options;
  const flags = {
    embed: _getFrameFlag(frame, options, 'embed'),
    explicit: _getFrameFlag(frame, options, 'explicit'),
    requireAll: _getFrameFlag(frame, options, 'requireAll')
  }; // get link for current graph

  if (!state.link.hasOwnProperty(state.graph)) {
    state.link[state.graph] = {};
  }

  const link = state.link[state.graph]; // filter out subjects that match the frame

  const matches = _filterSubjects(state, subjects, frame, flags); // add matches to output


  const ids = Object.keys(matches).sort();

  for (const id of ids) {
    const subject = matches[id];
    /* Note: In order to treat each top-level match as a compartmentalized
    result, clear the unique embedded subjects map when the property is null,
    which only occurs at the top-level. */

    if (property === null) {
      state.uniqueEmbeds = {
        [state.graph]: {}
      };
    } else {
      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};
    }

    if (flags.embed === '@link' && id in link) {
      // TODO: may want to also match an existing linked subject against
      // the current frame ... so different frames could produce different
      // subjects that are only shared in-memory when the frames are the same
      // add existing linked subject
      _addFrameOutput(parent, property, link[id]);

      continue;
    } // start output for subject


    const output = {
      '@id': id
    };

    if (id.indexOf('_:') === 0) {
      util.addValue(state.bnodeMap, id, output, {
        propertyIsArray: true
      });
    }

    link[id] = output; // validate @embed

    if ((flags.embed === '@first' || flags.embed === '@last') && state.is11) {
      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {
        code: 'invalid @embed value',
        frame
      });
    }

    if (!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
      // skip adding this node object to the top level, as it was
      // already included in another node object
      continue;
    } // if embed is @never or if a circular reference would be created by an
    // embed, the subject cannot be embedded, just add the reference;
    // note that a circular reference won't occur when the embed flag is
    // `@link` as the above check will short-circuit before reaching this point


    if (state.embedded && (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack))) {
      _addFrameOutput(parent, property, output);

      continue;
    } // if only the first (or once) should be embedded


    if (state.embedded && (flags.embed == '@first' || flags.embed == '@once') && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
      _addFrameOutput(parent, property, output);

      continue;
    } // if only the last match should be embedded


    if (flags.embed === '@last') {
      // remove any existing embed
      if (id in state.uniqueEmbeds[state.graph]) {
        _removeEmbed(state, id);
      }
    }

    state.uniqueEmbeds[state.graph][id] = {
      parent,
      property
    }; // push matching subject onto stack to enable circular embed checks

    state.subjectStack.push({
      subject,
      graph: state.graph
    }); // subject is also the name of a graph

    if (id in state.graphMap) {
      let recurse = false;
      let subframe = null;

      if (!('@graph' in frame)) {
        recurse = state.graph !== '@merged';
        subframe = {};
      } else {
        subframe = frame['@graph'][0];
        recurse = !(id === '@merged' || id === '@default');

        if (!types.isObject(subframe)) {
          subframe = {};
        }
      }

      if (recurse) {
        // recurse into graph
        api.frame({ ...state,
          graph: id,
          embedded: false
        }, Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');
      }
    } // if frame has @included, recurse over its sub-frame


    if ('@included' in frame) {
      api.frame({ ...state,
        embedded: false
      }, subjects, frame['@included'], output, '@included');
    } // iterate over subject properties


    for (const prop of Object.keys(subject).sort()) {
      // copy keywords to output
      if (isKeyword(prop)) {
        output[prop] = util.clone(subject[prop]);

        if (prop === '@type') {
          // count bnode values of @type
          for (const type of subject['@type']) {
            if (type.indexOf('_:') === 0) {
              util.addValue(state.bnodeMap, type, output, {
                propertyIsArray: true
              });
            }
          }
        }

        continue;
      } // explicit is on and property isn't in the frame, skip processing


      if (flags.explicit && !(prop in frame)) {
        continue;
      } // add objects


      for (const o of subject[prop]) {
        const subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags); // recurse into list

        if (graphTypes.isList(o)) {
          const subframe = frame[prop] && frame[prop][0] && frame[prop][0]['@list'] ? frame[prop][0]['@list'] : _createImplicitFrame(flags); // add empty list

          const list = {
            '@list': []
          };

          _addFrameOutput(output, prop, list); // add list objects


          const src = o['@list'];

          for (const oo of src) {
            if (graphTypes.isSubjectReference(oo)) {
              // recurse into subject reference
              api.frame({ ...state,
                embedded: true
              }, [oo['@id']], subframe, list, '@list');
            } else {
              // include other values automatically
              _addFrameOutput(list, '@list', util.clone(oo));
            }
          }
        } else if (graphTypes.isSubjectReference(o)) {
          // recurse into subject reference
          api.frame({ ...state,
            embedded: true
          }, [o['@id']], subframe, output, prop);
        } else if (_valueMatch(subframe[0], o)) {
          // include other values, if they match
          _addFrameOutput(output, prop, util.clone(o));
        }
      }
    } // handle defaults


    for (const prop of Object.keys(frame).sort()) {
      // skip keywords
      if (prop === '@type') {
        if (!types.isObject(frame[prop][0]) || !('@default' in frame[prop][0])) {
          continue;
        } // allow through default types

      } else if (isKeyword(prop)) {
        continue;
      } // if omit default is off, then include default values for properties
      // that appear in the next frame but are not in the matching subject


      const next = frame[prop][0] || {};

      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');

      if (!omitDefaultOn && !(prop in output)) {
        let preserve = '@null';

        if ('@default' in next) {
          preserve = util.clone(next['@default']);
        }

        if (!types.isArray(preserve)) {
          preserve = [preserve];
        }

        output[prop] = [{
          '@preserve': preserve
        }];
      }
    } // if embed reverse values by finding nodes having this subject as a value
    // of the associated property


    for (const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {
      const subframe = frame['@reverse'][reverseProp];

      for (const subject of Object.keys(state.subjects)) {
        const nodeValues = util.getValues(state.subjects[subject], reverseProp);

        if (nodeValues.some(v => v['@id'] === id)) {
          // node has property referencing this subject, recurse
          output['@reverse'] = output['@reverse'] || {};
          util.addValue(output['@reverse'], reverseProp, [], {
            propertyIsArray: true
          });
          api.frame({ ...state,
            embedded: true
          }, [subject], subframe, output['@reverse'][reverseProp], property);
        }
      }
    } // add output to parent


    _addFrameOutput(parent, property, output); // pop matching subject from circular ref-checking stack


    state.subjectStack.pop();
  }
};
/**
 * Replace `@null` with `null`, removing it from arrays.
 *
 * @param input the framed, compacted output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */


api.cleanupNull = (input, options) => {
  // recurse through arrays
  if (types.isArray(input)) {
    const noNulls = input.map(v => api.cleanupNull(v, options));
    return noNulls.filter(v => v); // removes nulls from array
  }

  if (input === '@null') {
    return null;
  }

  if (types.isObject(input)) {
    // handle in-memory linked nodes
    if ('@id' in input) {
      const id = input['@id'];

      if (options.link.hasOwnProperty(id)) {
        const idx = options.link[id].indexOf(input);

        if (idx !== -1) {
          // already visited
          return options.link[id][idx];
        } // prevent circular visitation


        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    for (const key in input) {
      input[key] = api.cleanupNull(input[key], options);
    }
  }

  return input;
};
/**
 * Creates an implicit frame when recursing through subject matches. If
 * a frame doesn't have an explicit frame for a particular property, then
 * a wildcard child frame will be created that uses the same flags that the
 * parent frame used.
 *
 * @param flags the current framing flags.
 *
 * @return the implicit frame.
 */


function _createImplicitFrame(flags) {
  const frame = {};

  for (const key in flags) {
    if (flags[key] !== undefined) {
      frame['@' + key] = [flags[key]];
    }
  }

  return [frame];
}
/**
 * Checks the current subject stack to see if embedding the given subject
 * would cause a circular reference.
 *
 * @param subjectToEmbed the subject to embed.
 * @param graph the graph the subject to embed is in.
 * @param subjectStack the current stack of subjects.
 *
 * @return true if a circular reference would be created, false if not.
 */


function _createsCircularReference(subjectToEmbed, graph, subjectStack) {
  for (let i = subjectStack.length - 1; i >= 0; --i) {
    const subject = subjectStack[i];

    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {
      return true;
    }
  }

  return false;
}
/**
 * Gets the frame flag value for the given flag name.
 *
 * @param frame the frame.
 * @param options the framing options.
 * @param name the flag name.
 *
 * @return the flag value.
 */


function _getFrameFlag(frame, options, name) {
  const flag = '@' + name;
  let rval = flag in frame ? frame[flag][0] : options[name];

  if (name === 'embed') {
    // default is "@last"
    // backwards-compatibility support for "embed" maps:
    // true => "@last"
    // false => "@never"
    if (rval === true) {
      rval = '@once';
    } else if (rval === false) {
      rval = '@never';
    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link' && rval !== '@first' && rval !== '@last' && rval !== '@once') {
      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {
        code: 'invalid @embed value',
        frame
      });
    }
  }

  return rval;
}
/**
 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
 *
 * @param frame the frame to validate.
 */


function _validateFrame(frame) {
  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {
    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {
      frame
    });
  }

  if ('@id' in frame[0]) {
    for (const id of util.asArray(frame[0]['@id'])) {
      // @id must be wildcard or an IRI
      if (!(types.isObject(id) || url.isAbsolute(id)) || types.isString(id) && id.indexOf('_:') === 0) {
        throw new JsonLdError('Invalid JSON-LD syntax; invalid @id in frame.', 'jsonld.SyntaxError', {
          code: 'invalid frame',
          frame
        });
      }
    }
  }

  if ('@type' in frame[0]) {
    for (const type of util.asArray(frame[0]['@type'])) {
      // @id must be wildcard or an IRI
      if (!(types.isObject(type) || url.isAbsolute(type)) || types.isString(type) && type.indexOf('_:') === 0) {
        throw new JsonLdError('Invalid JSON-LD syntax; invalid @type in frame.', 'jsonld.SyntaxError', {
          code: 'invalid frame',
          frame
        });
      }
    }
  }
}
/**
 * Returns a map of all of the subjects that match a parsed frame.
 *
 * @param state the current framing state.
 * @param subjects the set of subjects to filter.
 * @param frame the parsed frame.
 * @param flags the frame flags.
 *
 * @return all of the matched subjects.
 */


function _filterSubjects(state, subjects, frame, flags) {
  // filter subjects in @id order
  const rval = {};

  for (const id of subjects) {
    const subject = state.graphMap[state.graph][id];

    if (_filterSubject(state, subject, frame, flags)) {
      rval[id] = subject;
    }
  }

  return rval;
}
/**
 * Returns true if the given subject matches the given frame.
 *
 * Matches either based on explicit type inclusion where the node has any
 * type listed in the frame. If the frame has empty types defined matches
 * nodes not having a @type. If the frame has a type of {} defined matches
 * nodes having any type defined.
 *
 * Otherwise, does duck typing, where the node must have all of the
 * properties defined in the frame.
 *
 * @param state the current framing state.
 * @param subject the subject to check.
 * @param frame the frame to check.
 * @param flags the frame flags.
 *
 * @return true if the subject matches, false if not.
 */


function _filterSubject(state, subject, frame, flags) {
  // check ducktype
  let wildcard = true;
  let matchesSome = false;

  for (const key in frame) {
    let matchThis = false;
    const nodeValues = util.getValues(subject, key);
    const isEmpty = util.getValues(frame, key).length === 0;

    if (key === '@id') {
      // match on no @id or any matching @id, including wildcard
      if (types.isEmptyObject(frame['@id'][0] || {})) {
        matchThis = true;
      } else if (frame['@id'].length >= 0) {
        matchThis = frame['@id'].includes(nodeValues[0]);
      }

      if (!flags.requireAll) {
        return matchThis;
      }
    } else if (key === '@type') {
      // check @type (object value means 'any' type,
      // fall through to ducktyping)
      wildcard = false;

      if (isEmpty) {
        if (nodeValues.length > 0) {
          // don't match on no @type
          return false;
        }

        matchThis = true;
      } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {
        // match on wildcard @type if there is a type
        matchThis = nodeValues.length > 0;
      } else {
        // match on a specific @type
        for (const type of frame['@type']) {
          if (types.isObject(type) && '@default' in type) {
            // match on default object
            matchThis = true;
          } else {
            matchThis = matchThis || nodeValues.some(tt => tt === type);
          }
        }
      }

      if (!flags.requireAll) {
        return matchThis;
      }
    } else if (isKeyword(key)) {
      continue;
    } else {
      // Force a copy of this frame entry so it can be manipulated
      const thisFrame = util.getValues(frame, key)[0];
      let hasDefault = false;

      if (thisFrame) {
        _validateFrame([thisFrame]);

        hasDefault = '@default' in thisFrame;
      } // no longer a wildcard pattern if frame has any non-keyword properties


      wildcard = false; // skip, but allow match if node has no value for property, and frame has
      // a default value

      if (nodeValues.length === 0 && hasDefault) {
        continue;
      } // if frame value is empty, don't match if subject has any value


      if (nodeValues.length > 0 && isEmpty) {
        return false;
      }

      if (thisFrame === undefined) {
        // node does not match if values is not empty and the value of property
        // in frame is match none.
        if (nodeValues.length > 0) {
          return false;
        }

        matchThis = true;
      } else {
        if (graphTypes.isList(thisFrame)) {
          const listValue = thisFrame['@list'][0];

          if (graphTypes.isList(nodeValues[0])) {
            const nodeListValues = nodeValues[0]['@list'];

            if (graphTypes.isValue(listValue)) {
              // match on any matching value
              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));
            } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {
              matchThis = nodeListValues.some(lv => _nodeMatch(state, listValue, lv, flags));
            }
          }
        } else if (graphTypes.isValue(thisFrame)) {
          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));
        } else if (graphTypes.isSubjectReference(thisFrame)) {
          matchThis = nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));
        } else if (types.isObject(thisFrame)) {
          matchThis = nodeValues.length > 0;
        } else {
          matchThis = false;
        }
      }
    } // all non-defaulted values must match if requireAll is set


    if (!matchThis && flags.requireAll) {
      return false;
    }

    matchesSome = matchesSome || matchThis;
  } // return true if wildcard or subject matches some properties


  return wildcard || matchesSome;
}
/**
 * Removes an existing embed.
 *
 * @param state the current framing state.
 * @param id the @id of the embed to remove.
 */


function _removeEmbed(state, id) {
  // get existing embed
  const embeds = state.uniqueEmbeds[state.graph];
  const embed = embeds[id];
  const parent = embed.parent;
  const property = embed.property; // create reference to replace embed

  const subject = {
    '@id': id
  }; // remove existing embed

  if (types.isArray(parent)) {
    // replace subject with reference
    for (let i = 0; i < parent.length; ++i) {
      if (util.compareValues(parent[i], subject)) {
        parent[i] = subject;
        break;
      }
    }
  } else {
    // replace subject with reference
    const useArray = types.isArray(parent[property]);
    util.removeValue(parent, property, subject, {
      propertyIsArray: useArray
    });
    util.addValue(parent, property, subject, {
      propertyIsArray: useArray
    });
  } // recursively remove dependent dangling embeds


  const removeDependents = id => {
    // get embed keys as a separate array to enable deleting keys in map
    const ids = Object.keys(embeds);

    for (const next of ids) {
      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {
        delete embeds[next];
        removeDependents(next);
      }
    }
  };

  removeDependents(id);
}
/**
 * Removes the @preserve keywords from expanded result of framing.
 *
 * @param input the framed, framed output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */


function _cleanupPreserve(input, options) {
  // recurse through arrays
  if (types.isArray(input)) {
    return input.map(value => _cleanupPreserve(value, options));
  }

  if (types.isObject(input)) {
    // remove @preserve
    if ('@preserve' in input) {
      return input['@preserve'][0];
    } // skip @values


    if (graphTypes.isValue(input)) {
      return input;
    } // recurse through @lists


    if (graphTypes.isList(input)) {
      input['@list'] = _cleanupPreserve(input['@list'], options);
      return input;
    } // handle in-memory linked nodes


    if ('@id' in input) {
      const id = input['@id'];

      if (options.link.hasOwnProperty(id)) {
        const idx = options.link[id].indexOf(input);

        if (idx !== -1) {
          // already visited
          return options.link[id][idx];
        } // prevent circular visitation


        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    } // recurse through properties


    for (const prop in input) {
      // potentially remove the id, if it is an unreference bnode
      if (prop === '@id' && options.bnodesToClear.includes(input[prop])) {
        delete input['@id'];
        continue;
      }

      input[prop] = _cleanupPreserve(input[prop], options);
    }
  }

  return input;
}
/**
 * Adds framing output to the given parent.
 *
 * @param parent the parent to add to.
 * @param property the parent property.
 * @param output the output to add.
 */


function _addFrameOutput(parent, property, output) {
  if (types.isObject(parent)) {
    util.addValue(parent, property, output, {
      propertyIsArray: true
    });
  } else {
    parent.push(output);
  }
}
/**
 * Node matches if it is a node, and matches the pattern as a frame.
 *
 * @param state the current framing state.
 * @param pattern used to match value
 * @param value to check
 * @param flags the frame flags.
 */


function _nodeMatch(state, pattern, value, flags) {
  if (!('@id' in value)) {
    return false;
  }

  const nodeObject = state.subjects[value['@id']];
  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);
}
/**
 * Value matches if it is a value and matches the value pattern
 *
 * * `pattern` is empty
 * * @values are the same, or `pattern[@value]` is a wildcard, and
 * * @types are the same or `value[@type]` is not null
 *   and `pattern[@type]` is `{}`, or `value[@type]` is null
 *   and `pattern[@type]` is null or `[]`, and
 * * @languages are the same or `value[@language]` is not null
 *   and `pattern[@language]` is `{}`, or `value[@language]` is null
 *   and `pattern[@language]` is null or `[]`.
 *
 * @param pattern used to match value
 * @param value to check
 */


function _valueMatch(pattern, value) {
  const v1 = value['@value'];
  const t1 = value['@type'];
  const l1 = value['@language'];
  const v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];
  const t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];
  const l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];

  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {
    return true;
  }

  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {
    return false;
  }

  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {
    return false;
  }

  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {
    return false;
  }

  return true;
}
},{"./context":"node_modules/jsonld/lib/context.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./types":"node_modules/jsonld/lib/types.js","./util":"node_modules/jsonld/lib/util.js","./url":"node_modules/jsonld/lib/url.js","./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","./nodeMap":"node_modules/jsonld/lib/nodeMap.js"}],"node_modules/jsonld/lib/compact.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const JsonLdError = require('./JsonLdError');

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
  isUndefined: _isUndefined
} = require('./types');

const {
  isList: _isList,
  isValue: _isValue,
  isGraph: _isGraph,
  isSimpleGraph: _isSimpleGraph,
  isSubjectReference: _isSubjectReference
} = require('./graphTypes');

const {
  expandIri: _expandIri,
  getContextValue: _getContextValue,
  isKeyword: _isKeyword,
  process: _processContext,
  processingMode: _processingMode
} = require('./context');

const {
  removeBase: _removeBase,
  prependBase: _prependBase
} = require('./url');

const {
  addValue: _addValue,
  asArray: _asArray,
  compareShortestLeast: _compareShortestLeast
} = require('./util');

const api = {};
module.exports = api;
/**
 * Recursively compacts an element using the given active context. All values
 * must be in expanded form before this method is called.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the compacted property associated with the element
 *          to compact, null for none.
 * @param element the element to compact.
 * @param options the compaction options.
 * @param compactionMap the compaction map to use.
 *
 * @return a promise that resolves to the compacted value.
 */

api.compact = async _ref => {
  let {
    activeCtx,
    activeProperty = null,
    element,
    options = {},
    compactionMap = () => undefined
  } = _ref;

  // recursively compact array
  if (_isArray(element)) {
    let rval = [];

    for (let i = 0; i < element.length; ++i) {
      // compact, dropping any null values unless custom mapped
      let compacted = await api.compact({
        activeCtx,
        activeProperty,
        element: element[i],
        options,
        compactionMap
      });

      if (compacted === null) {
        compacted = await compactionMap({
          unmappedValue: element[i],
          activeCtx,
          activeProperty,
          parent: element,
          index: i,
          options
        });

        if (compacted === undefined) {
          continue;
        }
      }

      rval.push(compacted);
    }

    if (options.compactArrays && rval.length === 1) {
      // use single element if no container is specified
      const container = _getContextValue(activeCtx, activeProperty, '@container') || [];

      if (container.length === 0) {
        rval = rval[0];
      }
    }

    return rval;
  } // use any scoped context on activeProperty


  const ctx = _getContextValue(activeCtx, activeProperty, '@context');

  if (!_isUndefined(ctx)) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: ctx,
      propagate: true,
      overrideProtected: true,
      options
    });
  } // recursively compact object


  if (_isObject(element)) {
    if (options.link && '@id' in element && options.link.hasOwnProperty(element['@id'])) {
      // check for a linked element to reuse
      const linked = options.link[element['@id']];

      for (let i = 0; i < linked.length; ++i) {
        if (linked[i].expanded === element) {
          return linked[i].compacted;
        }
      }
    } // do value compaction on @values and subject references


    if (_isValue(element) || _isSubjectReference(element)) {
      const rval = api.compactValue({
        activeCtx,
        activeProperty,
        value: element,
        options
      });

      if (options.link && _isSubjectReference(element)) {
        // store linked element
        if (!options.link.hasOwnProperty(element['@id'])) {
          options.link[element['@id']] = [];
        }

        options.link[element['@id']].push({
          expanded: element,
          compacted: rval
        });
      }

      return rval;
    } // if expanded property is @list and we're contained within a list
    // container, recursively compact this item to an array


    if (_isList(element)) {
      const container = _getContextValue(activeCtx, activeProperty, '@container') || [];

      if (container.includes('@list')) {
        return api.compact({
          activeCtx,
          activeProperty,
          element: element['@list'],
          options,
          compactionMap
        });
      }
    } // FIXME: avoid misuse of active property as an expanded property?


    const insideReverse = activeProperty === '@reverse';
    const rval = {}; // original context before applying property-scoped and local contexts

    const inputCtx = activeCtx; // revert to previous context, if there is one,
    // and element is not a value object or a node reference

    if (!_isValue(element) && !_isSubjectReference(element)) {
      activeCtx = activeCtx.revertToPreviousContext();
    } // apply property-scoped context after reverting term-scoped context


    const propertyScopedCtx = _getContextValue(inputCtx, activeProperty, '@context');

    if (!_isUndefined(propertyScopedCtx)) {
      activeCtx = await _processContext({
        activeCtx,
        localCtx: propertyScopedCtx,
        propagate: true,
        overrideProtected: true,
        options
      });
    }

    if (options.link && '@id' in element) {
      // store linked element
      if (!options.link.hasOwnProperty(element['@id'])) {
        options.link[element['@id']] = [];
      }

      options.link[element['@id']].push({
        expanded: element,
        compacted: rval
      });
    } // apply any context defined on an alias of @type
    // if key is @type and any compacted value is a term having a local
    // context, overlay that context


    let types = element['@type'] || [];

    if (types.length > 1) {
      types = Array.from(types).sort();
    } // find all type-scoped contexts based on current context, prior to
    // updating it


    const typeContext = activeCtx;

    for (const type of types) {
      const compactedType = api.compactIri({
        activeCtx: typeContext,
        iri: type,
        relativeTo: {
          vocab: true
        }
      }); // Use any type-scoped context defined on this value

      const ctx = _getContextValue(inputCtx, compactedType, '@context');

      if (!_isUndefined(ctx)) {
        activeCtx = await _processContext({
          activeCtx,
          localCtx: ctx,
          options,
          propagate: false
        });
      }
    } // process element keys in order


    const keys = Object.keys(element).sort();

    for (const expandedProperty of keys) {
      const expandedValue = element[expandedProperty]; // compact @id

      if (expandedProperty === '@id') {
        let compactedValue = _asArray(expandedValue).map(expandedIri => api.compactIri({
          activeCtx,
          iri: expandedIri,
          relativeTo: {
            vocab: false
          },
          base: options.base
        }));

        if (compactedValue.length === 1) {
          compactedValue = compactedValue[0];
        } // use keyword alias and add value


        const alias = api.compactIri({
          activeCtx,
          iri: '@id',
          relativeTo: {
            vocab: true
          }
        });
        rval[alias] = compactedValue;
        continue;
      } // compact @type(s)


      if (expandedProperty === '@type') {
        // resolve type values against previous context
        let compactedValue = _asArray(expandedValue).map(expandedIri => api.compactIri({
          activeCtx: inputCtx,
          iri: expandedIri,
          relativeTo: {
            vocab: true
          }
        }));

        if (compactedValue.length === 1) {
          compactedValue = compactedValue[0];
        } // use keyword alias and add value


        const alias = api.compactIri({
          activeCtx,
          iri: '@type',
          relativeTo: {
            vocab: true
          }
        });
        const container = _getContextValue(activeCtx, alias, '@container') || []; // treat as array for @type if @container includes @set

        const typeAsSet = container.includes('@set') && _processingMode(activeCtx, 1.1);

        const isArray = typeAsSet || _isArray(compactedValue) && expandedValue.length === 0;

        _addValue(rval, alias, compactedValue, {
          propertyIsArray: isArray
        });

        continue;
      } // handle @reverse


      if (expandedProperty === '@reverse') {
        // recursively compact expanded value
        const compactedValue = await api.compact({
          activeCtx,
          activeProperty: '@reverse',
          element: expandedValue,
          options,
          compactionMap
        }); // handle double-reversed properties

        for (const compactedProperty in compactedValue) {
          if (activeCtx.mappings.has(compactedProperty) && activeCtx.mappings.get(compactedProperty).reverse) {
            const value = compactedValue[compactedProperty];
            const container = _getContextValue(activeCtx, compactedProperty, '@container') || [];
            const useArray = container.includes('@set') || !options.compactArrays;

            _addValue(rval, compactedProperty, value, {
              propertyIsArray: useArray
            });

            delete compactedValue[compactedProperty];
          }
        }

        if (Object.keys(compactedValue).length > 0) {
          // use keyword alias and add value
          const alias = api.compactIri({
            activeCtx,
            iri: expandedProperty,
            relativeTo: {
              vocab: true
            }
          });

          _addValue(rval, alias, compactedValue);
        }

        continue;
      }

      if (expandedProperty === '@preserve') {
        // compact using activeProperty
        const compactedValue = await api.compact({
          activeCtx,
          activeProperty,
          element: expandedValue,
          options,
          compactionMap
        });

        if (!(_isArray(compactedValue) && compactedValue.length === 0)) {
          _addValue(rval, expandedProperty, compactedValue);
        }

        continue;
      } // handle @index property


      if (expandedProperty === '@index') {
        // drop @index if inside an @index container
        const container = _getContextValue(activeCtx, activeProperty, '@container') || [];

        if (container.includes('@index')) {
          continue;
        } // use keyword alias and add value


        const alias = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          relativeTo: {
            vocab: true
          }
        });

        _addValue(rval, alias, expandedValue);

        continue;
      } // skip array processing for keywords that aren't
      // @graph, @list, or @included


      if (expandedProperty !== '@graph' && expandedProperty !== '@list' && expandedProperty !== '@included' && _isKeyword(expandedProperty)) {
        // use keyword alias and add value as is
        const alias = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          relativeTo: {
            vocab: true
          }
        });

        _addValue(rval, alias, expandedValue);

        continue;
      } // Note: expanded value must be an array due to expansion algorithm.


      if (!_isArray(expandedValue)) {
        throw new JsonLdError('JSON-LD expansion error; expanded value must be an array.', 'jsonld.SyntaxError');
      } // preserve empty arrays


      if (expandedValue.length === 0) {
        const itemActiveProperty = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          value: expandedValue,
          relativeTo: {
            vocab: true
          },
          reverse: insideReverse
        });
        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ? activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
        let nestResult = rval;

        if (nestProperty) {
          _checkNestProperty(activeCtx, nestProperty, options);

          if (!_isObject(rval[nestProperty])) {
            rval[nestProperty] = {};
          }

          nestResult = rval[nestProperty];
        }

        _addValue(nestResult, itemActiveProperty, expandedValue, {
          propertyIsArray: true
        });
      } // recusively process array values


      for (const expandedItem of expandedValue) {
        // compact property and get container type
        const itemActiveProperty = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          value: expandedItem,
          relativeTo: {
            vocab: true
          },
          reverse: insideReverse
        }); // if itemActiveProperty is a @nest property, add values to nestResult,
        // otherwise rval

        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ? activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
        let nestResult = rval;

        if (nestProperty) {
          _checkNestProperty(activeCtx, nestProperty, options);

          if (!_isObject(rval[nestProperty])) {
            rval[nestProperty] = {};
          }

          nestResult = rval[nestProperty];
        }

        const container = _getContextValue(activeCtx, itemActiveProperty, '@container') || []; // get simple @graph or @list value if appropriate

        const isGraph = _isGraph(expandedItem);

        const isList = _isList(expandedItem);

        let inner;

        if (isList) {
          inner = expandedItem['@list'];
        } else if (isGraph) {
          inner = expandedItem['@graph'];
        } // recursively compact expanded item


        let compactedItem = await api.compact({
          activeCtx,
          activeProperty: itemActiveProperty,
          element: isList || isGraph ? inner : expandedItem,
          options,
          compactionMap
        }); // handle @list

        if (isList) {
          // ensure @list value is an array
          if (!_isArray(compactedItem)) {
            compactedItem = [compactedItem];
          }

          if (!container.includes('@list')) {
            // wrap using @list alias
            compactedItem = {
              [api.compactIri({
                activeCtx,
                iri: '@list',
                relativeTo: {
                  vocab: true
                }
              })]: compactedItem
            }; // include @index from expanded @list, if any

            if ('@index' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@index',
                relativeTo: {
                  vocab: true
                }
              })] = expandedItem['@index'];
            }
          } else {
            _addValue(nestResult, itemActiveProperty, compactedItem, {
              valueIsArray: true,
              allowDuplicate: true
            });

            continue;
          }
        } // Graph object compaction cases


        if (isGraph) {
          if (container.includes('@graph') && (container.includes('@id') || container.includes('@index') && _isSimpleGraph(expandedItem))) {
            // get or create the map object
            let mapObject;

            if (nestResult.hasOwnProperty(itemActiveProperty)) {
              mapObject = nestResult[itemActiveProperty];
            } else {
              nestResult[itemActiveProperty] = mapObject = {};
            } // index on @id or @index or alias of @none


            const key = (container.includes('@id') ? expandedItem['@id'] : expandedItem['@index']) || api.compactIri({
              activeCtx,
              iri: '@none',
              relativeTo: {
                vocab: true
              }
            }); // add compactedItem to map, using value of `@id` or a new blank
            // node identifier

            _addValue(mapObject, key, compactedItem, {
              propertyIsArray: !options.compactArrays || container.includes('@set')
            });
          } else if (container.includes('@graph') && _isSimpleGraph(expandedItem)) {
            // container includes @graph but not @id or @index and value is a
            // simple graph object add compact value
            // if compactedItem contains multiple values, it is wrapped in
            // `@included`
            if (_isArray(compactedItem) && compactedItem.length > 1) {
              compactedItem = {
                '@included': compactedItem
              };
            }

            _addValue(nestResult, itemActiveProperty, compactedItem, {
              propertyIsArray: !options.compactArrays || container.includes('@set')
            });
          } else {
            // wrap using @graph alias, remove array if only one item and
            // compactArrays not set
            if (_isArray(compactedItem) && compactedItem.length === 1 && options.compactArrays) {
              compactedItem = compactedItem[0];
            }

            compactedItem = {
              [api.compactIri({
                activeCtx,
                iri: '@graph',
                relativeTo: {
                  vocab: true
                }
              })]: compactedItem
            }; // include @id from expanded graph, if any

            if ('@id' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@id',
                relativeTo: {
                  vocab: true
                }
              })] = expandedItem['@id'];
            } // include @index from expanded graph, if any


            if ('@index' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@index',
                relativeTo: {
                  vocab: true
                }
              })] = expandedItem['@index'];
            }

            _addValue(nestResult, itemActiveProperty, compactedItem, {
              propertyIsArray: !options.compactArrays || container.includes('@set')
            });
          }
        } else if (container.includes('@language') || container.includes('@index') || container.includes('@id') || container.includes('@type')) {
          // handle language and index maps
          // get or create the map object
          let mapObject;

          if (nestResult.hasOwnProperty(itemActiveProperty)) {
            mapObject = nestResult[itemActiveProperty];
          } else {
            nestResult[itemActiveProperty] = mapObject = {};
          }

          let key;

          if (container.includes('@language')) {
            // if container is a language map, simplify compacted value to
            // a simple string
            if (_isValue(compactedItem)) {
              compactedItem = compactedItem['@value'];
            }

            key = expandedItem['@language'];
          } else if (container.includes('@index')) {
            const indexKey = _getContextValue(activeCtx, itemActiveProperty, '@index') || '@index';
            const containerKey = api.compactIri({
              activeCtx,
              iri: indexKey,
              relativeTo: {
                vocab: true
              }
            });

            if (indexKey === '@index') {
              key = expandedItem['@index'];
              delete compactedItem[containerKey];
            } else {
              let others;
              [key, ...others] = _asArray(compactedItem[indexKey] || []);

              if (!_isString(key)) {
                // Will use @none if it isn't a string.
                key = null;
              } else {
                switch (others.length) {
                  case 0:
                    delete compactedItem[indexKey];
                    break;

                  case 1:
                    compactedItem[indexKey] = others[0];
                    break;

                  default:
                    compactedItem[indexKey] = others;
                    break;
                }
              }
            }
          } else if (container.includes('@id')) {
            const idKey = api.compactIri({
              activeCtx,
              iri: '@id',
              relativeTo: {
                vocab: true
              }
            });
            key = compactedItem[idKey];
            delete compactedItem[idKey];
          } else if (container.includes('@type')) {
            const typeKey = api.compactIri({
              activeCtx,
              iri: '@type',
              relativeTo: {
                vocab: true
              }
            });
            let types;
            [key, ...types] = _asArray(compactedItem[typeKey] || []);

            switch (types.length) {
              case 0:
                delete compactedItem[typeKey];
                break;

              case 1:
                compactedItem[typeKey] = types[0];
                break;

              default:
                compactedItem[typeKey] = types;
                break;
            } // If compactedItem contains a single entry
            // whose key maps to @id, recompact without @type


            if (Object.keys(compactedItem).length === 1 && '@id' in expandedItem) {
              compactedItem = await api.compact({
                activeCtx,
                activeProperty: itemActiveProperty,
                element: {
                  '@id': expandedItem['@id']
                },
                options,
                compactionMap
              });
            }
          } // if compacting this value which has no key, index on @none


          if (!key) {
            key = api.compactIri({
              activeCtx,
              iri: '@none',
              relativeTo: {
                vocab: true
              }
            });
          } // add compact value to map object using key from expanded value
          // based on the container type


          _addValue(mapObject, key, compactedItem, {
            propertyIsArray: container.includes('@set')
          });
        } else {
          // use an array if: compactArrays flag is false,
          // @container is @set or @list , value is an empty
          // array, or key is @graph
          const isArray = !options.compactArrays || container.includes('@set') || container.includes('@list') || _isArray(compactedItem) && compactedItem.length === 0 || expandedProperty === '@list' || expandedProperty === '@graph'; // add compact value

          _addValue(nestResult, itemActiveProperty, compactedItem, {
            propertyIsArray: isArray
          });
        }
      }
    }

    return rval;
  } // only primitives remain which are already compact


  return element;
};
/**
 * Compacts an IRI or keyword into a term or prefix if it can be. If the
 * IRI has an associated value it may be passed.
 *
 * @param activeCtx the active context to use.
 * @param iri the IRI to compact.
 * @param value the value to check or null.
 * @param relativeTo options for how to compact IRIs:
 *          vocab: true to split after @vocab, false not to.
 * @param reverse true if a reverse property is being compacted, false if not.
 * @param base the absolute URL to use for compacting document-relative IRIs.
 *
 * @return the compacted term, prefix, keyword alias, or the original IRI.
 */


api.compactIri = _ref2 => {
  let {
    activeCtx,
    iri,
    value = null,
    relativeTo = {
      vocab: false
    },
    reverse = false,
    base = null
  } = _ref2;

  // can't compact null
  if (iri === null) {
    return iri;
  } // if context is from a property term scoped context composed with a
  // type-scoped context, then use the previous context instead


  if (activeCtx.isPropertyTermScoped && activeCtx.previousContext) {
    activeCtx = activeCtx.previousContext;
  }

  const inverseCtx = activeCtx.getInverse(); // if term is a keyword, it may be compacted to a simple alias

  if (_isKeyword(iri) && iri in inverseCtx && '@none' in inverseCtx[iri] && '@type' in inverseCtx[iri]['@none'] && '@none' in inverseCtx[iri]['@none']['@type']) {
    return inverseCtx[iri]['@none']['@type']['@none'];
  } // use inverse context to pick a term if iri is relative to vocab


  if (relativeTo.vocab && iri in inverseCtx) {
    const defaultLanguage = activeCtx['@language'] || '@none'; // prefer @index if available in value

    const containers = [];

    if (_isObject(value) && '@index' in value && !('@graph' in value)) {
      containers.push('@index', '@index@set');
    } // if value is a preserve object, use its value


    if (_isObject(value) && '@preserve' in value) {
      value = value['@preserve'][0];
    } // prefer most specific container including @graph, prefering @set
    // variations


    if (_isGraph(value)) {
      // favor indexmap if the graph is indexed
      if ('@index' in value) {
        containers.push('@graph@index', '@graph@index@set', '@index', '@index@set');
      } // favor idmap if the graph is has an @id


      if ('@id' in value) {
        containers.push('@graph@id', '@graph@id@set');
      }

      containers.push('@graph', '@graph@set', '@set'); // allow indexmap if the graph is not indexed

      if (!('@index' in value)) {
        containers.push('@graph@index', '@graph@index@set', '@index', '@index@set');
      } // allow idmap if the graph does not have an @id


      if (!('@id' in value)) {
        containers.push('@graph@id', '@graph@id@set');
      }
    } else if (_isObject(value) && !_isValue(value)) {
      containers.push('@id', '@id@set', '@type', '@set@type');
    } // defaults for term selection based on type/language


    let typeOrLanguage = '@language';
    let typeOrLanguageValue = '@null';

    if (reverse) {
      typeOrLanguage = '@type';
      typeOrLanguageValue = '@reverse';
      containers.push('@set');
    } else if (_isList(value)) {
      // choose the most specific term that works for all elements in @list
      // only select @list containers if @index is NOT in value
      if (!('@index' in value)) {
        containers.push('@list');
      }

      const list = value['@list'];

      if (list.length === 0) {
        // any empty list can be matched against any term that uses the
        // @list container regardless of @type or @language
        typeOrLanguage = '@any';
        typeOrLanguageValue = '@none';
      } else {
        let commonLanguage = list.length === 0 ? defaultLanguage : null;
        let commonType = null;

        for (let i = 0; i < list.length; ++i) {
          const item = list[i];
          let itemLanguage = '@none';
          let itemType = '@none';

          if (_isValue(item)) {
            if ('@direction' in item) {
              const lang = (item['@language'] || '').toLowerCase();
              const dir = item['@direction'];
              itemLanguage = `${lang}_${dir}`;
            } else if ('@language' in item) {
              itemLanguage = item['@language'].toLowerCase();
            } else if ('@type' in item) {
              itemType = item['@type'];
            } else {
              // plain literal
              itemLanguage = '@null';
            }
          } else {
            itemType = '@id';
          }

          if (commonLanguage === null) {
            commonLanguage = itemLanguage;
          } else if (itemLanguage !== commonLanguage && _isValue(item)) {
            commonLanguage = '@none';
          }

          if (commonType === null) {
            commonType = itemType;
          } else if (itemType !== commonType) {
            commonType = '@none';
          } // there are different languages and types in the list, so choose
          // the most generic term, no need to keep iterating the list


          if (commonLanguage === '@none' && commonType === '@none') {
            break;
          }
        }

        commonLanguage = commonLanguage || '@none';
        commonType = commonType || '@none';

        if (commonType !== '@none') {
          typeOrLanguage = '@type';
          typeOrLanguageValue = commonType;
        } else {
          typeOrLanguageValue = commonLanguage;
        }
      }
    } else {
      if (_isValue(value)) {
        if ('@language' in value && !('@index' in value)) {
          containers.push('@language', '@language@set');
          typeOrLanguageValue = value['@language'];
          const dir = value['@direction'];

          if (dir) {
            typeOrLanguageValue = `${typeOrLanguageValue}_${dir}`;
          }
        } else if ('@direction' in value && !('@index' in value)) {
          typeOrLanguageValue = `_${value['@direction']}`;
        } else if ('@type' in value) {
          typeOrLanguage = '@type';
          typeOrLanguageValue = value['@type'];
        }
      } else {
        typeOrLanguage = '@type';
        typeOrLanguageValue = '@id';
      }

      containers.push('@set');
    } // do term selection


    containers.push('@none'); // an index map can be used to index values using @none, so add as a low
    // priority

    if (_isObject(value) && !('@index' in value)) {
      // allow indexing even if no @index present
      containers.push('@index', '@index@set');
    } // values without type or language can use @language map


    if (_isValue(value) && Object.keys(value).length === 1) {
      // allow indexing even if no @index present
      containers.push('@language', '@language@set');
    }

    const term = _selectTerm(activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);

    if (term !== null) {
      return term;
    }
  } // no term match, use @vocab if available


  if (relativeTo.vocab) {
    if ('@vocab' in activeCtx) {
      // determine if vocab is a prefix of the iri
      const vocab = activeCtx['@vocab'];

      if (iri.indexOf(vocab) === 0 && iri !== vocab) {
        // use suffix as relative iri if it is not a term in the active context
        const suffix = iri.substr(vocab.length);

        if (!activeCtx.mappings.has(suffix)) {
          return suffix;
        }
      }
    }
  } // no term or @vocab match, check for possible CURIEs


  let choice = null; // TODO: make FastCurieMap a class with a method to do this lookup

  const partialMatches = [];
  let iriMap = activeCtx.fastCurieMap; // check for partial matches of against `iri`, which means look until
  // iri.length - 1, not full length

  const maxPartialLength = iri.length - 1;

  for (let i = 0; i < maxPartialLength && iri[i] in iriMap; ++i) {
    iriMap = iriMap[iri[i]];

    if ('' in iriMap) {
      partialMatches.push(iriMap[''][0]);
    }
  } // check partial matches in reverse order to prefer longest ones first


  for (let i = partialMatches.length - 1; i >= 0; --i) {
    const entry = partialMatches[i];
    const terms = entry.terms;

    for (const term of terms) {
      // a CURIE is usable if:
      // 1. it has no mapping, OR
      // 2. value is null, which means we're not compacting an @value, AND
      //   the mapping matches the IRI
      const curie = term + ':' + iri.substr(entry.iri.length);
      const isUsableCurie = activeCtx.mappings.get(term)._prefix && (!activeCtx.mappings.has(curie) || value === null && activeCtx.mappings.get(curie)['@id'] === iri); // select curie if it is shorter or the same length but lexicographically
      // less than the current choice

      if (isUsableCurie && (choice === null || _compareShortestLeast(curie, choice) < 0)) {
        choice = curie;
      }
    }
  } // return chosen curie


  if (choice !== null) {
    return choice;
  } // If iri could be confused with a compact IRI using a term in this context,
  // signal an error


  for (const [term, td] of activeCtx.mappings) {
    if (td && td._prefix && iri.startsWith(term + ':')) {
      throw new JsonLdError(`Absolute IRI "${iri}" confused with prefix "${term}".`, 'jsonld.SyntaxError', {
        code: 'IRI confused with prefix',
        context: activeCtx
      });
    }
  } // compact IRI relative to base


  if (!relativeTo.vocab) {
    if ('@base' in activeCtx) {
      if (!activeCtx['@base']) {
        // The None case preserves rval as potentially relative
        return iri;
      } else {
        return _removeBase(_prependBase(base, activeCtx['@base']), iri);
      }
    } else {
      return _removeBase(base, iri);
    }
  } // return IRI as is


  return iri;
};
/**
 * Performs value compaction on an object with '@value' or '@id' as the only
 * property.
 *
 * @param activeCtx the active context.
 * @param activeProperty the active property that points to the value.
 * @param value the value to compact.
 * @param {Object} [options] - processing options.
 *
 * @return the compaction result.
 */


api.compactValue = _ref3 => {
  let {
    activeCtx,
    activeProperty,
    value,
    options
  } = _ref3;

  // value is a @value
  if (_isValue(value)) {
    // get context rules
    const type = _getContextValue(activeCtx, activeProperty, '@type');

    const language = _getContextValue(activeCtx, activeProperty, '@language');

    const direction = _getContextValue(activeCtx, activeProperty, '@direction');

    const container = _getContextValue(activeCtx, activeProperty, '@container') || []; // whether or not the value has an @index that must be preserved

    const preserveIndex = '@index' in value && !container.includes('@index'); // if there's no @index to preserve ...

    if (!preserveIndex && type !== '@none') {
      // matching @type or @language specified in context, compact value
      if (value['@type'] === type) {
        return value['@value'];
      }

      if ('@language' in value && value['@language'] === language && '@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }

      if ('@language' in value && value['@language'] === language) {
        return value['@value'];
      }

      if ('@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }
    } // return just the value of @value if all are true:
    // 1. @value is the only key or @index isn't being preserved
    // 2. there is no default language or @value is not a string or
    //   the key has a mapping with a null @language


    const keyCount = Object.keys(value).length;
    const isValueOnlyKey = keyCount === 1 || keyCount === 2 && '@index' in value && !preserveIndex;
    const hasDefaultLanguage = ('@language' in activeCtx);

    const isValueString = _isString(value['@value']);

    const hasNullMapping = activeCtx.mappings.has(activeProperty) && activeCtx.mappings.get(activeProperty)['@language'] === null;

    if (isValueOnlyKey && type !== '@none' && (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
      return value['@value'];
    }

    const rval = {}; // preserve @index

    if (preserveIndex) {
      rval[api.compactIri({
        activeCtx,
        iri: '@index',
        relativeTo: {
          vocab: true
        }
      })] = value['@index'];
    }

    if ('@type' in value) {
      // compact @type IRI
      rval[api.compactIri({
        activeCtx,
        iri: '@type',
        relativeTo: {
          vocab: true
        }
      })] = api.compactIri({
        activeCtx,
        iri: value['@type'],
        relativeTo: {
          vocab: true
        }
      });
    } else if ('@language' in value) {
      // alias @language
      rval[api.compactIri({
        activeCtx,
        iri: '@language',
        relativeTo: {
          vocab: true
        }
      })] = value['@language'];
    }

    if ('@direction' in value) {
      // alias @direction
      rval[api.compactIri({
        activeCtx,
        iri: '@direction',
        relativeTo: {
          vocab: true
        }
      })] = value['@direction'];
    } // alias @value


    rval[api.compactIri({
      activeCtx,
      iri: '@value',
      relativeTo: {
        vocab: true
      }
    })] = value['@value'];
    return rval;
  } // value is a subject reference


  const expandedProperty = _expandIri(activeCtx, activeProperty, {
    vocab: true
  }, options);

  const type = _getContextValue(activeCtx, activeProperty, '@type');

  const compacted = api.compactIri({
    activeCtx,
    iri: value['@id'],
    relativeTo: {
      vocab: type === '@vocab'
    },
    base: options.base
  }); // compact to scalar

  if (type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
    return compacted;
  }

  return {
    [api.compactIri({
      activeCtx,
      iri: '@id',
      relativeTo: {
        vocab: true
      }
    })]: compacted
  };
};
/**
 * Picks the preferred compaction term from the given inverse context entry.
 *
 * @param activeCtx the active context.
 * @param iri the IRI to pick the term for.
 * @param value the value to pick the term for.
 * @param containers the preferred containers.
 * @param typeOrLanguage either '@type' or '@language'.
 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
 *
 * @return the preferred term.
 */


function _selectTerm(activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
  if (typeOrLanguageValue === null) {
    typeOrLanguageValue = '@null';
  } // preferences for the value of @type or @language


  const prefs = []; // determine prefs for @id based on whether or not value compacts to a term

  if ((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') && _isObject(value) && '@id' in value) {
    // prefer @reverse first
    if (typeOrLanguageValue === '@reverse') {
      prefs.push('@reverse');
    } // try to compact value to a term


    const term = api.compactIri({
      activeCtx,
      iri: value['@id'],
      relativeTo: {
        vocab: true
      }
    });

    if (activeCtx.mappings.has(term) && activeCtx.mappings.get(term) && activeCtx.mappings.get(term)['@id'] === value['@id']) {
      // prefer @vocab
      prefs.push.apply(prefs, ['@vocab', '@id']);
    } else {
      // prefer @id
      prefs.push.apply(prefs, ['@id', '@vocab']);
    }
  } else {
    prefs.push(typeOrLanguageValue); // consider direction only

    const langDir = prefs.find(el => el.includes('_'));

    if (langDir) {
      // consider _dir portion
      prefs.push(langDir.replace(/^[^_]+_/, '_'));
    }
  }

  prefs.push('@none');
  const containerMap = activeCtx.inverse[iri];

  for (const container of containers) {
    // if container not available in the map, continue
    if (!(container in containerMap)) {
      continue;
    }

    const typeOrLanguageValueMap = containerMap[container][typeOrLanguage];

    for (const pref of prefs) {
      // if type/language option not available in the map, continue
      if (!(pref in typeOrLanguageValueMap)) {
        continue;
      } // select term


      return typeOrLanguageValueMap[pref];
    }
  }

  return null;
}
/**
 * The value of `@nest` in the term definition must either be `@nest`, or a term
 * which resolves to `@nest`.
 *
 * @param activeCtx the active context.
 * @param nestProperty a term in the active context or `@nest`.
 * @param {Object} [options] - processing options.
 */


function _checkNestProperty(activeCtx, nestProperty, options) {
  if (_expandIri(activeCtx, nestProperty, {
    vocab: true
  }, options) !== '@nest') {
    throw new JsonLdError('JSON-LD compact error; nested property must have an @nest value ' + 'resolving to @nest.', 'jsonld.SyntaxError', {
      code: 'invalid @nest value'
    });
  }
}
},{"./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","./types":"node_modules/jsonld/lib/types.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./context":"node_modules/jsonld/lib/context.js","./url":"node_modules/jsonld/lib/url.js","./util":"node_modules/jsonld/lib/util.js"}],"node_modules/jsonld/lib/JsonLdProcessor.js":[function(require,module,exports) {
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

module.exports = jsonld => {
  class JsonLdProcessor {
    toString() {
      return '[object JsonLdProcessor]';
    }

  }

  Object.defineProperty(JsonLdProcessor, 'prototype', {
    writable: false,
    enumerable: false
  });
  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: JsonLdProcessor
  }); // The Web IDL test harness will check the number of parameters defined in
  // the functions below. The number of parameters must exactly match the
  // required (non-optional) parameters of the JsonLdProcessor interface as
  // defined here:
  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface

  JsonLdProcessor.compact = function (input, ctx) {
    if (arguments.length < 2) {
      return Promise.reject(new TypeError('Could not compact, too few arguments.'));
    }

    return jsonld.compact(input, ctx);
  };

  JsonLdProcessor.expand = function (input) {
    if (arguments.length < 1) {
      return Promise.reject(new TypeError('Could not expand, too few arguments.'));
    }

    return jsonld.expand(input);
  };

  JsonLdProcessor.flatten = function (input) {
    if (arguments.length < 1) {
      return Promise.reject(new TypeError('Could not flatten, too few arguments.'));
    }

    return jsonld.flatten(input);
  };

  return JsonLdProcessor;
};
},{}],"node_modules/jsonld/lib/jsonld.js":[function(require,module,exports) {
/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2019 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
const canonize = require('rdf-canonize');

const platform = require('./platform');

const util = require('./util');

const ContextResolver = require('./ContextResolver');

const IdentifierIssuer = util.IdentifierIssuer;

const JsonLdError = require('./JsonLdError');

const LRU = require('lru-cache');

const NQuads = require('./NQuads');

const {
  expand: _expand
} = require('./expand');

const {
  flatten: _flatten
} = require('./flatten');

const {
  fromRDF: _fromRDF
} = require('./fromRdf');

const {
  toRDF: _toRDF
} = require('./toRdf');

const {
  frameMergedOrDefault: _frameMergedOrDefault,
  cleanupNull: _cleanupNull
} = require('./frame');

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString
} = require('./types');

const {
  isSubjectReference: _isSubjectReference
} = require('./graphTypes');

const {
  expandIri: _expandIri,
  getInitialContext: _getInitialContext,
  process: _processContext,
  processingMode: _processingMode
} = require('./context');

const {
  compact: _compact,
  compactIri: _compactIri
} = require('./compact');

const {
  createNodeMap: _createNodeMap,
  createMergedNodeMap: _createMergedNodeMap,
  mergeNodeMaps: _mergeNodeMaps
} = require('./nodeMap');
/* eslint-disable indent */
// attaches jsonld API to the given object


const wrapper = function (jsonld) {
  /** Registered RDF dataset parsers hashed by content-type. */
  const _rdfParsers = {}; // resolved context cache
  // TODO: consider basing max on context size rather than number

  const RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;

  const _resolvedContextCache = new LRU({
    max: RESOLVED_CONTEXT_CACHE_MAX_SIZE
  });
  /* Core API */

  /**
   * Performs JSON-LD compaction.
   *
   * @param input the JSON-LD input to compact.
   * @param ctx the context to compact with.
   * @param [options] options to use:
   *          [base] the base IRI to use.
   *          [compactArrays] true to compact arrays to single values when
   *            appropriate, false not to (default: true).
   *          [compactToRelative] true to compact IRIs to be relative to document
   *            base, false to keep absolute (default: true)
   *          [graph] true to always output a top-level graph (default: false).
   *          [expandContext] a context to expand with.
   *          [skipExpansion] true to assume the input is expanded and skip
   *            expansion, false not to, defaults to false.
   *          [documentLoader(url, options)] the document loader.
   *          [expansionMap(info)] a function that can be used to custom map
   *            unmappable values (or to throw an error when they are detected);
   *            if this function returns `undefined` then the default behavior
   *            will be used.
   *          [framing] true if compaction is occuring during a framing operation.
   *          [compactionMap(info)] a function that can be used to custom map
   *            unmappable values (or to throw an error when they are detected);
   *            if this function returns `undefined` then the default behavior
   *            will be used.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the compacted output.
   */


  jsonld.compact = async function (input, ctx, options) {
    if (arguments.length < 2) {
      throw new TypeError('Could not compact, too few arguments.');
    }

    if (ctx === null) {
      throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {
        code: 'invalid local context'
      });
    } // nothing to compact


    if (input === null) {
      return null;
    } // set default options


    options = _setDefaults(options, {
      base: _isString(input) ? input : '',
      compactArrays: true,
      compactToRelative: true,
      graph: false,
      skipExpansion: false,
      link: false,
      issuer: new IdentifierIssuer('_:b'),
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    });

    if (options.link) {
      // force skip expansion when linking, "link" is not part of the public
      // API, it should only be called from framing
      options.skipExpansion = true;
    }

    if (!options.compactToRelative) {
      delete options.base;
    } // expand input


    let expanded;

    if (options.skipExpansion) {
      expanded = input;
    } else {
      expanded = await jsonld.expand(input, options);
    } // process context


    const activeCtx = await jsonld.processContext(_getInitialContext(options), ctx, options); // do compaction

    let compacted = await _compact({
      activeCtx,
      element: expanded,
      options,
      compactionMap: options.compactionMap
    }); // perform clean up

    if (options.compactArrays && !options.graph && _isArray(compacted)) {
      if (compacted.length === 1) {
        // simplify to a single item
        compacted = compacted[0];
      } else if (compacted.length === 0) {
        // simplify to an empty object
        compacted = {};
      }
    } else if (options.graph && _isObject(compacted)) {
      // always use array if graph option is on
      compacted = [compacted];
    } // follow @context key


    if (_isObject(ctx) && '@context' in ctx) {
      ctx = ctx['@context'];
    } // build output context


    ctx = util.clone(ctx);

    if (!_isArray(ctx)) {
      ctx = [ctx];
    } // remove empty contexts


    const tmp = ctx;
    ctx = [];

    for (let i = 0; i < tmp.length; ++i) {
      if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
        ctx.push(tmp[i]);
      }
    } // remove array if only one context


    const hasContext = ctx.length > 0;

    if (ctx.length === 1) {
      ctx = ctx[0];
    } // add context and/or @graph


    if (_isArray(compacted)) {
      // use '@graph' keyword
      const graphAlias = _compactIri({
        activeCtx,
        iri: '@graph',
        relativeTo: {
          vocab: true
        }
      });

      const graph = compacted;
      compacted = {};

      if (hasContext) {
        compacted['@context'] = ctx;
      }

      compacted[graphAlias] = graph;
    } else if (_isObject(compacted) && hasContext) {
      // reorder keys so @context is first
      const graph = compacted;
      compacted = {
        '@context': ctx
      };

      for (const key in graph) {
        compacted[key] = graph[key];
      }
    }

    return compacted;
  };
  /**
   * Performs JSON-LD expansion.
   *
   * @param input the JSON-LD input to expand.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [keepFreeFloatingNodes] true to keep free-floating nodes,
   *            false not to, defaults to false.
   *          [documentLoader(url, options)] the document loader.
   *          [expansionMap(info)] a function that can be used to custom map
   *            unmappable values (or to throw an error when they are detected);
   *            if this function returns `undefined` then the default behavior
   *            will be used.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the expanded output.
   */


  jsonld.expand = async function (input, options) {
    if (arguments.length < 1) {
      throw new TypeError('Could not expand, too few arguments.');
    } // set default options


    options = _setDefaults(options, {
      keepFreeFloatingNodes: false,
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    });

    if (options.expansionMap === false) {
      options.expansionMap = undefined;
    } // build set of objects that may have @contexts to resolve


    const toResolve = {}; // build set of contexts to process prior to expansion

    const contextsToProcess = []; // if an `expandContext` has been given ensure it gets resolved

    if ('expandContext' in options) {
      const expandContext = util.clone(options.expandContext);

      if (_isObject(expandContext) && '@context' in expandContext) {
        toResolve.expandContext = expandContext;
      } else {
        toResolve.expandContext = {
          '@context': expandContext
        };
      }

      contextsToProcess.push(toResolve.expandContext);
    } // if input is a string, attempt to dereference remote document


    let defaultBase;

    if (!_isString(input)) {
      // input is not a URL, do not need to retrieve it first
      toResolve.input = util.clone(input);
    } else {
      // load remote doc
      const remoteDoc = await jsonld.get(input, options);
      defaultBase = remoteDoc.documentUrl;
      toResolve.input = remoteDoc.document;

      if (remoteDoc.contextUrl) {
        // context included in HTTP link header and must be resolved
        toResolve.remoteContext = {
          '@context': remoteDoc.contextUrl
        };
        contextsToProcess.push(toResolve.remoteContext);
      }
    } // set default base


    if (!('base' in options)) {
      options.base = defaultBase || '';
    } // process any additional contexts


    let activeCtx = _getInitialContext(options);

    for (const localCtx of contextsToProcess) {
      activeCtx = await _processContext({
        activeCtx,
        localCtx,
        options
      });
    } // expand resolved input


    let expanded = await _expand({
      activeCtx,
      element: toResolve.input,
      options,
      expansionMap: options.expansionMap
    }); // optimize away @graph with no other properties

    if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) {
      expanded = expanded['@graph'];
    } else if (expanded === null) {
      expanded = [];
    } // normalize to an array


    if (!_isArray(expanded)) {
      expanded = [expanded];
    }

    return expanded;
  };
  /**
   * Performs JSON-LD flattening.
   *
   * @param input the JSON-LD to flatten.
   * @param ctx the context to use to compact the flattened output, or null.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the flattened output.
   */


  jsonld.flatten = async function (input, ctx, options) {
    if (arguments.length < 1) {
      return new TypeError('Could not flatten, too few arguments.');
    }

    if (typeof ctx === 'function') {
      ctx = null;
    } else {
      ctx = ctx || null;
    } // set default options


    options = _setDefaults(options, {
      base: _isString(input) ? input : '',
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    }); // expand input

    const expanded = await jsonld.expand(input, options); // do flattening

    const flattened = _flatten(expanded);

    if (ctx === null) {
      // no compaction required
      return flattened;
    } // compact result (force @graph option to true, skip expansion)


    options.graph = true;
    options.skipExpansion = true;
    const compacted = await jsonld.compact(flattened, ctx, options);
    return compacted;
  };
  /**
   * Performs JSON-LD framing.
   *
   * @param input the JSON-LD input to frame.
   * @param frame the JSON-LD frame to use.
   * @param [options] the framing options.
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
   *            (default: '@last').
   *          [explicit] default @explicit flag (default: false).
   *          [requireAll] default @requireAll flag (default: true).
   *          [omitDefault] default @omitDefault flag (default: false).
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the framed output.
   */


  jsonld.frame = async function (input, frame, options) {
    if (arguments.length < 2) {
      throw new TypeError('Could not frame, too few arguments.');
    } // set default options


    options = _setDefaults(options, {
      base: _isString(input) ? input : '',
      embed: '@once',
      explicit: false,
      requireAll: false,
      omitDefault: false,
      bnodesToClear: [],
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    }); // if frame is a string, attempt to dereference remote document

    if (_isString(frame)) {
      // load remote doc
      const remoteDoc = await jsonld.get(frame, options);
      frame = remoteDoc.document;

      if (remoteDoc.contextUrl) {
        // inject link header @context into frame
        let ctx = frame['@context'];

        if (!ctx) {
          ctx = remoteDoc.contextUrl;
        } else if (_isArray(ctx)) {
          ctx.push(remoteDoc.contextUrl);
        } else {
          ctx = [ctx, remoteDoc.contextUrl];
        }

        frame['@context'] = ctx;
      }
    }

    const frameContext = frame ? frame['@context'] || {} : {}; // process context

    const activeCtx = await jsonld.processContext(_getInitialContext(options), frameContext, options); // mode specific defaults

    if (!options.hasOwnProperty('omitGraph')) {
      options.omitGraph = _processingMode(activeCtx, 1.1);
    }

    if (!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {
      options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);
    } // expand input


    const expanded = await jsonld.expand(input, options); // expand frame

    const opts = { ...options
    };
    opts.isFrame = true;
    opts.keepFreeFloatingNodes = true;
    const expandedFrame = await jsonld.expand(frame, opts); // if the unexpanded frame includes a key expanding to @graph, frame the
    // default graph, otherwise, the merged graph

    const frameKeys = Object.keys(frame).map(key => _expandIri(activeCtx, key, {
      vocab: true
    }));
    opts.merged = !frameKeys.includes('@graph');
    opts.is11 = _processingMode(activeCtx, 1.1); // do framing

    const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);

    opts.graph = !options.omitGraph;
    opts.skipExpansion = true;
    opts.link = {};
    opts.framing = true;
    let compacted = await jsonld.compact(framed, frameContext, opts); // replace @null with null, compacting arrays

    opts.link = {};
    compacted = _cleanupNull(compacted, opts);
    return compacted;
  };
  /**
   * **Experimental**
   *
   * Links a JSON-LD document's nodes in memory.
   *
   * @param input the JSON-LD document to link.
   * @param [ctx] the JSON-LD context to apply.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the linked output.
   */


  jsonld.link = async function (input, ctx, options) {
    // API matches running frame with a wildcard frame and embed: '@link'
    // get arguments
    const frame = {};

    if (ctx) {
      frame['@context'] = ctx;
    }

    frame['@embed'] = '@link';
    return jsonld.frame(input, frame, options);
  };
  /**
   * Performs RDF dataset normalization on the given input. The input is JSON-LD
   * unless the 'inputFormat' option is used. The output is an RDF dataset
   * unless the 'format' option is used.
   *
   * @param input the input to normalize as JSON-LD or as a format specified by
   *          the 'inputFormat' option.
   * @param [options] the options to use:
   *          [algorithm] the normalization algorithm to use, `URDNA2015` or
   *            `URGNA2012` (default: `URDNA2015`).
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [skipExpansion] true to assume the input is expanded and skip
   *            expansion, false not to, defaults to false.
   *          [inputFormat] the format if input is not JSON-LD:
   *            'application/n-quads' for N-Quads.
   *          [format] the format if output is a string:
   *            'application/n-quads' for N-Quads.
   *          [documentLoader(url, options)] the document loader.
   *          [useNative] true to use a native canonize algorithm
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the normalized output.
   */


  jsonld.normalize = jsonld.canonize = async function (input, options) {
    if (arguments.length < 1) {
      throw new TypeError('Could not canonize, too few arguments.');
    } // set default options


    options = _setDefaults(options, {
      base: _isString(input) ? input : '',
      algorithm: 'URDNA2015',
      skipExpansion: false,
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    });

    if ('inputFormat' in options) {
      if (options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads') {
        throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');
      } // TODO: `await` for async parsers


      const parsedInput = NQuads.parse(input); // do canonicalization

      return canonize.canonize(parsedInput, options);
    } // convert to RDF dataset then do normalization


    const opts = { ...options
    };
    delete opts.format;
    opts.produceGeneralizedRdf = false;
    const dataset = await jsonld.toRDF(input, opts); // do canonicalization

    return canonize.canonize(dataset, options);
  };
  /**
   * Converts an RDF dataset to JSON-LD.
   *
   * @param dataset a serialized string of RDF in a format specified by the
   *          format option or an RDF dataset to convert.
   * @param [options] the options to use:
   *          [format] the format if dataset param must first be parsed:
   *            'application/n-quads' for N-Quads (default).
   *          [rdfParser] a custom RDF-parser to use to parse the dataset.
   *          [useRdfType] true to use rdf:type, false to use @type
   *            (default: false).
   *          [useNativeTypes] true to convert XSD types into native types
   *            (boolean, integer, double), false not to (default: false).
   *
   * @return a Promise that resolves to the JSON-LD document.
   */


  jsonld.fromRDF = async function (dataset, options) {
    if (arguments.length < 1) {
      throw new TypeError('Could not convert from RDF, too few arguments.');
    } // set default options


    options = _setDefaults(options, {
      format: _isString(dataset) ? 'application/n-quads' : undefined
    });
    const {
      format
    } = options;
    let {
      rdfParser
    } = options; // handle special format

    if (format) {
      // check supported formats
      rdfParser = rdfParser || _rdfParsers[format];

      if (!rdfParser) {
        throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {
          format
        });
      }
    } else {
      // no-op parser, assume dataset already parsed
      rdfParser = () => dataset;
    } // rdfParser must be synchronous or return a promise, no callback support


    const parsedDataset = await rdfParser(dataset);
    return _fromRDF(parsedDataset, options);
  };
  /**
   * Outputs the RDF dataset found in the given JSON-LD object.
   *
   * @param input the JSON-LD input.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [skipExpansion] true to assume the input is expanded and skip
   *            expansion, false not to, defaults to false.
   *          [format] the format to use to output a string:
   *            'application/n-quads' for N-Quads.
   *          [produceGeneralizedRdf] true to output generalized RDF, false
   *            to produce only standard RDF (default: false).
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the RDF dataset.
   */


  jsonld.toRDF = async function (input, options) {
    if (arguments.length < 1) {
      throw new TypeError('Could not convert to RDF, too few arguments.');
    } // set default options


    options = _setDefaults(options, {
      base: _isString(input) ? input : '',
      skipExpansion: false,
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    }); // TODO: support toRDF custom map?

    let expanded;

    if (options.skipExpansion) {
      expanded = input;
    } else {
      // expand input
      expanded = await jsonld.expand(input, options);
    } // output RDF dataset


    const dataset = _toRDF(expanded, options);

    if (options.format) {
      if (options.format === 'application/n-quads' || options.format === 'application/nquads') {
        return NQuads.serialize(dataset);
      }

      throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {
        format: options.format
      });
    }

    return dataset;
  };
  /**
   * **Experimental**
   *
   * Recursively flattens the nodes in the given JSON-LD input into a merged
   * map of node ID => node. All graphs will be merged into the default graph.
   *
   * @param input the JSON-LD input.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the merged node map.
   */


  jsonld.createNodeMap = async function (input, options) {
    if (arguments.length < 1) {
      throw new TypeError('Could not create node map, too few arguments.');
    } // set default options


    options = _setDefaults(options, {
      base: _isString(input) ? input : '',
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    }); // expand input

    const expanded = await jsonld.expand(input, options);
    return _createMergedNodeMap(expanded, options);
  };
  /**
   * **Experimental**
   *
   * Merges two or more JSON-LD documents into a single flattened document.
   *
   * @param docs the JSON-LD documents to merge together.
   * @param ctx the context to use to compact the merged result, or null.
   * @param [options] the options to use:
   *          [base] the base IRI to use.
   *          [expandContext] a context to expand with.
   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
   *          [mergeNodes] true to merge properties for nodes with the same ID,
   *            false to ignore new properties for nodes with the same ID once
   *            the ID has been defined; note that this may not prevent merging
   *            new properties where a node is in the `object` position
   *            (default: true).
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the merged output.
   */


  jsonld.merge = async function (docs, ctx, options) {
    if (arguments.length < 1) {
      throw new TypeError('Could not merge, too few arguments.');
    }

    if (!_isArray(docs)) {
      throw new TypeError('Could not merge, "docs" must be an array.');
    }

    if (typeof ctx === 'function') {
      ctx = null;
    } else {
      ctx = ctx || null;
    } // set default options


    options = _setDefaults(options, {
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    }); // expand all documents

    const expanded = await Promise.all(docs.map(doc => {
      const opts = { ...options
      };
      return jsonld.expand(doc, opts);
    }));
    let mergeNodes = true;

    if ('mergeNodes' in options) {
      mergeNodes = options.mergeNodes;
    }

    const issuer = options.issuer || new IdentifierIssuer('_:b');
    const graphs = {
      '@default': {}
    };

    for (let i = 0; i < expanded.length; ++i) {
      // uniquely relabel blank nodes
      const doc = util.relabelBlankNodes(expanded[i], {
        issuer: new IdentifierIssuer('_:b' + i + '-')
      }); // add nodes to the shared node map graphs if merging nodes, to a
      // separate graph set if not

      const _graphs = mergeNodes || i === 0 ? graphs : {
        '@default': {}
      };

      _createNodeMap(doc, _graphs, '@default', issuer);

      if (_graphs !== graphs) {
        // merge document graphs but don't merge existing nodes
        for (const graphName in _graphs) {
          const _nodeMap = _graphs[graphName];

          if (!(graphName in graphs)) {
            graphs[graphName] = _nodeMap;
            continue;
          }

          const nodeMap = graphs[graphName];

          for (const key in _nodeMap) {
            if (!(key in nodeMap)) {
              nodeMap[key] = _nodeMap[key];
            }
          }
        }
      }
    } // add all non-default graphs to default graph


    const defaultGraph = _mergeNodeMaps(graphs); // produce flattened output


    const flattened = [];
    const keys = Object.keys(defaultGraph).sort();

    for (let ki = 0; ki < keys.length; ++ki) {
      const node = defaultGraph[keys[ki]]; // only add full subjects to top-level

      if (!_isSubjectReference(node)) {
        flattened.push(node);
      }
    }

    if (ctx === null) {
      return flattened;
    } // compact result (force @graph option to true, skip expansion)


    options.graph = true;
    options.skipExpansion = true;
    const compacted = await jsonld.compact(flattened, ctx, options);
    return compacted;
  };
  /**
   * The default document loader for external documents.
   *
   * @param url the URL to load.
   *
   * @return a promise that resolves to the remote document.
   */


  Object.defineProperty(jsonld, 'documentLoader', {
    get: () => jsonld._documentLoader,
    set: v => jsonld._documentLoader = v
  }); // default document loader not implemented

  jsonld.documentLoader = async url => {
    throw new JsonLdError('Could not retrieve a JSON-LD document from the URL. URL ' + 'dereferencing not implemented.', 'jsonld.LoadDocumentError', {
      code: 'loading document failed',
      url
    });
  };
  /**
   * Gets a remote JSON-LD document using the default document loader or
   * one given in the passed options.
   *
   * @param url the URL to fetch.
   * @param [options] the options to use:
   *          [documentLoader] the document loader to use.
   *
   * @return a Promise that resolves to the retrieved remote document.
   */


  jsonld.get = async function (url, options) {
    let load;

    if (typeof options.documentLoader === 'function') {
      load = options.documentLoader;
    } else {
      load = jsonld.documentLoader;
    }

    const remoteDoc = await load(url);

    try {
      if (!remoteDoc.document) {
        throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');
      }

      if (_isString(remoteDoc.document)) {
        remoteDoc.document = JSON.parse(remoteDoc.document);
      }
    } catch (e) {
      throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {
        code: 'loading document failed',
        cause: e,
        remoteDoc
      });
    }

    return remoteDoc;
  };
  /**
   * Processes a local context, resolving any URLs as necessary, and returns a
   * new active context.
   *
   * @param activeCtx the current active context.
   * @param localCtx the local context to process.
   * @param [options] the options to use:
   *          [documentLoader(url, options)] the document loader.
   *          [contextResolver] internal use only.
   *
   * @return a Promise that resolves to the new active context.
   */


  jsonld.processContext = async function (activeCtx, localCtx, options) {
    // set default options
    options = _setDefaults(options, {
      base: '',
      contextResolver: new ContextResolver({
        sharedCache: _resolvedContextCache
      })
    }); // return initial context early for null context

    if (localCtx === null) {
      return _getInitialContext(options);
    } // get URLs in localCtx


    localCtx = util.clone(localCtx);

    if (!(_isObject(localCtx) && '@context' in localCtx)) {
      localCtx = {
        '@context': localCtx
      };
    }

    return _processContext({
      activeCtx,
      localCtx,
      options
    });
  }; // backwards compatibility


  jsonld.getContextValue = require('./context').getContextValue;
  /**
   * Document loaders.
   */

  jsonld.documentLoaders = {};
  /**
   * Assigns the default document loader for external document URLs to a built-in
   * default. Supported types currently include: 'xhr' and 'node'.
   *
   * @param type the type to set.
   * @param [params] the parameters required to use the document loader.
   */

  jsonld.useDocumentLoader = function (type) {
    if (!(type in jsonld.documentLoaders)) {
      throw new JsonLdError('Unknown document loader type: "' + type + '"', 'jsonld.UnknownDocumentLoader', {
        type
      });
    } // set document loader


    jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));
  };
  /**
   * Registers an RDF dataset parser by content-type, for use with
   * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,
   * a string of input. An RDF dataset parser can be synchronous or
   * asynchronous (by returning a promise).
   *
   * @param contentType the content-type for the parser.
   * @param parser(input) the parser function (takes a string as a parameter
   *          and either returns an RDF dataset or a Promise that resolves to one.
   */


  jsonld.registerRDFParser = function (contentType, parser) {
    _rdfParsers[contentType] = parser;
  };
  /**
   * Unregisters an RDF dataset parser by content-type.
   *
   * @param contentType the content-type for the parser.
   */


  jsonld.unregisterRDFParser = function (contentType) {
    delete _rdfParsers[contentType];
  }; // register the N-Quads RDF parser


  jsonld.registerRDFParser('application/n-quads', NQuads.parse);
  jsonld.registerRDFParser('application/nquads', NQuads.parse);
  /* URL API */

  jsonld.url = require('./url');
  /* Utility API */

  jsonld.util = util; // backwards compatibility

  Object.assign(jsonld, util); // reexpose API as jsonld.promises for backwards compatability

  jsonld.promises = jsonld; // backwards compatibility

  jsonld.RequestQueue = require('./RequestQueue');
  /* WebIDL API */

  jsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);
  platform.setupGlobals(jsonld);
  platform.setupDocumentLoaders(jsonld);

  function _setDefaults(options, _ref) {
    let {
      documentLoader = jsonld.documentLoader,
      ...defaults
    } = _ref;
    return Object.assign({}, {
      documentLoader
    }, defaults, options);
  } // end of jsonld API `wrapper` factory


  return jsonld;
}; // external APIs:
// used to generate a new jsonld API instance


const factory = function () {
  return wrapper(function () {
    return factory();
  });
}; // wrap the main jsonld API instance


wrapper(factory); // export API

module.exports = factory;
},{"rdf-canonize":"node_modules/rdf-canonize/index.js","./platform":"node_modules/jsonld/lib/platform-browser.js","./util":"node_modules/jsonld/lib/util.js","./ContextResolver":"node_modules/jsonld/lib/ContextResolver.js","./JsonLdError":"node_modules/jsonld/lib/JsonLdError.js","lru-cache":"node_modules/lru-cache/index.js","./NQuads":"node_modules/jsonld/lib/NQuads.js","./expand":"node_modules/jsonld/lib/expand.js","./flatten":"node_modules/jsonld/lib/flatten.js","./fromRdf":"node_modules/jsonld/lib/fromRdf.js","./toRdf":"node_modules/jsonld/lib/toRdf.js","./frame":"node_modules/jsonld/lib/frame.js","./types":"node_modules/jsonld/lib/types.js","./graphTypes":"node_modules/jsonld/lib/graphTypes.js","./context":"node_modules/jsonld/lib/context.js","./compact":"node_modules/jsonld/lib/compact.js","./nodeMap":"node_modules/jsonld/lib/nodeMap.js","./url":"node_modules/jsonld/lib/url.js","./RequestQueue":"node_modules/jsonld/lib/RequestQueue.js","./JsonLdProcessor":"node_modules/jsonld/lib/JsonLdProcessor.js"}],"node_modules/n3/src/IRIs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      SWAP = 'http://www.w3.org/2000/10/swap/';
var _default = {
  xsd: {
    decimal: `${XSD}decimal`,
    boolean: `${XSD}boolean`,
    double: `${XSD}double`,
    integer: `${XSD}integer`,
    string: `${XSD}string`
  },
  rdf: {
    type: `${RDF}type`,
    nil: `${RDF}nil`,
    first: `${RDF}first`,
    rest: `${RDF}rest`,
    langString: `${RDF}langString`
  },
  owl: {
    sameAs: 'http://www.w3.org/2002/07/owl#sameAs'
  },
  r: {
    forSome: `${SWAP}reify#forSome`,
    forAll: `${SWAP}reify#forAll`
  },
  log: {
    implies: `${SWAP}log#implies`
  }
};
exports.default = _default;
},{}],"node_modules/queue-microtask/index.js":[function(require,module,exports) {
var global = arguments[3];
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let promise

module.exports = typeof queueMicrotask === 'function'
  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)
  // reuse resolved promise, and allocate it lazily
  : cb => (promise || (promise = Promise.resolve()))
    .then(cb)
    .catch(err => setTimeout(() => { throw err }, 0))

},{}],"node_modules/n3/src/N3Lexer.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _IRIs = _interopRequireDefault(require("./IRIs"));

var _queueMicrotask = _interopRequireDefault(require("queue-microtask"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **N3Lexer** tokenizes N3 documents.
const {
  xsd
} = _IRIs.default; // Regular expression and replacement string to escape N3 strings

const escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;
const escapeReplacements = {
  '\\': '\\',
  "'": "'",
  '"': '"',
  'n': '\n',
  'r': '\r',
  't': '\t',
  'f': '\f',
  'b': '\b',
  '_': '_',
  '~': '~',
  '.': '.',
  '-': '-',
  '!': '!',
  '$': '$',
  '&': '&',
  '(': '(',
  ')': ')',
  '*': '*',
  '+': '+',
  ',': ',',
  ';': ';',
  '=': '=',
  '/': '/',
  '?': '?',
  '#': '#',
  '@': '@',
  '%': '%'
};
const illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;
const lineModeRegExps = {
  _iri: true,
  _unescapedIri: true,
  _simpleQuotedString: true,
  _langcode: true,
  _blank: true,
  _newline: true,
  _comment: true,
  _whitespace: true,
  _endOfFile: true
};
const invalidRegExp = /$0^/; // ## Constructor

class N3Lexer {
  constructor(options) {
    // ## Regular expressions
    // It's slightly faster to have these as properties than as in-scope variables
    this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/; // IRI with escape sequences; needs sanity check after unescaping

    this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/; // IRI without escape sequences; no unescaping

    this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/; // string without escape sequences

    this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
    this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
    this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;
    this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;
    this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;
    this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;
    this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;
    this._keyword = /^@[a-z]+(?=[\s#<:])/i;
    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
    this._shortPredicates = /^a(?=[\s#()\[\]\{\}"'<>])/;
    this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
    this._comment = /#([^\n\r]*)/;
    this._whitespace = /^[ \t]+/;
    this._endOfFile = /^(?:#[^\n\r]*)?$/;
    options = options || {}; // In line mode (N-Triples or N-Quads), only simple features may be parsed

    if (this._lineMode = !!options.lineMode) {
      this._n3Mode = false; // Don't tokenize special literals

      for (const key in this) {
        if (!(key in lineModeRegExps) && this[key] instanceof RegExp) this[key] = invalidRegExp;
      }
    } // When not in line mode, enable N3 functionality by default
    else {
      this._n3Mode = options.n3 !== false;
    } // Don't output comment tokens by default


    this._comments = !!options.comments; // Cache the last tested closing position of long literals

    this._literalClosingPos = 0;
  } // ## Private methods
  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback


  _tokenizeToEnd(callback, inputFinished) {
    // Continue parsing as far as possible; the loop will return eventually
    let input = this._input;
    let currentLineLength = input.length;

    while (true) {
      // Count and skip whitespace lines
      let whiteSpaceMatch, comment;

      while (whiteSpaceMatch = this._newline.exec(input)) {
        // Try to find a comment
        if (this._comments && (comment = this._comment.exec(whiteSpaceMatch[0]))) emitToken('comment', comment[1], '', this._line, whiteSpaceMatch[0].length); // Advance the input

        input = input.substr(whiteSpaceMatch[0].length, input.length);
        currentLineLength = input.length;
        this._line++;
      } // Skip whitespace on current line


      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input))) input = input.substr(whiteSpaceMatch[0].length, input.length); // Stop for now if we're at the end

      if (this._endOfFile.test(input)) {
        // If the input is finished, emit EOF
        if (inputFinished) {
          // Try to find a final comment
          if (this._comments && (comment = this._comment.exec(input))) emitToken('comment', comment[1], '', this._line, input.length);
          input = null;
          emitToken('eof', '', '', this._line, 0);
        }

        return this._input = input;
      } // Look for specific token types based on the first character


      const line = this._line,
            firstChar = input[0];
      let type = '',
          value = '',
          prefix = '',
          match = null,
          matchLength = 0,
          inconclusive = false;

      switch (firstChar) {
        case '^':
          // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed
          if (input.length < 3) break; // Try to match a type
          else if (input[1] === '^') {
            this._previousMarker = '^^'; // Move to type IRI or prefixed name

            input = input.substr(2);

            if (input[0] !== '<') {
              inconclusive = true;
              break;
            }
          } // If no type, it must be a path expression
          else {
            if (this._n3Mode) {
              matchLength = 1;
              type = '^';
            }

            break;
          }
        // Fall through in case the type is an IRI

        case '<':
          // Try to find a full IRI without escape sequences
          if (match = this._unescapedIri.exec(input)) type = 'IRI', value = match[1]; // Try to find a full IRI with escape sequences
          else if (match = this._iri.exec(input)) {
            value = this._unescape(match[1]);
            if (value === null || illegalIriChars.test(value)) return reportSyntaxError(this);
            type = 'IRI';
          } // Try to find a nested triple
          else if (input.length > 1 && input[1] === '<') type = '<<', matchLength = 2; // Try to find a backwards implication arrow
          else if (this._n3Mode && input.length > 1 && input[1] === '=') type = 'inverse', matchLength = 2, value = '>';
          break;

        case '>':
          if (input.length > 1 && input[1] === '>') type = '>>', matchLength = 2;
          break;

        case '_':
          // Try to find a blank node. Since it can contain (but not end with) a dot,
          // we always need a non-dot character before deciding it is a blank node.
          // Therefore, try inserting a space if we're at the end of the input.
          if ((match = this._blank.exec(input)) || inputFinished && (match = this._blank.exec(`${input} `))) type = 'blank', prefix = '_', value = match[1];
          break;

        case '"':
          // Try to find a literal without escape sequences
          if (match = this._simpleQuotedString.exec(input)) value = match[1]; // Try to find a literal wrapped in three pairs of quotes
          else {
            ({
              value,
              matchLength
            } = this._parseLiteral(input));
            if (value === null) return reportSyntaxError(this);
          }

          if (match !== null || matchLength !== 0) {
            type = 'literal';
            this._literalClosingPos = 0;
          }

          break;

        case "'":
          if (!this._lineMode) {
            // Try to find a literal without escape sequences
            if (match = this._simpleApostropheString.exec(input)) value = match[1]; // Try to find a literal wrapped in three pairs of quotes
            else {
              ({
                value,
                matchLength
              } = this._parseLiteral(input));
              if (value === null) return reportSyntaxError(this);
            }

            if (match !== null || matchLength !== 0) {
              type = 'literal';
              this._literalClosingPos = 0;
            }
          }

          break;

        case '?':
          // Try to find a variable
          if (this._n3Mode && (match = this._variable.exec(input))) type = 'var', value = match[0];
          break;

        case '@':
          // Try to find a language code
          if (this._previousMarker === 'literal' && (match = this._langcode.exec(input))) type = 'langcode', value = match[1]; // Try to find a keyword
          else if (match = this._keyword.exec(input)) type = match[0];
          break;

        case '.':
          // Try to find a dot as punctuation
          if (input.length === 1 ? inputFinished : input[1] < '0' || input[1] > '9') {
            type = '.';
            matchLength = 1;
            break;
          }

        // Fall through to numerical case (could be a decimal dot)

        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '+':
        case '-':
          // Try to find a number. Since it can contain (but not end with) a dot,
          // we always need a non-dot character before deciding it is a number.
          // Therefore, try inserting a space if we're at the end of the input.
          if (match = this._number.exec(input) || inputFinished && (match = this._number.exec(`${input} `))) {
            type = 'literal', value = match[0];
            prefix = typeof match[1] === 'string' ? xsd.double : typeof match[2] === 'string' ? xsd.decimal : xsd.integer;
          }

          break;

        case 'B':
        case 'b':
        case 'p':
        case 'P':
        case 'G':
        case 'g':
          // Try to find a SPARQL-style keyword
          if (match = this._sparqlKeyword.exec(input)) type = match[0].toUpperCase();else inconclusive = true;
          break;

        case 'f':
        case 't':
          // Try to match a boolean
          if (match = this._boolean.exec(input)) type = 'literal', value = match[0], prefix = xsd.boolean;else inconclusive = true;
          break;

        case 'a':
          // Try to find an abbreviated predicate
          if (match = this._shortPredicates.exec(input)) type = 'abbreviation', value = 'a';else inconclusive = true;
          break;

        case '=':
          // Try to find an implication arrow or equals sign
          if (this._n3Mode && input.length > 1) {
            type = 'abbreviation';
            if (input[1] !== '>') matchLength = 1, value = '=';else matchLength = 2, value = '>';
          }

          break;

        case '!':
          if (!this._n3Mode) break;

        case ',':
        case ';':
        case '[':
        case ']':
        case '(':
        case ')':
        case '{':
        case '}':
          if (!this._lineMode) {
            matchLength = 1;
            type = firstChar;
          }

          break;

        default:
          inconclusive = true;
      } // Some first characters do not allow an immediate decision, so inspect more


      if (inconclusive) {
        // Try to find a prefix
        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') && (match = this._prefix.exec(input))) type = 'prefix', value = match[1] || ''; // Try to find a prefixed name. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        else if ((match = this._prefixed.exec(input)) || inputFinished && (match = this._prefixed.exec(`${input} `))) type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
      } // A type token is special: it can only be emitted after an IRI or prefixed name is read


      if (this._previousMarker === '^^') {
        switch (type) {
          case 'prefixed':
            type = 'type';
            break;

          case 'IRI':
            type = 'typeIRI';
            break;

          default:
            type = '';
        }
      } // What if nothing of the above was found?


      if (!type) {
        // We could be in streaming mode, and then we just wait for more input to arrive.
        // Otherwise, a syntax error has occurred in the input.
        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
        if (inputFinished || !/^'''|^"""/.test(input) && /\n|\r/.test(input)) return reportSyntaxError(this);else return this._input = input;
      } // Emit the parsed token


      const length = matchLength || match[0].length;
      const token = emitToken(type, value, prefix, line, length);
      this.previousToken = token;
      this._previousMarker = type; // Advance to next part to tokenize

      input = input.substr(length, input.length);
    } // Emits the token through the callback


    function emitToken(type, value, prefix, line, length) {
      const start = input ? currentLineLength - input.length : currentLineLength;
      const end = start + length;
      const token = {
        type,
        value,
        prefix,
        line,
        start,
        end
      };
      callback(null, token);
      return token;
    } // Signals the syntax error through the callback


    function reportSyntaxError(self) {
      callback(self._syntaxError(/^\S*/.exec(input)[0]));
    }
  } // ### `_unescape` replaces N3 escape codes by their corresponding characters


  _unescape(item) {
    let invalid = false;
    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {
      // 4-digit unicode character
      if (typeof unicode4 === 'string') return String.fromCharCode(Number.parseInt(unicode4, 16)); // 8-digit unicode character

      if (typeof unicode8 === 'string') {
        let charCode = Number.parseInt(unicode8, 16);
        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) : String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
      } // fixed escape sequence


      if (escapedChar in escapeReplacements) return escapeReplacements[escapedChar]; // invalid escape sequence

      invalid = true;
      return '';
    });
    return invalid ? null : replaced;
  } // ### `_parseLiteral` parses a literal into an unescaped value


  _parseLiteral(input) {
    // Ensure we have enough lookahead to identify triple-quoted strings
    if (input.length >= 3) {
      // Identify the opening quote(s)
      const opening = input.match(/^(?:"""|"|'''|'|)/)[0];
      const openingLength = opening.length; // Find the next candidate closing quotes

      let closingPos = Math.max(this._literalClosingPos, openingLength);

      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {
        // Count backslashes right before the closing quotes
        let backslashCount = 0;

        while (input[closingPos - backslashCount - 1] === '\\') backslashCount++; // An even number of backslashes (in particular 0)
        // means these are actual, non-escaped closing quotes


        if (backslashCount % 2 === 0) {
          // Extract and unescape the value
          const raw = input.substring(openingLength, closingPos);
          const lines = raw.split(/\r\n|\r|\n/).length - 1;
          const matchLength = closingPos + openingLength; // Only triple-quoted strings can be multi-line

          if (openingLength === 1 && lines !== 0 || openingLength === 3 && this._lineMode) break;
          this._line += lines;
          return {
            value: this._unescape(raw),
            matchLength
          };
        }

        closingPos++;
      }

      this._literalClosingPos = input.length - openingLength + 1;
    }

    return {
      value: '',
      matchLength: 0
    };
  } // ### `_syntaxError` creates a syntax error for the given issue


  _syntaxError(issue) {
    this._input = null;
    const err = new Error(`Unexpected "${issue}" on line ${this._line}.`);
    err.context = {
      token: undefined,
      line: this._line,
      previousToken: this.previousToken
    };
    return err;
  } // ### Strips off any starting UTF BOM mark.


  _readStartingBom(input) {
    return input.startsWith('\ufeff') ? input.substr(1) : input;
  } // ## Public methods
  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
  // The input can be a string or a stream.


  tokenize(input, callback) {
    this._line = 1; // If the input is a string, continuously emit tokens through the callback until the end

    if (typeof input === 'string') {
      this._input = this._readStartingBom(input); // If a callback was passed, asynchronously call it

      if (typeof callback === 'function') (0, _queueMicrotask.default)(() => this._tokenizeToEnd(callback, true)); // If no callback was passed, tokenize synchronously and return
      else {
        const tokens = [];
        let error;

        this._tokenizeToEnd((e, t) => e ? error = e : tokens.push(t), true);

        if (error) throw error;
        return tokens;
      }
    } // Otherwise, the input must be a stream
    else {
      this._pendingBuffer = null;
      if (typeof input.setEncoding === 'function') input.setEncoding('utf8'); // Adds the data chunk to the buffer and parses as far as possible

      input.on('data', data => {
        if (this._input !== null && data.length !== 0) {
          // Prepend any previous pending writes
          if (this._pendingBuffer) {
            data = Buffer.concat([this._pendingBuffer, data]);
            this._pendingBuffer = null;
          } // Hold if the buffer ends in an incomplete unicode sequence


          if (data[data.length - 1] & 0x80) {
            this._pendingBuffer = data;
          } // Otherwise, tokenize as far as possible
          else {
            // Only read a BOM at the start
            if (typeof this._input === 'undefined') this._input = this._readStartingBom(typeof data === 'string' ? data : data.toString());else this._input += data;

            this._tokenizeToEnd(callback, false);
          }
        }
      }); // Parses until the end

      input.on('end', () => {
        if (typeof this._input === 'string') this._tokenizeToEnd(callback, true);
      });
      input.on('error', callback);
    }
  }

}

exports.default = N3Lexer;
},{"./IRIs":"node_modules/n3/src/IRIs.js","queue-microtask":"node_modules/queue-microtask/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/n3/src/N3Util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inDefaultGraph = inDefaultGraph;
exports.isBlankNode = isBlankNode;
exports.isDefaultGraph = isDefaultGraph;
exports.isLiteral = isLiteral;
exports.isNamedNode = isNamedNode;
exports.isVariable = isVariable;
exports.prefix = prefix;
exports.prefixes = prefixes;

var _N3DataFactory = _interopRequireDefault(require("./N3DataFactory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **N3Util** provides N3 utility functions.
// Tests whether the given term represents an IRI
function isNamedNode(term) {
  return !!term && term.termType === 'NamedNode';
} // Tests whether the given term represents a blank node


function isBlankNode(term) {
  return !!term && term.termType === 'BlankNode';
} // Tests whether the given term represents a literal


function isLiteral(term) {
  return !!term && term.termType === 'Literal';
} // Tests whether the given term represents a variable


function isVariable(term) {
  return !!term && term.termType === 'Variable';
} // Tests whether the given term represents the default graph


function isDefaultGraph(term) {
  return !!term && term.termType === 'DefaultGraph';
} // Tests whether the given quad is in the default graph


function inDefaultGraph(quad) {
  return isDefaultGraph(quad.graph);
} // Creates a function that prepends the given IRI to a local name


function prefix(iri, factory) {
  return prefixes({
    '': iri.value || iri
  }, factory)('');
} // Creates a function that allows registering and expanding prefixes


function prefixes(defaultPrefixes, factory) {
  // Add all of the default prefixes
  const prefixes = Object.create(null);

  for (const prefix in defaultPrefixes) processPrefix(prefix, defaultPrefixes[prefix]); // Set the default factory if none was specified


  factory = factory || _N3DataFactory.default; // Registers a new prefix (if an IRI was specified)
  // or retrieves a function that expands an existing prefix (if no IRI was specified)

  function processPrefix(prefix, iri) {
    // Create a new prefix if an IRI is specified or the prefix doesn't exist
    if (typeof iri === 'string') {
      // Create a function that expands the prefix
      const cache = Object.create(null);

      prefixes[prefix] = local => {
        return cache[local] || (cache[local] = factory.namedNode(iri + local));
      };
    } else if (!(prefix in prefixes)) {
      throw new Error(`Unknown prefix: ${prefix}`);
    }

    return prefixes[prefix];
  }

  return processPrefix;
}
},{"./N3DataFactory":"node_modules/n3/src/N3DataFactory.js"}],"node_modules/n3/src/N3DataFactory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Variable = exports.Triple = exports.Term = exports.Quad = exports.NamedNode = exports.Literal = exports.DefaultGraph = exports.BlankNode = void 0;
exports.escapeQuotes = escapeQuotes;
exports.termFromId = termFromId;
exports.termToId = termToId;
exports.unescapeQuotes = unescapeQuotes;

var _IRIs = _interopRequireDefault(require("./IRIs"));

var _N3Util = require("./N3Util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// N3.js implementations of the RDF/JS core data types
// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md
const {
  rdf,
  xsd
} = _IRIs.default; // eslint-disable-next-line prefer-const

let DEFAULTGRAPH;
let _blankNodeCounter = 0;
const escapedLiteral = /^"(.*".*)(?="[^"]*$)/;
const quadId = /^<<("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ?("(?:""|[^"])*"[^ ]*|[^ ]+)?>>$/; // ## DataFactory singleton

const DataFactory = {
  namedNode,
  blankNode,
  variable,
  literal,
  defaultGraph,
  quad,
  triple: quad
};
var _default = DataFactory; // ## Term constructor

exports.default = _default;

class Term {
  constructor(id) {
    this.id = id;
  } // ### The value of this term


  get value() {
    return this.id;
  } // ### Returns whether this object represents the same term as the other


  equals(other) {
    // If both terms were created by this library,
    // equality can be computed through ids
    if (other instanceof Term) return this.id === other.id; // Otherwise, compare term type and value

    return !!other && this.termType === other.termType && this.value === other.value;
  } // ### Implement hashCode for Immutable.js, since we implement `equals`
  // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()


  hashCode() {
    return 0;
  } // ### Returns a plain object representation of this term


  toJSON() {
    return {
      termType: this.termType,
      value: this.value
    };
  }

} // ## NamedNode constructor


exports.Term = Term;

class NamedNode extends Term {
  // ### The term type of this term
  get termType() {
    return 'NamedNode';
  }

} // ## Literal constructor


exports.NamedNode = NamedNode;

class Literal extends Term {
  // ### The term type of this term
  get termType() {
    return 'Literal';
  } // ### The text value of this literal


  get value() {
    return this.id.substring(1, this.id.lastIndexOf('"'));
  } // ### The language of this literal


  get language() {
    // Find the last quotation mark (e.g., '"abc"@en-us')
    const id = this.id;
    let atPos = id.lastIndexOf('"') + 1; // If "@" it follows, return the remaining substring; empty otherwise

    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';
  } // ### The datatype IRI of this literal


  get datatype() {
    return new NamedNode(this.datatypeString);
  } // ### The datatype string of this literal


  get datatypeString() {
    // Find the last quotation mark (e.g., '"abc"^^http://ex.org/types#t')
    const id = this.id,
          dtPos = id.lastIndexOf('"') + 1;
    const char = dtPos < id.length ? id[dtPos] : ''; // If "^" it follows, return the remaining substring

    return char === '^' ? id.substr(dtPos + 2) : // If "@" follows, return rdf:langString; xsd:string otherwise
    char !== '@' ? xsd.string : rdf.langString;
  } // ### Returns whether this object represents the same term as the other


  equals(other) {
    // If both literals were created by this library,
    // equality can be computed through ids
    if (other instanceof Literal) return this.id === other.id; // Otherwise, compare term type, value, language, and datatype

    return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;
  }

  toJSON() {
    return {
      termType: this.termType,
      value: this.value,
      language: this.language,
      datatype: {
        termType: 'NamedNode',
        value: this.datatypeString
      }
    };
  }

} // ## BlankNode constructor


exports.Literal = Literal;

class BlankNode extends Term {
  constructor(name) {
    super(`_:${name}`);
  } // ### The term type of this term


  get termType() {
    return 'BlankNode';
  } // ### The name of this blank node


  get value() {
    return this.id.substr(2);
  }

}

exports.BlankNode = BlankNode;

class Variable extends Term {
  constructor(name) {
    super(`?${name}`);
  } // ### The term type of this term


  get termType() {
    return 'Variable';
  } // ### The name of this variable


  get value() {
    return this.id.substr(1);
  }

} // ## DefaultGraph constructor


exports.Variable = Variable;

class DefaultGraph extends Term {
  constructor() {
    super('');
    return DEFAULTGRAPH || this;
  } // ### The term type of this term


  get termType() {
    return 'DefaultGraph';
  } // ### Returns whether this object represents the same term as the other


  equals(other) {
    // If both terms were created by this library,
    // equality can be computed through strict equality;
    // otherwise, compare term types.
    return this === other || !!other && this.termType === other.termType;
  }

} // ## DefaultGraph singleton


exports.DefaultGraph = DefaultGraph;
DEFAULTGRAPH = new DefaultGraph(); // ### Constructs a term from the given internal string ID

function termFromId(id, factory) {
  factory = factory || DataFactory; // Falsy value or empty string indicate the default graph

  if (!id) return factory.defaultGraph(); // Identify the term type based on the first character

  switch (id[0]) {
    case '?':
      return factory.variable(id.substr(1));

    case '_':
      return factory.blankNode(id.substr(2));

    case '"':
      // Shortcut for internal literals
      if (factory === DataFactory) return new Literal(id); // Literal without datatype or language

      if (id[id.length - 1] === '"') return factory.literal(id.substr(1, id.length - 2)); // Literal with datatype or language

      const endPos = id.lastIndexOf('"', id.length - 1);
      return factory.literal(id.substr(1, endPos - 1), id[endPos + 1] === '@' ? id.substr(endPos + 2) : factory.namedNode(id.substr(endPos + 3)));

    case '<':
      const components = quadId.exec(id);
      return factory.quad(termFromId(unescapeQuotes(components[1]), factory), termFromId(unescapeQuotes(components[2]), factory), termFromId(unescapeQuotes(components[3]), factory), components[4] && termFromId(unescapeQuotes(components[4]), factory));

    default:
      return factory.namedNode(id);
  }
} // ### Constructs an internal string ID from the given term or ID string


function termToId(term) {
  if (typeof term === 'string') return term;
  if (term instanceof Term && term.termType !== 'Quad') return term.id;
  if (!term) return DEFAULTGRAPH.id; // Term instantiated with another library

  switch (term.termType) {
    case 'NamedNode':
      return term.value;

    case 'BlankNode':
      return `_:${term.value}`;

    case 'Variable':
      return `?${term.value}`;

    case 'DefaultGraph':
      return '';

    case 'Literal':
      return `"${term.value}"${term.language ? `@${term.language}` : term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : ''}`;

    case 'Quad':
      // To identify RDF* quad components, we escape quotes by doubling them.
      // This avoids the overhead of backslash parsing of Turtle-like syntaxes.
      return `<<${escapeQuotes(termToId(term.subject))} ${escapeQuotes(termToId(term.predicate))} ${escapeQuotes(termToId(term.object))}${(0, _N3Util.isDefaultGraph)(term.graph) ? '' : ` ${termToId(term.graph)}`}>>`;

    default:
      throw new Error(`Unexpected termType: ${term.termType}`);
  }
} // ## Quad constructor


class Quad extends Term {
  constructor(subject, predicate, object, graph) {
    super('');
    this._subject = subject;
    this._predicate = predicate;
    this._object = object;
    this._graph = graph || DEFAULTGRAPH;
  } // ### The term type of this term


  get termType() {
    return 'Quad';
  }

  get subject() {
    return this._subject;
  }

  get predicate() {
    return this._predicate;
  }

  get object() {
    return this._object;
  }

  get graph() {
    return this._graph;
  } // ### Returns a plain object representation of this quad


  toJSON() {
    return {
      termType: this.termType,
      subject: this._subject.toJSON(),
      predicate: this._predicate.toJSON(),
      object: this._object.toJSON(),
      graph: this._graph.toJSON()
    };
  } // ### Returns whether this object represents the same quad as the other


  equals(other) {
    return !!other && this._subject.equals(other.subject) && this._predicate.equals(other.predicate) && this._object.equals(other.object) && this._graph.equals(other.graph);
  }

}

exports.Triple = exports.Quad = Quad;

// ### Escapes the quotes within the given literal
function escapeQuotes(id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/"/g, '""')}`);
} // ### Unescapes the quotes within the given literal


function unescapeQuotes(id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/""/g, '"')}`);
} // ### Creates an IRI


function namedNode(iri) {
  return new NamedNode(iri);
} // ### Creates a blank node


function blankNode(name) {
  return new BlankNode(name || `n3-${_blankNodeCounter++}`);
} // ### Creates a literal


function literal(value, languageOrDataType) {
  // Create a language-tagged string
  if (typeof languageOrDataType === 'string') return new Literal(`"${value}"@${languageOrDataType.toLowerCase()}`); // Automatically determine datatype for booleans and numbers

  let datatype = languageOrDataType ? languageOrDataType.value : '';

  if (datatype === '') {
    // Convert a boolean
    if (typeof value === 'boolean') datatype = xsd.boolean; // Convert an integer or double
    else if (typeof value === 'number') {
      if (Number.isFinite(value)) datatype = Number.isInteger(value) ? xsd.integer : xsd.double;else {
        datatype = xsd.double;
        if (!Number.isNaN(value)) value = value > 0 ? 'INF' : '-INF';
      }
    }
  } // Create a datatyped literal


  return datatype === '' || datatype === xsd.string ? new Literal(`"${value}"`) : new Literal(`"${value}"^^${datatype}`);
} // ### Creates a variable


function variable(name) {
  return new Variable(name);
} // ### Returns the default graph


function defaultGraph() {
  return DEFAULTGRAPH;
} // ### Creates a quad


function quad(subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph);
}
},{"./IRIs":"node_modules/n3/src/IRIs.js","./N3Util":"node_modules/n3/src/N3Util.js"}],"node_modules/n3/src/N3Parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _N3Lexer = _interopRequireDefault(require("./N3Lexer"));

var _N3DataFactory = _interopRequireDefault(require("./N3DataFactory"));

var _IRIs = _interopRequireDefault(require("./IRIs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **N3Parser** parses N3 documents.
let blankNodePrefix = 0; // ## Constructor

class N3Parser {
  constructor(options) {
    this._contextStack = [];
    this._graph = null; // Set the document IRI

    options = options || {};

    this._setBase(options.baseIRI);

    options.factory && initDataFactory(this, options.factory); // Set supported features depending on the format

    const format = typeof options.format === 'string' ? options.format.match(/\w*$/)[0].toLowerCase() : '',
          isTurtle = /turtle/.test(format),
          isTriG = /trig/.test(format),
          isNTriples = /triple/.test(format),
          isNQuads = /quad/.test(format),
          isN3 = this._n3Mode = /n3/.test(format),
          isLineMode = isNTriples || isNQuads;
    if (!(this._supportsNamedGraphs = !(isTurtle || isN3))) this._readPredicateOrNamedGraph = this._readPredicate; // Support triples in other graphs

    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3); // Support nesting of triples

    this._supportsRDFStar = format === '' || /star|\*$/.test(format); // Disable relative IRIs in N-Triples or N-Quads mode

    if (isLineMode) this._resolveRelativeIRI = iri => {
      return null;
    };
    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' : options.blankNodePrefix.replace(/^(?!_:)/, '_:');
    this._lexer = options.lexer || new _N3Lexer.default({
      lineMode: isLineMode,
      n3: isN3
    }); // Disable explicit quantifiers by default

    this._explicitQuantifiers = !!options.explicitQuantifiers;
  } // ## Static class methods
  // ### `_resetBlankNodePrefix` restarts blank node prefix identification


  static _resetBlankNodePrefix() {
    blankNodePrefix = 0;
  } // ## Private methods
  // ### `_setBase` sets the base IRI to resolve relative IRIs


  _setBase(baseIRI) {
    if (!baseIRI) {
      this._base = '';
      this._basePath = '';
    } else {
      // Remove fragment if present
      const fragmentPos = baseIRI.indexOf('#');
      if (fragmentPos >= 0) baseIRI = baseIRI.substr(0, fragmentPos); // Set base IRI and its components

      this._base = baseIRI;
      this._basePath = baseIRI.indexOf('/') < 0 ? baseIRI : baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
      this._baseRoot = baseIRI[0];
      this._baseScheme = baseIRI[1];
    }
  } // ### `_saveContext` stores the current parsing context
  // when entering a new scope (list, blank node, formula)


  _saveContext(type, graph, subject, predicate, object) {
    const n3Mode = this._n3Mode;

    this._contextStack.push({
      type,
      subject,
      predicate,
      object,
      graph,
      inverse: n3Mode ? this._inversePredicate : false,
      blankPrefix: n3Mode ? this._prefixes._ : '',
      quantified: n3Mode ? this._quantified : null
    }); // The settings below only apply to N3 streams


    if (n3Mode) {
      // Every new scope resets the predicate direction
      this._inversePredicate = false; // In N3, blank nodes are scoped to a formula
      // (using a dot as separator, as a blank node label cannot start with it)

      this._prefixes._ = this._graph ? `${this._graph.id.substr(2)}.` : '.'; // Quantifiers are scoped to a formula

      this._quantified = Object.create(this._quantified);
    }
  } // ### `_restoreContext` restores the parent context
  // when leaving a scope (list, blank node, formula)


  _restoreContext(type, token) {
    // Obtain the previous context
    const context = this._contextStack.pop();

    if (!context || context.type !== type) return this._error(`Unexpected ${token.type}`, token); // Restore the quad of the previous context

    this._subject = context.subject;
    this._predicate = context.predicate;
    this._object = context.object;
    this._graph = context.graph; // Restore N3 context settings

    if (this._n3Mode) {
      this._inversePredicate = context.inverse;
      this._prefixes._ = context.blankPrefix;
      this._quantified = context.quantified;
    }
  } // ### `_readInTopContext` reads a token when in the top context


  _readInTopContext(token) {
    switch (token.type) {
      // If an EOF token arrives in the top context, signal that we're done
      case 'eof':
        if (this._graph !== null) return this._error('Unclosed graph', token);
        delete this._prefixes._;
        return this._callback(null, null, this._prefixes);
      // It could be a prefix declaration

      case 'PREFIX':
        this._sparqlStyle = true;

      case '@prefix':
        return this._readPrefix;
      // It could be a base declaration

      case 'BASE':
        this._sparqlStyle = true;

      case '@base':
        return this._readBaseIRI;
      // It could be a graph

      case '{':
        if (this._supportsNamedGraphs) {
          this._graph = '';
          this._subject = null;
          return this._readSubject;
        }

      case 'GRAPH':
        if (this._supportsNamedGraphs) return this._readNamedGraphLabel;
      // Otherwise, the next token must be a subject

      default:
        return this._readSubject(token);
    }
  } // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable


  _readEntity(token, quantifier) {
    let value;

    switch (token.type) {
      // Read a relative or absolute IRI
      case 'IRI':
      case 'typeIRI':
        const iri = this._resolveIRI(token.value);

        if (iri === null) return this._error('Invalid IRI', token);
        value = this._namedNode(iri);
        break;
      // Read a prefixed name

      case 'type':
      case 'prefixed':
        const prefix = this._prefixes[token.prefix];
        if (prefix === undefined) return this._error(`Undefined prefix "${token.prefix}:"`, token);
        value = this._namedNode(prefix + token.value);
        break;
      // Read a blank node

      case 'blank':
        value = this._blankNode(this._prefixes[token.prefix] + token.value);
        break;
      // Read a variable

      case 'var':
        value = this._variable(token.value.substr(1));
        break;
      // Everything else is not an entity

      default:
        return this._error(`Expected entity but got ${token.type}`, token);
    } // In N3 mode, replace the entity if it is quantified


    if (!quantifier && this._n3Mode && value.id in this._quantified) value = this._quantified[value.id];
    return value;
  } // ### `_readSubject` reads a quad's subject


  _readSubject(token) {
    this._predicate = null;

    switch (token.type) {
      case '[':
        // Start a new quad with a new blank node as subject
        this._saveContext('blank', this._graph, this._subject = this._blankNode(), null, null);

        return this._readBlankNodeHead;

      case '(':
        // Start a new list
        this._saveContext('list', this._graph, this.RDF_NIL, null, null);

        this._subject = null;
        return this._readListItem;

      case '{':
        // Start a new formula
        if (!this._n3Mode) return this._error('Unexpected graph', token);

        this._saveContext('formula', this._graph, this._graph = this._blankNode(), null, null);

        return this._readSubject;

      case '}':
        // No subject; the graph in which we are reading is closed instead
        return this._readPunctuation(token);

      case '@forSome':
        if (!this._n3Mode) return this._error('Unexpected "@forSome"', token);
        this._subject = null;
        this._predicate = this.N3_FORSOME;
        this._quantifier = this._blankNode;
        return this._readQuantifierList;

      case '@forAll':
        if (!this._n3Mode) return this._error('Unexpected "@forAll"', token);
        this._subject = null;
        this._predicate = this.N3_FORALL;
        this._quantifier = this._variable;
        return this._readQuantifierList;

      case 'literal':
        if (!this._n3Mode) return this._error('Unexpected literal', token);

        if (token.prefix.length === 0) {
          this._literalValue = token.value;
          return this._completeSubjectLiteral;
        } else this._subject = this._literal(token.value, this._namedNode(token.prefix));

        break;

      case '<<':
        if (!this._supportsRDFStar) return this._error('Unexpected RDF* syntax', token);

        this._saveContext('<<', this._graph, null, null, null);

        this._graph = null;
        return this._readSubject;

      default:
        // Read the subject entity
        if ((this._subject = this._readEntity(token)) === undefined) return; // In N3 mode, the subject might be a path

        if (this._n3Mode) return this._getPathReader(this._readPredicateOrNamedGraph);
    } // The next token must be a predicate,
    // or, if the subject was actually a graph IRI, a named graph


    return this._readPredicateOrNamedGraph;
  } // ### `_readPredicate` reads a quad's predicate


  _readPredicate(token) {
    const type = token.type;

    switch (type) {
      case 'inverse':
        this._inversePredicate = true;

      case 'abbreviation':
        this._predicate = this.ABBREVIATIONS[token.value];
        break;

      case '.':
      case ']':
      case '}':
        // Expected predicate didn't come, must have been trailing semicolon
        if (this._predicate === null) return this._error(`Unexpected ${type}`, token);
        this._subject = null;
        return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);

      case ';':
        // Additional semicolons can be safely ignored
        return this._predicate !== null ? this._readPredicate : this._error('Expected predicate but got ;', token);

      case '[':
        if (this._n3Mode) {
          // Start a new quad with a new blank node as subject
          this._saveContext('blank', this._graph, this._subject, this._subject = this._blankNode(), null);

          return this._readBlankNodeHead;
        }

      case 'blank':
        if (!this._n3Mode) return this._error('Disallowed blank node as predicate', token);

      default:
        if ((this._predicate = this._readEntity(token)) === undefined) return;
    } // The next token must be an object


    return this._readObject;
  } // ### `_readObject` reads a quad's object


  _readObject(token) {
    switch (token.type) {
      case 'literal':
        // Regular literal, can still get a datatype or language
        if (token.prefix.length === 0) {
          this._literalValue = token.value;
          return this._readDataTypeOrLang;
        } // Pre-datatyped string literal (prefix stores the datatype)
        else this._object = this._literal(token.value, this._namedNode(token.prefix));

        break;

      case '[':
        // Start a new quad with a new blank node as subject
        this._saveContext('blank', this._graph, this._subject, this._predicate, this._subject = this._blankNode());

        return this._readBlankNodeHead;

      case '(':
        // Start a new list
        this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);

        this._subject = null;
        return this._readListItem;

      case '{':
        // Start a new formula
        if (!this._n3Mode) return this._error('Unexpected graph', token);

        this._saveContext('formula', this._graph, this._subject, this._predicate, this._graph = this._blankNode());

        return this._readSubject;

      case '<<':
        if (!this._supportsRDFStar) return this._error('Unexpected RDF* syntax', token);

        this._saveContext('<<', this._graph, this._subject, this._predicate, null);

        this._graph = null;
        return this._readSubject;

      default:
        // Read the object entity
        if ((this._object = this._readEntity(token)) === undefined) return; // In N3 mode, the object might be a path

        if (this._n3Mode) return this._getPathReader(this._getContextEndReader());
    }

    return this._getContextEndReader();
  } // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph


  _readPredicateOrNamedGraph(token) {
    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
  } // ### `_readGraph` reads a graph


  _readGraph(token) {
    if (token.type !== '{') return this._error(`Expected graph but got ${token.type}`, token); // The "subject" we read is actually the GRAPH's label

    this._graph = this._subject, this._subject = null;
    return this._readSubject;
  } // ### `_readBlankNodeHead` reads the head of a blank node


  _readBlankNodeHead(token) {
    if (token.type === ']') {
      this._subject = null;
      return this._readBlankNodeTail(token);
    } else {
      this._predicate = null;
      return this._readPredicate(token);
    }
  } // ### `_readBlankNodeTail` reads the end of a blank node


  _readBlankNodeTail(token) {
    if (token.type !== ']') return this._readBlankNodePunctuation(token); // Store blank node quad

    if (this._subject !== null) this._emit(this._subject, this._predicate, this._object, this._graph); // Restore the parent context containing this blank node

    const empty = this._predicate === null;

    this._restoreContext('blank', token); // If the blank node was the object, restore previous context and read punctuation


    if (this._object !== null) return this._getContextEndReader(); // If the blank node was the predicate, continue reading the object
    else if (this._predicate !== null) return this._readObject; // If the blank node was the subject, continue reading the predicate
    else // If the blank node was empty, it could be a named graph label
      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
  } // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node


  _readPredicateAfterBlank(token) {
    switch (token.type) {
      case '.':
      case '}':
        // No predicate is coming if the triple is terminated here
        this._subject = null;
        return this._readPunctuation(token);

      default:
        return this._readPredicate(token);
    }
  } // ### `_readListItem` reads items from a list


  _readListItem(token) {
    let item = null,
        // The item of the list
    list = null,
        // The list itself
    next = this._readListItem; // The next function to execute

    const previousList = this._subject,
          // The previous list that contains this list
    stack = this._contextStack,
          // The stack of parent contexts
    parent = stack[stack.length - 1]; // The parent containing the current list

    switch (token.type) {
      case '[':
        // Stack the current list quad and start a new quad with a blank node as subject
        this._saveContext('blank', this._graph, list = this._blankNode(), this.RDF_FIRST, this._subject = item = this._blankNode());

        next = this._readBlankNodeHead;
        break;

      case '(':
        // Stack the current list quad and start a new list
        this._saveContext('list', this._graph, list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);

        this._subject = null;
        break;

      case ')':
        // Closing the list; restore the parent context
        this._restoreContext('list', token); // If this list is contained within a parent list, return the membership quad here.
        // This will be `<parent list element> rdf:first <this list>.`.


        if (stack.length !== 0 && stack[stack.length - 1].type === 'list') this._emit(this._subject, this._predicate, this._object, this._graph); // Was this list the parent's subject?

        if (this._predicate === null) {
          // The next token is the predicate
          next = this._readPredicate; // No list tail if this was an empty list

          if (this._subject === this.RDF_NIL) return next;
        } // The list was in the parent context's object
        else {
          next = this._getContextEndReader(); // No list tail if this was an empty list

          if (this._object === this.RDF_NIL) return next;
        } // Close the list by making the head nil


        list = this.RDF_NIL;
        break;

      case 'literal':
        // Regular literal, can still get a datatype or language
        if (token.prefix.length === 0) {
          this._literalValue = token.value;
          next = this._readListItemDataTypeOrLang;
        } // Pre-datatyped string literal (prefix stores the datatype)
        else {
          item = this._literal(token.value, this._namedNode(token.prefix));
          next = this._getContextEndReader();
        }

        break;

      case '{':
        // Start a new formula
        if (!this._n3Mode) return this._error('Unexpected graph', token);

        this._saveContext('formula', this._graph, this._subject, this._predicate, this._graph = this._blankNode());

        return this._readSubject;

      default:
        if ((item = this._readEntity(token)) === undefined) return;
    } // Create a new blank node if no item head was assigned yet


    if (list === null) this._subject = list = this._blankNode(); // Is this the first element of the list?

    if (previousList === null) {
      // This list is either the subject or the object of its parent
      if (parent.predicate === null) parent.subject = list;else parent.object = list;
    } else {
      // Continue the previous list with the current list
      this._emit(previousList, this.RDF_REST, list, this._graph);
    } // If an item was read, add it to the list


    if (item !== null) {
      // In N3 mode, the item might be a path
      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {
        // Create a new context to add the item's path
        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);

        this._subject = item, this._predicate = null; // _readPath will restore the context and output the item

        return this._getPathReader(this._readListItem);
      } // Output the item


      this._emit(list, this.RDF_FIRST, item, this._graph);
    }

    return next;
  } // ### `_readDataTypeOrLang` reads an _optional_ datatype or language


  _readDataTypeOrLang(token) {
    return this._completeObjectLiteral(token, false);
  } // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list


  _readListItemDataTypeOrLang(token) {
    return this._completeObjectLiteral(token, true);
  } // ### `_completeLiteral` completes a literal with an optional datatype or language


  _completeLiteral(token) {
    // Create a simple string literal by default
    let literal = this._literal(this._literalValue);

    switch (token.type) {
      // Create a datatyped literal
      case 'type':
      case 'typeIRI':
        const datatype = this._readEntity(token);

        if (datatype === undefined) return; // No datatype means an error occurred

        literal = this._literal(this._literalValue, datatype);
        token = null;
        break;
      // Create a language-tagged string

      case 'langcode':
        literal = this._literal(this._literalValue, token.value);
        token = null;
        break;
    }

    return {
      token,
      literal
    };
  } // Completes a literal in subject position


  _completeSubjectLiteral(token) {
    this._subject = this._completeLiteral(token).literal;
    return this._readPredicateOrNamedGraph;
  } // Completes a literal in object position


  _completeObjectLiteral(token, listItem) {
    const completed = this._completeLiteral(token);

    if (!completed) return;
    this._object = completed.literal; // If this literal was part of a list, write the item
    // (we could also check the context stack, but passing in a flag is faster)

    if (listItem) this._emit(this._subject, this.RDF_FIRST, this._object, this._graph); // If the token was consumed, continue with the rest of the input

    if (completed.token === null) return this._getContextEndReader(); // Otherwise, consume the token now
    else {
      this._readCallback = this._getContextEndReader();
      return this._readCallback(completed.token);
    }
  } // ### `_readFormulaTail` reads the end of a formula


  _readFormulaTail(token) {
    if (token.type !== '}') return this._readPunctuation(token); // Store the last quad of the formula

    if (this._subject !== null) this._emit(this._subject, this._predicate, this._object, this._graph); // Restore the parent context containing this formula

    this._restoreContext('formula', token); // If the formula was the subject, continue reading the predicate.
    // If the formula was the object, read punctuation.


    return this._object === null ? this._readPredicate : this._getContextEndReader();
  } // ### `_readPunctuation` reads punctuation between quads or quad parts


  _readPunctuation(token) {
    let next,
        graph = this._graph;
    const subject = this._subject,
          inversePredicate = this._inversePredicate;

    switch (token.type) {
      // A closing brace ends a graph
      case '}':
        if (this._graph === null) return this._error('Unexpected graph closing', token);
        if (this._n3Mode) return this._readFormulaTail(token);
        this._graph = null;
      // A dot just ends the statement, without sharing anything with the next

      case '.':
        this._subject = null;
        next = this._contextStack.length ? this._readSubject : this._readInTopContext;
        if (inversePredicate) this._inversePredicate = false;
        break;
      // Semicolon means the subject is shared; predicate and object are different

      case ';':
        next = this._readPredicate;
        break;
      // Comma means both the subject and predicate are shared; the object is different

      case ',':
        next = this._readObject;
        break;

      default:
        // An entity means this is a quad (only allowed if not already inside a graph)
        if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {
          next = this._readQuadPunctuation;
          break;
        }

        return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
    } // A quad has been completed now, so return it


    if (subject !== null) {
      const predicate = this._predicate,
            object = this._object;
      if (!inversePredicate) this._emit(subject, predicate, object, graph);else this._emit(object, predicate, subject, graph);
    }

    return next;
  } // ### `_readBlankNodePunctuation` reads punctuation in a blank node


  _readBlankNodePunctuation(token) {
    let next;

    switch (token.type) {
      // Semicolon means the subject is shared; predicate and object are different
      case ';':
        next = this._readPredicate;
        break;
      // Comma means both the subject and predicate are shared; the object is different

      case ',':
        next = this._readObject;
        break;

      default:
        return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
    } // A quad has been completed now, so return it


    this._emit(this._subject, this._predicate, this._object, this._graph);

    return next;
  } // ### `_readQuadPunctuation` reads punctuation after a quad


  _readQuadPunctuation(token) {
    if (token.type !== '.') return this._error('Expected dot to follow quad', token);
    return this._readInTopContext;
  } // ### `_readPrefix` reads the prefix of a prefix declaration


  _readPrefix(token) {
    if (token.type !== 'prefix') return this._error('Expected prefix to follow @prefix', token);
    this._prefix = token.value;
    return this._readPrefixIRI;
  } // ### `_readPrefixIRI` reads the IRI of a prefix declaration


  _readPrefixIRI(token) {
    if (token.type !== 'IRI') return this._error(`Expected IRI to follow prefix "${this._prefix}:"`, token);

    const prefixNode = this._readEntity(token);

    this._prefixes[this._prefix] = prefixNode.value;

    this._prefixCallback(this._prefix, prefixNode);

    return this._readDeclarationPunctuation;
  } // ### `_readBaseIRI` reads the IRI of a base declaration


  _readBaseIRI(token) {
    const iri = token.type === 'IRI' && this._resolveIRI(token.value);

    if (!iri) return this._error('Expected valid IRI to follow base declaration', token);

    this._setBase(iri);

    return this._readDeclarationPunctuation;
  } // ### `_readNamedGraphLabel` reads the label of a named graph


  _readNamedGraphLabel(token) {
    switch (token.type) {
      case 'IRI':
      case 'blank':
      case 'prefixed':
        return this._readSubject(token), this._readGraph;

      case '[':
        return this._readNamedGraphBlankLabel;

      default:
        return this._error('Invalid graph label', token);
    }
  } // ### `_readNamedGraphLabel` reads a blank node label of a named graph


  _readNamedGraphBlankLabel(token) {
    if (token.type !== ']') return this._error('Invalid graph label', token);
    this._subject = this._blankNode();
    return this._readGraph;
  } // ### `_readDeclarationPunctuation` reads the punctuation of a declaration


  _readDeclarationPunctuation(token) {
    // SPARQL-style declarations don't have punctuation
    if (this._sparqlStyle) {
      this._sparqlStyle = false;
      return this._readInTopContext(token);
    }

    if (token.type !== '.') return this._error('Expected declaration to end with a dot', token);
    return this._readInTopContext;
  } // Reads a list of quantified symbols from a @forSome or @forAll statement


  _readQuantifierList(token) {
    let entity;

    switch (token.type) {
      case 'IRI':
      case 'prefixed':
        if ((entity = this._readEntity(token, true)) !== undefined) break;

      default:
        return this._error(`Unexpected ${token.type}`, token);
    } // Without explicit quantifiers, map entities to a quantified entity


    if (!this._explicitQuantifiers) this._quantified[entity.id] = this._quantifier(this._blankNode().value); // With explicit quantifiers, output the reified quantifier
    else {
      // If this is the first item, start a new quantifier list
      if (this._subject === null) this._emit(this._graph || this.DEFAULTGRAPH, this._predicate, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH); // Otherwise, continue the previous list
      else this._emit(this._subject, this.RDF_REST, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH); // Output the list item

      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
    }
    return this._readQuantifierPunctuation;
  } // Reads punctuation from a @forSome or @forAll statement


  _readQuantifierPunctuation(token) {
    // Read more quantifiers
    if (token.type === ',') return this._readQuantifierList; // End of the quantifier list
    else {
      // With explicit quantifiers, close the quantifier list
      if (this._explicitQuantifiers) {
        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);

        this._subject = null;
      } // Read a dot


      this._readCallback = this._getContextEndReader();
      return this._readCallback(token);
    }
  } // ### `_getPathReader` reads a potential path and then resumes with the given function


  _getPathReader(afterPath) {
    this._afterPath = afterPath;
    return this._readPath;
  } // ### `_readPath` reads a potential path


  _readPath(token) {
    switch (token.type) {
      // Forward path
      case '!':
        return this._readForwardPath;
      // Backward path

      case '^':
        return this._readBackwardPath;
      // Not a path; resume reading where we left off

      default:
        const stack = this._contextStack,
              parent = stack.length && stack[stack.length - 1]; // If we were reading a list item, we still need to output it

        if (parent && parent.type === 'item') {
          // The list item is the remaining subejct after reading the path
          const item = this._subject; // Switch back to the context of the list

          this._restoreContext('item', token); // Output the list item


          this._emit(this._subject, this.RDF_FIRST, item, this._graph);
        }

        return this._afterPath(token);
    }
  } // ### `_readForwardPath` reads a '!' path


  _readForwardPath(token) {
    let subject, predicate;

    const object = this._blankNode(); // The next token is the predicate


    if ((predicate = this._readEntity(token)) === undefined) return; // If we were reading a subject, replace the subject by the path's object

    if (this._predicate === null) subject = this._subject, this._subject = object; // If we were reading an object, replace the subject by the path's object
    else subject = this._object, this._object = object; // Emit the path's current quad and read its next section

    this._emit(subject, predicate, object, this._graph);

    return this._readPath;
  } // ### `_readBackwardPath` reads a '^' path


  _readBackwardPath(token) {
    const subject = this._blankNode();

    let predicate, object; // The next token is the predicate

    if ((predicate = this._readEntity(token)) === undefined) return; // If we were reading a subject, replace the subject by the path's subject

    if (this._predicate === null) object = this._subject, this._subject = subject; // If we were reading an object, replace the subject by the path's subject
    else object = this._object, this._object = subject; // Emit the path's current quad and read its next section

    this._emit(subject, predicate, object, this._graph);

    return this._readPath;
  } // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple


  _readRDFStarTailOrGraph(token) {
    if (token.type !== '>>') {
      // An entity means this is a quad (only allowed if not already inside a graph)
      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined) return this._readRDFStarTail;
      return this._error(`Expected >> to follow "${this._object.id}"`, token);
    }

    return this._readRDFStarTail(token);
  } // ### `_readRDFStarTail` reads the end of a nested RDF* triple


  _readRDFStarTail(token) {
    if (token.type !== '>>') return this._error(`Expected >> but got ${token.type}`, token); // Read the quad and restore the previous context

    const quad = this._quad(this._subject, this._predicate, this._object, this._graph || this.DEFAULTGRAPH);

    this._restoreContext('<<', token); // If the triple was the subject, continue by reading the predicate.


    if (this._subject === null) {
      this._subject = quad;
      return this._readPredicate;
    } // If the triple was the object, read context end.
    else {
      this._object = quad;
      return this._getContextEndReader();
    }
  } // ### `_getContextEndReader` gets the next reader function at the end of a context


  _getContextEndReader() {
    const contextStack = this._contextStack;
    if (!contextStack.length) return this._readPunctuation;

    switch (contextStack[contextStack.length - 1].type) {
      case 'blank':
        return this._readBlankNodeTail;

      case 'list':
        return this._readListItem;

      case 'formula':
        return this._readFormulaTail;

      case '<<':
        return this._readRDFStarTailOrGraph;
    }
  } // ### `_emit` sends a quad through the callback


  _emit(subject, predicate, object, graph) {
    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
  } // ### `_error` emits an error message through the callback


  _error(message, token) {
    const err = new Error(`${message} on line ${token.line}.`);
    err.context = {
      token: token,
      line: token.line,
      previousToken: this._lexer.previousToken
    };

    this._callback(err);

    this._callback = noop;
  } // ### `_resolveIRI` resolves an IRI against the base path


  _resolveIRI(iri) {
    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
  } // ### `_resolveRelativeIRI` resolves an IRI against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative


  _resolveRelativeIRI(iri) {
    // An empty relative IRI indicates the base IRI
    if (!iri.length) return this._base; // Decide resolving strategy based in the first character

    switch (iri[0]) {
      // Resolve relative fragment IRIs against the base IRI
      case '#':
        return this._base + iri;
      // Resolve relative query string IRIs by replacing the query string

      case '?':
        return this._base.replace(/(?:\?.*)?$/, iri);
      // Resolve root-relative IRIs at the root of the base IRI

      case '/':
        // Resolve scheme-relative IRIs to the scheme
        return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
      // Resolve all other IRIs at the base IRI's path

      default:
        // Relative IRIs cannot contain a colon in the first path segment
        return /^[^/:]*:/.test(iri) ? null : this._removeDotSegments(this._basePath + iri);
    }
  } // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986


  _removeDotSegments(iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!/(^|\/)\.\.?($|[/#?])/.test(iri)) return iri; // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'

    const length = iri.length;
    let result = '',
        i = -1,
        pathStart = -1,
        segmentStart = 0,
        next = '/';

    while (i < length) {
      switch (next) {
        // The path starts with the first slash after the authority
        case ':':
          if (pathStart < 0) {
            // Skip two slashes before the authority
            if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
              while ((pathStart = i + 1) < length && iri[pathStart] !== '/') i = pathStart;
          }

          break;
        // Don't modify a query string or fragment

        case '?':
        case '#':
          i = length;
          break;
        // Handle '/.' or '/..' path segments

        case '/':
          if (iri[i + 1] === '.') {
            next = iri[++i + 1];

            switch (next) {
              // Remove a '/.' segment
              case '/':
                result += iri.substring(segmentStart, i - 1);
                segmentStart = i + 1;
                break;
              // Remove a trailing '/.' segment

              case undefined:
              case '?':
              case '#':
                return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
              // Remove a '/..' segment

              case '.':
                next = iri[++i + 1];

                if (next === undefined || next === '/' || next === '?' || next === '#') {
                  result += iri.substring(segmentStart, i - 2); // Try to remove the parent path from result

                  if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart); // Remove a trailing '/..' segment

                  if (next !== '/') return `${result}/${iri.substr(i + 1)}`;
                  segmentStart = i + 1;
                }

            }
          }

      }

      next = iri[++i];
    }

    return result + iri.substring(segmentStart);
  } // ## Public methods
  // ### `parse` parses the N3 input and emits each parsed quad through the callback


  parse(input, quadCallback, prefixCallback) {
    // The read callback is the next function to be executed when a token arrives.
    // We start reading in the top context.
    this._readCallback = this._readInTopContext;
    this._sparqlStyle = false;
    this._prefixes = Object.create(null);
    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2) : `b${blankNodePrefix++}_`;
    this._prefixCallback = prefixCallback || noop;
    this._inversePredicate = false;
    this._quantified = Object.create(null); // Parse synchronously if no quad callback is given

    if (!quadCallback) {
      const quads = [];
      let error;

      this._callback = (e, t) => {
        e ? error = e : t && quads.push(t);
      };

      this._lexer.tokenize(input).every(token => {
        return this._readCallback = this._readCallback(token);
      });

      if (error) throw error;
      return quads;
    } // Parse asynchronously otherwise, executing the read callback when a token arrives


    this._callback = quadCallback;

    this._lexer.tokenize(input, (error, token) => {
      if (error !== null) this._callback(error), this._callback = noop;else if (this._readCallback) this._readCallback = this._readCallback(token);
    });
  }

} // The empty function


exports.default = N3Parser;

function noop() {} // Initializes the parser with the given data factory


function initDataFactory(parser, factory) {
  // Set factory methods
  const namedNode = factory.namedNode;
  parser._namedNode = namedNode;
  parser._blankNode = factory.blankNode;
  parser._literal = factory.literal;
  parser._variable = factory.variable;
  parser._quad = factory.quad;
  parser.DEFAULTGRAPH = factory.defaultGraph(); // Set common named nodes

  parser.RDF_FIRST = namedNode(_IRIs.default.rdf.first);
  parser.RDF_REST = namedNode(_IRIs.default.rdf.rest);
  parser.RDF_NIL = namedNode(_IRIs.default.rdf.nil);
  parser.N3_FORALL = namedNode(_IRIs.default.r.forAll);
  parser.N3_FORSOME = namedNode(_IRIs.default.r.forSome);
  parser.ABBREVIATIONS = {
    'a': namedNode(_IRIs.default.rdf.type),
    '=': namedNode(_IRIs.default.owl.sameAs),
    '>': namedNode(_IRIs.default.log.implies)
  };
  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');
}

initDataFactory(N3Parser.prototype, _N3DataFactory.default);
},{"./N3Lexer":"node_modules/n3/src/N3Lexer.js","./N3DataFactory":"node_modules/n3/src/N3DataFactory.js","./IRIs":"node_modules/n3/src/IRIs.js"}],"node_modules/n3/src/N3Writer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _IRIs = _interopRequireDefault(require("./IRIs"));

var _N3DataFactory = _interopRequireWildcard(require("./N3DataFactory"));

var _N3Util = require("./N3Util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **N3Writer** writes N3 documents.
const DEFAULTGRAPH = _N3DataFactory.default.defaultGraph();

const {
  rdf,
  xsd
} = _IRIs.default; // Characters in literals that require escaping

const escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
      escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
      escapedCharacters = {
  '\\': '\\\\',
  '"': '\\"',
  '\t': '\\t',
  '\n': '\\n',
  '\r': '\\r',
  '\b': '\\b',
  '\f': '\\f'
}; // ## Placeholder class to represent already pretty-printed terms

class SerializedTerm extends _N3DataFactory.Term {
  // Pretty-printed nodes are not equal to any other node
  // (e.g., [] does not equal [])
  equals() {
    return false;
  }

} // ## Constructor


class N3Writer {
  constructor(outputStream, options) {
    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
    this._prefixRegex = /$0^/; // Shift arguments if the first argument is not a stream

    if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;
    options = options || {};
    this._lists = options.lists; // If no output stream given, send the output as string through the end callback

    if (!outputStream) {
      let output = '';
      this._outputStream = {
        write(chunk, encoding, done) {
          output += chunk;
          done && done();
        },

        end: done => {
          done && done(null, output);
        }
      };
      this._endStream = true;
    } else {
      this._outputStream = outputStream;
      this._endStream = options.end === undefined ? true : !!options.end;
    } // Initialize writer, depending on the format


    this._subject = null;

    if (!/triple|quad/i.test(options.format)) {
      this._lineMode = false;
      this._graph = DEFAULTGRAPH;
      this._prefixIRIs = Object.create(null);
      options.prefixes && this.addPrefixes(options.prefixes);

      if (options.baseIRI) {
        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)}${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);
        this._baseLength = options.baseIRI.length;
      }
    } else {
      this._lineMode = true;
      this._writeQuad = this._writeQuadLine;
    }
  } // ## Private methods
  // ### Whether the current graph is the default graph


  get _inDefaultGraph() {
    return DEFAULTGRAPH.equals(this._graph);
  } // ### `_write` writes the argument to the output stream


  _write(string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  } // ### `_writeQuad` writes the quad to the output stream


  _writeQuad(subject, predicate, object, graph, done) {
    try {
      // Write the graph's label if it has changed
      if (!graph.equals(this._graph)) {
        // Close the previous graph and start the new one
        this._write((this._subject === null ? '' : this._inDefaultGraph ? '.\n' : '\n}\n') + (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\n`));

        this._graph = graph;
        this._subject = null;
      } // Don't repeat the subject if it's the same


      if (subject.equals(this._subject)) {
        // Don't repeat the predicate if it's the same
        if (predicate.equals(this._predicate)) this._write(`, ${this._encodeObject(object)}`, done); // Same subject, different predicate
        else this._write(`;\n    ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
      } // Different subject; write the whole quad
      else this._write(`${(this._subject === null ? '' : '.\n') + this._encodeSubject(this._subject = subject)} ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
    } catch (error) {
      done && done(error);
    }
  } // ### `_writeQuadLine` writes the quad to the output stream as a single line


  _writeQuadLine(subject, predicate, object, graph, done) {
    // Write the quad without prefixes
    delete this._prefixMatch;

    this._write(this.quadToString(subject, predicate, object, graph), done);
  } // ### `quadToString` serializes a quad as a string


  quadToString(subject, predicate, object, graph) {
    return `${this._encodeSubject(subject)} ${this._encodeIriOrBlank(predicate)} ${this._encodeObject(object)}${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\n` : ' .\n'}`;
  } // ### `quadsToString` serializes an array of quads as a string


  quadsToString(quads) {
    return quads.map(t => {
      return this.quadToString(t.subject, t.predicate, t.object, t.graph);
    }).join('');
  } // ### `_encodeSubject` represents a subject


  _encodeSubject(entity) {
    return entity.termType === 'Quad' ? this._encodeQuad(entity) : this._encodeIriOrBlank(entity);
  } // ### `_encodeIriOrBlank` represents an IRI or blank node


  _encodeIriOrBlank(entity) {
    // A blank node or list is represented as-is
    if (entity.termType !== 'NamedNode') {
      // If it is a list head, pretty-print it
      if (this._lists && entity.value in this._lists) entity = this.list(this._lists[entity.value]);
      return 'id' in entity ? entity.id : `_:${entity.value}`;
    }

    let iri = entity.value; // Use relative IRIs if requested and possible

    if (this._baseMatcher && this._baseMatcher.test(iri)) iri = iri.substr(this._baseLength); // Escape special characters

    if (escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer); // Try to represent the IRI as prefixed name

    const prefixMatch = this._prefixRegex.exec(iri);

    return !prefixMatch ? `<${iri}>` : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];
  } // ### `_encodeLiteral` represents a literal


  _encodeLiteral(literal) {
    // Escape special characters
    let value = literal.value;
    if (escape.test(value)) value = value.replace(escapeAll, characterReplacer); // Write a language-tagged literal

    if (literal.language) return `"${value}"@${literal.language}`; // Write dedicated literals per data type

    if (this._lineMode) {
      // Only abbreviate strings in N-Triples or N-Quads
      if (literal.datatype.value === xsd.string) return `"${value}"`;
    } else {
      // Use common datatype abbreviations in Turtle or TriG
      switch (literal.datatype.value) {
        case xsd.string:
          return `"${value}"`;

        case xsd.boolean:
          if (value === 'true' || value === 'false') return value;
          break;

        case xsd.integer:
          if (/^[+-]?\d+$/.test(value)) return value;
          break;

        case xsd.decimal:
          if (/^[+-]?\d*\.\d+$/.test(value)) return value;
          break;

        case xsd.double:
          if (/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(value)) return value;
          break;
      }
    } // Write a regular datatyped literal


    return `"${value}"^^${this._encodeIriOrBlank(literal.datatype)}`;
  } // ### `_encodePredicate` represents a predicate


  _encodePredicate(predicate) {
    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);
  } // ### `_encodeObject` represents an object


  _encodeObject(object) {
    switch (object.termType) {
      case 'Quad':
        return this._encodeQuad(object);

      case 'Literal':
        return this._encodeLiteral(object);

      default:
        return this._encodeIriOrBlank(object);
    }
  } // ### `_encodeQuad` encodes an RDF* quad


  _encodeQuad(_ref) {
    let {
      subject,
      predicate,
      object,
      graph
    } = _ref;
    return `<<${this._encodeSubject(subject)} ${this._encodePredicate(predicate)} ${this._encodeObject(object)}${(0, _N3Util.isDefaultGraph)(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;
  } // ### `_blockedWrite` replaces `_write` after the writer has been closed


  _blockedWrite() {
    throw new Error('Cannot write because the writer has been closed.');
  } // ### `addQuad` adds the quad to the output stream


  addQuad(subject, predicate, object, graph, done) {
    // The quad was given as an object, so shift parameters
    if (object === undefined) this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate); // The optional `graph` parameter was not provided
    else if (typeof graph === 'function') this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph); // The `graph` parameter was provided
    else this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);
  } // ### `addQuads` adds the quads to the output stream


  addQuads(quads) {
    for (let i = 0; i < quads.length; i++) this.addQuad(quads[i]);
  } // ### `addPrefix` adds the prefix to the output stream


  addPrefix(prefix, iri, done) {
    const prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  } // ### `addPrefixes` adds the prefixes to the output stream


  addPrefixes(prefixes, done) {
    // Ignore prefixes if not supported by the serialization
    if (!this._prefixIRIs) return done && done(); // Write all new prefixes

    let hasPrefixes = false;

    for (let prefix in prefixes) {
      let iri = prefixes[prefix];
      if (typeof iri !== 'string') iri = iri.value;
      hasPrefixes = true; // Finish a possible pending quad

      if (this._subject !== null) {
        this._write(this._inDefaultGraph ? '.\n' : '\n}\n');

        this._subject = null, this._graph = '';
      } // Store and write the prefix


      this._prefixIRIs[iri] = prefix += ':';

      this._write(`@prefix ${prefix} <${iri}>.\n`);
    } // Recreate the prefix matcher


    if (hasPrefixes) {
      let IRIlist = '',
          prefixList = '';

      for (const prefixIRI in this._prefixIRIs) {
        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;
        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];
      }

      IRIlist = escapeRegex(IRIlist, /[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\/]*$|` + `^(${IRIlist})([a-zA-Z][\\-_a-zA-Z0-9]*)$`);
    } // End a prefix block with a newline


    this._write(hasPrefixes ? '\n' : '', done);
  } // ### `blank` creates a blank node with the given content


  blank(predicate, object) {
    let children = predicate,
        child,
        length; // Empty blank node

    if (predicate === undefined) children = []; // Blank node passed as blank(Term("predicate"), Term("object"))
    else if (predicate.termType) children = [{
      predicate: predicate,
      object: object
    }]; // Blank node passed as blank({ predicate: predicate, object: object })
    else if (!('length' in predicate)) children = [predicate];

    switch (length = children.length) {
      // Generate an empty blank node
      case 0:
        return new SerializedTerm('[]');
      // Generate a non-nested one-triple blank node

      case 1:
        child = children[0];
        if (!(child.object instanceof SerializedTerm)) return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)} ]`);
      // Generate a multi-triple or nested blank node

      default:
        let contents = '['; // Write all triples in order

        for (let i = 0; i < length; i++) {
          child = children[i]; // Write only the object is the predicate is the same as the previous

          if (child.predicate.equals(predicate)) contents += `, ${this._encodeObject(child.object)}`; // Otherwise, write the predicate and the object
          else {
            contents += `${(i ? ';\n  ' : '\n  ') + this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)}`;
            predicate = child.predicate;
          }
        }

        return new SerializedTerm(`${contents}\n]`);
    }
  } // ### `list` creates a list node with the given content


  list(elements) {
    const length = elements && elements.length || 0,
          contents = new Array(length);

    for (let i = 0; i < length; i++) contents[i] = this._encodeObject(elements[i]);

    return new SerializedTerm(`(${contents.join(' ')})`);
  } // ### `end` signals the end of the output stream


  end(done) {
    // Finish a possible pending quad
    if (this._subject !== null) {
      this._write(this._inDefaultGraph ? '.\n' : '\n}\n');

      this._subject = null;
    } // Disallow further writing


    this._write = this._blockedWrite; // Try to end the underlying stream, ensuring done is called exactly one time

    let singleDone = done && ((error, result) => {
      singleDone = null, done(error, result);
    });

    if (this._endStream) {
      try {
        return this._outputStream.end(singleDone);
      } catch (error) {
        /* error closing stream */
      }
    }

    singleDone && singleDone();
  }

} // Replaces a character by its escaped version


exports.default = N3Writer;

function characterReplacer(character) {
  // Replace a single character by its escaped version
  let result = escapedCharacters[character];

  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    } // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }

  return result;
}

function escapeRegex(regex) {
  return regex.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
}
},{"./IRIs":"node_modules/n3/src/IRIs.js","./N3DataFactory":"node_modules/n3/src/N3DataFactory.js","./N3Util":"node_modules/n3/src/N3Util.js"}],"node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter;
module.exports.once = once; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }

    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports) {
module.exports = require('events').EventEmitter;
},{"events":"node_modules/events/events.js"}],"node_modules/readable-stream/lib/internal/streams/buffer_list.js":[function(require,module,exports) {

'use strict';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":"node_modules/buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
var process = require("process");
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
},{"process":"node_modules/process/browser.js"}],"node_modules/readable-stream/errors-browser.js":[function(require,module,exports) {
'use strict';

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError = /*#__PURE__*/function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;
},{}],"node_modules/readable-stream/lib/internal/streams/state.js":[function(require,module,exports) {
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":"node_modules/readable-stream/errors-browser.js"}],"node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],"node_modules/util-deprecate/browser.js":[function(require,module,exports) {
var global = arguments[3];

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

},{}],"node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
},{"util-deprecate":"node_modules/util-deprecate/browser.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"node_modules/buffer/index.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
},{"./_stream_readable":"node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"node_modules/readable-stream/lib/_stream_writable.js","inherits":"node_modules/inherits/inherits_browser.js","process":"node_modules/process/browser.js"}],"node_modules/safe-buffer/index.js":[function(require,module,exports) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/readable-stream/lib/internal/streams/end-of-stream.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":"node_modules/readable-stream/errors-browser.js"}],"node_modules/readable-stream/lib/internal/streams/async_iterator.js":[function(require,module,exports) {
var process = require("process");
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this; // if we have detected an error in the meanwhile
    // reject straight away


    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this; // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to


  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
},{"./end-of-stream":"node_modules/readable-stream/lib/internal/streams/end-of-stream.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/internal/streams/from-browser.js":[function(require,module,exports) {
module.exports = function () {
  throw new Error('Readable.from is not available in the browser');
};
},{}],"node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
},{"events":"node_modules/events/events.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"node_modules/buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/buffer_list":"node_modules/readable-stream/lib/internal/streams/buffer_list.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"node_modules/string_decoder/lib/string_decoder.js","./internal/streams/async_iterator":"node_modules/readable-stream/lib/internal/streams/async_iterator.js","./internal/streams/from":"node_modules/readable-stream/lib/internal/streams/from-browser.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":"node_modules/readable-stream/errors-browser.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"node_modules/readable-stream/lib/_stream_transform.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/lib/internal/streams/pipeline.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":"node_modules/readable-stream/errors-browser.js","./end-of-stream":"node_modules/readable-stream/lib/internal/streams/end-of-stream.js"}],"node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');
},{"./lib/_stream_readable.js":"node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"node_modules/readable-stream/lib/_stream_passthrough.js","./lib/internal/streams/end-of-stream.js":"node_modules/readable-stream/lib/internal/streams/end-of-stream.js","./lib/internal/streams/pipeline.js":"node_modules/readable-stream/lib/internal/streams/pipeline.js"}],"node_modules/n3/src/N3Store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _N3DataFactory = _interopRequireWildcard(require("./N3DataFactory"));

var _readableStream = require("readable-stream");

var _IRIs = _interopRequireDefault(require("./IRIs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// **N3Store** objects store N3 quads by graph in memory.
// ## Constructor
class N3Store {
  constructor(quads, options) {
    // The number of quads is initially zero
    this._size = 0; // `_graphs` contains subject, predicate, and object indexes per graph

    this._graphs = Object.create(null); // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
    // saving memory by using only numbers as keys in `_graphs`

    this._id = 0;
    this._ids = Object.create(null);
    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero

    this._entities = Object.create(null); // inverse of `_ids`
    // `_blankNodeIndex` is the index of the last automatically named blank node

    this._blankNodeIndex = 0; // Shift parameters if `quads` is not given

    if (!options && quads && !quads[0]) options = quads, quads = null;
    options = options || {};
    this._factory = options.factory || _N3DataFactory.default; // Add quads if passed

    if (quads) this.addQuads(quads);
  } // ## Public properties
  // ### `size` returns the number of quads in the store


  get size() {
    // Return the quad count if if was cached
    let size = this._size;
    if (size !== null) return size; // Calculate the number of quads by counting to the deepest level

    size = 0;
    const graphs = this._graphs;
    let subjects, subject;

    for (const graphKey in graphs) for (const subjectKey in subjects = graphs[graphKey].subjects) for (const predicateKey in subject = subjects[subjectKey]) size += Object.keys(subject[predicateKey]).length;

    return this._size = size;
  } // ## Private methods
  // ### `_addToIndex` adds a quad to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.


  _addToIndex(index0, key0, key1, key2) {
    // Create layers as necessary
    const index1 = index0[key0] || (index0[key0] = {});
    const index2 = index1[key1] || (index1[key1] = {}); // Setting the key to _any_ value signals the presence of the quad

    const existed = (key2 in index2);
    if (!existed) index2[key2] = null;
    return !existed;
  } // ### `_removeFromIndex` removes a quad from a three-layered index


  _removeFromIndex(index0, key0, key1, key2) {
    // Remove the quad from the index
    const index1 = index0[key0],
          index2 = index1[key1];
    delete index2[key2]; // Remove intermediary index layers if they are empty

    for (const key in index2) return;

    delete index1[key1];

    for (const key in index1) return;

    delete index0[key0];
  } // ### `_findInIndex` finds a set of quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting quad
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graphId` will be the graph of the created quads.


  *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {
    let tmp, index1, index2; // Depending on the number of variables, keys or reverse index are faster

    const varCount = !key0 + !key1 + !key2,
          entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;
    const graph = (0, _N3DataFactory.termFromId)(graphId, this._factory); // If a key is specified, use only that part of index 0.

    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];

    for (const value0 in index0) {
      const entity0 = entityKeys[value0];

      if (index1 = index0[value0]) {
        // If a key is specified, use only that part of index 1.
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];

        for (const value1 in index1) {
          const entity1 = entityKeys[value1];

          if (index2 = index1[value1]) {
            // If a key is specified, use only that part of index 2, if it exists.
            const values = key2 ? key2 in index2 ? [key2] : [] : Object.keys(index2); // Create quads for all items found in index 2.

            for (let l = 0; l < values.length; l++) {
              const parts = {
                subject: null,
                predicate: null,
                object: null
              };
              parts[name0] = (0, _N3DataFactory.termFromId)(entity0, this._factory);
              parts[name1] = (0, _N3DataFactory.termFromId)(entity1, this._factory);
              parts[name2] = (0, _N3DataFactory.termFromId)(entityKeys[values[l]], this._factory);
              yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);
            }
          }
        }
      }
    }
  } // ### `_loop` executes the callback on all keys of index 0


  _loop(index0, callback) {
    for (const key0 in index0) callback(key0);
  } // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0


  _loopByKey0(index0, key0, callback) {
    let index1, key1;

    if (index1 = index0[key0]) {
      for (key1 in index1) callback(key1);
    }
  } // ### `_loopByKey1` executes the callback on given keys of all entries in index 0


  _loopByKey1(index0, key1, callback) {
    let key0, index1;

    for (key0 in index0) {
      index1 = index0[key0];
      if (index1[key1]) callback(key0);
    }
  } // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2


  _loopBy2Keys(index0, key0, key1, callback) {
    let index1, index2, key2;

    if ((index1 = index0[key0]) && (index2 = index1[key1])) {
      for (key2 in index2) callback(key2);
    }
  } // ### `_countInIndex` counts matching quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.


  _countInIndex(index0, key0, key1, key2) {
    let count = 0,
        tmp,
        index1,
        index2; // If a key is specified, count only that part of index 0

    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];

    for (const value0 in index0) {
      if (index1 = index0[value0]) {
        // If a key is specified, count only that part of index 1
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];

        for (const value1 in index1) {
          if (index2 = index1[value1]) {
            // If a key is specified, count the quad if it exists
            if (key2) key2 in index2 && count++; // Otherwise, count all quads
            else count += Object.keys(index2).length;
          }
        }
      }
    }

    return count;
  } // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.


  _getGraphs(graph) {
    if (!isString(graph)) return this._graphs;
    const graphs = {};
    graphs[graph] = this._graphs[graph];
    return graphs;
  } // ### `_uniqueEntities` returns a function that accepts an entity ID
  // and passes the corresponding entity to callback if it hasn't occurred before.


  _uniqueEntities(callback) {
    const uniqueIds = Object.create(null);
    return id => {
      if (!(id in uniqueIds)) {
        uniqueIds[id] = true;
        callback((0, _N3DataFactory.termFromId)(this._entities[id], this._factory));
      }
    };
  } // ## Public methods
  // ### `add` adds the specified quad to the dataset.
  // Returns the dataset instance it was called on.
  // Existing quads, as defined in Quad.equals, will be ignored.


  add(quad) {
    this.addQuad(quad);
    return this;
  } // ### `addQuad` adds a new quad to the store.
  // Returns if the quad index has changed, if the quad did not already exist.


  addQuad(subject, predicate, object, graph) {
    // Shift arguments if a quad object is given instead of components
    if (!predicate) graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject; // Convert terms to internal string representation

    subject = (0, _N3DataFactory.termToId)(subject);
    predicate = (0, _N3DataFactory.termToId)(predicate);
    object = (0, _N3DataFactory.termToId)(object);
    graph = (0, _N3DataFactory.termToId)(graph); // Find the graph that will contain the triple

    let graphItem = this._graphs[graph]; // Create the graph if it doesn't exist yet

    if (!graphItem) {
      graphItem = this._graphs[graph] = {
        subjects: {},
        predicates: {},
        objects: {}
      }; // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway

      Object.freeze(graphItem);
    } // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.


    const ids = this._ids;
    const entities = this._entities;
    subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id);
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
    object = ids[object] || (ids[entities[++this._id] = object] = this._id);

    const changed = this._addToIndex(graphItem.subjects, subject, predicate, object);

    this._addToIndex(graphItem.predicates, predicate, object, subject);

    this._addToIndex(graphItem.objects, object, subject, predicate); // The cached quad count is now invalid


    this._size = null;
    return changed;
  } // ### `addQuads` adds multiple quads to the store


  addQuads(quads) {
    for (let i = 0; i < quads.length; i++) this.addQuad(quads[i]);
  } // ### `delete` removes the specified quad from the dataset.
  // Returns the dataset instance it was called on.


  delete(quad) {
    this.removeQuad(quad);
    return this;
  } // ### `has` determines whether a dataset includes a certain quad or quad pattern.


  has(subjectOrQuad, predicate, object, graph) {
    if (subjectOrQuad && subjectOrQuad.subject) ({
      subject: subjectOrQuad,
      predicate,
      object,
      graph
    } = subjectOrQuad);
    return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;
  } // ### `import` adds a stream of quads to the store


  import(stream) {
    stream.on('data', quad => {
      this.addQuad(quad);
    });
    return stream;
  } // ### `removeQuad` removes a quad from the store if it exists


  removeQuad(subject, predicate, object, graph) {
    // Shift arguments if a quad object is given instead of components
    if (!predicate) graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject; // Convert terms to internal string representation

    subject = (0, _N3DataFactory.termToId)(subject);
    predicate = (0, _N3DataFactory.termToId)(predicate);
    object = (0, _N3DataFactory.termToId)(object);
    graph = (0, _N3DataFactory.termToId)(graph); // Find internal identifiers for all components
    // and verify the quad exists.

    const ids = this._ids,
          graphs = this._graphs;
    let graphItem, subjects, predicates;
    if (!(subject = ids[subject]) || !(predicate = ids[predicate]) || !(object = ids[object]) || !(graphItem = graphs[graph]) || !(subjects = graphItem.subjects[subject]) || !(predicates = subjects[predicate]) || !(object in predicates)) return false; // Remove it from all indexes

    this._removeFromIndex(graphItem.subjects, subject, predicate, object);

    this._removeFromIndex(graphItem.predicates, predicate, object, subject);

    this._removeFromIndex(graphItem.objects, object, subject, predicate);

    if (this._size !== null) this._size--; // Remove the graph if it is empty

    for (subject in graphItem.subjects) return true;

    delete graphs[graph];
    return true;
  } // ### `removeQuads` removes multiple quads from the store


  removeQuads(quads) {
    for (let i = 0; i < quads.length; i++) this.removeQuad(quads[i]);
  } // ### `remove` removes a stream of quads from the store


  remove(stream) {
    stream.on('data', quad => {
      this.removeQuad(quad);
    });
    return stream;
  } // ### `removeMatches` removes all matching quads from the store
  // Setting any field to `undefined` or `null` indicates a wildcard.


  removeMatches(subject, predicate, object, graph) {
    const stream = new _readableStream.Readable({
      objectMode: true
    });

    stream._read = () => {
      for (const quad of this.readQuads(subject, predicate, object, graph)) stream.push(quad);

      stream.push(null);
    };

    return this.remove(stream);
  } // ### `deleteGraph` removes all triples with the given graph from the store


  deleteGraph(graph) {
    return this.removeMatches(null, null, null, graph);
  } // ### `getQuads` returns an array of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  getQuads(subject, predicate, object, graph) {
    return [...this.readQuads(subject, predicate, object, graph)];
  } // ### `readQuads` returns an generator of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  *readQuads(subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && (0, _N3DataFactory.termToId)(subject);
    predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
    object = object && (0, _N3DataFactory.termToId)(object);
    graph = graph && (0, _N3DataFactory.termToId)(graph);

    const graphs = this._getGraphs(graph),
          ids = this._ids;

    let content, subjectId, predicateId, objectId; // Translate IRIs to internal index keys.

    if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return;

    for (const graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId) // If subject and object are given, the object index will be the fastest
            yield* this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId, null, true);else // If only subject and possibly predicate are given, the subject index will be the fastest
            yield* this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId, null, true);
        } else if (predicateId) // If only predicate and possibly object are given, the predicate index will be the fastest
          yield* this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId, null, true);else if (objectId) // If only object is given, the object index will be the fastest
          yield* this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId, null, true);else // If nothing is given, iterate subjects and predicates first
          yield* this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId, null, true);
      }
    }
  } // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.
  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.
  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.
  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  // For backwards compatibility, the object return also implements the Readable stream interface.


  match(subject, predicate, object, graph) {
    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);
  } // ### `countQuads` returns the number of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  countQuads(subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && (0, _N3DataFactory.termToId)(subject);
    predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
    object = object && (0, _N3DataFactory.termToId)(object);
    graph = graph && (0, _N3DataFactory.termToId)(graph);

    const graphs = this._getGraphs(graph),
          ids = this._ids;

    let count = 0,
        content,
        subjectId,
        predicateId,
        objectId; // Translate IRIs to internal index keys.

    if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return 0;

    for (const graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subject) {
          if (object) // If subject and object are given, the object index will be the fastest
            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);else // If only subject and possibly predicate are given, the subject index will be the fastest
            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
        } else if (predicate) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
        } else {
          // If only object is possibly given, the object index will be the fastest
          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
        }
      }
    }

    return count;
  } // ### `forEach` executes the callback on all quads.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  forEach(callback, subject, predicate, object, graph) {
    this.some(quad => {
      callback(quad);
      return false;
    }, subject, predicate, object, graph);
  } // ### `every` executes the callback on all quads,
  // and returns `true` if it returns truthy for all them.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  every(callback, subject, predicate, object, graph) {
    let some = false;
    const every = !this.some(quad => {
      some = true;
      return !callback(quad);
    }, subject, predicate, object, graph);
    return some && every;
  } // ### `some` executes the callback on all quads,
  // and returns `true` if it returns truthy for any of them.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  some(callback, subject, predicate, object, graph) {
    for (const quad of this.readQuads(subject, predicate, object, graph)) if (callback(quad)) return true;

    return false;
  } // ### `getSubjects` returns all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  getSubjects(predicate, object, graph) {
    const results = [];
    this.forSubjects(s => {
      results.push(s);
    }, predicate, object, graph);
    return results;
  } // ### `forSubjects` executes the callback on all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  forSubjects(callback, predicate, object, graph) {
    // Convert terms to internal string representation
    predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
    object = object && (0, _N3DataFactory.termToId)(object);
    graph = graph && (0, _N3DataFactory.termToId)(graph);

    const ids = this._ids,
          graphs = this._getGraphs(graph);

    let content, predicateId, objectId;
    callback = this._uniqueEntities(callback); // Translate IRIs to internal index keys.

    if (isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (predicateId) {
          if (objectId) // If predicate and object are given, the POS index is best.
            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);else // If only predicate is given, the SPO index is best.
            this._loopByKey1(content.subjects, predicateId, callback);
        } else if (objectId) // If only object is given, the OSP index is best.
          this._loopByKey0(content.objects, objectId, callback);else // If no params given, iterate all the subjects
          this._loop(content.subjects, callback);
      }
    }
  } // ### `getPredicates` returns all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  getPredicates(subject, object, graph) {
    const results = [];
    this.forPredicates(p => {
      results.push(p);
    }, subject, object, graph);
    return results;
  } // ### `forPredicates` executes the callback on all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  forPredicates(callback, subject, object, graph) {
    // Convert terms to internal string representation
    subject = subject && (0, _N3DataFactory.termToId)(subject);
    object = object && (0, _N3DataFactory.termToId)(object);
    graph = graph && (0, _N3DataFactory.termToId)(graph);

    const ids = this._ids,
          graphs = this._getGraphs(graph);

    let content, subjectId, objectId;
    callback = this._uniqueEntities(callback); // Translate IRIs to internal index keys.

    if (isString(subject) && !(subjectId = ids[subject]) || isString(object) && !(objectId = ids[object])) return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (objectId) // If subject and object are given, the OSP index is best.
            this._loopBy2Keys(content.objects, objectId, subjectId, callback);else // If only subject is given, the SPO index is best.
            this._loopByKey0(content.subjects, subjectId, callback);
        } else if (objectId) // If only object is given, the POS index is best.
          this._loopByKey1(content.predicates, objectId, callback);else // If no params given, iterate all the predicates.
          this._loop(content.predicates, callback);
      }
    }
  } // ### `getObjects` returns all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  getObjects(subject, predicate, graph) {
    const results = [];
    this.forObjects(o => {
      results.push(o);
    }, subject, predicate, graph);
    return results;
  } // ### `forObjects` executes the callback on all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  forObjects(callback, subject, predicate, graph) {
    // Convert terms to internal string representation
    subject = subject && (0, _N3DataFactory.termToId)(subject);
    predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
    graph = graph && (0, _N3DataFactory.termToId)(graph);

    const ids = this._ids,
          graphs = this._getGraphs(graph);

    let content, subjectId, predicateId;
    callback = this._uniqueEntities(callback); // Translate IRIs to internal index keys.

    if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate])) return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (predicateId) // If subject and predicate are given, the SPO index is best.
            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);else // If only subject is given, the OSP index is best.
            this._loopByKey1(content.objects, subjectId, callback);
        } else if (predicateId) // If only predicate is given, the POS index is best.
          this._loopByKey0(content.predicates, predicateId, callback);else // If no params given, iterate all the objects.
          this._loop(content.objects, callback);
      }
    }
  } // ### `getGraphs` returns all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  getGraphs(subject, predicate, object) {
    const results = [];
    this.forGraphs(g => {
      results.push(g);
    }, subject, predicate, object);
    return results;
  } // ### `forGraphs` executes the callback on all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.


  forGraphs(callback, subject, predicate, object) {
    for (const graph in this._graphs) {
      this.some(quad => {
        callback(quad.graph);
        return true; // Halt iteration of some()
      }, subject, predicate, object, graph);
    }
  } // ### `createBlankNode` creates a new blank node, returning its name


  createBlankNode(suggestedName) {
    let name, index; // Generate a name based on the suggested name

    if (suggestedName) {
      name = suggestedName = `_:${suggestedName}`, index = 1;

      while (this._ids[name]) name = suggestedName + index++;
    } // Generate a generic blank node name
    else {
      do {
        name = `_:b${this._blankNodeIndex++}`;
      } while (this._ids[name]);
    } // Add the blank node to the entities, avoiding the generation of duplicates


    this._ids[name] = ++this._id;
    this._entities[this._id] = name;
    return this._factory.blankNode(name.substr(2));
  } // ### `extractLists` finds and removes all list triples
  // and returns the items per list.


  extractLists() {
    let {
      remove = false,
      ignoreErrors = false
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const lists = {}; // has scalar keys so could be a simple Object

    const onError = ignoreErrors ? () => true : (node, message) => {
      throw new Error(`${node.value} ${message}`);
    }; // Traverse each list from its tail

    const tails = this.getQuads(null, _IRIs.default.rdf.rest, _IRIs.default.rdf.nil, null);
    const toRemove = remove ? [...tails] : [];
    tails.forEach(tailQuad => {
      const items = []; // the members found as objects of rdf:first quads

      let malformed = false; // signals whether the current list is malformed

      let head; // the head of the list (_:b1 in above example)

      let headPos; // set to subject or object when head is set

      const graph = tailQuad.graph; // make sure list is in exactly one graph
      // Traverse the list from tail to end

      let current = tailQuad.subject;

      while (current && !malformed) {
        const objectQuads = this.getQuads(null, null, current, null);
        const subjectQuads = this.getQuads(current, null, null, null);
        let quad,
            first = null,
            rest = null,
            parent = null; // Find the first and rest of this list node

        for (let i = 0; i < subjectQuads.length && !malformed; i++) {
          quad = subjectQuads[i];
          if (!quad.graph.equals(graph)) malformed = onError(current, 'not confined to single graph');else if (head) malformed = onError(current, 'has non-list arcs out'); // one rdf:first
          else if (quad.predicate.value === _IRIs.default.rdf.first) {
            if (first) malformed = onError(current, 'has multiple rdf:first arcs');else toRemove.push(first = quad);
          } // one rdf:rest
          else if (quad.predicate.value === _IRIs.default.rdf.rest) {
            if (rest) malformed = onError(current, 'has multiple rdf:rest arcs');else toRemove.push(rest = quad);
          } // alien triple
          else if (objectQuads.length) malformed = onError(current, 'can\'t be subject and object');else {
            head = quad; // e.g. { (1 2 3) :p :o }

            headPos = 'subject';
          }
        } // { :s :p (1 2) } arrives here with no head
        // { (1 2) :p :o } arrives here with head set to the list.


        for (let i = 0; i < objectQuads.length && !malformed; ++i) {
          quad = objectQuads[i];
          if (head) malformed = onError(current, 'can\'t have coreferences'); // one rdf:rest
          else if (quad.predicate.value === _IRIs.default.rdf.rest) {
            if (parent) malformed = onError(current, 'has incoming rdf:rest arcs');else parent = quad;
          } else {
            head = quad; // e.g. { :s :p (1 2) }

            headPos = 'object';
          }
        } // Store the list item and continue with parent


        if (!first) malformed = onError(current, 'has no list head');else items.unshift(first.object);
        current = parent && parent.subject;
      } // Don't remove any quads if the list is malformed


      if (malformed) remove = false; // Store the list under the value of its head
      else if (head) lists[head[headPos].value] = items;
    }); // Remove list quads if requested

    if (remove) this.removeQuads(toRemove);
    return lists;
  } // ### Store is an iterable.
  // Can be used where iterables are expected: for...of loops, array spread operator,
  // `yield*`, and destructuring assignment (order is not guaranteed).


  *[Symbol.iterator]() {
    yield* this.readQuads();
  }

} // Determines whether the argument is a string


exports.default = N3Store;

function isString(s) {
  return typeof s === 'string' || s instanceof String;
}
/**
 * A class that implements both DatasetCore and Readable.
 */


class DatasetCoreAndReadableStream extends _readableStream.Readable {
  constructor(n3Store, subject, predicate, object, graph) {
    super({
      objectMode: true
    });
    Object.assign(this, {
      n3Store,
      subject,
      predicate,
      object,
      graph
    });
  }

  get filtered() {
    if (!this._filtered) {
      const {
        n3Store,
        graph,
        object,
        predicate,
        subject
      } = this;
      const quads = n3Store.getQuads(subject, predicate, object, graph);
      this._filtered = new N3Store(quads, {
        factory: n3Store._factory
      });
    }

    return this._filtered;
  }

  get size() {
    return this.filtered.size;
  }

  _read() {
    for (const quad of this) this.push(quad);

    this.push(null);
  }

  add(quad) {
    return this.filtered.add(quad);
  }

  delete(quad) {
    return this.filtered.delete(quad);
  }

  has(quad) {
    return this.filtered.has(quad);
  }

  match(subject, predicate, object, graph) {
    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);
  }

  *[Symbol.iterator]() {
    yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);
  }

}
},{"./N3DataFactory":"node_modules/n3/src/N3DataFactory.js","readable-stream":"node_modules/readable-stream/readable-browser.js","./IRIs":"node_modules/n3/src/IRIs.js"}],"node_modules/n3/src/N3StreamParser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _N3Parser = _interopRequireDefault(require("./N3Parser"));

var _readableStream = require("readable-stream");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **N3StreamParser** parses a text stream into a quad stream.
// ## Constructor
class N3StreamParser extends _readableStream.Transform {
  constructor(options) {
    super({
      decodeStrings: true
    });
    this._readableState.objectMode = true; // Set up parser with dummy stream to obtain `data` and `end` callbacks

    const parser = new _N3Parser.default(options);
    let onData, onEnd;
    parser.parse({
      on: (event, callback) => {
        switch (event) {
          case 'data':
            onData = callback;
            break;

          case 'end':
            onEnd = callback;
            break;
        }
      }
    }, // Handle quads by pushing them down the pipeline
    (error, quad) => {
      error && this.emit('error', error) || quad && this.push(quad);
    }, // Emit prefixes through the `prefix` event
    (prefix, uri) => {
      this.emit('prefix', prefix, uri);
    }); // Implement Transform methods through parser callbacks

    this._transform = (chunk, encoding, done) => {
      onData(chunk);
      done();
    };

    this._flush = done => {
      onEnd();
      done();
    };
  } // ### Parses a stream of strings


  import(stream) {
    stream.on('data', chunk => {
      this.write(chunk);
    });
    stream.on('end', () => {
      this.end();
    });
    stream.on('error', error => {
      this.emit('error', error);
    });
    return this;
  }

}

exports.default = N3StreamParser;
},{"./N3Parser":"node_modules/n3/src/N3Parser.js","readable-stream":"node_modules/readable-stream/readable-browser.js"}],"node_modules/n3/src/N3StreamWriter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _readableStream = require("readable-stream");

var _N3Writer = _interopRequireDefault(require("./N3Writer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **N3StreamWriter** serializes a quad stream into a text stream.
// ## Constructor
class N3StreamWriter extends _readableStream.Transform {
  constructor(options) {
    super({
      encoding: 'utf8',
      writableObjectMode: true
    }); // Set up writer with a dummy stream object

    const writer = this._writer = new _N3Writer.default({
      write: (quad, encoding, callback) => {
        this.push(quad);
        callback && callback();
      },
      end: callback => {
        this.push(null);
        callback && callback();
      }
    }, options); // Implement Transform methods on top of writer

    this._transform = (quad, encoding, done) => {
      writer.addQuad(quad, done);
    };

    this._flush = done => {
      writer.end(done);
    };
  } // ### Serializes a stream of quads


  import(stream) {
    stream.on('data', quad => {
      this.write(quad);
    });
    stream.on('end', () => {
      this.end();
    });
    stream.on('error', error => {
      this.emit('error', error);
    });
    stream.on('prefix', (prefix, iri) => {
      this._writer.addPrefix(prefix, iri);
    });
    return this;
  }

}

exports.default = N3StreamWriter;
},{"readable-stream":"node_modules/readable-stream/readable-browser.js","./N3Writer":"node_modules/n3/src/N3Writer.js"}],"node_modules/n3/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BlankNode", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.BlankNode;
  }
});
Object.defineProperty(exports, "DataFactory", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.default;
  }
});
Object.defineProperty(exports, "DefaultGraph", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.DefaultGraph;
  }
});
Object.defineProperty(exports, "Lexer", {
  enumerable: true,
  get: function () {
    return _N3Lexer.default;
  }
});
Object.defineProperty(exports, "Literal", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.Literal;
  }
});
Object.defineProperty(exports, "NamedNode", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.NamedNode;
  }
});
Object.defineProperty(exports, "Parser", {
  enumerable: true,
  get: function () {
    return _N3Parser.default;
  }
});
Object.defineProperty(exports, "Quad", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.Quad;
  }
});
Object.defineProperty(exports, "Store", {
  enumerable: true,
  get: function () {
    return _N3Store.default;
  }
});
Object.defineProperty(exports, "StreamParser", {
  enumerable: true,
  get: function () {
    return _N3StreamParser.default;
  }
});
Object.defineProperty(exports, "StreamWriter", {
  enumerable: true,
  get: function () {
    return _N3StreamWriter.default;
  }
});
Object.defineProperty(exports, "Term", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.Term;
  }
});
Object.defineProperty(exports, "Triple", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.Triple;
  }
});
exports.Util = void 0;
Object.defineProperty(exports, "Variable", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.Variable;
  }
});
Object.defineProperty(exports, "Writer", {
  enumerable: true,
  get: function () {
    return _N3Writer.default;
  }
});
exports.default = void 0;
Object.defineProperty(exports, "termFromId", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.termFromId;
  }
});
Object.defineProperty(exports, "termToId", {
  enumerable: true,
  get: function () {
    return _N3DataFactory.termToId;
  }
});

var _N3Lexer = _interopRequireDefault(require("./N3Lexer"));

var _N3Parser = _interopRequireDefault(require("./N3Parser"));

var _N3Writer = _interopRequireDefault(require("./N3Writer"));

var _N3Store = _interopRequireDefault(require("./N3Store"));

var _N3StreamParser = _interopRequireDefault(require("./N3StreamParser"));

var _N3StreamWriter = _interopRequireDefault(require("./N3StreamWriter"));

var Util = _interopRequireWildcard(require("./N3Util"));

exports.Util = Util;

var _N3DataFactory = _interopRequireWildcard(require("./N3DataFactory"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Named exports
// Export all named exports as a default object for backward compatibility
var _default = {
  Lexer: _N3Lexer.default,
  Parser: _N3Parser.default,
  Writer: _N3Writer.default,
  Store: _N3Store.default,
  StreamParser: _N3StreamParser.default,
  StreamWriter: _N3StreamWriter.default,
  Util,
  DataFactory: _N3DataFactory.default,
  Term: _N3DataFactory.Term,
  NamedNode: _N3DataFactory.NamedNode,
  Literal: _N3DataFactory.Literal,
  BlankNode: _N3DataFactory.BlankNode,
  Variable: _N3DataFactory.Variable,
  DefaultGraph: _N3DataFactory.DefaultGraph,
  Quad: _N3DataFactory.Quad,
  Triple: _N3DataFactory.Triple,
  termFromId: _N3DataFactory.termFromId,
  termToId: _N3DataFactory.termToId
};
exports.default = _default;
},{"./N3Lexer":"node_modules/n3/src/N3Lexer.js","./N3Parser":"node_modules/n3/src/N3Parser.js","./N3Writer":"node_modules/n3/src/N3Writer.js","./N3Store":"node_modules/n3/src/N3Store.js","./N3StreamParser":"node_modules/n3/src/N3StreamParser.js","./N3StreamWriter":"node_modules/n3/src/N3StreamWriter.js","./N3Util":"node_modules/n3/src/N3Util.js","./N3DataFactory":"node_modules/n3/src/N3DataFactory.js"}],"node_modules/cross-fetch/dist/browser-ponyfill.js":[function(require,module,exports) {

var global = typeof self !== 'undefined' ? self : this;
var __self__ = (function () {
function F() {
this.fetch = false;
this.DOMException = global.DOMException
}
F.prototype = global;
return new F();
})();
(function(self) {

var irrelevant = (function (exports) {

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
})(__self__);
__self__.fetch.ponyfill = true;
// Remove "polyfill" property added by whatwg-fetch
delete __self__.fetch.polyfill;
// Choose between native implementation (global) or custom implementation (__self__)
// var ctx = global.fetch ? global : __self__;
var ctx = __self__; // this line disable service worker support temporarily
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports

},{}],"node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"node_modules/parcel-bundler/src/builtins/bundle-loader.js":[function(require,module,exports) {
var getBundleURL = require('./bundle-url').getBundleURL;

function loadBundlesLazy(bundles) {
  if (!Array.isArray(bundles)) {
    bundles = [bundles];
  }

  var id = bundles[bundles.length - 1];

  try {
    return Promise.resolve(require(id));
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return new LazyPromise(function (resolve, reject) {
        loadBundles(bundles.slice(0, -1)).then(function () {
          return require(id);
        }).then(resolve, reject);
      });
    }

    throw err;
  }
}

function loadBundles(bundles) {
  return Promise.all(bundles.map(loadBundle));
}

var bundleLoaders = {};

function registerBundleLoader(type, loader) {
  bundleLoaders[type] = loader;
}

module.exports = exports = loadBundlesLazy;
exports.load = loadBundles;
exports.register = registerBundleLoader;
var bundles = {};

function loadBundle(bundle) {
  var id;

  if (Array.isArray(bundle)) {
    id = bundle[1];
    bundle = bundle[0];
  }

  if (bundles[bundle]) {
    return bundles[bundle];
  }

  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();
  var bundleLoader = bundleLoaders[type];

  if (bundleLoader) {
    return bundles[bundle] = bundleLoader(getBundleURL() + bundle).then(function (resolved) {
      if (resolved) {
        module.bundle.register(id, resolved);
      }

      return resolved;
    }).catch(function (e) {
      delete bundles[bundle];
      throw e;
    });
  }
}

function LazyPromise(executor) {
  this.executor = executor;
  this.promise = null;
}

LazyPromise.prototype.then = function (onSuccess, onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.then(onSuccess, onError);
};

LazyPromise.prototype.catch = function (onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.catch(onError);
};
},{"./bundle-url":"node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"node_modules/@inrupt/solid-client/dist/index.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addIri = exports.addInteger = exports.addDecimal = exports.addDatetime = exports.addDate = exports.addBoolean = exports.acp_v4 = exports.acp_v3 = exports.acp_v2 = exports.acp_v1 = exports.acp_ess_2 = exports.acp_ess_1 = exports.access_v2 = exports.access_v1 = exports.access = exports.ThingExpectedError = exports.SolidClientError = exports.FetchError = void 0;
exports.addJwkToJwks = addJwkToJwks;
exports.addLiteral = addLiteral;
exports.addMockFallbackAclTo = addMockFallbackAclTo;
exports.addMockResourceAclTo = addMockResourceAclTo;
exports.addNamedNode = addNamedNode;
exports.addPublicKeyToProfileJwks = addPublicKeyToProfileJwks;
exports.addStringEnglish = addStringEnglish;
exports.addStringNoLocale = void 0;
exports.addStringWithLocale = addStringWithLocale;
exports.addTerm = addTerm;
exports.asIri = exports.addUrl = exports.addTime = void 0;
exports.asUrl = asUrl;
exports.buildThing = buildThing;
exports.changeLogAsMarkdown = changeLogAsMarkdown;
exports.createAcl = createAcl;
exports.createAclFromFallbackAcl = createAclFromFallbackAcl;
exports.createContainerAt = createContainerAt;
exports.createContainerInContainer = createContainerInContainer;
exports.createSolidDataset = createSolidDataset;
exports.createThing = createThing;
exports.deleteAclFor = deleteAclFor;
exports.deleteContainer = deleteContainer;
exports.deleteFile = deleteFile;
exports.deleteSolidDataset = deleteSolidDataset;
exports.fromRdfJsDataset = fromRdfJsDataset;
exports.getAgentAccess = getAgentAccess$5;
exports.getAgentAccessAll = getAgentAccessAll$5;
exports.getAgentDefaultAccess = getAgentDefaultAccess;
exports.getAgentDefaultAccessAll = getAgentDefaultAccessAll;
exports.getAgentResourceAccess = getAgentResourceAccess;
exports.getAgentResourceAccessAll = getAgentResourceAccessAll;
exports.getAltProfileUrlAllFrom = getAltProfileUrlAllFrom;
exports.getBoolean = getBoolean;
exports.getBooleanAll = getBooleanAll;
exports.getContainedResourceUrlAll = getContainedResourceUrlAll;
exports.getContentType = getContentType$1;
exports.getDate = getDate;
exports.getDateAll = getDateAll;
exports.getDatetime = getDatetime;
exports.getDatetimeAll = getDatetimeAll;
exports.getDecimal = getDecimal;
exports.getDecimalAll = getDecimalAll;
exports.getEffectiveAccess = getEffectiveAccess;
exports.getFallbackAcl = getFallbackAcl;
exports.getFile = getFile;
exports.getFileWithAcl = getFileWithAcl;
exports.getGroupAccess = getGroupAccess$2;
exports.getGroupAccessAll = getGroupAccessAll$2;
exports.getGroupDefaultAccess = getGroupDefaultAccess;
exports.getGroupDefaultAccessAll = getGroupDefaultAccessAll;
exports.getGroupResourceAccess = getGroupResourceAccess;
exports.getGroupResourceAccessAll = getGroupResourceAccessAll;
exports.getInteger = getInteger;
exports.getIntegerAll = getIntegerAll;
exports.getJsonLdParser = exports.getIriAll = exports.getIri = void 0;
exports.getLinkedResourceUrlAll = getLinkedResourceUrlAll;
exports.getLiteral = getLiteral;
exports.getLiteralAll = getLiteralAll;
exports.getNamedNode = getNamedNode;
exports.getNamedNodeAll = getNamedNodeAll;
exports.getPodOwner = getPodOwner;
exports.getPodUrlAll = getPodUrlAll;
exports.getPodUrlAllFrom = getPodUrlAllFrom;
exports.getProfileAll = getProfileAll;
exports.getProfileJwksIri = getProfileJwksIri;
exports.getPropertyAll = getPropertyAll;
exports.getPublicAccess = getPublicAccess$5;
exports.getPublicDefaultAccess = getPublicDefaultAccess;
exports.getPublicResourceAccess = getPublicResourceAccess;
exports.getResourceAcl = getResourceAcl;
exports.getResourceInfo = getResourceInfo;
exports.getResourceInfoWithAcl = getResourceInfoWithAcl;
exports.getSolidDataset = getSolidDataset;
exports.getSolidDatasetWithAcl = getSolidDatasetWithAcl;
exports.getSourceIri = void 0;
exports.getSourceUrl = getSourceUrl;
exports.getStringByLocaleAll = getStringByLocaleAll;
exports.getStringEnglish = getStringEnglish;
exports.getStringEnglishAll = getStringEnglishAll;
exports.getStringNoLocale = getStringNoLocale;
exports.getStringNoLocaleAll = getStringNoLocaleAll;
exports.getStringWithLocale = getStringWithLocale;
exports.getStringWithLocaleAll = getStringWithLocaleAll;
exports.getTerm = getTerm;
exports.getTermAll = getTermAll;
exports.getThing = getThing;
exports.getThingAll = getThingAll;
exports.getTime = getTime;
exports.getTimeAll = getTimeAll;
exports.getTurtleParser = void 0;
exports.getUrl = getUrl;
exports.getUrlAll = getUrlAll;
exports.getWellKnownSolid = getWellKnownSolid;
exports.hasAccessibleAcl = hasAccessibleAcl;
exports.hasAcl = hasAcl;
exports.hasFallbackAcl = hasFallbackAcl;
exports.hasResourceAcl = hasResourceAcl;
exports.hasResourceInfo = hasResourceInfo;
exports.hasServerResourceInfo = hasServerResourceInfo;
exports.isContainer = isContainer;
exports.isPodOwner = isPodOwner;
exports.isRawData = isRawData;
exports.isThing = isThing;
exports.isThingLocal = isThingLocal;
exports.mockContainerFrom = mockContainerFrom;
exports.mockFetchError = mockFetchError;
exports.mockFileFrom = mockFileFrom;
exports.mockSolidDatasetFrom = mockSolidDatasetFrom;
exports.mockThingFrom = mockThingFrom;
exports.overwriteFile = overwriteFile;
exports.removeAll = removeAll;
exports.removeIri = exports.removeInteger = exports.removeDecimal = exports.removeDatetime = exports.removeDate = exports.removeBoolean = void 0;
exports.removeLiteral = removeLiteral;
exports.removeNamedNode = removeNamedNode;
exports.removeStringEnglish = removeStringEnglish;
exports.removeStringNoLocale = void 0;
exports.removeStringWithLocale = removeStringWithLocale;
exports.removeThing = removeThing;
exports.removeUrl = exports.removeTime = void 0;
exports.responseToResourceInfo = responseToResourceInfo;
exports.responseToSolidDataset = responseToSolidDataset;
exports.saveAclFor = saveAclFor;
exports.saveFileInContainer = saveFileInContainer;
exports.saveSolidDatasetAt = saveSolidDatasetAt;
exports.saveSolidDatasetInContainer = saveSolidDatasetInContainer;
exports.setAgentDefaultAccess = setAgentDefaultAccess;
exports.setAgentResourceAccess = setAgentResourceAccess$1;
exports.setDecimal = exports.setDatetime = exports.setDate = exports.setBoolean = void 0;
exports.setGroupDefaultAccess = setGroupDefaultAccess;
exports.setGroupResourceAccess = setGroupResourceAccess$1;
exports.setIri = exports.setInteger = void 0;
exports.setLiteral = setLiteral;
exports.setNamedNode = setNamedNode;
exports.setProfileJwks = setProfileJwks;
exports.setPublicDefaultAccess = setPublicDefaultAccess;
exports.setPublicResourceAccess = setPublicResourceAccess$1;
exports.setStringNoLocale = void 0;
exports.setStringWithLocale = setStringWithLocale;
exports.setTerm = setTerm;
exports.setThing = setThing;
exports.setUrl = exports.setTime = void 0;
exports.solidDatasetAsMarkdown = solidDatasetAsMarkdown;
exports.solidDatasetAsTurtle = solidDatasetAsTurtle;
exports.thingAsMarkdown = thingAsMarkdown;
exports.toRdfJsDataset = toRdfJsDataset;
exports.universalAccess = void 0;

var _httpLinkHeader = _interopRequireDefault(require("http-link-header"));

var _dataModel = _interopRequireDefault(require("@rdfjs/data-model"));

var _dataset = _interopRequireDefault(require("@rdfjs/dataset"));

var jsonld = _interopRequireWildcard(require("jsonld"));

var _n = require("n3");

var crossFetch = _interopRequireWildcard(require("cross-fetch"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Verify whether a given SolidDataset includes metadata about where it was sent to.
 *
 * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.
 * @returns True if `dataset` includes metadata about the Resource it was sent to, false if not.
 * @since 0.2.0
 */
function hasResourceInfo(resource) {
  const potentialResourceInfo = resource;
  return typeof potentialResourceInfo === "object" && typeof potentialResourceInfo.internal_resourceInfo === "object";
}
/**
 * Verify whether a given SolidDataset includes metadata about where it was retrieved from.
 *
 * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.
 * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.
 * @since 0.6.0
 */


function hasServerResourceInfo(resource) {
  const potentialResourceInfo = resource;
  return typeof potentialResourceInfo === "object" && typeof potentialResourceInfo.internal_resourceInfo === "object" && typeof potentialResourceInfo.internal_resourceInfo.linkedResources === "object";
}
/** @internal */


function hasChangelog(dataset) {
  const potentialChangeLog = dataset;
  return typeof potentialChangeLog.internal_changeLog === "object" && Array.isArray(potentialChangeLog.internal_changeLog.additions) && Array.isArray(potentialChangeLog.internal_changeLog.deletions);
}
/**
 * Errors thrown by solid-client extend this class, and can thereby be distinguished from errors
 * thrown in lower-level libraries.
 * @since 1.2.0
 */


class SolidClientError extends Error {}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @internal */


exports.SolidClientError = SolidClientError;

function internal_toIriString(iri) {
  return typeof iri === "string" ? iri : iri.value;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.
 */


const fetch = async (resource, init) => {
  /* istanbul ignore if: `require` is always defined in the unit test environment */
  if (typeof window === "object" && typeof require !== "function") {
    return await window.fetch(resource, init);
  }
  /* istanbul ignore if: `require` is always defined in the unit test environment */


  if (typeof require !== "function") {
    // When using Node.js with ES Modules, require is not defined:
    const crossFetchModule = await require("_bundle_loader")(require.resolve('cross-fetch'));
    const fetch = crossFetchModule.default;
    return fetch(resource, init);
  } // Implementation note: it's up to the client application to resolve these module names to the
  // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if
  // the module names are literal strings.
  // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js
  // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a
  // warning. Since the use of package names instead of file names requires a bundles anyway, this
  // should not have any practical consequences. For more background, see:
  // https://github.com/webpack/webpack/issues/7713


  let fetch; // Unfortunately solid-client-authn-browser does not support a default session yet.
  // Once it does, we can auto-detect if it is available and use it as follows:
  // try {
  //   fetch = require("solid-client-authn-browser").fetch;
  // } catch (e) {
  // When enabling the above, make sure to add a similar try {...} catch block using `import`
  // statements in the elseif above.
  // eslint-disable-next-line prefer-const

  fetch = require("cross-fetch"); // }

  return await fetch(resource, init);
};
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @internal
 */


function internal_parseResourceInfo(response) {
  var _a, _b, _c;

  const contentTypeParts = (_b = (_a = response.headers.get("Content-Type")) === null || _a === void 0 ? void 0 : _a.split(";")) !== null && _b !== void 0 ? _b : []; // If the server offers a Turtle or JSON-LD serialisation on its own accord,
  // that tells us whether it is RDF data that the server can understand
  // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),
  // in which case our SolidDataset-related functions should handle it.
  // For more context, see https://github.com/inrupt/solid-client-js/pull/214.

  const isSolidDataset = contentTypeParts.length > 0 && ["text/turtle", "application/ld+json"].includes(contentTypeParts[0]);
  const resourceInfo = {
    sourceIri: response.url,
    isRawData: !isSolidDataset,
    contentType: (_c = response.headers.get("Content-Type")) !== null && _c !== void 0 ? _c : undefined,
    linkedResources: {}
  };
  const linkHeader = response.headers.get("Link");

  if (linkHeader) {
    const parsedLinks = _httpLinkHeader.default.parse(linkHeader); // Set ACL link


    const aclLinks = parsedLinks.get("rel", "acl");

    if (aclLinks.length === 1) {
      resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;
    } // Parse all link headers and expose them in a standard way
    // (this can replace the parsing of the ACL link above):


    resourceInfo.linkedResources = parsedLinks.refs.reduce((rels, ref) => {
      var _a;

      var _b;

      (_a = rels[_b = ref.rel]) !== null && _a !== void 0 ? _a : rels[_b] = [];
      rels[ref.rel].push(new URL(ref.uri, resourceInfo.sourceIri).href);
      return rels;
    }, resourceInfo.linkedResources);
  }

  const wacAllowHeader = response.headers.get("WAC-Allow");

  if (wacAllowHeader) {
    resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);
  }

  return resourceInfo;
}
/**
 * Parse a WAC-Allow header into user and public access booleans.
 *
 * @param wacAllowHeader A WAC-Allow header in the format `user="read append write control",public="read"`
 * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers
 */


function parseWacAllowHeader(wacAllowHeader) {
  function parsePermissionStatement(permissionStatement) {
    const permissions = permissionStatement.split(" ");
    const writePermission = permissions.includes("write");
    return writePermission ? {
      read: permissions.includes("read"),
      append: true,
      write: true,
      control: permissions.includes("control")
    } : {
      read: permissions.includes("read"),
      append: permissions.includes("append"),
      write: false,
      control: permissions.includes("control")
    };
  }

  function getStatementFor(header, scope) {
    const relevantEntries = header.split(",").map(rawEntry => rawEntry.split("=")).filter(parts => parts.length === 2 && parts[0].trim() === scope); // There should only be one statement with the given scope:

    if (relevantEntries.length !== 1) {
      return "";
    }

    const relevantStatement = relevantEntries[0][1].trim(); // The given statement should be wrapped in double quotes to be valid:

    if (relevantStatement.charAt(0) !== '"' || relevantStatement.charAt(relevantStatement.length - 1) !== '"') {
      return "";
    } // Return the statment without the wrapping quotes, e.g.: read append write control


    return relevantStatement.substring(1, relevantStatement.length - 1);
  }

  return {
    user: parsePermissionStatement(getStatementFor(wacAllowHeader, "user")),
    public: parsePermissionStatement(getStatementFor(wacAllowHeader, "public"))
  };
}
/** @hidden Used to instantiate a separate instance from input parameters */


function internal_cloneResource(resource) {
  let clonedResource;

  if (typeof resource.slice === "function") {
    // If given Resource is a File:
    clonedResource = Object.assign(resource.slice(), Object.assign({}, resource));
  } else {
    // If it is just a plain object containing metadata:
    clonedResource = Object.assign({}, resource);
  }

  return clonedResource;
}
/** @internal */


function internal_isUnsuccessfulResponse(response) {
  return !response.ok;
}

function internal_isAuthenticationFailureResponse(response) {
  return response.status === 401 || response.status === 403;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// TODO: These should be replaced by auto-generated constants,
//       if we can ensure that unused constants will be excluded from bundles.

/** @hidden */


const acl = {
  Authorization: "http://www.w3.org/ns/auth/acl#Authorization",
  AuthenticatedAgent: "http://www.w3.org/ns/auth/acl#AuthenticatedAgent",
  accessTo: "http://www.w3.org/ns/auth/acl#accessTo",
  agent: "http://www.w3.org/ns/auth/acl#agent",
  agentGroup: "http://www.w3.org/ns/auth/acl#agentGroup",
  agentClass: "http://www.w3.org/ns/auth/acl#agentClass",
  default: "http://www.w3.org/ns/auth/acl#default",
  defaultForNew: "http://www.w3.org/ns/auth/acl#defaultForNew",
  mode: "http://www.w3.org/ns/auth/acl#mode",
  origin: "http://www.w3.org/ns/auth/acl#origin"
};
/** @hidden */

const rdf = {
  type: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
};
/** @hidden */

const ldp = {
  BasicContainer: "http://www.w3.org/ns/ldp#BasicContainer",
  Container: "http://www.w3.org/ns/ldp#Container",
  Resource: "http://www.w3.org/ns/ldp#Resource",
  contains: "http://www.w3.org/ns/ldp#contains"
};
/** @hidden */

const foaf = {
  Agent: "http://xmlns.com/foaf/0.1/Agent",
  primaryTopic: "http://xmlns.com/foaf/0.1/primaryTopic",
  isPrimaryTopicOf: "http://xmlns.com/foaf/0.1/isPrimaryTopicOf"
};
/** @hidden */

const acp = {
  AccessControlResource: "http://www.w3.org/ns/solid/acp#AccessControlResource",
  Policy: "http://www.w3.org/ns/solid/acp#Policy",
  AccessControl: "http://www.w3.org/ns/solid/acp#AccessControl",
  Read: "http://www.w3.org/ns/solid/acp#Read",
  Append: "http://www.w3.org/ns/solid/acp#Append",
  Write: "http://www.w3.org/ns/solid/acp#Write",

  /** @deprecated Removed from the ACP proposal, to be replaced by Matchers. */
  Rule: "http://www.w3.org/ns/solid/acp#Rule",
  Matcher: "http://www.w3.org/ns/solid/acp#Matcher",
  accessControl: "http://www.w3.org/ns/solid/acp#accessControl",
  memberAccessControl: "http://www.w3.org/ns/solid/acp#memberAccessControl",
  apply: "http://www.w3.org/ns/solid/acp#apply",

  /** @deprecated Removed from the ACP proposal, to be replaced by memberAccessControls. */
  applyMembers: "http://www.w3.org/ns/solid/acp#applyMembers",
  allow: "http://www.w3.org/ns/solid/acp#allow",
  deny: "http://www.w3.org/ns/solid/acp#deny",
  allOf: "http://www.w3.org/ns/solid/acp#allOf",
  anyOf: "http://www.w3.org/ns/solid/acp#anyOf",
  noneOf: "http://www.w3.org/ns/solid/acp#noneOf",
  access: "http://www.w3.org/ns/solid/acp#access",

  /** @deprecated Removed from the ACP proposal, to be replaced by memberAccessControls. */
  accessMembers: "http://www.w3.org/ns/solid/acp#accessMembers",
  agent: "http://www.w3.org/ns/solid/acp#agent",
  group: "http://www.w3.org/ns/solid/acp#group",
  client: "http://www.w3.org/ns/solid/acp#client",
  PublicAgent: "http://www.w3.org/ns/solid/acp#PublicAgent",
  AuthenticatedAgent: "http://www.w3.org/ns/solid/acp#AuthenticatedAgent",
  CreatorAgent: "http://www.w3.org/ns/solid/acp#CreatorAgent"
};
/** @hidden */

const solid = {
  PublicOidcClient: "http://www.w3.org/ns/solid/terms#PublicOidcClient"
};
/** @hidden */

const security = {
  publicKey: "https://w3id.org/security#publicKey"
};
/** @hidden */

const pim = {
  storage: "http://www.w3.org/ns/pim/space#storage"
};
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @ignore For internal use only. */

const internal_defaultFetchOptions = {
  fetch: fetch
};
/**
 * Retrieve the information about a resource (e.g. access permissions) without
 * fetching the resource itself.
 *
 * @param url URL to fetch Resource metadata from.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).
 * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.
 * @since 0.4.0
 */

async function getResourceInfo(url, options = Object.assign(Object.assign({}, internal_defaultFetchOptions), {
  ignoreAuthenticationErrors: false
})) {
  var _a;

  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(url, {
    method: "HEAD"
  });
  return responseToResourceInfo(response, {
    ignoreAuthenticationErrors: (_a = options.ignoreAuthenticationErrors) !== null && _a !== void 0 ? _a : false
  });
}
/**
 * Parse Solid metadata from a Response obtained by fetching a Resource from a Solid Pod,
 *
 * @param response A Fetch API Response. See {@link https://developer.mozilla.org/en-US/docs/Web/API/Response MDN}.
 * @returns Resource metadata readable by functions such as [[getSourceUrl]].
 * @hidden This interface is not exposed yet until we've tried it out in practice.
 */


function responseToResourceInfo(response, options = {
  ignoreAuthenticationErrors: false
}) {
  if (internal_isUnsuccessfulResponse(response) && (!internal_isAuthenticationFailureResponse(response) || !options.ignoreAuthenticationErrors)) {
    throw new FetchError(`Fetching the metadata of the Resource at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = internal_parseResourceInfo(response);
  return {
    internal_resourceInfo: resourceInfo
  };
}
/**
 * @param resource Resource for which to check whether it is a Container.
 * @returns Whether `resource` is a Container.
 */


function isContainer(resource) {
  const containerUrl = hasResourceInfo(resource) ? getSourceUrl(resource) : internal_toIriString(resource);
  return containerUrl.endsWith("/");
}
/**
 * This function will tell you whether a given Resource contains raw data, or a SolidDataset.
 *
 * @param resource Resource for which to check whether it contains raw data.
 * @return Whether `resource` contains raw data.
 */


function isRawData(resource) {
  return resource.internal_resourceInfo.isRawData;
}
/**
 * @param resource Resource for which to determine the Content Type.
 * @returns The Content Type, if known, or null if not known.
 */


function getContentType$1(resource) {
  var _a;

  return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;
}

function getSourceUrl(resource) {
  if (hasResourceInfo(resource)) {
    return resource.internal_resourceInfo.sourceIri;
  }

  return null;
}
/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */


const getSourceIri = getSourceUrl;
/**
 * Given a Resource that exposes information about the owner of the Pod it is in, returns the WebID of that owner.
 *
 * Data about the owner of the Pod is exposed when the following conditions hold:
 * - The Pod server supports exposing the Pod owner
 * - The current user is allowed to see who the Pod owner is.
 *
 * If one or more of those conditions are false, this function will return `null`.
 *
 * @param resource A Resource that contains information about the owner of the Pod it is in.
 * @returns The WebID of the owner of the Pod the Resource is in, if provided, or `null` if not.
 * @since 0.6.0
 */

exports.getSourceIri = getSourceIri;

function getPodOwner(resource) {
  var _a;

  if (!hasServerResourceInfo(resource)) {
    return null;
  }

  const podOwners = (_a = getLinkedResourceUrlAll(resource)["http://www.w3.org/ns/solid/terms#podOwner"]) !== null && _a !== void 0 ? _a : [];
  return podOwners.length === 1 ? podOwners[0] : null;
}
/**
 * Given a WebID and a Resource that exposes information about the owner of the Pod it is in, returns whether the given WebID is the owner of the Pod.
 *
 * Data about the owner of the Pod is exposed when the following conditions hold:
 * - The Pod server supports exposing the Pod owner
 * - The current user is allowed to see who the Pod owner is.
 *
 * If one or more of those conditions are false, this function will return `null`.
 *
 * @param webId The WebID of which to check whether it is the Pod Owner's.
 * @param resource A Resource that contains information about the owner of the Pod it is in.
 * @returns Whether the given WebID is the Pod Owner's, if the Pod Owner is exposed, or `null` if it is not exposed.
 * @since 0.6.0
 */


function isPodOwner(webId, resource) {
  const podOwner = getPodOwner(resource);

  if (typeof podOwner !== "string") {
    return null;
  }

  return podOwner === webId;
}
/**
 * Get the URLs of Resources linked to the given Resource.
 *
 * Solid servers can link Resources to each other. For example, in servers
 * implementing Web Access Control, Resources can have an Access Control List
 * Resource linked to it via the `acl` relation.
 *
 * @param resource A Resource fetched from a Solid Pod.
 * @returns The URLs of Resources linked to the given Resource, indexed by the key that links them.
 * @since 1.7.0
 */


function getLinkedResourceUrlAll(resource) {
  return resource.internal_resourceInfo.linkedResources;
}
/**
 * Get what access the current user has to the given Resource.
 *
 * This function can tell you what access the current user has for the given
 * Resource, allowing you to e.g. determine that changes to it will be rejected
 * before attempting to do so.
 * Additionally, for servers adhering to the Web Access Control specification,
 * it will tell you what access unauthenticated users have to the given Resource.
 *
 * @param resource A Resource fetched from a Solid Pod.
 * @returns What access the current user and, if supported by the server, unauthenticated users have to the given Resource.
 * @since 1.7.0
 */


function getEffectiveAccess(resource) {
  var _a, _b, _c, _d, _e, _f, _g;

  if (typeof resource.internal_resourceInfo.permissions === "object") {
    return {
      user: {
        read: resource.internal_resourceInfo.permissions.user.read,
        append: resource.internal_resourceInfo.permissions.user.append,
        write: resource.internal_resourceInfo.permissions.user.write
      },
      public: {
        read: resource.internal_resourceInfo.permissions.public.read,
        append: resource.internal_resourceInfo.permissions.public.append,
        write: resource.internal_resourceInfo.permissions.public.write
      }
    };
  }

  const linkedResourceUrls = getLinkedResourceUrlAll(resource);
  return {
    user: {
      read: (_b = (_a = linkedResourceUrls[acp.allow]) === null || _a === void 0 ? void 0 : _a.includes(acp.Read)) !== null && _b !== void 0 ? _b : false,
      append: (_e = ((_c = linkedResourceUrls[acp.allow]) === null || _c === void 0 ? void 0 : _c.includes(acp.Append)) || ((_d = linkedResourceUrls[acp.allow]) === null || _d === void 0 ? void 0 : _d.includes(acp.Write))) !== null && _e !== void 0 ? _e : false,
      write: (_g = (_f = linkedResourceUrls[acp.allow]) === null || _f === void 0 ? void 0 : _f.includes(acp.Write)) !== null && _g !== void 0 ? _g : false
    }
  };
}
/**
 * Extends the regular JavaScript error object with access to the status code and status message.
 * @since 1.2.0
 */


class FetchError extends SolidClientError {
  constructor(message, errorResponse) {
    super(message);
    this.response = errorResponse;
  }

  get statusCode() {
    return this.response.status;
  }

  get statusText() {
    return this.response.statusText;
  }

}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


exports.FetchError = FetchError;
const defaultGetFileOptions = {
  fetch: fetch
};
const RESERVED_HEADERS = ["Slug", "If-None-Match", "Content-Type"];
/**
 * Some of the headers must be set by the library, rather than directly.
 */

function containsReserved(header) {
  return RESERVED_HEADERS.some(reserved => header[reserved] !== undefined);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Retrieves a file from a URL and returns the file as a blob.
 *
 * For example:
 *
 * ```
 * const fileBlob = await getFile("https://pod.example.com/some/file", { fetch: fetch });
 * ```
 *
 * For additional examples, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#retrieve-a-file).
 *
 * @param url The URL of the file to return
 * @param options Fetching options: a custom fetcher and/or headers.
 * @returns The file as a blob.
 */


async function getFile(input, options = defaultGetFileOptions) {
  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);
  const url = internal_toIriString(input);
  const response = await config.fetch(url, config.init);

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the File failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = internal_parseResourceInfo(response);
  const data = await response.blob();
  const fileWithResourceInfo = Object.assign(data, {
    internal_resourceInfo: resourceInfo
  });
  return fileWithResourceInfo;
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Deletes a file at a given URL.
 *
 * For example:
 *
 * ```
 * await deleteFile( "https://pod.example.com/some/file", { fetch: fetch });
 * ```
 *
 * For additional examples, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#delete-a-file).
 *
 * @param file The URL of the file to delete
 */


async function deleteFile(file, options = defaultGetFileOptions) {
  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);
  const url = hasResourceInfo(file) ? internal_toIriString(getSourceIri(file)) : internal_toIriString(file);
  const response = await config.fetch(url, Object.assign(Object.assign({}, config.init), {
    method: "DELETE"
  }));

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Deleting the file at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Saves a file in an existing folder/Container associated with the given URL.
 *
 * For example:
 *
 * ```
 * const savedFile = await saveFileInContainer(
 *   "https://pod.example.com/some/existing/container/",
 *   new Blob(["This is a plain piece of text"], { type: "plain/text" }),
 *   { slug: "suggestedFileName.txt", contentType: "text/plain", fetch: fetch }
 * );
 * ```
 *
 * For additional example, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#save-a-file-into-an-existing-container).
 *
 * In the `options` parameter,
 *
 * - You can suggest a file name in the `slug` field.  However, the Solid
 *   Server may or may not use the suggested `slug` as the file name.
 *
 * - *Recommended:* You can specify the [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)
 *   of the file in the `contentType`.  If unspecified, the function uses the default type of
 *   `application/octet-stream`, indicating a binary data file.
 *
 * The function saves a file into an *existing* Container. If the
 * Container does not exist, either:
 * - Create the Container first using [[createContainerAt]], and then
 *   use the function, or
 * - Use [[overwriteFile]] to save the file. [[overwriteFile]] creates
 *   the Containers in the saved file path as needed.
 *
 * Users who only have `Append` but not `Write` access to a Container
 * can use [[saveFileInContainer]] to save new files to the Container.
 * That is, [[saveFileInContainer]] is useful in situations where users
 * can add new files to a Container but not change existing files in
 * the Container, such as users given access to send notifications to
 * another's Pod but not to view or delete existing notifications in that Pod.
 *
 * Users with `Write` access to the given folder/Container may prefer to
 * use [[overwriteFile]].
 *
 * @param folderUrl The URL of an existing folder where the new file is saved.
 * @param file The file to be written.
 * @param options Additional parameters for file creation (e.g. a slug).
 * @returns A Promise that resolves to the saved file, if available, or `null` if the current user does not have Read access to the newly-saved file. It rejects if saving fails.
 */


async function saveFileInContainer(folderUrl, file, options = defaultGetFileOptions) {
  const folderUrlString = internal_toIriString(folderUrl);
  const response = await writeFile(folderUrlString, file, "POST", options);

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Saving the file in [${folderUrl}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const locationHeader = response.headers.get("Location");

  if (locationHeader === null) {
    throw new Error("Could not determine the location of the newly saved file.");
  }

  const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;
  const blobClone = internal_cloneResource(file);
  const resourceInfo = {
    internal_resourceInfo: {
      isRawData: true,
      sourceIri: fileIri,
      contentType: getContentType(file, options.contentType)
    }
  };
  return Object.assign(blobClone, resourceInfo);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Saves a file at a given URL. If a file already exists at the URL,
 * the function overwrites the existing file.
 *
 * For example:
 *
 * ```
 * const savedFile = await overwriteFile(
 *   "https://pod.example.com/some/container/myFile.txt",
 *   new Blob(["This is a plain piece of text"], { type: "plain/text" }),
 *   { contentType: "text/plain", fetch: fetch }
 * );
 * ```
 *
 * For additional example, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#write-a-file-to-a-specific-url).
 *
 * *Recommended:* In the `options` parameter, you can specify the
 * [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)
 * of the file in the `contentType`.  If unspecified, the function uses the default type of
 * `application/octet-stream`, indicating a binary data file.
 *
 * When saving a file with [[overwriteFile]], the Solid server creates any
 * intermediary Containers as needed; i.e., the Containers do not
 * need to be created in advance. For example, when saving a file to the target URL of
 * https://example.pod/container/resource, if https://example.pod/container/ does not exist,
 * the container is created as part of the save.
 *
 * @param fileUrl The URL where the file is saved.
 * @param file The file to be written.
 * @param options Additional parameters for file creation (e.g., media type).
 */


async function overwriteFile(fileUrl, file, options = defaultGetFileOptions) {
  const fileUrlString = internal_toIriString(fileUrl);
  const response = await writeFile(fileUrlString, file, "PUT", options);

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Overwriting the file at [${fileUrlString}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const blobClone = internal_cloneResource(file);
  const resourceInfo = internal_parseResourceInfo(response);
  resourceInfo.sourceIri = fileUrlString;
  resourceInfo.isRawData = true;
  return Object.assign(blobClone, {
    internal_resourceInfo: resourceInfo
  });
}

function isHeadersArray(headers) {
  return Array.isArray(headers);
}
/**
 * The return type of this function is misleading: it should ONLY be used to check
 * whether an object has a forEach method that returns <key, value> pairs.
 *
 * @param headers A headers object that might have a forEach
 */


function hasHeadersObjectForEach(headers) {
  return typeof headers.forEach === "function";
}
/**
 * @hidden
 * This function feels unnecessarily complicated, but is required in order to
 * have Headers according to type definitions in both Node and browser environments.
 * This might require a fix upstream to be cleaned up.
 *
 * @param headersToFlatten A structure containing headers potentially in several formats
 */


function flattenHeaders(headersToFlatten) {
  if (typeof headersToFlatten === "undefined") {
    return {};
  }

  let flatHeaders = {};

  if (isHeadersArray(headersToFlatten)) {
    headersToFlatten.forEach(([key, value]) => {
      flatHeaders[key] = value;
    }); // Note that the following line must be a elsif, because string[][] has a forEach,
    // but it returns string[] instead of <key, value>
  } else if (hasHeadersObjectForEach(headersToFlatten)) {
    headersToFlatten.forEach((value, key) => {
      flatHeaders[key] = value;
    });
  } else {
    // If the headers are already a Record<string, string>,
    // they can directly be returned.
    flatHeaders = headersToFlatten;
  }

  return flatHeaders;
}
/**
 * Internal function that performs the actual write HTTP query, either POST
 * or PUT depending on the use case.
 *
 * @param fileUrl The URL where the file is saved
 * @param file The file to be written
 * @param method The HTTP method
 * @param options Additional parameters for file creation (e.g. a slug, or media type)
 */


async function writeFile(targetUrl, file, method, options) {
  var _a, _b;

  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);
  const headers = flattenHeaders((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});

  if (containsReserved(headers)) {
    throw new Error(`No reserved header (${RESERVED_HEADERS.join(", ")}) should be set in the optional RequestInit.`);
  } // If a slug is in the parameters, set the request headers accordingly


  if (config.slug !== undefined) {
    headers["Slug"] = config.slug;
  }

  headers["Content-Type"] = getContentType(file, options.contentType);
  const targetUrlString = internal_toIriString(targetUrl);
  return await config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), {
    headers,
    method,
    body: file
  }));
}

function getContentType(file, contentTypeOverride) {
  if (typeof contentTypeOverride === "string") {
    return contentTypeOverride;
  }

  const fileType = typeof file === "object" && file !== null && typeof file.type === "string" && file.type.length > 0 ? file.type : undefined;
  return fileType !== null && fileType !== void 0 ? fileType : "application/octet-stream";
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


_dataset.default.dataset;
const localNodeSkolemPrefix = "https://inrupt.com/.well-known/sdk-local-node/";
/**
 * Runtime freezing might be too much overhead;
 * if so, this function allows us to replace it by a function
 * that merely marks its input as Readonly<> for static analysis.
 */

const freeze = Object.freeze;

function isLocalNodeIri(iri) {
  return iri.substring(0, localNodeSkolemPrefix.length) === localNodeSkolemPrefix;
}

function getLocalNodeName(localNodeIri) {
  return localNodeIri.substring(localNodeSkolemPrefix.length);
}

function getLocalNodeIri(localNodeName) {
  return `${localNodeSkolemPrefix}${localNodeName}`;
}

function isBlankNodeId(value) {
  return typeof value === "string" && value.substring(0, 2) === "_:";
}

function getBlankNodeValue(blankNodeId) {
  return blankNodeId.substring(2);
}

function getBlankNodeId(blankNode) {
  return `_:${blankNode.value}`;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * IRIs of the XML Schema data types we support
 */


const xmlSchemaTypes = {
  boolean: "http://www.w3.org/2001/XMLSchema#boolean",
  dateTime: "http://www.w3.org/2001/XMLSchema#dateTime",
  date: "http://www.w3.org/2001/XMLSchema#date",
  time: "http://www.w3.org/2001/XMLSchema#time",
  decimal: "http://www.w3.org/2001/XMLSchema#decimal",
  integer: "http://www.w3.org/2001/XMLSchema#integer",
  string: "http://www.w3.org/2001/XMLSchema#string",
  langString: "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"
};
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation
 */

function serializeBoolean(value) {
  return value ? "true" : "false";
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.
 * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation
 */


function deserializeBoolean(value) {
  if (value === "true" || value === "1") {
    return true;
  } else if (value === "false" || value === "0") {
    return false;
  } else {
    return null;
  }
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value` in UTC.
 * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
 */


function serializeTime(value) {
  let millisecondString;
  let timezoneString;

  if (value.millisecond) {
    if (value.millisecond < 10) {
      millisecondString = "00" + value.millisecond;
    } else if (value.millisecond < 100) {
      millisecondString = "0" + value.millisecond;
    } else {
      millisecondString = value.millisecond;
    }
  }

  if (typeof value.timezoneHourOffset === "number") {
    const timezoneFormatted = Math.abs(value.timezoneHourOffset) < 10 ? "0" + Math.abs(value.timezoneHourOffset) : Math.abs(value.timezoneHourOffset);
    timezoneString = value.timezoneHourOffset >= 0 ? "+" + timezoneFormatted : "-" + timezoneFormatted;

    if (value.timezoneMinuteOffset) {
      timezoneString = timezoneString + ":" + (value.timezoneMinuteOffset < 10 ? "0" + value.timezoneMinuteOffset : value.timezoneMinuteOffset);
    } else {
      timezoneString = timezoneString + ":00";
    }
  }

  return (value.hour < 10 ? "0" + value.hour : value.hour) + ":" + (value.minute < 10 ? "0" + value.minute : value.minute) + ":" + (value.second < 10 ? "0" + value.second : value.second) + (value.millisecond ? "." + millisecondString : "") + (timezoneString ? timezoneString : "");
}
/**
 * @internal
 * @param literalString Value to deserialise.
 * @returns Deserialized time, or null if the given value is not a valid serialised datetime.
 * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
 */


function deserializeTime(literalString) {
  // Time in the format described at
  // https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
  // \d\d:\d\d:\d\d - Two digits for the hour, minute and second, respectively, separated by a `:`.
  //                  Example: "13:37:42".
  // (\.\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.
  //            Example: ".1337".
  // (Z|(\+|-)\d\d:\d\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for
  //                       the hour offset and two for the minute offset, separated by a `:`.
  //                       Example: "+13:37".
  const timeRegEx = /\d\d:\d\d:\d\d(\.\d+)?(Z|(\+|-)\d\d:\d\d)?/;

  if (!timeRegEx.test(literalString)) {
    return null;
  }

  const [timeString, timezoneString] = splitTimeFromTimezone(literalString);
  const [hourString, minuteString, timeRest] = timeString.split(":");
  let utcHours = Number.parseInt(hourString, 10);
  let utcMinutes = Number.parseInt(minuteString, 10);
  const [secondString, optionalMillisecondString] = timeRest.split(".");
  const utcSeconds = Number.parseInt(secondString, 10);
  const utcMilliseconds = optionalMillisecondString ? Number.parseInt(optionalMillisecondString, 10) : undefined;

  if (utcMinutes >= 60) {
    utcHours = utcHours + 1;
    utcMinutes = utcMinutes - 60;
  }

  const deserializedTime = {
    hour: utcHours,
    minute: utcMinutes,
    second: utcSeconds
  };

  if (typeof utcMilliseconds === "number") {
    deserializedTime.millisecond = utcMilliseconds;
  }

  if (typeof timezoneString === "string") {
    const [hourOffset, minuteOffset] = getTimezoneOffsets(timezoneString);

    if (typeof hourOffset !== "number" || hourOffset > 24 || typeof minuteOffset !== "number" || minuteOffset > 59) {
      return null;
    }

    deserializedTime.timezoneHourOffset = hourOffset;
    deserializedTime.timezoneMinuteOffset = minuteOffset;
  }

  return deserializedTime;
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation
 */


function serializeDatetime(value) {
  // Although the XML Schema DateTime is not _exactly_ an ISO 8601 string
  // (see https://www.w3.org/TR/xmlschema-2/#deviantformats),
  // the deviations only affect the parsing, not the serialisation.
  // Therefore, we can just use .toISOString():
  return value.toISOString();
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.
 * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation
 */


function deserializeDatetime(literalString) {
  // DateTime in the format described at
  // https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation
  // (without constraints on the value).
  // -? - An optional leading `-`.
  // \d{4,}- - Four or more digits followed by a `-` representing the year. Example: "3000-".
  // \d\d-\d\d - Two digits representing the month and two representing the day of the month,
  //             separated by a `-`. Example: "11-03".
  // T - The letter T, separating the date from the time.
  // \d\d:\d\d:\d\d - Two digits for the hour, minute and second, respectively, separated by a `:`.
  //                  Example: "13:37:42".
  // (\.\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.
  //            Example: ".1337".
  // (Z|(\+|-)\d\d:\d\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for
  //                       the hour offset and two for the minute offset, separated by a `:`.
  //                       Example: "+13:37".
  const datetimeRegEx = /-?\d{4,}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(Z|(\+|-)\d\d:\d\d)?/;

  if (!datetimeRegEx.test(literalString)) {
    return null;
  }

  const [signedDateString, rest] = literalString.split("T"); // The date string can optionally be prefixed with `-`,
  // in which case the year is negative:

  const [yearMultiplier, dateString] = signedDateString.charAt(0) === "-" ? [-1, signedDateString.substring(1)] : [1, signedDateString];
  const [yearString, monthString, dayString] = dateString.split("-");
  const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;
  const utcMonth = Number.parseInt(monthString, 10) - 1;
  const utcDate = Number.parseInt(dayString, 10);
  const [timeString, timezoneString] = splitTimeFromTimezone(rest);
  const [hourOffset, minuteOffset] = typeof timezoneString === "string" ? getTimezoneOffsets(timezoneString) : [0, 0];
  const [hourString, minuteString, timeRest] = timeString.split(":");
  const utcHours = Number.parseInt(hourString, 10) + hourOffset;
  const utcMinutes = Number.parseInt(minuteString, 10) + minuteOffset;
  const [secondString, optionalMillisecondString] = timeRest.split(".");
  const utcSeconds = Number.parseInt(secondString, 10);
  const utcMilliseconds = optionalMillisecondString ? Number.parseInt(optionalMillisecondString, 10) : 0;
  const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, utcHours, utcMinutes, utcSeconds, utcMilliseconds)); // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation
  // always writes out the years fully, we should correct this to actually map to the years 0 to 99.
  // See
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values

  if (utcFullYear >= 0 && utcFullYear < 100) {
    // Note that we base it on the calculated year, rather than the year that was actually read.
    // This is because the year might actually differ from the value listed in the serialisation,
    // i.e. when moving the timezone offset to UTC pushes it into a different year:
    date.setUTCFullYear(date.getUTCFullYear() - 1900);
  }

  return date;
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation
 */


function serializeDate(value) {
  const year = value.getFullYear();
  const month = value.getMonth() + 1;
  const day = value.getDate();
  const [_, timezone] = splitTimeFromTimezone(value.toISOString());
  return `${year}-${String(month).padStart(2, "0")}-${String(day).padStart(2, "0")}${timezone}`;
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.
 * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation
 */


function deserializeDate(literalString) {
  // Date in the format described at
  // https://www.w3.org/TR/xmlschema-2/#date-lexical-representation
  // (without constraints on the value).
  // -? - An optional leading `-`.
  // \d{4,}- - Four or more digits followed by a `-` representing the year. Example: "3000-".
  // \d\d-\d\d - Two digits representing the month and two representing the day of the month,
  //             separated by a `-`. Example: "11-03".
  // (Z|(\+|-)\d\d:\d\d) - Optionally, the letter Z indicating UTC, or a `+` or `-` followed by two digits for
  //                       the hour offset and two for the minute offset, separated by a `:`.
  //                       Example: "+13:37".
  const dateRegEx = /-?\d{4,}-\d\d-\d\d(Z|(\+|-)\d\d:\d\d)?/;

  if (!dateRegEx.test(literalString)) {
    return null;
  }

  const signedDateString = literalString; // The date string can optionally be prefixed with `-`,
  // in which case the year is negative:

  const [yearMultiplier, dateString] = signedDateString.charAt(0) === "-" ? [-1, signedDateString.substring(1)] : [1, signedDateString];
  const [yearString, monthString, dayAndTimezoneString] = dateString.split("-");
  const dayString = dayAndTimezoneString.length > 2 ? dayAndTimezoneString.substring(0, 2) : dayAndTimezoneString;
  const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;
  const utcMonth = Number.parseInt(monthString, 10) - 1;
  const utcDate = Number.parseInt(dayString, 10);
  const hour = 12; // setting at 12:00 avoids all timezones

  const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, hour)); // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation
  // always writes out the years fully, we should correct this to actually map to the years 0 to 99.
  // See
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values

  if (utcFullYear >= 0 && utcFullYear < 100) {
    date.setUTCFullYear(date.getUTCFullYear() - 1900);
  }

  return date;
}
/**
 * @param timeString An XML Schema time string.
 * @returns A tuple [timeString, timezoneString].
 * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
 */


function splitTimeFromTimezone(timeString) {
  if (timeString.endsWith("Z")) {
    return [timeString.substring(0, timeString.length - 1), "Z"];
  }

  const splitOnPlus = timeString.split("+");
  const splitOnMinus = timeString.split("-");

  if (splitOnPlus.length === 1 && splitOnMinus.length === 1) {
    return [splitOnPlus[0], undefined];
  }

  return splitOnPlus.length > splitOnMinus.length ? [splitOnPlus[0], "+" + splitOnPlus[1]] : [splitOnMinus[0], "-" + splitOnMinus[1]];
}
/**
 * @param timezoneString Lexical representation of a time zone in XML Schema.
 * @returns A tuple of the hour and minute offset of the time zone.
 * @see https://www.w3.org/TR/xmlschema-2/#dateTime-timezones
 */


function getTimezoneOffsets(timezoneString) {
  if (timezoneString === "Z") {
    return [0, 0];
  }

  const multiplier = timezoneString.charAt(0) === "+" ? 1 : -1;
  const [hourString, minuteString] = timezoneString.substring(1).split(":");
  const hours = Number.parseInt(hourString, 10);
  const minutes = Number.parseInt(minuteString, 10);
  return [hours * multiplier, minutes * multiplier];
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation
 */


function serializeDecimal(value) {
  return value.toString();
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.
 * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation
 */


function deserializeDecimal(literalString) {
  const deserialized = Number.parseFloat(literalString);

  if (Number.isNaN(deserialized)) {
    return null;
  }

  return deserialized;
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 */


function serializeInteger(value) {
  return value.toString();
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized integer, or null if the given value is not a valid serialised integer.
 */


function deserializeInteger(literalString) {
  const deserialized = Number.parseInt(literalString, 10);

  if (Number.isNaN(deserialized)) {
    return null;
  }

  return deserialized;
}
/**
 * @internal
 * @param locale Locale to transform into a consistent format.
 */


function normalizeLocale(locale) {
  return locale.toLowerCase();
}
/**
 * @internal Library users shouldn't need to be exposed to raw NamedNodes.
 * @param value The value that might or might not be a Named Node.
 * @returns Whether `value` is a Named Node.
 */


function isNamedNode(value) {
  return isTerm(value) && value.termType === "NamedNode";
}
/**
 * @internal Library users shouldn't need to be exposed to raw Literals.
 * @param value The value that might or might not be a Literal.
 * @returns Whether `value` is a Literal.
 */


function isLiteral(value) {
  return isTerm(value) && value.termType === "Literal";
}
/**
 * @internal Library users shouldn't need to be exposed to raw Terms.
 * @param value The value that might or might not be a Term.
 * @returns Whether `value` is a Term.
 */


function isTerm(value) {
  return value !== null && typeof value === "object" && typeof value.termType === "string" && typeof value.value === "string" && typeof value.equals === "function";
}
/**
 * @internal Library users shouldn't need to be exposed to LocalNodes.
 * @param value The value that might or might not be a Node with no known IRI yet.
 * @returns Whether `value` is a Node with no known IRI yet.
 */


function isLocalNode(value) {
  return isNamedNode(value) && isLocalNodeIri(value.value);
}
/**
 * Ensure that a given value is a valid URL.
 *
 * @internal Library users shouldn't need to be exposed to raw URLs.
 * @param iri The value of which to verify that it is a valid URL.
 */


function internal_isValidUrl(iri) {
  const iriString = internal_toIriString(iri); // If the runtime environment supports URL, instantiate one.
  // If the given IRI is not a valid URL, it will throw an error.
  // See: https://developer.mozilla.org/en-US/docs/Web/API/URL

  /* istanbul ignore if [URL is available in our testing environment, so we cannot test the alternative] */

  if (typeof URL !== "function") {
    // If we can't validate the URL, do not throw an error:
    return true;
  }

  try {
    new URL(iriString);
  } catch (_a) {
    return false;
  }

  return true;
}
/**
 * @internal Utility method; library users should not need to interact with LocalNodes directly.
 * @param localNode The LocalNode to resolve to a NamedNode.
 * @param resourceIri The Resource in which the Node will be saved.
 */


function resolveIriForLocalNode(localNode, resourceIri) {
  return DataFactory.namedNode(resolveLocalIri(getLocalNodeName(localNode.value), resourceIri));
}
/**
 * @internal API for internal use only.
 * @param name The name identifying a Thing.
 * @param resourceIri The Resource in which the Thing can be found.
 */


function resolveLocalIri(name, resourceIri) {
  /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */
  if (typeof URL !== "function") {
    throw new Error("The URL interface is not available, so an IRI cannot be determined.");
  }

  const thingIri = new URL(resourceIri);
  thingIri.hash = name;
  return thingIri.href;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const DataFactory = _dataModel.default;

function addRdfJsQuadToDataset(dataset, quad, quadParseOptions = {}) {
  var _a;

  const supportedGraphTypes = ["NamedNode", "DefaultGraph"];

  if (!supportedGraphTypes.includes(quad.graph.termType)) {
    throw new Error(`Cannot parse Quads with nodes of type [${quad.graph.termType}] as their Graph node.`);
  }

  const graphId = quad.graph.termType === "DefaultGraph" ? "default" : quad.graph.value;
  const graph = (_a = dataset.graphs[graphId]) !== null && _a !== void 0 ? _a : {};
  return freeze(Object.assign(Object.assign({}, dataset), {
    graphs: freeze(Object.assign(Object.assign({}, dataset.graphs), {
      [graphId]: addRdfJsQuadToGraph(graph, quad, quadParseOptions)
    }))
  }));
}

function addRdfJsQuadToGraph(graph, quad, quadParseOptions) {
  var _a;

  const supportedSubjectTypes = ["NamedNode", "BlankNode"];

  if (!supportedSubjectTypes.includes(quad.subject.termType)) {
    throw new Error(`Cannot parse Quads with nodes of type [${quad.subject.termType}] as their Subject node.`);
  }

  const subjectIri = quad.subject.termType === "BlankNode" ? `_:${quad.subject.value}` : quad.subject.value;
  const subject = (_a = graph[subjectIri]) !== null && _a !== void 0 ? _a : {
    type: "Subject",
    url: subjectIri,
    predicates: {}
  };
  return freeze(Object.assign(Object.assign({}, graph), {
    [subjectIri]: addRdfJsQuadToSubject(subject, quad, quadParseOptions)
  }));
}

function addRdfJsQuadToSubject(subject, quad, quadParseOptions) {
  return freeze(Object.assign(Object.assign({}, subject), {
    predicates: addRdfJsQuadToPredicates(subject.predicates, quad, quadParseOptions)
  }));
}

function addRdfJsQuadToPredicates(predicates, quad, quadParseOptions) {
  var _a;

  const supportedPredicateTypes = ["NamedNode"];

  if (!supportedPredicateTypes.includes(quad.predicate.termType)) {
    throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);
  }

  const predicateIri = quad.predicate.value;
  const objects = (_a = predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  return freeze(Object.assign(Object.assign({}, predicates), {
    [predicateIri]: addRdfJsQuadToObjects(objects, quad, quadParseOptions)
  }));
}

function addRdfJsQuadToObjects(objects, quad, quadParseOptions) {
  var _a, _b, _c, _d, _e, _f, _g, _h;

  if (quad.object.termType === "NamedNode") {
    const namedNodes = freeze([...((_a = objects.namedNodes) !== null && _a !== void 0 ? _a : []), quad.object.value]);
    return freeze(Object.assign(Object.assign({}, objects), {
      namedNodes: namedNodes
    }));
  }

  if (quad.object.termType === "Literal") {
    if (quad.object.datatype.value === xmlSchemaTypes.langString) {
      const locale = quad.object.language.toLowerCase();
      const thisLocaleStrings = freeze([...((_c = (_b = objects.langStrings) === null || _b === void 0 ? void 0 : _b[locale]) !== null && _c !== void 0 ? _c : []), quad.object.value]);
      const langStrings = freeze(Object.assign(Object.assign({}, (_d = objects.langStrings) !== null && _d !== void 0 ? _d : {}), {
        [locale]: thisLocaleStrings
      }));
      return freeze(Object.assign(Object.assign({}, objects), {
        langStrings: langStrings
      }));
    } // If the Object is a non-langString Literal


    const thisTypeValues = freeze([...((_f = (_e = objects.literals) === null || _e === void 0 ? void 0 : _e[quad.object.datatype.value]) !== null && _f !== void 0 ? _f : []), quad.object.value]);
    const literals = freeze(Object.assign(Object.assign({}, (_g = objects.literals) !== null && _g !== void 0 ? _g : {}), {
      [quad.object.datatype.value]: thisTypeValues
    }));
    return freeze(Object.assign(Object.assign({}, objects), {
      literals: literals
    }));
  }

  if (quad.object.termType === "BlankNode") {
    const blankNodePredicates = getPredicatesForBlankNode(quad.object, quadParseOptions);
    const blankNodes = freeze([...((_h = objects.blankNodes) !== null && _h !== void 0 ? _h : []), blankNodePredicates]);
    return freeze(Object.assign(Object.assign({}, objects), {
      blankNodes: blankNodes
    }));
  }

  throw new Error(`Objects of type [${quad.object.termType}] are not supported.`);
}

function getPredicatesForBlankNode(node, quadParseOptions) {
  var _a, _b;

  const chainBlankNodes = (_a = quadParseOptions.chainBlankNodes) !== null && _a !== void 0 ? _a : [];

  if (chainBlankNodes.find(chainBlankNode => chainBlankNode.equals(node)) === undefined) {
    // If this Blank Node is not used to provide nested values for another Subject,
    // just return its identifier.
    // That identifier will also be listed among the Subjects in the Graph.
    return getBlankNodeId(node);
  }
  /* istanbul ignore next: If there are chain nodes, there will always be other Quads, so the `?? []` can't be reached: */


  const quads = (_b = quadParseOptions.otherQuads) !== null && _b !== void 0 ? _b : [];
  const quadsWithNodeAsSubject = quads.filter(quad => quad.subject.equals(node)); // First add the Quads with regular Objects

  const predicates = quadsWithNodeAsSubject.filter(quad => !isBlankNode(quad.object)).reduce((predicatesAcc, quad) => {
    var _a;

    const supportedPredicateTypes = ["NamedNode"];

    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {
      throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);
    }

    const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};
    return freeze(Object.assign(Object.assign({}, predicatesAcc), {
      [quad.predicate.value]: addRdfJsQuadToObjects(objects, quad, quadParseOptions)
    }));
  }, {}); // And then also add the Quads that have another Blank Node as the Object
  // in addition to the Blank Node `node` as the Subject:

  const blankNodeObjectQuads = quadsWithNodeAsSubject.filter(quad => isBlankNode(quad.object));
  return blankNodeObjectQuads.reduce((predicatesAcc, quad) => {
    var _a, _b;

    const supportedPredicateTypes = ["NamedNode"];

    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {
      throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);
    }
    /* istanbul ignore next: The `?? {}` doesn't get hit; presumably it's initialised above. */


    const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};
    /* istanbul ignore next: The `?? []` doesn't get hit; presumably it's initialised above. */

    const blankNodes = (_b = objects.blankNodes) !== null && _b !== void 0 ? _b : [];
    return freeze(Object.assign(Object.assign({}, predicatesAcc), {
      // The BlankNode assertions are valid because we filtered on BlankNodes above:
      [quad.predicate.value]: Object.assign(Object.assign({}, objects), {
        blankNodes: [...blankNodes, getPredicatesForBlankNode(quad.object, quadParseOptions)]
      })
    }));
  }, predicates);
}
/**
 * Given an array of Quads, returns all Blank Nodes that are used in a single chain of Nodes.
 *
 * This allows you to obtain which Blank Nodes are involved in e.g. RDF lists.
 * This is useful because those can be represented as nested data that will have
 * a deterministic structure, whereas a representation of Blank Nodes that
 * create a cycle or are re-used will need ad-hoc, non-deterministic identifiers
 * to allow for representation without inifinite nesting.
 */


function getChainBlankNodes(quads) {
  // All Blank Nodes that occur in Subject position:
  const blankNodeSubjects = quads.map(quad => quad.subject).filter(isBlankNode); // All Blank Nodes that occur in Object position:

  const blankNodeObjects = quads.map(quad => quad.object).filter(isBlankNode); // Makes sure that all given Nodes are the same,
  // which will be used to verify that a set of Quads all have the same Subject:

  function everyNodeTheSame(nodes) {
    // This could potentially be made more performant by mapping every term
    // to their value and using native JS comparisons, assuming every node is
    // either a Blank or a Named Node.
    return nodes.every(otherNode => nodes.every(anotherNode => otherNode.equals(anotherNode)));
  } // Get all Blank Nodes that are part of a cycle in the graph:


  const cycleBlankNodes = [];
  blankNodeObjects.forEach(blankNodeObject => {
    cycleBlankNodes.push(...getCycleBlankNodes(blankNodeObject, quads));
  }); // Get Blank Nodes that are used to provide nested values for a single Subject,
  // which we'll represent as nested values as well
  // (this allows us to avoid generating a non-deterministic, ad-hoc identifier
  // for those Blank Nodes).
  // We'll do this by taking all Blank Nodes in the given Quads...

  const chainBlankNodes = blankNodeSubjects.concat(blankNodeObjects).filter(blankNode => {
    // ....removing those Blank Nodes that are part of a cycle...
    if (cycleBlankNodes.some(cycleBlankNode => cycleBlankNode.equals(blankNode))) {
      return false;
    } // ...and then returning only those Blank Nodes that only occur in the
    // Object position for a single Subject, i.e. that are part of a single
    // chain:


    const subjectsWithThisNodeAsObject = quads.filter(quad => quad.object.equals(blankNode)).map(quad => quad.subject);
    return subjectsWithThisNodeAsObject.length > 0 && everyNodeTheSame(subjectsWithThisNodeAsObject);
  });
  return chainBlankNodes;
}

function toRdfJsQuads(dataset, options = {}) {
  var _a;

  const quads = [];
  const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : _dataModel.default;
  Object.keys(dataset.graphs).forEach(graphIri => {
    const graph = dataset.graphs[graphIri];
    const graphNode = graphIri === "default" ? dataFactory.defaultGraph() : dataFactory.namedNode(graphIri);
    Object.keys(graph).forEach(subjectIri => {
      const predicates = graph[subjectIri].predicates;
      const subjectNode = isBlankNodeId(subjectIri) ? dataFactory.blankNode(getBlankNodeValue(subjectIri)) : dataFactory.namedNode(subjectIri);
      quads.push(...subjectToRdfJsQuads(predicates, subjectNode, graphNode, options));
    });
  });
  return quads;
}

function subjectToRdfJsQuads(predicates, subjectNode, graphNode, options = {}) {
  var _a;

  const quads = [];
  const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : _dataModel.default;
  Object.keys(predicates).forEach(predicateIri => {
    var _a, _b, _c, _d;

    const predicateNode = dataFactory.namedNode(predicateIri);
    const langStrings = (_a = predicates[predicateIri].langStrings) !== null && _a !== void 0 ? _a : {};
    const namedNodes = (_b = predicates[predicateIri].namedNodes) !== null && _b !== void 0 ? _b : [];
    const literals = (_c = predicates[predicateIri].literals) !== null && _c !== void 0 ? _c : {};
    const blankNodes = (_d = predicates[predicateIri].blankNodes) !== null && _d !== void 0 ? _d : [];
    const literalTypes = Object.keys(literals);
    literalTypes.forEach(typeIri => {
      const typeNode = dataFactory.namedNode(typeIri);
      const literalValues = literals[typeIri];
      literalValues.forEach(value => {
        const literalNode = dataFactory.literal(value, typeNode);
        quads.push(dataFactory.quad(subjectNode, predicateNode, literalNode, graphNode));
      });
    });
    const locales = Object.keys(langStrings);
    locales.forEach(locale => {
      const localeValues = langStrings[locale];
      localeValues.forEach(value => {
        const langStringNode = dataFactory.literal(value, locale);
        quads.push(dataFactory.quad(subjectNode, predicateNode, langStringNode, graphNode));
      });
    });
    namedNodes.forEach(namedNodeIri => {
      const node = dataFactory.namedNode(namedNodeIri);
      quads.push(dataFactory.quad(subjectNode, predicateNode, node, graphNode));
    });
    blankNodes.forEach(blankNodeIdOrPredicates => {
      if (isBlankNodeId(blankNodeIdOrPredicates)) {
        const blankNode = dataFactory.blankNode(getBlankNodeValue(blankNodeIdOrPredicates));
        quads.push(dataFactory.quad(subjectNode, predicateNode, blankNode, graphNode));
      } else {
        const node = dataFactory.blankNode();
        const blankNodeObjectQuad = dataFactory.quad(subjectNode, predicateNode, node, graphNode);
        const blankNodeSubjectQuads = subjectToRdfJsQuads(blankNodeIdOrPredicates, node, graphNode);
        quads.push(blankNodeObjectQuad);
        quads.push(...blankNodeSubjectQuads);
      }
    });
  });
  return quads;
}
/**
 * A recursive function that finds all Blank Nodes in an array of Quads that create a cycle in the graph.
 *
 * This function will traverse the graph starting from `currentNode`, keeping
 * track of all the Blank Nodes it encounters twice while doing so, and
 * returning those.
 */


function getCycleBlankNodes(currentNode, quads, traversedBlankNodes = []) {
  // If we've encountered `currentNode` before, all the Blank Nodes we've
  // encountered so far are part of a cycle. Return those.
  if (traversedBlankNodes.find(traversedBlankNode => traversedBlankNode.equals(currentNode)) !== undefined) {
    return traversedBlankNodes;
  } // Find all Blank Nodes that are connected to `currentNode`:


  const blankNodeObjects = quads.filter(quad => quad.subject.equals(currentNode) && isBlankNode(quad.object)).map(quad => quad.object); // If no Blank Nodes are connected to `currentNode`, and `currentNode` is not
  // part of a cycle, we're done; the currently traversed Nodes do not form a
  // cycle:

  if (blankNodeObjects.length === 0) {
    return [];
  } // Store that we've traversed `currentNode`, then move on to all the Blank
  // Nodes connected to it, which will then take up the role of `currentNode`:


  const nextTraversedNodes = [...traversedBlankNodes, currentNode];
  const cycleBlankNodeArrays = blankNodeObjects.map(nextNode => getCycleBlankNodes(nextNode, quads, nextTraversedNodes)); // Collect all the cycle Blank Nodes found in those traverals,
  // then return them:

  const allCycleBlankNodes = [];

  for (const cycleBlankNodes of cycleBlankNodeArrays) {
    allCycleBlankNodes.push(...cycleBlankNodes);
  }

  return allCycleBlankNodes;
}

function isBlankNode(term) {
  return term.termType === "BlankNode";
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} This function is still experimental and subject to change, even
 * in a non-major release.
 * ```
 * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.
 *
 * @returns A Parser object.
 * @since 1.15.0
 */


const getJsonLdParser = () => {
  const onQuadCallbacks = [];
  const onCompleteCallbacks = [];
  const onErrorCallbacks = [];
  return {
    onQuad: callback => {
      onQuadCallbacks.push(callback);
    },
    onError: callback => {
      onErrorCallbacks.push(callback);
    },
    onComplete: callback => {
      onCompleteCallbacks.push(callback);
    },
    parse: async (source, resourceInfo) => {
      let quads = [];

      try {
        const plainQuads = await jsonld.toRDF(JSON.parse(source), {
          base: getSourceUrl(resourceInfo)
        });
        quads = fixQuads(plainQuads);
      } catch (error) {
        onErrorCallbacks.forEach(callback => callback(error));
      }

      quads.forEach(quad => {
        onQuadCallbacks.forEach(callback => callback(quad));
      });
      onCompleteCallbacks.forEach(callback => callback());
    }
  };
};
/* Quads returned by jsonld parser are not spec-compliant
 * see https://github.com/digitalbazaar/jsonld.js/issues/243
 * Also, no specific type for these 'quads' is exposed by the library
 */


exports.getJsonLdParser = getJsonLdParser;

function fixQuads(plainQuads) {
  const fixedQuads = plainQuads.map(plainQuad => DataFactory.quad(term(plainQuad.subject), term(plainQuad.predicate), term(plainQuad.object), term(plainQuad.graph)));
  return fixedQuads;
}

function term(term) {
  switch (term.termType) {
    case "NamedNode":
      return DataFactory.namedNode(term.value);

    case "BlankNode":
      return DataFactory.blankNode(term.value.substr(2));
    // Remove the '_:' prefix. see https://github.com/digitalbazaar/jsonld.js/issues/244

    case "Literal":
      return DataFactory.literal(term.value, term.language || term.datatype);

    case "DefaultGraph":
      return DataFactory.defaultGraph();

    default:
      throw Error("unknown termType: " + term.termType);
  }
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} This function is still experimental and subject to change, even
 * in a non-major release.
 * ```
 * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.
 *
 * @returns A Parser object.
 * @since 1.15.0
 */


const getTurtleParser = () => {
  const onQuadCallbacks = [];
  const onCompleteCallbacks = [];
  const onErrorCallbacks = [];
  return {
    onQuad: callback => {
      onQuadCallbacks.push(callback);
    },
    onError: callback => {
      onErrorCallbacks.push(callback);
    },
    onComplete: callback => {
      onCompleteCallbacks.push(callback);
    },
    parse: async (source, resourceInfo) => {
      const parser = await getParser(getSourceUrl(resourceInfo));
      parser.parse(source, (error, quad, _prefixes) => {
        if (error) {
          onErrorCallbacks.forEach(callback => callback(error));
        } else if (quad) {
          onQuadCallbacks.forEach(callback => callback(quad));
        } else {
          onCompleteCallbacks.forEach(callback => callback());
        }
      });
    }
  };
};

exports.getTurtleParser = getTurtleParser;

async function getParser(baseIri) {
  return new _n.Parser({
    format: "text/turtle",
    baseIRI: baseIri
  });
}
/**
 * @param quads Triples that should be serialised to Turtle
 * @internal Utility method for internal use; not part of the public API.
 */


async function triplesToTurtle(quads) {
  const format = "text/turtle";
  const writer = new _n.Writer({
    format: format
  }); // Remove any potentially lingering references to Named Graphs in Quads;
  // they'll be determined by the URL the Turtle will be sent to:

  const triples = quads.map(quad => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));
  writer.addQuads(triples);
  const writePromise = new Promise((resolve, reject) => {
    writer.end((error, result) => {
      /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */
      if (error) {
        return reject(error);
      }

      resolve(result);
    });
  });
  const rawTurtle = await writePromise;
  return rawTurtle;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden For internal use only. */


function internal_getReadableValue(value) {
  var _a, _b, _c, _d, _e, _f, _g, _h;

  if (isNamedNode(value)) {
    return `<${value.value}> (URL)`;
  }

  if (isLiteral(value)) {
    /* istanbul ignore if: thingAsMarkdown always instantiates a NamedNode, so we can't hit this code path in tests. */
    if (!isNamedNode(value.datatype)) {
      return `[${value.value}] (RDF/JS Literal of unknown type)`;
    }

    let val;

    switch (value.datatype.value) {
      case xmlSchemaTypes.boolean:
        val = (_b = (_a = deserializeBoolean(value.value)) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : `Invalid data: \`${value.value}\``;
        return val + " (boolean)";

      case xmlSchemaTypes.dateTime:
        val = (_d = (_c = deserializeDatetime(value.value)) === null || _c === void 0 ? void 0 : _c.toUTCString()) !== null && _d !== void 0 ? _d : `Invalid data: \`${value.value}\``;
        return val + " (datetime)";

      case xmlSchemaTypes.decimal:
        val = (_f = (_e = deserializeDecimal(value.value)) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : `Invalid data: \`${value.value}\``;
        return val + " (decimal)";

      case xmlSchemaTypes.integer:
        val = (_h = (_g = deserializeInteger(value.value)) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : `Invalid data: \`${value.value}\``;
        return val + " (integer)";

      case xmlSchemaTypes.langString:
        return `"${value.value}" (${value.language} string)`;

      case xmlSchemaTypes.string:
        return `"${value.value}" (string)`;

      default:
        return `[${value.value}] (RDF/JS Literal of type: \`${value.datatype.value}\`)`;
    }
  }
  /* istanbul ignore else: thingAsMarkdown doesn't generate other Nodes, so we can't hit this path in tests. */


  if (value.termType === "BlankNode") {
    return `[${value.value}] (RDF/JS BlankNode)`;
  }
  /* istanbul ignore next: thingAsMarkdown doesn't generate Quad Nodes, so we can't hit this path in tests. */


  if (value.termType === "Quad") {
    return `??? (nested RDF* Quad)`;
  }
  /* istanbul ignore else: The if statements are exhaustive; if not, TypeScript will complain. */

  /* istanbul ignore next: thingAsMarkdown doesn't generate Variable Nodes, so we can't hit this path in tests. */


  if (value.termType === "Variable") {
    return `?${value.value} (RDF/JS Variable)`;
  }
  /* istanbul ignore next: The if statements are exhaustive; if not, TypeScript will complain. */


  return value;
}
/**
 * @hidden
 */


function internal_throwIfNotThing(thing) {
  if (!isThing(thing)) {
    throw new ThingExpectedError(thing);
  }
}
/**
 * @hidden
 * @param solidDataset
 */


function internal_addAdditionsToChangeLog(solidDataset, additions) {
  const changeLog = hasChangelog(solidDataset) ? solidDataset.internal_changeLog :
  /* istanbul ignore next: This function always gets called after addDeletionsToChangeLog, so the ChangeLog always already exists in tests: */
  {
    additions: [],
    deletions: []
  };
  const [newAdditions, newDeletions] = additions.filter(addition => !containsBlankNode(addition)).reduce(([additionsAcc, deletionsAcc], addition) => {
    const existingDeletion = deletionsAcc.find(deletion => deletion.equals(addition));

    if (typeof existingDeletion !== "undefined") {
      return [additionsAcc, deletionsAcc.filter(deletion => !deletion.equals(addition))];
    }

    return [additionsAcc.concat(addition), deletionsAcc];
  }, [changeLog.additions, changeLog.deletions]);
  return freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: newAdditions,
      deletions: newDeletions
    }
  }));
}
/**
 * @hidden
 * @param solidDataset
 */


function internal_addDeletionsToChangeLog(solidDataset, deletions) {
  const changeLog = hasChangelog(solidDataset) ? solidDataset.internal_changeLog : {
    additions: [],
    deletions: []
  };
  const [newAdditions, newDeletions] = deletions.filter(deletion => !containsBlankNode(deletion)).reduce(([additionsAcc, deletionsAcc], deletion) => {
    const existingAddition = additionsAcc.find(addition => addition.equals(deletion));

    if (typeof existingAddition !== "undefined") {
      return [additionsAcc.filter(addition => !addition.equals(deletion)), deletionsAcc];
    }

    return [additionsAcc, deletionsAcc.concat(deletion)];
  }, [changeLog.additions, changeLog.deletions]);
  return freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: newAdditions,
      deletions: newDeletions
    }
  }));
}
/**
 * Enforces the presence of a Changelog for a given dataset. If a changelog is
 * already present, it is unchanged. Otherwise, an empty changelog is created.
 * @hidden
 * @param solidDataset
 */


function internal_withChangeLog(solidDataset) {
  const newSolidDataset = hasChangelog(solidDataset) ? solidDataset : freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: [],
      deletions: []
    }
  }));
  return newSolidDataset;
}
/**
 * We don't currently support reading and writing Blank Nodes, so this function can be used to skip those Quads.
 *
 * This is needed because we cannot reconcile Blank Nodes in additions and
 * deletions. Down the road, we should do a diff before saving a SolidDataset
 * against a saved copy of the originally-fetched one, based on our own data
 * structures, which should make it easier to reconcile.
 */


function containsBlankNode(quad) {
  return quad.subject.termType === "BlankNode" || quad.object.termType === "BlankNode";
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Returns the URLs of all Properties that the given [[Thing ]]has values for.b
 *
 * @param thing The [[Thing]] of which to get that Property URLs that have a value.
 * @returns The URLs of the Properties for which values are defined for the given Thing.
 * @hidden This is an advanced API that should not be needed for most Solid use cases. If you do find yourself needing this, please file a feature request sharing your use case.
 */


function getPropertyAll(thing) {
  return Object.keys(thing.predicates).filter(predicate => getTerm(thing, predicate) !== null);
}
/**
 * Returns the URL value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type URL, returns null.
 * If the Property has multiple URL values, returns one of its URL values.
 *
 * @param thing The [[Thing]] to read a URL value from.
 * @param property The Property whose URL value to return.
 * @returns A URL value for the given Property if present, or null if the Property is not present or the value is not of type URL.
 */


function getUrl(thing, property) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateUrl = internal_toIriString(property);
  const firstUrl = (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : null;

  if (firstUrl === null) {
    return null;
  }

  return isLocalNodeIri(firstUrl) ? `#${getLocalNodeName(firstUrl)}` : firstUrl;
}
/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */


const getIri = getUrl;
/**
 * Returns the URL values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type URL, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the URL values from.
 * @param property The Property whose URL values to return.
 * @returns An array of URL values for the given Property.
 */

exports.getIri = getIri;

function getUrlAll(thing, property) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateUrl = internal_toIriString(property);
  return (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.map(iri => isLocalNodeIri(iri) ? `#${getLocalNodeName(iri)}` : iri)) !== null && _c !== void 0 ? _c : [];
}
/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */


const getIriAll = getUrlAll;
/**
 * Returns the boolean value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type boolean, returns null.
 * If the Property has multiple boolean values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a boolean value from.
 * @param property The Property whose boolean value to return.
 * @returns A boolean value for the given Property if present, or null if the Property is not present or the value is not of type boolean.
 */

exports.getIriAll = getIriAll;

function getBoolean(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);

  if (literalString === null) {
    return null;
  }

  return deserializeBoolean(literalString);
}
/**
 * Returns the boolean values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type boolean, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the boolean values from.
 * @param property The Property whose boolean values to return.
 * @returns An array of boolean values for the given Property.
 */


function getBooleanAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);
  return literalStrings.map(deserializeBoolean).filter(possibleBoolean => possibleBoolean !== null);
}
/**
 * Returns the datetime value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type datetime, returns null.
 * If the Property has multiple datetime values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a datetime value from.
 * @param property The Property whose datetime value to return.
 * @returns A datetime value for the given Property if present, or null if the Property is not present or the value is not of type datetime.
 */


function getDatetime(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);

  if (literalString === null) {
    return null;
  }

  return deserializeDatetime(literalString);
}
/**
 * Returns the datetime values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type datetime, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the datetime values from.
 * @param property The Property whose datetime values to return.
 * @returns An array of datetime values for the given Property.
 */


function getDatetimeAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);
  return literalStrings.map(deserializeDatetime).filter(potentialDatetime => potentialDatetime !== null);
}
/**
 * Returns the date value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type date, returns null.
 * If the Property has multiple date values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a date value from.
 * @param property The Property whose date value to return.
 * @returns A date value for the given Property if present, or null if the Property is not present or the value is not of type date.
 * @since 1.10.0
 */


function getDate(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.date);

  if (literalString === null) {
    return null;
  }

  return deserializeDate(literalString);
}
/**
 * Returns the date values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type date, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the date values from.
 * @param property The Property whose date values to return.
 * @returns An array of date values for the given Property.
 * @since 1.10.0
 */


function getDateAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.date);
  return literalStrings.map(deserializeDate).filter(potentialDate => potentialDate !== null);
}
/**
 * Returns the time value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type time, returns null.
 * If the Property has multiple time values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a time value from.
 * @param property The Property whose time value to return.
 * @returns A time value for the given Property if present, or null if the Property is not present or the value is not of type time.
 * @since 1.10.0
 */


function getTime(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.time);

  if (literalString === null) {
    return null;
  }

  return deserializeTime(literalString);
}
/**
 * Returns the time values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type time, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the time values from.
 * @param property The Property whose time values to return.
 * @returns An array of time values for the given Property.
 * @since 1.10.0
 */


function getTimeAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.time);
  return literalStrings.map(deserializeTime).filter(potentialTime => potentialTime !== null);
}
/**
 * Returns the decimal value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type decimal, returns null.
 * If the Property has multiple decimal values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a decimal value from.
 * @param property The Property whose decimal value to return.
 * @returns A decimal value for the given Property if present, or null if the Property is not present or the value is not of type decimal.
 */


function getDecimal(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);

  if (literalString === null) {
    return null;
  }

  return deserializeDecimal(literalString);
}
/**
 * Returns the decimal values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type decimal, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the decimal values from.
 * @param property The Property whose decimal values to return.
 * @returns An array of decimal values for the given Property.
 */


function getDecimalAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);
  return literalStrings.map(literalString => deserializeDecimal(literalString)).filter(potentialDecimal => potentialDecimal !== null);
}
/**
 * Returns the integer value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type integer, returns null.
 * If the Property has multiple integer values, returns one of its values.
 *
 * @param thing The [[Thing]] to read an integer value from.
 * @param property The Property whose integer value to return.
 * @returns A integer value for the given Property if present, or null if the Property is not present or the value is not of type datetime.
 */


function getInteger(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);

  if (literalString === null) {
    return null;
  }

  return deserializeInteger(literalString);
}
/**
 * Returns the integer values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type integer, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the integer values from.
 * @param property The Property whose integer values to return.
 * @returns An array of integer values for the given Property.
 */


function getIntegerAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);
  return literalStrings.map(literalString => deserializeInteger(literalString)).filter(potentialInteger => potentialInteger !== null);
}
/**
 * Returns the English (language tag "en") string value of the specified Property from a [[Thing]].
 * If the Property is not present as a string in English, returns null.
 * If the Property has multiple English string values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a localised string value from.
 * @param property The Property whose localised string value to return.
 * @returns An English string value for the given Property if present, or null otherwise.
 * @since 1.13.0
 */


function getStringEnglish(thing, property) {
  return getStringWithLocale(thing, property, "en");
}
/**
 * Returns the localized string value of the specified Property from a [[Thing]].
 * If the Property is not present as a string in the specified locale, returns null.
 * If the Property has multiple string values for the specified locale, returns one of its values.
 *
 * @param thing The [[Thing]] to read a localised string value from.
 * @param property The Property whose localised string value to return.
 * @param locale The desired locale for the string value.
 * @returns A localised string value for the given Property if present in the specified `locale`, or null otherwise.
 */


function getStringWithLocale(thing, property, locale) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const existingLocales = Object.keys(langStrings);
  const matchingLocale = existingLocales.find(existingLocale => existingLocale.toLowerCase() === locale.toLowerCase() && Array.isArray(langStrings[existingLocale]) && langStrings[existingLocale].length > 0);
  return typeof matchingLocale === "string" ? langStrings[matchingLocale][0] : null;
}
/**
 * Returns the English (language tag "en") string values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not an English string, omits that value in the array.
 *
 * @param thing The [[Thing]] to read a localised string value from.
 * @param property The Property whose localised string value to return.
 * @returns An array of English string values for the given Property.
 */


function getStringEnglishAll(thing, property) {
  return getStringWithLocaleAll(thing, property, "en");
}
/**
 * Returns the localized string values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not a string of the specified locale, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the localised string values from.
 * @param property The Property whose localised string values to return.
 * @param locale The desired locale for the string values.
 * @returns An array of localised string values for the given Property.
 */


function getStringWithLocaleAll(thing, property, locale) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const existingLocales = Object.keys(langStrings);
  const matchingLocale = existingLocales.find(existingLocale => existingLocale.toLowerCase() === locale.toLowerCase() && Array.isArray(langStrings[existingLocale]) && langStrings[existingLocale].length > 0);
  return typeof matchingLocale === "string" ? [...langStrings[matchingLocale]] : [];
}
/**
 * Returns all localized string values mapped by the locales for the specified property from the
 * specified [[Thing]] (explicitly filters out non-language string literals).
 *
 * @param thing The [[Thing]] to read the localised string values from.
 * @param property The Property whose localised string values to return.
 * @returns A Map of objects, keyed on locale with the value an array of string values (for that locale).
 */


function getStringByLocaleAll(thing, property) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const stringsByLocale = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  return new Map(Object.entries(stringsByLocale).map(([locale, values]) => [locale, [...values]]));
}
/**
 * Returns the string value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type string, returns null.
 * If the Property has multiple string values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a string value from.
 * @param property The Property whose string value to return.
 * @returns A string value for the given Property if present, or null if the Property is not present or the value is not of type string.
 */


function getStringNoLocale(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);
  return literalString;
}
/**
 * Returns the string values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type string, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the string values from.
 * @param property The Property whose string values to return.
 * @returns An array of string values for the given Property.
 */


function getStringNoLocaleAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);
  return literalStrings;
}
/**
 * @param thing The [[Thing]] to read a NamedNode value from.
 * @param property The given Property for which you want the NamedNode value.
 * @returns A NamedNode value for the given Property, if present, or null otherwise.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#namednode-interface
 */


function getNamedNode(thing, property) {
  const iriString = getIri(thing, property);

  if (iriString === null) {
    return null;
  }

  return DataFactory.namedNode(iriString);
}
/**
 * @param thing The [[Thing]] to read the NamedNode values from.
 * @param property The given Property for which you want the NamedNode values.
 * @returns The NamedNode values for the given Property.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#namednode-interface
 */


function getNamedNodeAll(thing, property) {
  const iriStrings = getIriAll(thing, property);
  return iriStrings.map(iriString => DataFactory.namedNode(iriString));
}
/**
 * @param thing The [[Thing]] to read a Literal value from.
 * @param property The given Property for which you want the Literal value.
 * @returns A Literal value for the given Property, if present, or null otherwise.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#literal-interface
 */


function getLiteral(thing, property) {
  var _a, _b, _c, _d;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const locales = Object.keys(langStrings);

  if (locales.length > 0) {
    const nonEmptyLocale = locales.find(locale => Array.isArray(langStrings[locale]) && langStrings[locale].length > 0);

    if (typeof nonEmptyLocale === "string") {
      return DataFactory.literal(langStrings[nonEmptyLocale][0], nonEmptyLocale);
    }
  }

  const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};
  const dataTypes = Object.keys(otherLiterals);

  if (dataTypes.length > 0) {
    const nonEmptyDataType = dataTypes.find(dataType => Array.isArray(otherLiterals[dataType]) && otherLiterals[dataType].length > 0);

    if (typeof nonEmptyDataType === "string") {
      return DataFactory.literal(otherLiterals[nonEmptyDataType][0], DataFactory.namedNode(nonEmptyDataType));
    }
  }

  return null;
}
/**
 * @param thing The [[Thing]] to read the Literal values from.
 * @param property The given Property for which you want the Literal values.
 * @returns The Literal values for the given Property.
 * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#literal-interface
 */


function getLiteralAll(thing, property) {
  var _a, _b, _c, _d;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  let literals = [];
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const locales = Object.keys(langStrings);

  for (const locale of locales) {
    const stringsInLocale = langStrings[locale];
    const localeLiterals = stringsInLocale.map(langString => DataFactory.literal(langString, locale));
    literals = literals.concat(localeLiterals);
  }

  const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};
  const dataTypes = Object.keys(otherLiterals);

  for (const dataType of dataTypes) {
    const values = otherLiterals[dataType];
    const typeNode = DataFactory.namedNode(dataType);
    const dataTypeLiterals = values.map(value => DataFactory.literal(value, typeNode));
    literals = literals.concat(dataTypeLiterals);
  }

  return literals;
}
/**
 * @param thing The [[Thing]] to read a raw RDF/JS value from.
 * @param property The given Property for which you want the raw value.
 * @returns A Term for the given Property, if present, or null otherwise.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/
 * @since 0.3.0
 */


function getTerm(thing, property) {
  var _a, _b;

  internal_throwIfNotThing(thing);
  const namedNode = getNamedNode(thing, property);

  if (namedNode !== null) {
    return namedNode;
  }

  const literal = getLiteral(thing, property);

  if (literal !== null) {
    return literal;
  }

  const predicateIri = internal_toIriString(property);
  const blankNodes = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];

  if (blankNodes.length > 0) {
    const blankNodeValue = isBlankNodeId(blankNodes[0]) ? getBlankNodeValue(blankNodes[0]) : undefined;
    return DataFactory.blankNode(blankNodeValue);
  }

  return null;
}
/**
 * @param thing The [[Thing]] to read the raw RDF/JS values from.
 * @param property The given Property for which you want the raw values.
 * @returns The Terms for the given Property.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/
 * @since 0.3.0
 */


function getTermAll(thing, property) {
  var _a, _b;

  internal_throwIfNotThing(thing);
  const namedNodes = getNamedNodeAll(thing, property);
  const literals = getLiteralAll(thing, property);
  const predicateIri = internal_toIriString(property);
  const blankNodeValues = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];
  const blankNodes = blankNodeValues.map(rawBlankNode => {
    const blankNodeName = isBlankNodeId(rawBlankNode) ? getBlankNodeValue(rawBlankNode) : undefined;
    return DataFactory.blankNode(blankNodeName);
  });
  const terms = namedNodes.concat(literals).concat(blankNodes);
  return terms;
}
/**
 * @param thing The [Thing]] to read a Literal of the given type from.
 * @param property The given Property for which you want the Literal value.
 * @param literalType Set type of the Literal data.
 * @returns The stringified value for the given Property and type, if present, or null otherwise.
 */


function getLiteralOfType(thing, property, literalType) {
  var _a, _b, _c, _d;

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  return (_d = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : null;
}
/**
 * @param thing The [Thing]] to read the Literals of the given type from.
 * @param property The given Property for which you want the Literal values.
 * @param literalType Set type of the Literal data.
 * @returns The stringified values for the given Property and type.
 */


function getLiteralAllOfType(thing, property, literalType) {
  var _a, _b, _c;

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const literalsOfType = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) !== null && _c !== void 0 ? _c : [];
  return [...literalsOfType];
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].
 *
 * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.
 * @param thingUrl The URL of the desired [[Thing]].
 * @param options Not yet implemented.
 */


function getThing(solidDataset, thingUrl, options = {}) {
  var _a;

  if (!internal_isValidUrl(thingUrl)) {
    throw new ValidThingUrlExpectedError(thingUrl);
  }

  const graph = typeof options.scope !== "undefined" ? internal_toIriString(options.scope) : "default";
  const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};
  const thingIri = internal_toIriString(thingUrl);
  const resolvedThingIri = isLocalNodeIri(thingIri) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thingIri), getSourceUrl(solidDataset)) : thingIri;
  const thing = thingsByIri[resolvedThingIri];

  if (typeof thing === "undefined") {
    return null;
  }

  return thing;
}
/**
 * Get all [[Thing]]s about which a [[SolidDataset]] contains Quads.
 *
 * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.
 * @param options Not yet implemented.
 */


function getThingAll(solidDataset, options = {
  acceptBlankNodes: false
}) {
  var _a;

  const graph = typeof options.scope !== "undefined" ? internal_toIriString(options.scope) : "default";
  const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};
  return Object.values(thingsByIri).filter(thing => !isBlankNodeId(thing.url) || options.acceptBlankNodes);
}
/**
 * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.
 *
 * @param solidDataset The SolidDataset to insert a Thing into.
 * @param thing The Thing to insert into the given SolidDataset.
 * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.
 */


function setThing(solidDataset, thing) {
  var _a;

  const thingIri = isThingLocal(thing) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thing.url), getSourceUrl(solidDataset)) : thing.url;
  const defaultGraph = solidDataset.graphs.default;
  const updatedDefaultGraph = freeze(Object.assign(Object.assign({}, defaultGraph), {
    [thingIri]: freeze(Object.assign(Object.assign({}, thing), {
      url: thingIri
    }))
  }));
  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {
    default: updatedDefaultGraph
  }));
  const subjectNode = DataFactory.namedNode(thingIri);
  const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;
  const deletions = typeof deletedThingPredicates !== "undefined" ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph()) : [];
  const additions = subjectToRdfJsQuads(thing.predicates, subjectNode, DataFactory.defaultGraph());
  return internal_addAdditionsToChangeLog(internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), {
    graphs: updatedGraphs
  })), deletions), additions);
}
/**
 * Remove a Thing from a SolidDataset.
 *
 * @param solidDataset The SolidDataset to remove a Thing from.
 * @param thing The Thing to remove from `solidDataset`.
 * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.
 */


function removeThing(solidDataset, thing) {
  var _a;

  let thingIri;

  if (isNamedNode(thing)) {
    thingIri = thing.value;
  } else if (typeof thing === "string") {
    thingIri = isLocalNodeIri(thing) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thing), getSourceUrl(solidDataset)) : thing;
  } else if (isThingLocal(thing)) {
    thingIri = thing.url;
  } else {
    thingIri = asIri(thing);
  }

  const defaultGraph = solidDataset.graphs.default;
  const updatedDefaultGraph = Object.assign({}, defaultGraph);
  delete updatedDefaultGraph[thingIri];
  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {
    default: freeze(updatedDefaultGraph)
  }));
  const subjectNode = DataFactory.namedNode(thingIri);
  const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;
  const deletions = typeof deletedThingPredicates !== "undefined" ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph()) : [];
  return internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), {
    graphs: updatedGraphs
  })), deletions);
}

function createThing(options = {}) {
  var _a;

  if (typeof options.url !== "undefined") {
    const url = options.url;

    if (!internal_isValidUrl(url)) {
      throw new ValidThingUrlExpectedError(url);
    }

    const thing = freeze({
      type: "Subject",
      predicates: freeze({}),
      url: url
    });
    return thing;
  }

  const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();
  const localNodeIri = getLocalNodeIri(name);
  const thing = freeze({
    type: "Subject",
    predicates: freeze({}),
    url: localNodeIri
  });
  return thing;
}
/**
 * @param input An value that might be a [[Thing]].
 * @returns Whether `input` is a Thing.
 * @since 0.2.0
 */


function isThing(input) {
  return typeof input === "object" && input !== null && typeof input.type === "string" && input.type === "Subject";
}

function asUrl(thing, baseUrl) {
  if (isThingLocal(thing)) {
    if (typeof baseUrl === "undefined") {
      throw new Error("The URL of a Thing that has not been persisted cannot be determined without a base URL.");
    }

    return resolveLocalIri(getLocalNodeName(thing.url), baseUrl);
  }

  return thing.url;
}
/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */


const asIri = asUrl;
/**
 * Gets a human-readable representation of the given Thing to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param thing The Thing to get a human-readable representation of.
 * @since 0.3.0
 */

exports.asIri = asIri;

function thingAsMarkdown(thing) {
  let thingAsMarkdown = "";

  if (isThingLocal(thing)) {
    thingAsMarkdown += `## Thing (no URL yet — identifier: \`#${getLocalNodeName(thing.url)}\`)\n`;
  } else {
    thingAsMarkdown += `## Thing: ${thing.url}\n`;
  }

  const predicateIris = Object.keys(thing.predicates);

  if (predicateIris.length === 0) {
    thingAsMarkdown += "\n<empty>\n";
  } else {
    for (const predicate of predicateIris) {
      thingAsMarkdown += `\nProperty: ${predicate}\n`;
      const values = getTermAll(thing, predicate);
      values.forEach(value => {
        thingAsMarkdown += `- ${internal_getReadableValue(value)}\n`;
      });
    }
  }

  return thingAsMarkdown;
}
/**
 * @param thing The [[Thing]] of which a URL might or might not be known.
 * @return `true` if `thing` has no known URL yet.
 * @since 1.7.0
 */


function isThingLocal(thing) {
  return isLocalNodeIri(thing.url);
}
/**
 * This error is thrown when a function expected to receive a [[Thing]] but received something else.
 * @since 1.2.0
 */


class ThingExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const message = `Expected a Thing, but received: [${receivedValue}].`;
    super(message);
    this.receivedValue = receivedValue;
  }

}
/**
 * This error is thrown when a function expected to receive a valid URL to identify a property but received something else.
 */


exports.ThingExpectedError = ThingExpectedError;

class ValidPropertyUrlExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;
    const message = `Expected a valid URL to identify a property, but received: [${value}].`;
    super(message);
    this.receivedProperty = value;
  }

}
/**
 * This error is thrown when a function expected to receive a valid URL value but received something else.
 */


class ValidValueUrlExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;
    const message = `Expected a valid URL value, but received: [${value}].`;
    super(message);
    this.receivedValue = value;
  }

}
/**
 * This error is thrown when a function expected to receive a valid URL to identify a [[Thing]] but received something else.
 */


class ValidThingUrlExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;
    const message = `Expected a valid URL to identify a Thing, but received: [${value}].`;
    super(message);
    this.receivedValue = value;
  }

}
/**
 * Generate a string that can be used as the unique identifier for a Thing
 *
 * This function works by starting with a date string (so that Things can be
 * sorted chronologically), followed by a random number generated by taking a
 * random number between 0 and 1, and cutting off the `0.`.
 *
 * @internal
 * @returns An string that's likely to be unique
 */


const generateName = () => {
  return Date.now().toString() + Math.random().toString().substring("0.".length);
};
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * This function normalizes IRIs as managed by the server to ease accurate comparison.
 * @param iri
 * @hidden
 */


function normalizeServerSideIri(iri) {
  const iriObj = new URL(iri);
  iriObj.hash = "";
  return iriObj.href;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Initialise a new [[SolidDataset]] in memory.
 *
 * @returns An empty [[SolidDataset]].
 */


function createSolidDataset() {
  return freeze({
    type: "Dataset",
    graphs: {
      default: {}
    }
  });
}
/**
 * @hidden This interface is not exposed yet until we've tried it out in practice.
 */


async function responseToSolidDataset(response, parseOptions = {}) {
  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the SolidDataset at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = responseToResourceInfo(response);
  const parsers = Object.assign({
    "text/turtle": getTurtleParser()
  }, parseOptions.parsers);
  const contentType = getContentType$1(resourceInfo);

  if (contentType === null) {
    throw new Error(`Could not determine the content type of the Resource at [${getSourceUrl(resourceInfo)}].`);
  }

  const mimeType = contentType.split(";")[0];
  const parser = parsers[mimeType];

  if (typeof parser === "undefined") {
    throw new Error(`The Resource at [${getSourceUrl(resourceInfo)}] has a MIME type of [${mimeType}], but the only parsers available are for the following MIME types: [${Object.keys(parsers).join(", ")}].`);
  }

  const data = await response.text();
  const parsingPromise = new Promise((resolve, reject) => {
    let solidDataset = freeze({
      graphs: freeze({
        default: freeze({})
      }),
      type: "Dataset"
    }); // While Quads without Blank Nodes can be added to the SolidDataset as we
    // encounter them, to parse Quads with Blank Nodes, we'll have to wait until
    // we've seen all the Quads, so that we can reconcile equal Blank Nodes.

    const quadsWithBlankNodes = [];
    const allQuads = [];
    parser.onError(error => {
      reject(new Error(`Encountered an error parsing the Resource at [${getSourceUrl(resourceInfo)}] with content type [${contentType}]: ${error}`));
    });
    parser.onQuad(quad => {
      allQuads.push(quad);

      if (quad.subject.termType === "BlankNode" || quad.object.termType === "BlankNode") {
        // Quads with Blank Nodes will be parsed when all Quads are known,
        // so that equal Blank Nodes can be reconciled:
        quadsWithBlankNodes.push(quad);
      } else {
        solidDataset = addRdfJsQuadToDataset(solidDataset, quad);
      }
    });
    parser.onComplete(async () => {
      // If a Resource contains more than this number of Blank Nodes,
      // we consider the detection of chains (O(n^2), I think) to be too
      // expensive, and just incorporate them as regular Blank Nodes with
      // non-deterministic, ad-hoc identifiers into the SolidDataset:
      const maxBlankNodesToDetectChainsFor = 20; // Some Blank Nodes only serve to use a set of Quads as the Object for a
      // single Subject. Those Quads will be added to the SolidDataset when
      // their Subject's Blank Node is encountered in the Object position.

      const chainBlankNodes = quadsWithBlankNodes.length <= maxBlankNodesToDetectChainsFor ? getChainBlankNodes(quadsWithBlankNodes) : [];
      const quadsWithoutChainBlankNodeSubjects = quadsWithBlankNodes.filter(quad => chainBlankNodes.every(chainBlankNode => !chainBlankNode.equals(quad.subject)));
      solidDataset = quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {
        otherQuads: allQuads,
        chainBlankNodes: chainBlankNodes
      }), solidDataset);
      const solidDatasetWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));
      resolve(solidDatasetWithResourceInfo);
    });
    parser.parse(data, resourceInfo);
  });
  return await parsingPromise;
}
/**
 * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).
 *
 * Note that the URL of a container ends with a [trailing slash "/"](https://solidproject.org/TR/protocol#uri).
 * If it is missing, some libraries will add it automatically, which may result in additional round-trips, possibly including
 * authentication errors ([more information](https://github.com/inrupt/solid-client-js/issues/1216#issuecomment-904703695)).
 *
 * @param url URL to fetch a [[SolidDataset]] from.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.
 */


async function getSolidDataset(url, options = internal_defaultFetchOptions) {
  var _a;

  url = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const parserContentTypes = Object.keys((_a = options.parsers) !== null && _a !== void 0 ? _a : {});
  const acceptedContentTypes = parserContentTypes.length > 0 ? parserContentTypes.join(", ") : "text/turtle";
  const response = await config.fetch(url, {
    headers: {
      Accept: acceptedContentTypes
    }
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the Resource at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const solidDataset = await responseToSolidDataset(response, options);
  return solidDataset;
}
/**
 * Create a SPARQL UPDATE Patch request from a [[SolidDataset]] with a changelog.
 * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.
 * @returns an HTTP PATCH request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a SPARQL UPDATE.
 * @hidden
 */


async function prepareSolidDatasetUpdate(solidDataset) {
  const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0 ? `DELETE DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};` : "";
  const insertStatement = solidDataset.internal_changeLog.additions.length > 0 ? `INSERT DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};` : "";
  return {
    method: "PATCH",
    body: `${deleteStatement} ${insertStatement}`,
    headers: {
      "Content-Type": "application/sparql-update"
    }
  };
}
/**
 * Create a Put request to write a locally created [[SolidDataset]] to a Pod.
 * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.
 * @returns an HTTP PUT request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a serialization of the [[SolidDataset]].
 * @hidden
 */


async function prepareSolidDatasetCreation(solidDataset) {
  return {
    method: "PUT",
    body: await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes)),
    headers: {
      "Content-Type": "text/turtle",
      "If-None-Match": "*",
      Link: `<${ldp.Resource}>; rel="type"`
    }
  };
}
/**
 * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).
 *
 * A SolidDataset keeps track of the data changes compared to the data in the Pod; i.e.,
 * the changelog tracks both the old value and new values of the property being modified. This
 * function applies the changes to the current SolidDataset. If the old value specified in the
 * changelog does not correspond to the value currently in the Pod, this function will throw an
 * error (common issues are listed in [the documentation](https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/error-codes/)).
 *
 * The SolidDataset returned by this function will contain the data sent to the Pod, and a ChangeLog
 * up-to-date with the saved data. Note that if the data on the server was modified in between the
 * first fetch and saving it, the updated data will not be reflected in the returned SolidDataset.
 * To make sure you have the latest data, call [[getSolidDataset]] again after saving the data.
 *
 * The Solid server will create any intermediary Containers that do not exist yet, so they do not
 * need to be created in advance. For example, if the target URL is
 * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,
 * it will exist after this function resolves successfully.
 *
 * @param url URL to save `solidDataset` to.
 * @param solidDataset The [[SolidDataset]] to save.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.
 */


async function saveSolidDatasetAt(url, solidDataset, options = internal_defaultFetchOptions) {
  url = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const datasetWithChangelog = internal_withChangeLog(solidDataset);
  const requestInit = isUpdate(datasetWithChangelog, url) ? await prepareSolidDatasetUpdate(datasetWithChangelog) : await prepareSolidDatasetCreation(datasetWithChangelog);
  const response = await config.fetch(url, requestInit);

  if (internal_isUnsuccessfulResponse(response)) {
    const diagnostics = isUpdate(datasetWithChangelog, url) ? "The changes that were sent to the Pod are listed below.\n\n" + changeLogAsMarkdown(datasetWithChangelog) : "The SolidDataset that was sent to the Pod is listed below.\n\n" + solidDatasetAsMarkdown(datasetWithChangelog);
    throw new FetchError(`Storing the Resource at [${url}] failed: [${response.status}] [${response.statusText}].\n\n` + diagnostics, response);
  }

  const resourceInfo = Object.assign(Object.assign({}, internal_parseResourceInfo(response)), {
    isRawData: false
  });
  const storedDataset = freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: [],
      deletions: []
    },
    internal_resourceInfo: resourceInfo
  }));
  const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);
  return storedDatasetWithResolvedIris;
}
/**
 * Deletes the SolidDataset at a given URL.
 *
 * If operating on a container, the container must be empty otherwise a 409 CONFLICT will be raised.
 *
 * @param file The (URL of the) SolidDataset to delete
 * @since 0.6.0
 */


async function deleteSolidDataset(solidDataset, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const url = hasResourceInfo(solidDataset) ? internal_toIriString(getSourceUrl(solidDataset)) : internal_toIriString(solidDataset);
  const response = await config.fetch(url, {
    method: "DELETE"
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Deleting the SolidDataset at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }
}
/**
 * Create a Container at the given URL. Some content may optionally be specified,
 * e.g. to add metadata describing the container.
 *
 * Throws an error if creating the Container failed, e.g. because the current user does not have
 * permissions to, or because the Container already exists.
 *
 * Note that a Solid server will automatically create the necessary Containers when storing a
 * Resource; i.e. there is no need to call this function if it is immediately followed by
 * [[saveSolidDatasetAt]] or [[overwriteFile]].
 *
 * @param url URL of the empty Container that is to be created.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @param solidDataset Optional parameter - if provided we use this dataset as the body of the HTT request, meaning it's data is included in the Container resource.
 * @since 0.2.0
 */


async function createContainerAt(url, options = internal_defaultFetchOptions) {
  var _a;

  url = internal_toIriString(url);
  url = url.endsWith("/") ? url : url + "/";
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(url, {
    method: "PUT",
    body: config.initialContent ? await triplesToTurtle(toRdfJsQuads(config.initialContent).map(getNamedNodesForLocalNodes)) : undefined,
    headers: {
      Accept: "text/turtle",
      "Content-Type": "text/turtle",
      "If-None-Match": "*",
      // This header should not be required to create a Container,
      // but ESS currently expects it:
      Link: `<${ldp.BasicContainer}>; rel="type"`
    }
  });

  if (internal_isUnsuccessfulResponse(response)) {
    if (response.status === 409 && response.statusText === "Conflict" && (await response.text()).trim() === internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465) {
      return createContainerWithNssWorkaroundAt(url, options);
    }

    const containerType = config.initialContent === undefined ? "empty" : "non-empty";
    throw new FetchError(`Creating the ${containerType} Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = internal_parseResourceInfo(response);
  const containerDataset = freeze(Object.assign(Object.assign({}, (_a = options.initialContent) !== null && _a !== void 0 ? _a : createSolidDataset()), {
    internal_changeLog: {
      additions: [],
      deletions: []
    },
    internal_resourceInfo: resourceInfo
  }));
  return containerDataset;
}
/**
 * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container
 * creation. When we make the (valid, according to the Solid protocol) request to create a
 * Container, NSS responds with the following exact error message. Thus, when we encounter exactly
 * this message, we use an NSS-specific workaround ([[createContainerWithNssWorkaroundAt]]). Both
 * this constant and that workaround should be removed once the NSS issue has been fixed and
 * no versions of NSS with the issue are in common use/supported anymore.
 *
 * @see https://github.com/solid/node-solid-server/issues/1465
 * @internal
 */


const internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465 = "Can't write file: PUT not supported on containers, use POST instead";
/**
 * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container
 * creation. As a workaround, we create a dummy file _inside_ the desired Container (which should
 * create the desired Container on the fly), and then delete it again.
 *
 * @see https://github.com/solid/node-solid-server/issues/1465
 */

const createContainerWithNssWorkaroundAt = async (url, options) => {
  url = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  let existingContainer;

  try {
    existingContainer = await getResourceInfo(url, options);
  } catch (e) {
    // To create the Container, we'd want it to not exist yet. In other words, we'd expect to get
    // a 404 error here in the happy path - so do nothing if that's the case.
    if (!(e instanceof FetchError) || e.statusCode !== 404) {
      // (But if we get an error other than a 404, just throw that error like we usually would.)
      throw e;
    }
  }

  if (typeof existingContainer !== "undefined") {
    throw new Error(`The Container at [${url}] already exists, and therefore cannot be created again.`);
  }

  const dummyUrl = url + ".dummy";
  const createResponse = await config.fetch(dummyUrl, {
    method: "PUT",
    headers: {
      Accept: "text/turtle",
      "Content-Type": "text/turtle"
    }
  });

  if (internal_isUnsuccessfulResponse(createResponse)) {
    throw new FetchError(`Creating the empty Container at [${url}] failed: [${createResponse.status}] [${createResponse.statusText}].`, createResponse);
  }

  await config.fetch(dummyUrl, {
    method: "DELETE"
  });
  const containerInfoResponse = await config.fetch(url, {
    method: "HEAD"
  });
  const resourceInfo = internal_parseResourceInfo(containerInfoResponse);
  const containerDataset = freeze(Object.assign(Object.assign({}, createSolidDataset()), {
    internal_changeLog: {
      additions: [],
      deletions: []
    },
    internal_resourceInfo: resourceInfo
  }));
  return containerDataset;
};

function isSourceIriEqualTo(dataset, iri) {
  return normalizeServerSideIri(dataset.internal_resourceInfo.sourceIri) === normalizeServerSideIri(iri);
}

function isUpdate(solidDataset, url) {
  return hasChangelog(solidDataset) && hasResourceInfo(solidDataset) && typeof solidDataset.internal_resourceInfo.sourceIri === "string" && isSourceIriEqualTo(solidDataset, url);
}
/**
 * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.
 *
 * The Container at the given URL should already exist; if it does not, you can initialise it first
 * using [[createContainerAt]], or directly save the SolidDataset at the desired location using
 * [[saveSolidDatasetAt]].
 *
 * This function is primarily useful if the current user does not have access to change existing files in
 * a Container, but is allowed to add new files; in other words, they have Append, but not Write
 * access to a Container. This is useful in situations where someone wants to allow others to,
 * for example, send notifications to their Pod, but not to view or delete existing notifications.
 * You can pass a suggestion for the new Resource's name, but the server may decide to give it
 * another name — for example, if a Resource with that name already exists inside the given
 * Container.
 * If the user does have access to write directly to a given location, [[saveSolidDatasetAt]]
 * will do the job just fine, and does not require the parent Container to exist in advance.
 *
 * @param containerUrl URL of the Container in which to create a new Resource.
 * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Promise resolving to a [[SolidDataset]] containing the saved data. The Promise rejects if the save failed.
 */


async function saveSolidDatasetInContainer(containerUrl, solidDataset, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  containerUrl = internal_toIriString(containerUrl);
  const rawTurtle = await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes));
  const headers = {
    "Content-Type": "text/turtle",
    Link: `<${ldp.Resource}>; rel="type"`
  };

  if (options.slugSuggestion) {
    headers.slug = options.slugSuggestion;
  }

  const response = await config.fetch(containerUrl, {
    method: "POST",
    body: rawTurtle,
    headers: headers
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Storing the Resource in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].\n\n` + "The SolidDataset that was sent to the Pod is listed below.\n\n" + solidDatasetAsMarkdown(solidDataset), response);
  }

  const locationHeader = response.headers.get("Location");

  if (locationHeader === null) {
    throw new Error("Could not determine the location of the newly saved SolidDataset.");
  }

  const resourceIri = new URL(locationHeader, response.url).href;
  const resourceInfo = {
    internal_resourceInfo: {
      isRawData: false,
      sourceIri: resourceIri
    }
  };
  const resourceWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));
  const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);
  return resourceWithResolvedIris;
}
/**
 * Create an empty Container inside the Container at the given URL.
 *
 * Throws an error if creating the Container failed, e.g. because the current user does not have
 * permissions to.
 *
 * The Container in which to create the new Container should itself already exist.
 *
 * This function is primarily useful if the current user does not have access to change existing files in
 * a Container, but is allowed to add new files; in other words, they have Append, but not Write
 * access to a Container. This is useful in situations where someone wants to allow others to,
 * for example, send notifications to their Pod, but not to view or delete existing notifications.
 * You can pass a suggestion for the new Resource's name, but the server may decide to give it
 * another name — for example, if a Resource with that name already exists inside the given
 * Container.
 * If the user does have access to write directly to a given location, [[createContainerAt]]
 * will do the job just fine, and does not require the parent Container to exist in advance.
 *
 * @param containerUrl URL of the Container in which the empty Container is to be created.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @since 0.2.0
 */


async function createContainerInContainer(containerUrl, options = internal_defaultFetchOptions) {
  containerUrl = internal_toIriString(containerUrl);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const headers = {
    "Content-Type": "text/turtle",
    Link: `<${ldp.BasicContainer}>; rel="type"`
  };

  if (options.slugSuggestion) {
    headers.slug = options.slugSuggestion;
  }

  const response = await config.fetch(containerUrl, {
    method: "POST",
    headers: headers
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Creating an empty Container in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const locationHeader = response.headers.get("Location");

  if (locationHeader === null) {
    throw new Error("Could not determine the location of the newly created Container.");
  }

  const resourceIri = new URL(locationHeader, response.url).href;
  const resourceInfo = {
    internal_resourceInfo: {
      isRawData: false,
      sourceIri: resourceIri
    }
  };
  const resourceWithResourceInfo = freeze(Object.assign(Object.assign({}, createSolidDataset()), resourceInfo));
  return resourceWithResourceInfo;
}
/**
 * Deletes the Container at a given URL.
 *
 * @param file The (URL of the) Container to delete
 * @since 0.6.0
 */


async function deleteContainer(container, options = internal_defaultFetchOptions) {
  const url = hasResourceInfo(container) ? internal_toIriString(getSourceUrl(container)) : internal_toIriString(container);

  if (!isContainer(container)) {
    throw new Error(`You're trying to delete the Container at [${url}], but Container URLs should end in a \`/\`. Are you sure this is a Container?`);
  }

  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(url, {
    method: "DELETE"
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Deleting the Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }
}
/**
 * Given a [[SolidDataset]] representing a Container (see [[isContainer]]), fetch the URLs of all
 * contained resources.
 * If the solidDataset given is not a container, or is missing resourceInfo, throw an error.
 *
 * @param solidDataset The container from which to fetch all contained Resource URLs.
 * @returns A list of URLs, each of which points to a contained Resource of the given SolidDataset.
 * @since 1.3.0
 */


function getContainedResourceUrlAll(solidDataset) {
  const container = getThing(solidDataset, getSourceUrl(solidDataset)); // See https://www.w3.org/TR/2015/REC-ldp-20150226/#h-ldpc-http_post:
  // > a containment triple MUST be added to the state of the LDPC whose subject is the LDPC URI,
  // > whose predicate is ldp:contains and whose object is the URI for the newly created document

  return container !== null ? getIriAll(container, ldp.contains) : [];
}
/**
 * Gets a human-readable representation of the given SolidDataset to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param solidDataset The [[SolidDataset]] to get a human-readable representation of.
 * @since 0.3.0
 */


function solidDatasetAsMarkdown(solidDataset) {
  let readableSolidDataset = "";

  if (hasResourceInfo(solidDataset)) {
    readableSolidDataset += `# SolidDataset: ${getSourceUrl(solidDataset)}\n`;
  } else {
    readableSolidDataset += `# SolidDataset (no URL yet)\n`;
  }

  const things = getThingAll(solidDataset);

  if (things.length === 0) {
    readableSolidDataset += "\n<empty>\n";
  } else {
    things.forEach(thing => {
      readableSolidDataset += "\n" + thingAsMarkdown(thing);

      if (hasChangelog(solidDataset)) {
        readableSolidDataset += "\n" + getReadableChangeLogSummary(solidDataset, thing) + "\n";
      }
    });
  }

  return readableSolidDataset;
}
/**
 * Gets a human-readable representation of the local changes to a Resource to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param solidDataset The Resource of which to get a human-readable representation of the changes applied to it locally.
 * @since 0.3.0
 */


function changeLogAsMarkdown(solidDataset) {
  if (!hasResourceInfo(solidDataset)) {
    return "This is a newly initialized SolidDataset, so there is no source to compare it to.";
  }

  if (!hasChangelog(solidDataset) || solidDataset.internal_changeLog.additions.length === 0 && solidDataset.internal_changeLog.deletions.length === 0) {
    return `## Changes compared to ${getSourceUrl(solidDataset)}\n\n` + `This SolidDataset has not been modified since it was fetched from ${getSourceUrl(solidDataset)}.\n`;
  }

  let readableChangeLog = `## Changes compared to ${getSourceUrl(solidDataset)}\n`;
  const changeLogsByThingAndProperty = sortChangeLogByThingAndProperty(solidDataset);
  Object.keys(changeLogsByThingAndProperty).forEach(thingUrl => {
    readableChangeLog += `\n### Thing: ${thingUrl}\n`;
    const changeLogByProperty = changeLogsByThingAndProperty[thingUrl];
    Object.keys(changeLogByProperty).forEach(propertyUrl => {
      readableChangeLog += `\nProperty: ${propertyUrl}\n`;
      const deleted = changeLogByProperty[propertyUrl].deleted;
      const added = changeLogByProperty[propertyUrl].added;

      if (deleted.length > 0) {
        readableChangeLog += "- Removed:\n";
        deleted.forEach(deletedValue => readableChangeLog += `  - ${internal_getReadableValue(deletedValue)}\n`);
      }

      if (added.length > 0) {
        readableChangeLog += "- Added:\n";
        added.forEach(addedValue => readableChangeLog += `  - ${internal_getReadableValue(addedValue)}\n`);
      }
    });
  });
  return readableChangeLog;
}

function sortChangeLogByThingAndProperty(solidDataset) {
  const changeLogsByThingAndProperty = {};
  solidDataset.internal_changeLog.deletions.forEach(deletion => {
    var _a, _b;

    var _c;

    const subjectNode = isLocalNode(deletion.subject) ?
    /* istanbul ignore next: Unsaved deletions should be removed from the additions list instead, so this code path shouldn't be hit: */
    resolveIriForLocalNode(deletion.subject, getSourceUrl(solidDataset)) : deletion.subject;

    if (!isNamedNode(subjectNode) || !isNamedNode(deletion.predicate)) {
      return;
    }

    const thingUrl = internal_toIriString(subjectNode);
    const propertyUrl = internal_toIriString(deletion.predicate);
    (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : changeLogsByThingAndProperty[thingUrl] = {};
    (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : _c[propertyUrl] = {
      added: [],
      deleted: []
    };
    changeLogsByThingAndProperty[thingUrl][propertyUrl].deleted.push(deletion.object);
  });
  solidDataset.internal_changeLog.additions.forEach(addition => {
    var _a, _b;

    var _c;

    const subjectNode = isLocalNode(addition.subject) ?
    /* istanbul ignore next: setThing already resolves local Subjects when adding them, so this code path should never be hit. */
    resolveIriForLocalNode(addition.subject, getSourceUrl(solidDataset)) : addition.subject;

    if (!isNamedNode(subjectNode) || !isNamedNode(addition.predicate)) {
      return;
    }

    const thingUrl = internal_toIriString(subjectNode);
    const propertyUrl = internal_toIriString(addition.predicate);
    (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : changeLogsByThingAndProperty[thingUrl] = {};
    (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : _c[propertyUrl] = {
      added: [],
      deleted: []
    };
    changeLogsByThingAndProperty[thingUrl][propertyUrl].added.push(addition.object);
  });
  return changeLogsByThingAndProperty;
}

function getReadableChangeLogSummary(solidDataset, thing) {
  const subject = DataFactory.namedNode(thing.url);
  const nrOfAdditions = solidDataset.internal_changeLog.additions.reduce((count, addition) => addition.subject.equals(subject) ? count + 1 : count, 0);
  const nrOfDeletions = solidDataset.internal_changeLog.deletions.reduce((count, deletion) => deletion.subject.equals(subject) ? count + 1 : count, 0);
  const additionString = nrOfAdditions === 1 ? "1 new value added" : nrOfAdditions + " new values added";
  const deletionString = nrOfDeletions === 1 ? "1 value removed" : nrOfDeletions + " values removed";
  return `(${additionString} / ${deletionString})`;
}

function getNamedNodesForLocalNodes(quad) {
  const subject = isNamedNode(quad.subject) ? getNamedNodeFromLocalNode(quad.subject) :
  /* istanbul ignore next: We don't allow non-NamedNodes as the Subject, so this code path should never be hit: */
  quad.subject;
  const object = isNamedNode(quad.object) ? getNamedNodeFromLocalNode(quad.object) : quad.object;
  return DataFactory.quad(subject, quad.predicate, object, quad.graph);
}

function getNamedNodeFromLocalNode(node) {
  if (isLocalNodeIri(node.value)) {
    return DataFactory.namedNode("#" + getLocalNodeName(node.value));
  }

  return node;
}

function resolveLocalIrisInSolidDataset(solidDataset) {
  const resourceIri = getSourceUrl(solidDataset);
  const defaultGraph = solidDataset.graphs.default;
  const thingIris = Object.keys(defaultGraph);
  const updatedDefaultGraph = thingIris.reduce((graphAcc, thingIri) => {
    const resolvedThing = resolveLocalIrisInThing(graphAcc[thingIri], resourceIri);
    const resolvedThingIri = isLocalNodeIri(thingIri) ? `${resourceIri}#${getLocalNodeName(thingIri)}` : thingIri;
    const updatedGraph = Object.assign({}, graphAcc);
    delete updatedGraph[thingIri];
    updatedGraph[resolvedThingIri] = resolvedThing;
    return freeze(updatedGraph);
  }, defaultGraph);
  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {
    default: updatedDefaultGraph
  }));
  return freeze(Object.assign(Object.assign({}, solidDataset), {
    graphs: updatedGraphs
  }));
}

function resolveLocalIrisInThing(thing, baseIri) {
  const predicateIris = Object.keys(thing.predicates);
  const updatedPredicates = predicateIris.reduce((predicatesAcc, predicateIri) => {
    var _a;

    const namedNodes = (_a = predicatesAcc[predicateIri].namedNodes) !== null && _a !== void 0 ? _a : [];

    if (namedNodes.every(namedNode => !isLocalNodeIri(namedNode))) {
      // This Predicate has no local node Objects, so return it unmodified:
      return predicatesAcc;
    }

    const updatedNamedNodes = freeze(namedNodes.map(namedNode => isLocalNodeIri(namedNode) ? `${baseIri}#${getLocalNodeName(namedNode)}` : namedNode));
    const updatedPredicate = freeze(Object.assign(Object.assign({}, predicatesAcc[predicateIri]), {
      namedNodes: updatedNamedNodes
    }));
    return freeze(Object.assign(Object.assign({}, predicatesAcc), {
      [predicateIri]: updatedPredicate
    }));
  }, thing.predicates);
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates,
    url: isLocalNodeIri(thing.url) ? `${baseIri}#${getLocalNodeName(thing.url)}` : thing.url
  }));
}
/**
 * @hidden
 *
 * Fetch a SolidDataset containing information about the capabilities of the
 * storage server that hosts the given resource URL. For more information,
 * please see the [ESS
 * Documentation](https://docs.inrupt.com/ess/latest/services/discovery-endpoint/#well-known-solid).
 *
 * **Note:** The data contained in this dataset has changed between ESS 1.1 and
 * ESS 2.0, as such you will need to check for multiple predicates to support
 * both versions.
 *
 * ```typescript
 * const wellKnown = await getWellKnownSolid(resource);
 *
 * // The wellKnown dataset uses a blank node for the subject all of it’s predicates,
 * // such that we need to call getThingAll with acceptBlankNodes set to true to
 * // retrieve back predicates contained within the dataset
 * const wellKnownSubjects = getThingAll(wellKnown, {
 *   acceptBlankNodes: true,
 * });
 * const wellKnownSubject = wellKnownSubjects[0];
 *
 * // Retrieve a value from the wellKnown dataset:
 * let notificationGateway = getIri(
 *   wellKnownSubject,
 *   "http://www.w3.org/ns/solid/terms#notificationGateway"
 * );
 * ```
 *
 *
 * @param url URL of a Resource.
 * @param options Optional parameter `options.fetch`: An alternative `fetch`
 * function to make the HTTP request, compatible with the browser-native [fetch
 * API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Promise resolving to a [[SolidDataset]] containing the data at
 * '.well-known/solid' for the given Resource, or rejecting if fetching it
 * failed.
 * @since 1.12.0
 */


async function getWellKnownSolid(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const resourceMetadata = await getResourceInfo(urlString, {
    fetch: options.fetch,
    // Discovering the .well-known/solid document is useful even for resources
    // we don't have access to.
    ignoreAuthenticationErrors: true
  });
  const linkedResources = getLinkedResourceUrlAll(resourceMetadata);
  const rootResources = linkedResources[pim.storage];
  const rootResource = (rootResources === null || rootResources === void 0 ? void 0 : rootResources.length) === 1 ? rootResources[0] : null;

  if (rootResource !== null) {
    const wellKnownSolidUrl = new URL(".well-known/solid", rootResource.endsWith("/") ? rootResource : rootResource + "/").href;

    try {
      return await getSolidDataset(wellKnownSolidUrl, Object.assign(Object.assign({}, options), {
        parsers: {
          "application/ld+json": getJsonLdParser()
        }
      }));
    } catch (e) {// In case of error, do nothing and try to discover the .well-known
      // at the root of the domain.
    }
  }

  const wellKnownSolidUrl = new URL("/.well-known/solid", new URL(urlString).origin).href;
  return getSolidDataset(wellKnownSolidUrl, Object.assign(Object.assign({}, options), {
    parsers: {
      "application/ld+json": getJsonLdParser()
    }
  }));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const {
  Response
} = crossFetch;
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new [[SolidDataset]] with metadata as though the
 * SolidDataset has been retrieved from the given URL. The mock SolidDataset can be used in
 * unit tests that require persisted SolidDatasets; e.g., unit tests that call [[getSourceUrl]].
 *
 * @param url The URL from which the returned SolidDataset appears to be retrieved.
 * @returns A mock SolidDataset that appears to be retrieved from the `url`.
 * @since 0.2.0
 */

function mockSolidDatasetFrom(url) {
  const solidDataset = createSolidDataset();
  const solidDatasetWithResourceInfo = Object.assign(Object.assign({}, solidDataset), {
    internal_resourceInfo: {
      sourceIri: internal_toIriString(url),
      isRawData: false,
      contentType: "text/turtle",
      linkedResources: {}
    }
  });
  return solidDatasetWithResourceInfo;
}
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new Container [[SolidDataset]] with metadata as though the
 * Container has been retrieved from the given URL. The mock SolidDataset can be used in
 * unit tests that require persisted Containers; e.g., unit tests that call [[isContainer]].
 *
 * @param url The URL from which the returned Container appears to be retrieved. The `url` must end in a slash.
 * @returns A mock SolidDataset that appears to be retrieved from the `url`.
 * @since 0.2.0
 */


function mockContainerFrom(url) {
  const sourceIri = internal_toIriString(url);

  if (!sourceIri.endsWith("/")) {
    throw new Error("A Container's URL should end in a slash. Please update your tests.");
  }

  return mockSolidDatasetFrom(sourceIri);
}
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new File with metadata as though the
 * File has been retrieved from the given URL. The mock File can be used in
 * unit tests that require persisted Files; e.g. unit tests that call [[getSourceUrl]].
 *
 * @param url The URL from which the returned File appears to be retrieved.
 * @returns A mock File that appears to be retrieved from the `url`.
 * @since 0.2.0
 */


function mockFileFrom(url, options) {
  const file = new Blob();
  const fileWithResourceInfo = Object.assign(file, {
    internal_resourceInfo: {
      sourceIri: internal_toIriString(url),
      isRawData: true,
      contentType: options === null || options === void 0 ? void 0 : options.contentType,
      linkedResources: {}
    }
  });
  return fileWithResourceInfo;
}
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new Error object with metadata as though the
 * it was the result of getting a 404 when trying to fetch the Resource at the
 * given URL. The mock Error can be used in unit tests that require functions
 * that fetch Resources (like [[getSolidDataset]]) to fail.
 *
 * @param url The URL of the Resource that could not be fetched according to the error.
 * @param statusCode Optional status code (defaults to 404) that caused the error.
 * @returns A mock Error that represents not having been able to fetch the Resource at `url` due to a 404 Response.
 * @since 1.1.0
 */


function mockFetchError(fetchedUrl, statusCode = 404) {
  const failedResponse = new Response(undefined, {
    status: statusCode
  });
  return new FetchError(`Fetching the Resource at [${fetchedUrl}] failed: [${failedResponse.status}] [${failedResponse.statusText}].`, failedResponse);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Create a new Thing with a URL added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setUrl]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a URL value to.
 * @param property Property for which to add the given URL value.
 * @param url URL to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


const addUrl = (thing, property, url) => {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  if (!isThing(url) && !internal_isValidUrl(url)) {
    throw new ValidValueUrlExpectedError(url);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingNamedNodes = (_b = existingPredicate.namedNodes) !== null && _b !== void 0 ? _b : [];
  let iriToAdd;

  if (isNamedNode(url)) {
    iriToAdd = url.value;
  } else if (typeof url === "string") {
    iriToAdd = url;
  } else if (isThingLocal(url)) {
    iriToAdd = url.url;
  } else {
    iriToAdd = asIri(url);
  }

  const updatedNamedNodes = freeze(existingNamedNodes.concat(internal_toIriString(iriToAdd)));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
    namedNodes: updatedNamedNodes
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
};
/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */


exports.addUrl = addUrl;
const addIri = addUrl;
/**
 * Create a new Thing with a boolean added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setBoolean]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a boolean value to.
 * @param property Property for which to add the given boolean value.
 * @param value Boolean to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */

exports.addIri = addIri;

const addBoolean = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);
};
/**
 * Create a new Thing with a datetime added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDatetime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a datetime value to.
 * @param property Property for which to add the given datetime value.
 * @param value Datetime to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addBoolean = addBoolean;

const addDatetime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);
};
/**
 * Create a new Thing with a date added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDate]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a date value to.
 * @param property Property for which to add the given date value.
 * @param value Date to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 1.10.0
 */


exports.addDatetime = addDatetime;

const addDate = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeDate(value), xmlSchemaTypes.date);
};
/**
 * Create a new Thing with a time added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDatetime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a datetime value to.
 * @param property Property for which to add the given datetime value.
 * @param value time to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 1.10.0
 */


exports.addDate = addDate;

const addTime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeTime(value), xmlSchemaTypes.time);
};
/**
 * Create a new Thing with a decimal added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDecimal]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a decimal value to.
 * @param property Property for which to add the given decimal value.
 * @param value Decimal to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addTime = addTime;

const addDecimal = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);
};
/**
 * Create a new Thing with an integer added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setInteger]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add an integer value to.
 * @param property Property for which to add the given integer value.
 * @param value Integer to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addDecimal = addDecimal;

const addInteger = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);
};
/**
 * Create a new Thing with an English string added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setStringEnglish]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a localised string value to.
 * @param property Property for which to add the given string value.
 * @param value String to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 1.13.0
 */


exports.addInteger = addInteger;

function addStringEnglish(thing, property, value) {
  return addStringWithLocale(thing, property, value, "en");
}
/**
 * Create a new Thing with a localised string added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setStringWithLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a localised string value to.
 * @param property Property for which to add the given string value.
 * @param value String to add to `thing` for the given `property`.
 * @param locale Locale of the added string.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


function addStringWithLocale(thing, property, value, locale) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const normalizedLocale = normalizeLocale(locale);
  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLangStrings = (_b = existingPredicate.langStrings) !== null && _b !== void 0 ? _b : {};
  const existingStringsInLocale = (_c = existingLangStrings[normalizedLocale]) !== null && _c !== void 0 ? _c : [];
  const updatedStringsInLocale = freeze(existingStringsInLocale.concat(value));
  const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), {
    [normalizedLocale]: updatedStringsInLocale
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
    langStrings: updatedLangStrings
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * Create a new Thing with an unlocalised string added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add an unlocalised string value to.
 * @param property Property for which to add the given string value.
 * @param value String to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


const addStringNoLocale = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);
};
/**
 * Create a new Thing with a Named Node added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setNamedNode]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to add a Named Node to.
 * @param property Property for which to add a value.
 * @param value The Named Node to add.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addStringNoLocale = addStringNoLocale;

function addNamedNode(thing, property, value) {
  return addUrl(thing, property, value.value);
}
/**
 * Create a new Thing with a Literal added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setLiteral]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to add a Literal to.
 * @param property Property for which to add a value.
 * @param value The Literal to add.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


function addLiteral(thing, property, value) {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const typeIri = value.datatype.value;

  if (typeIri === xmlSchemaTypes.langString) {
    return addStringWithLocale(thing, property, value.value, value.language);
  }

  return addLiteralOfType(thing, property, value.value, value.datatype.value);
}
/**
 * Creates a new Thing with a Term added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setTerm]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to add a Term to.
 * @param property Property for which to add a value.
 * @param value The Term to add.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 0.3.0
 */


function addTerm(thing, property, value) {
  var _a, _b;

  if (value.termType === "NamedNode") {
    return addNamedNode(thing, property, value);
  }

  if (value.termType === "Literal") {
    return addLiteral(thing, property, value);
  }

  if (value.termType === "BlankNode") {
    internal_throwIfNotThing(thing);

    if (!internal_isValidUrl(property)) {
      throw new ValidPropertyUrlExpectedError(property);
    }

    const predicateIri = internal_toIriString(property);
    const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
    const existingBlankNodes = (_b = existingPredicate.blankNodes) !== null && _b !== void 0 ? _b : [];
    const updatedBlankNodes = freeze(existingBlankNodes.concat(getBlankNodeId(value)));
    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
      blankNodes: updatedBlankNodes
    }));
    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
      [predicateIri]: updatedPredicate
    }));
    const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
      predicates: updatedPredicates
    }));
    return updatedThing;
  }

  throw new Error(`Term type [${value.termType}] is not supported by @inrupt/solid-client.`);
}

function addLiteralOfType(thing, property, value, type) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLiterals = (_b = existingPredicate.literals) !== null && _b !== void 0 ? _b : {};
  const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];
  const updatedValuesOfType = freeze(existingValuesOfType.concat(value));
  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {
    [type]: updatedValuesOfType
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
    literals: updatedLiterals
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function removeAll(thing, property) {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const newPredicates = Object.assign({}, thing.predicates);
  delete newPredicates[predicateIri];
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: freeze(newPredicates)
  }));
}
/**
 * Create a new Thing with the given URL removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a URL value from.
 * @param property Property for which to remove the given URL value.
 * @param value URL to remove from `thing` for the given `Property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


const removeUrl = (thing, property, value) => {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);

  if (!isThing(value) && !internal_isValidUrl(value)) {
    throw new ValidValueUrlExpectedError(value);
  }

  const iriToRemove = isNamedNode(value) ? value.value : typeof value === "string" ? value : asIri(value);
  const updatedNamedNodes = freeze((_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.filter(namedNode => namedNode.toLowerCase() !== iriToRemove.toLowerCase())) !== null && _c !== void 0 ? _c : []);
  const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), {
    namedNodes: updatedNamedNodes
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
};
/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */


exports.removeUrl = removeUrl;
const removeIri = removeUrl;
/**
 * Create a new Thing with the given boolean removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a boolean value from.
 * @param property Property for which to remove the given boolean value.
 * @param value Boolean to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */

exports.removeIri = removeIri;

const removeBoolean = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.boolean, foundBoolean => deserializeBoolean(foundBoolean) === value);
};
/**
 * Create a new Thing with the given datetime removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a datetime value from.
 * @param property Property for which to remove the given datetime value.
 * @param value Datetime to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeBoolean = removeBoolean;

const removeDatetime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.dateTime, foundDatetime => {
    var _a;

    return ((_a = deserializeDatetime(foundDatetime)) === null || _a === void 0 ? void 0 : _a.getTime()) === value.getTime();
  });
};
/**
 * Create a new Thing with the given date removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a date value from.
 * @param property Property for which to remove the given date value.
 * @param value Date to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 * @since 1.10.0
 */


exports.removeDatetime = removeDatetime;

const removeDate = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.date, function (foundDate) {
    const deserializedDate = deserializeDate(foundDate);

    if (deserializedDate) {
      return deserializedDate.getFullYear() === value.getFullYear() && deserializedDate.getMonth() === value.getMonth() && deserializedDate.getDate() === value.getDate();
    } else {
      return false;
    }
  });
};
/**
 * Create a new Thing with the given datetime removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a datetime value from.
 * @param property Property for which to remove the given datetime value.
 * @param value Time to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 * @since 1.10.0
 */


exports.removeDate = removeDate;

const removeTime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.time, function (foundTime) {
    const deserializedTime = deserializeTime(foundTime);

    if (deserializedTime) {
      return deserializedTime.hour === value.hour && deserializedTime.minute === value.minute && deserializedTime.second === value.second && deserializedTime.millisecond === value.millisecond && deserializedTime.timezoneHourOffset === value.timezoneHourOffset && deserializedTime.timezoneMinuteOffset === value.timezoneMinuteOffset;
    } else {
      return false;
    }
  });
};
/**
 * Create a new Thing with the given decimal removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a decimal value from.
 * @param property Property for which to remove the given decimal value.
 * @param value Decimal to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeTime = removeTime;

const removeDecimal = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.decimal, foundDecimal => deserializeDecimal(foundDecimal) === value);
};
/**
 * Create a new Thing with the given integer removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove an integer value from.
 * @param property Property for which to remove the given integer value.
 * @param value Integer to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeDecimal = removeDecimal;

const removeInteger = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.integer, foundInteger => deserializeInteger(foundInteger) === value);
};
/**
 * Create a new Thing with the given English string removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a localised string value from.
 * @param property Property for which to remove the given localised string value.
 * @param value String to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 * @since 1.13.0
 */


exports.removeInteger = removeInteger;

function removeStringEnglish(thing, property, value) {
  return removeStringWithLocale(thing, property, value, "en");
}
/**
 * Create a new Thing with the given localised string removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a localised string value from.
 * @param property Property for which to remove the given localised string value.
 * @param value String to remove from `thing` for the given `property`.
 * @param locale Locale of the string to remove.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


function removeStringWithLocale(thing, property, value, locale) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const existingLangStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const matchingLocale = Object.keys(existingLangStrings).find(existingLocale => normalizeLocale(existingLocale) === normalizeLocale(locale) && Array.isArray(existingLangStrings[existingLocale]) && existingLangStrings[existingLocale].length > 0);

  if (typeof matchingLocale !== "string") {
    // Nothing to remove.
    return thing;
  }

  const existingStringsInLocale = existingLangStrings[matchingLocale];
  const updatedStringsInLocale = freeze(existingStringsInLocale.filter(existingString => existingString !== value));
  const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), {
    [matchingLocale]: updatedStringsInLocale
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), {
    langStrings: updatedLangStrings
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
}
/**
 * Create a new Thing with the given unlocalised string removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove an unlocalised string value from.
 * @param property Property for which to remove the given string value.
 * @param value String to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


const removeStringNoLocale = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.string, foundString => foundString === value);
};
/**
 * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing Thing to remove a NamedNode value from.
 * @param property Property for which to remove the given NamedNode value.
 * @param value NamedNode to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeStringNoLocale = removeStringNoLocale;

function removeNamedNode(thing, property, value) {
  return removeUrl(thing, property, value.value);
}
/**
 * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing Thing to remove a Literal value from.
 * @param property Property for which to remove the given Literal value.
 * @param value Literal to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


function removeLiteral(thing, property, value) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const typeIri = value.datatype.value;

  if (typeIri === xmlSchemaTypes.langString) {
    return removeStringWithLocale(thing, property, value.value, value.language);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};
  const existingValuesOfType = (_c = existingLiterals[typeIri]) !== null && _c !== void 0 ? _c : [];
  const updatedValues = freeze(existingValuesOfType.filter(existingValue => existingValue !== value.value));
  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {
    [typeIri]: updatedValues
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), {
    literals: updatedLiterals
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * @param thing Thing to remove a Literal value from.
 * @param property Property for which to remove the given Literal value.
 * @param type Data type that the Literal should be stored as.
 * @param matcher Function that returns true if the given value is an equivalent serialisation of the value to remove. For example, when removing a `false` boolean, the matcher should return true for both "0" and "false".
 */


function removeLiteralMatching(thing, property, type, matcher) {
  var _a, _b, _c;

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};
  const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];
  const updatedValues = freeze(existingValuesOfType.filter(existingValue => !matcher(existingValue)));
  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {
    [type]: updatedValues
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), {
    literals: updatedLiterals
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Create a new Thing with existing values replaced by the given URL for the given Property.
 *
 * To preserve existing values, see [[addUrl]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a URL value on.
 * @param property Property for which to set the given URL value.
 * @param url URL to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


const setUrl = (thing, property, url) => {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  if (!isThing(url) && !internal_isValidUrl(url)) {
    throw new ValidValueUrlExpectedError(url);
  }

  return addUrl(removeAll(thing, property), property, url);
};
/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */


exports.setUrl = setUrl;
const setIri = setUrl;
/**
 * Create a new Thing with existing values replaced by the given boolean for the given Property.
 *
 * To preserve existing values, see [[addBoolean]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a boolean value on.
 * @param property Property for which to set the given boolean value.
 * @param value Boolean to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */

exports.setIri = setIri;

const setBoolean = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addBoolean(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given datetime for the given Property.
 *
 * To preserve existing values, see [[addDatetime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an datetime value on.
 * @param property Property for which to set the given datetime value.
 * @param value Datetime to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setBoolean = setBoolean;

const setDatetime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addDatetime(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given date for the given Property.
 *
 * To preserve existing values, see [[addDate]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an date value on.
 * @param property Property for which to set the given date value.
 * @param value Date to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 * @since 1.10.0
 */


exports.setDatetime = setDatetime;

const setDate = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addDate(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given time for the given Property.
 *
 * To preserve existing values, see [[addTime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an time value on.
 * @param property Property for which to set the given time value.
 * @param value time to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 * @since 1.10.0
 */


exports.setDate = setDate;

const setTime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addTime(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given decimal for the given Property.
 *
 * To preserve existing values, see [[addDecimal]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a decimal value on.
 * @param property Property for which to set the given decimal value.
 * @param value Decimal to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setTime = setTime;

const setDecimal = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addDecimal(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given integer for the given Property.
 *
 * To preserve existing values, see [[addInteger]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an integer value on.
 * @param property Property for which to set the given integer value.
 * @param value Integer to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setDecimal = setDecimal;

const setInteger = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addInteger(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given localised string for the given Property.
 *
 * To preserve existing values, see [[addStringWithLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a localised string value on.
 * @param property Property for which to set the given localised string value.
 * @param value Localised string to set on `thing` for the given `property`.
 * @param locale Locale of the added string.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setInteger = setInteger;

function setStringWithLocale(thing, property, value, locale) {
  internal_throwIfNotThing(thing);
  return addStringWithLocale(removeAll(thing, property), property, value, locale);
}
/**
 * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.
 *
 * To preserve existing values, see [[addStringNoLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an unlocalised string value on.
 * @param property Property for which to set the given unlocalised string value.
 * @param value Unlocalised string to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


const setStringNoLocale = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addStringNoLocale(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given Named Node for the given Property.
 *
 * This replaces existing values for the given Property. To preserve them, see [[addNamedNode]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to set a NamedNode on.
 * @param property Property for which to set the value.
 * @param value The NamedNode to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setStringNoLocale = setStringNoLocale;

function setNamedNode(thing, property, value) {
  internal_throwIfNotThing(thing);
  return addNamedNode(removeAll(thing, property), property, value);
}
/**
 * Create a new Thing with existing values replaced by the given Literal for the given Property.
 *
 * This replaces existing values for the given Property. To preserve them, see [[addLiteral]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to set a Literal on.
 * @param property Property for which to set the value.
 * @param value The Literal to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


function setLiteral(thing, property, value) {
  internal_throwIfNotThing(thing);
  return addLiteral(removeAll(thing, property), property, value);
}
/**
 * Creates a new Thing with existing values replaced by the given Term for the given Property.
 *
 * This replaces existing values for the given Property. To preserve them, see [[addTerm]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to set a Term on.
 * @param property Property for which to set the value.
 * @param value The raw RDF/JS value to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 * @since 0.3.0
 */


function setTerm(thing, property, value) {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  return addTerm(removeAll(thing, property), property, value);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Create or modify a [[Thing]], setting multiple properties in a single expresssion.
 *
 * For example, you can create a new Thing and initialise several properties as follows:
 *
 *     const me = buildThing()
 *       .addUrl(rdf.type, schema.Person)
 *       .addStringNoLocale(schema.givenName, "Vincent")
 *       .build();
 *
 * Take note of the final call to `.build()` to obtain the actual Thing.
 *
 * @param init Optionally pass an existing [[Thing]] to modify the properties of. If left empty, `buildThing` will initialise a new Thing.
 * @returns a [[ThingBuilder]], a Fluent API that allows you to set multiple properties in a single expression.
 * @since 1.9.0
 */


function buildThing(init = createThing()) {
  let thing = isThing(init) ? init : createThing(init);

  function getAdder(adder) {
    return (property, value) => {
      thing = adder(thing, property, value);
      return builder;
    };
  }

  function getSetter(setter) {
    return (property, value) => {
      thing = setter(thing, property, value);
      return builder;
    };
  }

  function getRemover(remover) {
    return (property, value) => {
      thing = remover(thing, property, value);
      return builder;
    };
  }

  const builder = {
    build: () => thing,
    addUrl: getAdder(addUrl),
    addIri: getAdder(addIri),
    addBoolean: getAdder(addBoolean),
    addDatetime: getAdder(addDatetime),
    addDate: getAdder(addDate),
    addTime: getAdder(addTime),
    addDecimal: getAdder(addDecimal),
    addInteger: getAdder(addInteger),
    addStringNoLocale: getAdder(addStringNoLocale),
    addStringEnglish: (property, value) => {
      thing = addStringWithLocale(thing, property, value, "en");
      return builder;
    },
    addStringWithLocale: (property, value, locale) => {
      thing = addStringWithLocale(thing, property, value, locale);
      return builder;
    },
    addNamedNode: getAdder(addNamedNode),
    addLiteral: getAdder(addLiteral),
    addTerm: getAdder(addTerm),
    setUrl: getSetter(setUrl),
    setIri: getSetter(setIri),
    setBoolean: getSetter(setBoolean),
    setDatetime: getSetter(setDatetime),
    setDate: getSetter(setDate),
    setTime: getSetter(setTime),
    setDecimal: getSetter(setDecimal),
    setInteger: getSetter(setInteger),
    setStringNoLocale: getSetter(setStringNoLocale),
    setStringEnglish: (property, value) => {
      thing = setStringWithLocale(thing, property, value, "en");
      return builder;
    },
    setStringWithLocale: (property, value, locale) => {
      thing = setStringWithLocale(thing, property, value, locale);
      return builder;
    },
    setNamedNode: getSetter(setNamedNode),
    setLiteral: getSetter(setLiteral),
    setTerm: getSetter(setTerm),
    removeAll: property => {
      thing = removeAll(thing, property);
      return builder;
    },
    removeUrl: getRemover(removeUrl),
    removeIri: getRemover(removeIri),
    removeBoolean: getRemover(removeBoolean),
    removeDatetime: getRemover(removeDatetime),
    removeDate: getRemover(removeDate),
    removeTime: getRemover(removeTime),
    removeDecimal: getRemover(removeDecimal),
    removeInteger: getRemover(removeInteger),
    removeStringNoLocale: getRemover(removeStringNoLocale),
    removeStringEnglish: (property, value) => buildThing(removeStringWithLocale(thing, property, value, "en")),
    removeStringWithLocale: (property, value, locale) => buildThing(removeStringWithLocale(thing, property, value, locale)),
    removeNamedNode: getRemover(removeNamedNode),
    removeLiteral: getRemover(removeLiteral)
  };
  return builder;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Function for use in unit tests to mock a [[Thing]] with a given URL.
 *
 * Warning: do not use this function in actual production code.
 * This function initialises a new empty Thing and sets its URL to a given URL.
 * This is useful to mock a Thing in tests of code that call e.g.
 * [[asUrl]].
 *
 * @param url The URL that the mocked Thing pretends identifies it.
 * @returns A new Thing, pretending to be identified by the given URL.
 * @since 0.2.0
 */


function mockThingFrom(url) {
  const iri = internal_toIriString(url);
  const thing = {
    type: "Subject",
    predicates: {},
    url: iri
  };
  return thing;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @param linkedAccessResource A Resource exposed via the Link header of another Resource with rel="acl".
 * @returns Whether that Resource is an ACP ACR or not (in which case it's likely a WAC ACL).
 */


function isAcr(linkedAccessResource) {
  const relTypeLinks = getLinkedResourceUrlAll(linkedAccessResource)["type"];
  return Array.isArray(relTypeLinks) && relTypeLinks.includes(acp.AccessControlResource);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * This (currently internal) function fetches the ACL indicated in the [[WithServerResourceInfo]]
 * attached to a resource.
 *
 * @internal
 * @param resourceInfo The Resource info with the ACL URL
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).
 */


async function internal_fetchAcl(resourceInfo, options = internal_defaultFetchOptions) {
  if (!hasAccessibleAcl(resourceInfo)) {
    return {
      resourceAcl: null,
      fallbackAcl: null
    };
  }

  try {
    const resourceAcl = await internal_fetchResourceAcl(resourceInfo, options);
    const acl = resourceAcl === null ? {
      resourceAcl: null,
      fallbackAcl: await internal_fetchFallbackAcl(resourceInfo, options)
    } : {
      resourceAcl: resourceAcl,
      fallbackAcl: null
    };
    return acl;
  } catch (e) {
    /* istanbul ignore else: fetchResourceAcl swallows all non-AclIsAcrErrors */
    if (e instanceof AclIsAcrError) {
      return {
        resourceAcl: null,
        fallbackAcl: null
      };
    }
    /* istanbul ignore next: fetchResourceAcl swallows all non-AclIsAcrErrors */


    throw e;
  }
}
/** @internal */


async function internal_fetchResourceAcl(dataset, options = internal_defaultFetchOptions) {
  if (!hasAccessibleAcl(dataset)) {
    return null;
  }

  try {
    const aclSolidDataset = await getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);

    if (isAcr(aclSolidDataset)) {
      throw new AclIsAcrError(dataset, aclSolidDataset);
    }

    return freeze(Object.assign(Object.assign({}, aclSolidDataset), {
      internal_accessTo: getSourceUrl(dataset)
    }));
  } catch (e) {
    if (e instanceof AclIsAcrError) {
      throw e;
    } // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,
    // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal
    // with it.


    return null;
  }
}
/** @internal */


async function internal_fetchFallbackAcl(resource, options = internal_defaultFetchOptions) {
  const resourceUrl = new URL(getSourceUrl(resource));
  const resourcePath = resourceUrl.pathname; // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet
  //       set in stone that that will always be the case. We might need to check the Container's
  //       metadata at some point in time to check whether it is actually the root of the Pod.
  //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022

  if (resourcePath === "/") {
    // We're already at the root, so there's no Container we can retrieve:
    return null;
  }

  const containerPath = internal_getContainerPath(resourcePath);
  const containerIri = new URL(containerPath, resourceUrl.origin).href;
  const containerInfo = await getResourceInfo(containerIri, options);

  if (!hasAccessibleAcl(containerInfo)) {
    // If the current user does not have access to this Container's ACL,
    // we cannot determine whether its ACL is the one that applies. Thus, return null:
    return null;
  }

  const containerAcl = await internal_fetchResourceAcl(containerInfo, options);

  if (containerAcl === null) {
    return internal_fetchFallbackAcl(containerInfo, options);
  }

  return containerAcl;
}
/**
 * Given the path to a Resource, get the URL of the Container one level up in the hierarchy.
 * @param resourcePath The path of the Resource of which we need to determine the Container's path.
 * @hidden For internal use only.
 */


function internal_getContainerPath(resourcePath) {
  const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === "/" ? resourcePath.substring(0, resourcePath.length - 1) : resourcePath;
  const containerPath = resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf("/")) + "/";
  return containerPath;
}
/** @internal */


function internal_getAclRules(aclDataset) {
  const things = getThingAll(aclDataset);
  return things.filter(isAclRule);
}

function isAclRule(thing) {
  return getIriAll(thing, rdf.type).includes(acl.Authorization);
}
/** @internal */


function internal_getResourceAclRulesForResource(aclRules, resource) {
  return aclRules.filter(rule => appliesToResource(rule, resource));
}

function appliesToResource(aclRule, resource) {
  return getIriAll(aclRule, acl.accessTo).includes(resource);
}
/** @internal */


function internal_getDefaultAclRulesForResource(aclRules, resource) {
  return aclRules.filter(rule => isDefaultForResource(rule, resource));
}

function isDefaultForResource(aclRule, resource) {
  return getIriAll(aclRule, acl.default).includes(resource) || getIriAll(aclRule, acl.defaultForNew).includes(resource);
}
/** @internal */


function internal_getAccess(rule) {
  const ruleAccessModes = getIriAll(rule, acl.mode);
  const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);
  return writeAccess ? {
    read: ruleAccessModes.includes(internal_accessModeIriStrings.read),
    append: true,
    write: true,
    control: ruleAccessModes.includes(internal_accessModeIriStrings.control)
  } : {
    read: ruleAccessModes.includes(internal_accessModeIriStrings.read),
    append: ruleAccessModes.includes(internal_accessModeIriStrings.append),
    write: false,
    control: ruleAccessModes.includes(internal_accessModeIriStrings.control)
  };
}
/** @internal */


function internal_combineAccessModes(modes) {
  return modes.reduce((accumulator, current) => {
    const writeAccess = accumulator.write || current.write;
    return writeAccess ? {
      read: accumulator.read || current.read,
      append: true,
      write: true,
      control: accumulator.control || current.control
    } : {
      read: accumulator.read || current.read,
      append: accumulator.append || current.append,
      write: false,
      control: accumulator.control || current.control
    };
  }, {
    read: false,
    append: false,
    write: false,
    control: false
  });
}
/** @internal */


function internal_removeEmptyAclRules(aclDataset) {
  const aclRules = internal_getAclRules(aclDataset);
  const aclRulesToRemove = aclRules.filter(isEmptyAclRule); // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.

  const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);
  return updatedAclDataset;
}

function isEmptyAclRule(aclRule) {
  // If there are Quads in there unrelated to Access Control,
  // this is not an empty ACL rule that can be deleted:
  if (subjectToRdfJsQuads(aclRule.predicates, DataFactory.namedNode(aclRule.url), DataFactory.defaultGraph()).some(quad => !isAclQuad(quad))) {
    return false;
  } // If the rule does not apply to any Resource, it is no longer working:


  if (getIri(aclRule, acl.accessTo) === null && getIri(aclRule, acl.default) === null && getIri(aclRule, acl.defaultForNew) === null) {
    return true;
  } // If the rule does not specify Access Modes, it is no longer working:


  if (getIri(aclRule, acl.mode) === null) {
    return true;
  } // If the rule does not specify whom it applies to, it is no longer working:


  if (getIri(aclRule, acl.agent) === null && getIri(aclRule, acl.agentGroup) === null && getIri(aclRule, acl.agentClass) === null) {
    return true;
  }

  return false;
}

function isAclQuad(quad) {
  const predicate = quad.predicate;
  const object = quad.object;

  if (predicate.equals(DataFactory.namedNode(rdf.type)) && object.equals(DataFactory.namedNode(acl.Authorization))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.accessTo)) || predicate.equals(DataFactory.namedNode(acl.default)) || predicate.equals(DataFactory.namedNode(acl.defaultForNew))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.mode)) && Object.values(internal_accessModeIriStrings).some(mode => object.equals(DataFactory.namedNode(mode)))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.agent)) || predicate.equals(DataFactory.namedNode(acl.agentGroup)) || predicate.equals(DataFactory.namedNode(acl.agentClass))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.origin))) {
    return true;
  }

  return false;
}
/**
 * IRIs of potential Access Modes
 * @internal
 */


const internal_accessModeIriStrings = {
  read: "http://www.w3.org/ns/auth/acl#Read",
  append: "http://www.w3.org/ns/auth/acl#Append",
  write: "http://www.w3.org/ns/auth/acl#Write",
  control: "http://www.w3.org/ns/auth/acl#Control"
};
/** @internal
 * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)
 * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).
 * @param aclRules The set of rules to filter
 * @param targetIri The IRI of the target
 * @param targetType The property linking the rule to the target
 */

function internal_getAclRulesForIri(aclRules, targetIri, targetType) {
  return aclRules.filter(rule => getIriAll(rule, targetType).includes(targetIri));
}
/** @internal
 * This function transforms a given set of rules into a map associating the IRIs
 * of the entities to which permissions are granted by these rules, and the permissions
 * granted to them. Additionally, it filters these entities based on the predicate
 * that refers to them in the rule.
 */


function internal_getAccessByIri(aclRules, targetType) {
  const targetIriAccess = {};
  aclRules.forEach(rule => {
    const ruleTargetIri = getIriAll(rule, targetType);
    const access = internal_getAccess(rule); // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access
    // Modes granted by those rules should be combined:

    ruleTargetIri.forEach(targetIri => {
      targetIriAccess[targetIri] = typeof targetIriAccess[targetIri] === "undefined" ? access : internal_combineAccessModes([targetIriAccess[targetIri], access]);
    });
  });
  return targetIriAccess;
}
/**
 * Initialises a new ACL Rule that grants some access - but does not yet specify to whom.
 *
 * @hidden This is an internal utility function that should not be used directly by downstreams.
 * @param access Access mode that this Rule will grant
 */


function internal_initialiseAclRule(access) {
  let newRule = createThing();
  newRule = setIri(newRule, rdf.type, acl.Authorization);

  if (access.read) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);
  }

  if (access.append && !access.write) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);
  }

  if (access.write) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);
  }

  if (access.control) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);
  }

  return newRule;
}
/**
 * Creates a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.
 *
 * Note that non-ACL values will not be copied over.
 *
 * @hidden This is an internal utility function that should not be used directly by downstreams.
 * @param sourceRule ACL rule to duplicate.
 */


function internal_duplicateAclRule(sourceRule) {
  let targetRule = createThing();
  targetRule = setIri(targetRule, rdf.type, acl.Authorization);

  function copyIris(inputRule, outputRule, predicate) {
    return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);
  }

  targetRule = copyIris(sourceRule, targetRule, acl.accessTo);
  targetRule = copyIris(sourceRule, targetRule, acl.default);
  targetRule = copyIris(sourceRule, targetRule, acl.defaultForNew);
  targetRule = copyIris(sourceRule, targetRule, acl.agent);
  targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);
  targetRule = copyIris(sourceRule, targetRule, acl.agentClass);
  targetRule = copyIris(sourceRule, targetRule, acl.origin);
  targetRule = copyIris(sourceRule, targetRule, acl.mode);
  return targetRule;
}

function internal_setAcl(resource, acl) {
  return Object.assign(internal_cloneResource(resource), {
    internal_acl: acl
  });
}

const supportedActorPredicates = [acl.agent, acl.agentClass, acl.agentGroup, acl.origin];
/**
 * Given an ACL Rule, returns two new ACL Rules that cover all the input Rule's use cases,
 * except for giving the given Actor access to the given Resource.
 *
 * @param rule The ACL Rule that should no longer apply for a given Actor to a given Resource.
 * @param actor The Actor that should be removed from the Rule for the given Resource.
 * @param resourceIri The Resource to which the Rule should no longer apply for the given Actor.
 * @returns A tuple with the original ACL Rule without the given Actor, and a new ACL Rule for the given Actor for the remaining Resources, respectively.
 */

function internal_removeActorFromRule(rule, actor, actorPredicate, resourceIri, ruleType) {
  // If the existing Rule does not apply to the given Actor, we don't need to split up.
  // Without this check, we'd be creating a new rule for the given Actor (ruleForOtherTargets)
  // that would give it access it does not currently have:
  if (!getIriAll(rule, actorPredicate).includes(actor)) {
    const emptyRule = internal_initialiseAclRule({
      read: false,
      append: false,
      write: false,
      control: false
    });
    return [rule, emptyRule];
  } // The existing rule will keep applying to Actors other than the given one:


  const ruleWithoutActor = removeIri(rule, actorPredicate, actor); // The actor might have been given other access in the existing rule, so duplicate it...

  let ruleForOtherTargets = internal_duplicateAclRule(rule); // ...but remove access to the original Resource...

  ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === "resource" ? acl.accessTo : acl.default, resourceIri); // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation

  if (ruleType === "default") {
    ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);
  } // ...and only apply the new Rule to the given Actor (because the existing Rule covers the others):


  ruleForOtherTargets = setIri(ruleForOtherTargets, actorPredicate, actor);
  supportedActorPredicates.filter(predicate => predicate !== actorPredicate).forEach(predicate => {
    ruleForOtherTargets = removeAll(ruleForOtherTargets, predicate);
  });
  return [ruleWithoutActor, ruleForOtherTargets];
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.
 * Specifically, the function returns a new resource ACL initialised with the given ACL and
 * new rules for the Actor's access.
 *
 * If rules for Actor's access already exist in the given ACL, in the returned ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 *
 * - Access Modes granted indirectly to Actors through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to Actors for the child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param actor The Actor to grant specific Access Modes.
 * @param access The Access Modes to grant to the Actor for the Resource.
 * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.
 */


function internal_setActorAccess$2(aclDataset, access, actorPredicate, accessType, actor) {
  // First make sure that none of the pre-existing rules in the given ACL SolidDataset
  // give the Agent access to the Resource:
  let filteredAcl = aclDataset;
  getThingAll(aclDataset).forEach(aclRule => {
    // Obtain both the Rule that no longer includes the given Actor,
    // and a new Rule that includes all ACL Quads
    // that do not pertain to the given Actor-Resource combination.
    // Note that usually, the latter will no longer include any meaningful statements;
    // we'll clean them up afterwards.
    const [filteredRule, remainingRule] = internal_removeActorFromRule(aclRule, actor, actorPredicate, aclDataset.internal_accessTo, accessType);
    filteredAcl = setThing(filteredAcl, filteredRule);
    filteredAcl = setThing(filteredAcl, remainingRule);
  }); // Create a new Rule that only grants the given Actor the given Access Modes:

  let newRule = internal_initialiseAclRule(access);
  newRule = setIri(newRule, accessType === "resource" ? acl.accessTo : acl.default, aclDataset.internal_accessTo);
  newRule = setIri(newRule, actorPredicate, actor);
  const updatedAcl = setThing(filteredAcl, newRule); // Remove any remaining Rules that do not contain any meaningful statements:

  return internal_removeEmptyAclRules(updatedAcl);
}

function internal_setResourceAcl(resource, acl) {
  const newAcl = {
    resourceAcl: acl,
    fallbackAcl: null
  };
  return internal_setAcl(resource, newAcl);
}

function internal_getResourceAcl(resource) {
  return resource.internal_acl.resourceAcl;
}
/**
 * This error indicates that, if we're following a Link with rel="acl",
 * it does not result in a WAC ACL, but in an ACP ACR.
 */


class AclIsAcrError extends Error {
  constructor(sourceResource, aclResource) {
    super(`[${getSourceIri(sourceResource)}] is governed by Access Control Policies in [${getSourceIri(aclResource)}] rather than by Web Access Control.`);
  }

}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Verify whether a given SolidDataset was fetched together with its Access Control List.
 *
 * @param dataset A [[SolidDataset]] that may have its ACLs attached.
 * @returns True if `dataset` was fetched together with its ACLs.
 */


function hasAcl(dataset) {
  const potentialAcl = dataset;
  return typeof potentialAcl.internal_acl === "object";
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Verifies whether the given Resource has a resource ACL (Access Control List) attached.
 *
 * The [[hasResourceAcl]] function checks that:
 * - a given Resource has a resource ACL attached, and
 * - the user calling [[hasResourceAcl]] has Control access to the Resource.
 *
 * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].
 *
 * @param resource A Resource that might have an ACL attached.
 * @returns `true` if the Resource has a resource ACL attached that is accessible by the user.
 */


function hasResourceAcl(resource) {
  return resource.internal_acl.resourceAcl !== null && getSourceUrl(resource) === resource.internal_acl.resourceAcl.internal_accessTo && resource.internal_resourceInfo.aclUrl === getSourceUrl(resource.internal_acl.resourceAcl);
}
/**
 * Experimental: fetch a SolidDataset and its associated Access Control List.
 *
 * This is an experimental function that fetches both a Resource, the linked ACL Resource (if
 * available), and the ACL that applies to it if the linked ACL Resource is not available. This can
 * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to
 * provide this info in a single request. Therefore, and because this function is still
 * experimental, prefer [[getSolidDataset]] instead.
 *
 * If the Resource does not advertise the ACL Resource (because the authenticated user does not have
 * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be
 * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),
 * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the
 * authenticated user.
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.
 */


async function getSolidDatasetWithAcl(url, options = internal_defaultFetchOptions) {
  const solidDataset = await getSolidDataset(url, options);
  const acl = await internal_fetchAcl(solidDataset, options);
  return internal_setAcl(solidDataset, acl);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Retrieves a file, its resource ACL (Access Control List) if available,
 * and its fallback ACL from a URL and returns them as a blob.
 *
 * If the user calling the function does not have access to the file's resource ACL,
 * [[hasAccessibleAcl]] on the returned blob returns false.
 * If the user has access to the file's resource ACL but the resource ACL does not exist,
 * [[getResourceAcl]] on the returned blob returns null.
 * If the fallback ACL is inaccessible by the user,
 * [[getFallbackAcl]] on the returned blob returns null.
 *
 * ```{tip}
 * To retrieve the ACLs, the function results in multiple HTTP requests rather than a single
 * request as mandated by the Solid spec. As such, prefer [[getFile]] instead if you do not need the ACL.
 * ```
 *
 * @param url The URL of the fetched file
 * @param options Fetching options: a custom fetcher and/or headers.
 * @returns A file and its ACLs, if available to the authenticated user, as a blob.
 * @since 0.2.0
 */


async function getFileWithAcl(input, options = internal_defaultFetchOptions) {
  const file = await getFile(input, options);
  const acl = await internal_fetchAcl(file, options);
  return internal_setAcl(file, acl);
}
/**
 * Experimental: fetch a Resource's metadata and its associated Access Control List.
 *
 * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if
 * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can
 * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to
 * provide this info in a single request.
 *
 * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because
 * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the
 * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be
 * `null`.
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.
 */


async function getResourceInfoWithAcl(url, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfo(url, options);
  const acl = await internal_fetchAcl(resourceInfo, options);
  return internal_setAcl(resourceInfo, acl);
}

function getResourceAcl(resource) {
  if (!hasResourceAcl(resource)) {
    return null;
  }

  return resource.internal_acl.resourceAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Verifies whether the given Resource has a fallback ACL (Access Control List) attached.
 *
 * A fallback ACL for a Resource is inherited from the Resource's parent Container
 * (or another of its ancestor Containers) and applies if the Resource does
 * not have its own resource ACL.
 *
 * The [[hasFallbackAcl]] function checks that:
 * - a given Resource has a fallback ACL attached, and
 * - the user calling [[hasFallbackAcl]] has Control access to the Container
 * from which the Resource inherits its ACL.
 *
 * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].
 *
 * @param resource A [[SolidDataset]] that might have a fallback ACL attached.
 *
 * @returns `true` if the Resource has a fallback ACL attached that is accessible to the user.
 */


function hasFallbackAcl(resource) {
  return resource.internal_acl.fallbackAcl !== null;
}

function getFallbackAcl(dataset) {
  if (!hasFallbackAcl(dataset)) {
    return null;
  }

  return dataset.internal_acl.fallbackAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Creates an empty resource ACL (Access Control List) for a given Resource.
 *
 * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).
 * @returns An empty resource ACL for the given Resource.
 */


function createAcl(targetResource) {
  const emptyResourceAcl = freeze(Object.assign(Object.assign({}, createSolidDataset()), {
    internal_accessTo: getSourceUrl(targetResource),
    internal_resourceInfo: {
      sourceIri: targetResource.internal_resourceInfo.aclUrl,
      isRawData: false,
      linkedResources: {}
    }
  }));
  return emptyResourceAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Creates a resource ACL (Access Control List), initialised from the fallback ACL
 * inherited from the given Resource's Container (or another of its ancestor Containers).
 * That is, the new ACL has the same rules/entries as the fallback ACL that currently
 * applies to the Resource.
 *
 * @param resource A Resource without its own resource ACL (see [[hasResourceAcl]]) but with an accessible fallback ACL (see [[hasFallbackAcl]]).
 * @returns A resource ACL initialised with the rules/entries from the Resource's fallback ACL.
 */


function createAclFromFallbackAcl(resource) {
  const emptyResourceAcl = createAcl(resource);
  const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);
  const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);
  const newAclRules = defaultAclRules.map(rule => {
    rule = removeAll(rule, acl.default);
    rule = removeAll(rule, acl.defaultForNew);
    rule = setIri(rule, acl.accessTo, getSourceUrl(resource));
    rule = setIri(rule, acl.default, getSourceUrl(resource));
    return rule;
  }); // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:

  const initialisedResourceAcl = newAclRules.reduce(setThing, emptyResourceAcl);
  return initialisedResourceAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Saves the resource ACL for a Resource.
 *
 * @param resource The Resource to which the given resource ACL applies.
 * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 */


async function saveAclFor(resource, resourceAcl, options = internal_defaultFetchOptions) {
  if (!hasAccessibleAcl(resource)) {
    throw new Error(`Could not determine the location of the ACL for the Resource at [${getSourceUrl(resource)}]; possibly the current user does not have Control access to that Resource. Try calling \`hasAccessibleAcl()\` before calling \`saveAclFor()\`.`);
  }

  const savedDataset = await saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);
  const savedAclDataset = Object.assign(Object.assign({}, savedDataset), {
    internal_accessTo: getSourceUrl(resource)
  });
  return savedAclDataset;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the resource ACL (Access Control List) from a Resource.
 *
 * Once the resource ACL is removed from the Resource, the Resource relies on the
 * fallback ACL inherited from the Resource's parent Container (or another of its ancestor Containers).
 *
 * @param resource The Resource for which you want to delete the ACL.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 */


async function deleteAclFor(resource, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(resource.internal_resourceInfo.aclUrl, {
    method: "DELETE"
  });

  if (!response.ok) {
    throw new Error(`Deleting the ACL of the Resource at [${getSourceUrl(resource)}] failed: [${response.status}] [${response.statusText}].`);
  }

  const storedResource = Object.assign(internal_cloneResource(resource), {
    acl: {
      resourceAcl: null
    }
  });
  return storedResource;
}
/**
 * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.
 *
 * This should generally only be true for SolidDatasets fetched by
 * [[getSolidDatasetWithAcl]].
 *
 * Please note that the Web Access Control specification is not yet finalised, and hence, this
 * function is still experimental and can change in a non-major release.
 *
 * @param dataset A [[SolidDataset]].
 * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.
 */


function hasAccessibleAcl(dataset) {
  return typeof dataset.internal_resourceInfo.aclUrl === "string";
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns an Agent's explicitly-granted Access Modes for the given Resource.
 *
 * The function does not return Access Modes granted indirectly to the Agent through other
 * ACL rules, e.g., public or group-specific permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.
 * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.
 * @returns Access Modes that have been explicitly granted to the Agent for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).
 */


function getAgentAccess$5(resourceInfo, agent) {
  if (hasResourceAcl(resourceInfo)) {
    return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);
  }

  if (hasFallbackAcl(resourceInfo)) {
    return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);
  }

  return null;
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Returns all explicitly-granted Access Modes per Agent for the given Resource.
 *
 * The function does not return Access Modes granted indirectly to Agents through other
 * ACL rules, e.g., public or group-specific permissions.
 *
 * @param resourceInfo Information about the Resource to which Agents may have been granted access.
 * @returns Access Modes per Agent that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).
 */


function getAgentAccessAll$5(resourceInfo) {
  if (hasResourceAcl(resourceInfo)) {
    const resourceAcl = getResourceAcl(resourceInfo);
    return getAgentResourceAccessAll(resourceAcl);
  }

  if (hasFallbackAcl(resourceInfo)) {
    const fallbackAcl = getFallbackAcl(resourceInfo);
    return getAgentDefaultAccessAll(fallbackAcl);
  }

  return null;
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes explicitly granted to an Agent for the Resource
 * associated with an ACL (Access ControlList).
 *
 * The function does not return:
 *
 * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to the Agent for the child Resources if the associated Resource is a Container (see [[getAgentDefaultAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains ACL rules.
 * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.
 * @returns Access Modes that have been explicitly granted to an Agent for the Resource associated with an ACL SolidDataset.
 */


function getAgentResourceAccess(aclDataset, agent) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);
  const agentAccessModes = agentResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(agentAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the explicitly granted Access Modes per Agent for the Resource associated
 * with an ACL (Access Control List).
 *
 * The function does not return:
 *
 * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.
 *
 * @param aclDataset The SolidDataset that contains ACL rules.
 * @returns Access Modes per Agent that have been explicitly granted for the Resource associated with an ACL SolidDataset.
 */


function getAgentResourceAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRules(resourceRules);
  return getAccessByAgent(agentResourceRules);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.
 * Specifically, the function returns a new resource ACL initialised with the given ACL and
 * new rules for the Agent's access.
 *
 * If rules for Agent's access already exist in the given ACL, in the returned ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 *
 * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param agent The Agent to grant specific Access Modes.
 * @param access The Access Modes to grant to the Agent for the Resource.
 * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.
 */


function setAgentResourceAccess$1(aclDataset, agent, access) {
  return internal_setActorAccess$2(aclDataset, access, acl.agent, "resource", agent);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns an Agent's Access Modes explicitly granted for the children of the
 * Container associated with the given ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Agent through other ACL rules, e.g. public or group-specific permissions.
 * - Access Modes granted to the Agent for the Container Resource itself (see [[getAgentResourceAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.
 * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.
 * @returns Access Modes that have been explicitly granted to an Agent for the children of the Container associated with the given ACL.
 */


function getAgentDefaultAccess(aclDataset, agent) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);
  const agentAccessModes = agentResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(agentAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes, per Agent, that have been explicitly granted for the children
 * of the Container associated with the given ACL (Access Control List).
 *
 * The function does not return:
 *
 * - Access Modes granted indirectly to the Agents through other ACL rules, e.g. public or group-specific permissions.
 * - Access Modes granted to the Agents for the Container Resource itself (see [[getAgentResourceAccessAll]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @returns Access Modes, per Agent, that have been explicitly granted for the children of the Container associated with the given ACL.
 */


function getAgentDefaultAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRules(resourceRules);
  return getAccessByAgent(agentResourceRules);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the default ACL (Access Control List) to set an Agent's Access Modes for the Container's children.
 * Specifically, the function returns a new default ACL initialised with the given ACL and
 * new rules for the Agent's access.
 *
 * If rules already exist for the Agent in the given ACL, in the returned ACL, they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to the Agent for the Container Resource itself.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param agent The Agent to grant specific Access Modes.
 * @param access The Access Modes to grant to the Agent.
 * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `agent`.
 */


function setAgentDefaultAccess(aclDataset, agent, access) {
  return internal_setActorAccess$2(aclDataset, access, acl.agent, "default", agent);
}

function getAgentAclRulesForAgent(aclRules, agent) {
  return internal_getAclRulesForIri(aclRules, agent, acl.agent);
}

function getAgentAclRules(aclRules) {
  return aclRules.filter(isAgentAclRule);
}

function isAgentAclRule(aclRule) {
  return getIri(aclRule, acl.agent) !== null;
}

function getAccessByAgent(aclRules) {
  return internal_getAccessByIri(aclRules, acl.agent);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Returns a Group's explicity-granted Access Modes for a given Resource.
 *
 * The function does not return Access Modes granted indirectly to the Group through other
 * ACL rules, e.g., public permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Group may have been granted access.
 * @param group URL of the Group for which to retrieve what access it has to the Resource.
 * @returns Access Modes that have been explicitly granted to the `group` for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).
 */


function getGroupAccess$2(resourceInfo, group) {
  if (hasResourceAcl(resourceInfo)) {
    return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);
  }

  if (hasFallbackAcl(resourceInfo)) {
    return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);
  }

  return null;
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns all explicitly-granted Access Modes per Group for the given Resource.
 *
 * The function does not return Access Modes granted indirectly to the Group through other
 * ACL rules, e.g., public permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Group may have been granted access.
 * @returns Access Modes per Group that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).
 */


function getGroupAccessAll$2(resourceInfo) {
  if (hasResourceAcl(resourceInfo)) {
    const resourceAcl = getResourceAcl(resourceInfo);
    return getGroupResourceAccessAll(resourceAcl);
  }

  if (hasFallbackAcl(resourceInfo)) {
    const fallbackAcl = getFallbackAcl(resourceInfo);
    return getGroupDefaultAccessAll(fallbackAcl);
  }

  return null;
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes explicitly granted to a Group for the Resource
 * associated with an ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.
 * - Access Modes granted to the Group for the child Resources if the associated Resource is a Container
 *   (see [[getGroupDefaultAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @param group URL of the Group for which to retrieve what access it has to the Resource.
 * @returns Access Modes explicitly granted to a Group for the Resource associated with an ACL.
 */


function getGroupResourceAccess(aclDataset, group) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);
  const groupAccessModes = groupResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(groupAccessModes);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the explicitly granted Access Modes per Group for the Resource associated
 * with an ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.
 * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @returns Access Modes per Group that have been explicitly granted for the Resource associated with an ACL.
 */


function getGroupResourceAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  return getAccessByGroup(resourceRules);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns a Group's Access Modes explicitly granted for the children of the
 * Container associated with an ACL (Access ControlList).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g. public permissions.
 * - Access Modes granted to the Group for the Container Resource itself (see [[getGroupResourceAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains ACL rules for a certain Container.
 * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.
 * @returns Access Modes that have been explicitly granted to the Group for the children of the Container associated with the given ACL.
 */


function getGroupDefaultAccess(aclDataset, group) {
  const allRules = internal_getAclRules(aclDataset);
  const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);
  const groupAccessModes = groupDefaultRules.map(internal_getAccess);
  return internal_combineAccessModes(groupAccessModes);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes, per Group, that have been explicitly granted for the children
 * of the Container associated with the given ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Groups through other ACL rules, e.g. public permissions.
 * - Access Modes granted to the Groups for the Container Resource itself (see [[getGroupResourceAccessAll]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.
 * @returns Access Modes per Group that have been explicitly granted for the children of the Container associated with the given ACL SolidDataset.
 */


function getGroupDefaultAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  return getAccessByGroup(defaultRules);
}

function getGroupAclRuleForGroup(rules, group) {
  return internal_getAclRulesForIri(rules, group, acl.agentGroup);
}

function getAccessByGroup(aclRules) {
  return internal_getAccessByIri(aclRules, acl.agentGroup);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Group.
 * Specifically, the function returns a new resource ACL initialised with the given ACL and
 * new rules for the Group's access.
 *
 * If rules for Groups's access already exist in the given ACL, in the returned ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 *
 * - Access Modes granted indirectly to Groups through other ACL rules, e.g., public or Agent-specific permissions.
 * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param group The Group to grant specific Access Modes.
 * @param access The Access Modes to grant to the Group for the Resource.
 * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `group`.
 * @since 1.4.0
 */


function setGroupResourceAccess$1(aclDataset, group, access) {
  return internal_setActorAccess$2(aclDataset, access, acl.agentGroup, "resource", group);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the default ACL (Access Control List) to set a Group's Access Modes for the Container's children.
 * Specifically, the function returns a new default ACL initialised with the given ACL and
 * new rules for the Group's access.
 *
 * If rules already exist for the Group in the given ACL, in the returned ACL, they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public or Agent-specific permissions.
 * - Access Modes granted to the Group for the Container Resource itself.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param group The Group to grant specific Access Modes.
 * @param access The Access Modes to grant to the Group.
 * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `group`.
 * @since 1.4.0
 */


function setGroupDefaultAccess(aclDataset, group, access) {
  return internal_setActorAccess$2(aclDataset, access, acl.agentGroup, "default", group);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes granted to the public in general for a Resource.
 *
 * This function does not return Access Modes granted to specific Agents
 * through other ACL (Access Control List) rules, e.g., agent- or group-specific permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.
 * @returns Access Modes granted to the public in general for the Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).
 */


function getPublicAccess$5(resourceInfo) {
  if (hasResourceAcl(resourceInfo)) {
    return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);
  }

  if (hasFallbackAcl(resourceInfo)) {
    return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);
  }

  return null;
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes granted to the public in general for the Resource
 * associated with an ACL (Access Control List).
 *
 * This function does not return:
 * - Access Modes granted to specific Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to child Resources if the associated Resource is a Container (see [[getPublicDefaultAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @returns Access Modes granted to the public in general for the Resource associated with the `aclDataset`.
 */


function getPublicResourceAccess(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);
  const publicAccessModes = publicResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(publicAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes granted to the public in general for the child Resources
 * of the Container associated with an ACL (Access Control List).
 *
 * This function does not return:
 * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to the Container Resource itself (see [[getPublicResourceAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.
 * @returns Access Modes granted to the public in general for the children of the Container associated with the given `aclDataset`.
 */


function getPublicDefaultAccess(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);
  const publicAccessModes = publicResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(publicAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the public.
 * Specifically, the function returns a new resource ACL (Access Control List) initialised
 * with the given resource ACL and new rules for the given public access.
 *
 * If rules for public access already exist in the given ACL, in the *returned* ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @param access The Access Modes to grant to the public.
 * @returns A new resource ACL initialised with the given `aclDataset` and public `access`.
 */


function setPublicResourceAccess$1(aclDataset, access) {
  return internal_setActorAccess$2(aclDataset, access, acl.agentClass, "resource", foaf.Agent);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the default ACL (Access Control List) to set the public's default Access Modes
 * to child resources. Specifically, the function returns a new default ACL initialised
 * with the given default ACL and new rules for the given public access.
 *
 * If rules for public access already exist in the given ACL, in the *returned* ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to Container Resource itself.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @param access The Access Modes to grant to the public.
 * @returns A new default ACL initialised with the given `aclDataset` and public `access`.
 */


function setPublicDefaultAccess(aclDataset, access) {
  return internal_setActorAccess$2(aclDataset, access, acl.agentClass, "default", foaf.Agent);
}

function getClassAclRulesForClass(aclRules, agentClass) {
  return aclRules.filter(rule => appliesToClass(rule, agentClass));
}

function appliesToClass(aclRule, agentClass) {
  return getIriAll(aclRule, acl.agentClass).includes(agentClass);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function setMockAclUrl(resource, aclUrl) {
  const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {
    internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), {
      aclUrl: aclUrl
    })
  });
  return resourceWithAclUrl;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests** that
 * require a [[SolidDataset]] with a resource ACL (Access Control List).
 * ```
 *
 * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].
 *
 * @param resource The Resource to mock up with a new resource ACL.
 * @returns The input Resource with an empty resource ACL attached.
 * @since 0.2.0
 */


function addMockResourceAclTo(resource) {
  var _a;

  const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : "https://your.pod/mock-acl.ttl";
  const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {
    internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), {
      aclUrl: aclUrl
    })
  });
  const aclDataset = createAcl(resourceWithAclUrl);
  const resourceWithResourceAcl = internal_setAcl(resourceWithAclUrl, {
    resourceAcl: aclDataset,
    fallbackAcl: null
  });
  return resourceWithResourceAcl;
}
/**
 *
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * [[SolidDataset]] with a fallback ACL (Access Control List).
 * ```
 *
 * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].
 *
 * @param resource The Resource to mock up with new fallback ACL.
 * @returns The input Resource with an empty fallback ACL attached.
 * @since 0.2.0
 */


function addMockFallbackAclTo(resource) {
  const containerUrl = internal_getContainerPath(getSourceIri(resource));
  const aclUrl = containerUrl + ".acl";
  const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);
  const aclDataset = createAcl(mockContainer);
  const resourceWithFallbackAcl = internal_setAcl(internal_cloneResource(resource), {
    resourceAcl: null,
    fallbackAcl: aclDataset
  });
  return resourceWithFallbackAcl;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const rdfJsDataset = _dataset.default.dataset;
/**
 * Convert an RDF/JS Dataset into a [[SolidDataset]]
 *
 * Parse an RDF/JS
 * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore},
 * into a [[SolidDataset]]. Note that, when saving the returned SolidDataset to
 * a Solid Pod, only Quads in the Default Graph will be stored.
 *
 * @param rdfJsDataset The source RDF/JS Dataset.
 * @returns A [[SolidDataset]] containing the same data as the given RDF/JS Dataset.
 * @since 1.9.0
 */

function fromRdfJsDataset(rdfJsDataset) {
  const dataset = {
    graphs: {
      default: {}
    },
    type: "Dataset"
  };
  const quads = Array.from(rdfJsDataset);
  const chainBlankNodes = getChainBlankNodes(quads); // Quads with chain Blank Nodes as their Subject will be parsed when those
  // Blank Nodes are referred to in an Object. See `addRdfJsQuadToObjects`.

  const quadsWithoutChainBlankNodeSubjects = quads.filter(quad => chainBlankNodes.every(chainBlankNode => !chainBlankNode.equals(quad.subject)));
  return quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {
    otherQuads: quads,
    chainBlankNodes: chainBlankNodes
  }), dataset);
}
/**
 * Convert a [[SolidDataset]] into an RDF/JS Dataset
 *
 * Export a [[SolidDataset]] into an RDF/JS
 * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore}.
 *
 * @param set A [[SolidDataset]] to export into an RDF/JS Dataset.
 * @param options Optional parameter that allows you to pass in your own RDF/JS DataFactory or DatasetCoreFactory.
 * @returns An RDF/JS Dataset containing the data from the given SolidDataset.
 * @since 1.9.0
 */


function toRdfJsDataset(set, options = {}) {
  var _a, _b;

  const datasetFactory = (_b = (_a = options.datasetFactory) === null || _a === void 0 ? void 0 : _a.dataset) !== null && _b !== void 0 ? _b : rdfJsDataset;
  return datasetFactory(toRdfJsQuads(set, options));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function getProfileFromProfileDoc(profileDataset, webId) {
  const profile = getThing(profileDataset, webId);

  if (profile === null) {
    throw new Error(`Profile document [${getSourceUrl(profileDataset)}] does not include WebID [${webId}]`);
  }

  return profile;
}
/**
 * Set a JWKS IRI associated with a WebID in a profile document.
 *
 * @param profileDocument The profile document dataset.
 * @param webId The WebID associated with the profile document.
 * @param jwksIri The JWKS IRI to be set.
 * @returns A modified copy of the profile document, with the JWKS IRI set.
 * @since 1.12.0
 */


function setProfileJwks(profileDocument, webId, jwksIri) {
  return setThing(profileDocument, setIri(getProfileFromProfileDoc(profileDocument, webId), security.publicKey, jwksIri));
}
/**
 * Look for a JWKS IRI optionally advertized from a profile document.
 *
 * @param profileDocument The profile document.
 * @param webId The WebID featured in the profile document.
 * @returns The JWKS IRI associated with the WebID, if any.
 * @since 1.12.0
 */


function getProfileJwksIri(profileDocument, webId) {
  return getUrl(getProfileFromProfileDoc(profileDocument, webId), security.publicKey);
}

const isJwks = jwksDocument => {
  return typeof jwksDocument.keys !== "undefined";
};
/**
 * Fetch a JWKS at a given IRI, and add the given JWK to the obtained key set.
 *
 * @param jwk The JWK to add to the set.
 * @param jwksIri The IRI where the key set should be looked up.
 * @param options @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Promise resolving to a JWKS where the given key has been added.
 * @since 1.12.0
 */


async function addJwkToJwks(jwk, jwksIri, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const jwksResponse = await config.fetch(jwksIri);

  if (!jwksResponse.ok) {
    throw new Error(`Fetching [${jwksIri}] returned an error: ${jwksResponse.status} ${jwksResponse.statusText}`);
  }

  try {
    const jwksDocument = await jwksResponse.json();

    if (!isJwks(jwksDocument)) {
      throw new Error(`[${jwksIri}] does not dereference to a valid JWKS: ${JSON.stringify(jwksDocument)}`);
    }

    return {
      keys: [...jwksDocument.keys, jwk]
    };
  } catch (e) {
    throw new Error(`Parsing the document at [${jwksIri}] failed: ${e}`);
  }
}
/**
 * Adds a public key to the JWKS listed in the profile associated to the given WebID.
 * Retrieves the profile document for the specified WebID and looks up the associated
 * JWKS. Having added the given key to the JWKS, this function overwrites the
 * previous JWKS so that the new version is saved. This assumes the JWKS is hosted
 * at a read-write IRI, such as in a Solid Pod.
 *
 * @param publicKey The public key value to set.
 * @param webId The WebID whose profile document references the key set to which we wish to add the specified public key.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @since 1.12.0
 */


async function addPublicKeyToProfileJwks(publicKey, webId, options = internal_defaultFetchOptions) {
  const profileDataset = await getSolidDataset(webId, {
    fetch: options.fetch
  });

  if (profileDataset === null) {
    throw new Error(`The profile document associated with WebID [${webId}] could not be retrieved.`);
  }

  const jwksIri = getProfileJwksIri(profileDataset, webId);

  if (jwksIri === null) {
    throw new Error(`No key set is declared for the property [${security.publicKey}] in the profile of [${webId}]`);
  }

  const updatedJwks = await addJwkToJwks(publicKey, jwksIri, options);
  return overwriteFile(jwksIri, new Blob([JSON.stringify(updatedJwks)]), {
    contentType: "application/json",
    fetch: options.fetch
  });
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * List all the alternative profiles IRI found in a given WebID profile.
 *
 * Note that some of these profiles may be private, and you may not have access to
 * the resulting resource.
 *
 * @param webId The WebID of the user's whose alternative profiles you are discovering.
 * @param webIdProfile The WebID profile obtained dereferencing the provided WebID.
 * @returns A list of URLs of the user's alternative profiles.
 * @since 1.20.0
 */


function getAltProfileUrlAllFrom(webId, webIdProfile) {
  const webIdThing = getThing(webIdProfile, webId);
  const altProfileUrlAll = getThingAll(webIdProfile).filter(thing => getIriAll(thing, foaf.primaryTopic).length > 0).map(asIri).concat(webIdThing ? getIriAll(webIdThing, foaf.isPrimaryTopicOf) : []).filter(profileIri => profileIri !== getSourceIri(webIdProfile)); // Deduplicate the results.

  return Array.from(new Set(altProfileUrlAll));
}

async function getProfileAll(webId, options = internal_defaultFetchOptions) {
  var _a, _b;

  const authFetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : fetch;
  const webIdProfile = (_b = options.webIdProfile) !== null && _b !== void 0 ? _b : await getSolidDataset(webId, {
    fetch: crossFetch.fetch
  });
  const altProfileAll = (await Promise.allSettled(getAltProfileUrlAllFrom(webId, webIdProfile).map(uniqueProfileIri => getSolidDataset(uniqueProfileIri, {
    fetch: authFetch
  }))) // Ignore the alternative profiles lookup which failed.
  ).filter(result => result.status === "fulfilled").map(successfulResult => successfulResult.value);
  return {
    webIdProfile,
    altProfileAll
  };
}
/**
 * Discover the Pods an agent advertises for in their profile resources. Both the
 * agent's WebID and alternative profiles are fetched. Note that this function will
 * only return URLs of Pods linked to using the `pim:storage`, i.e. a triple
 * looking like <myWebid, pim:storage, myPodUrl> should appear in the profile
 * resources.
 *
 * @param webId The WebID of the agent whose Pods should be discovered
 * @param options Optional parameter
 * - `options.fetch`: An alternative `fetch` function to make the HTTP request,
 *    compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns a Promise resolving to an array containing the URLs of all the Pods
 * linked from the agent's profile resource using the `pim:storage` predicate.
 * @since 1.18.0
 */


async function getPodUrlAll(webId, options = internal_defaultFetchOptions) {
  const profiles = await getProfileAll(webId, options);
  return getPodUrlAllFrom(profiles, webId);
}
/**
 * Discover the Pods advertised for in the provided profile resources. Note that
 * this function will only return URLs of Pods linked to using the `pim:storage`
 * predicate, i.e. a triple looking like <myWebid, pim:storage, myPodUrl>
 * should appear in the profile resources.
 *
 * @param profiles The profile resources in which the Pods should be discovered
 * @param webId The WebID of the agent whose Pods should be discovered
 * @returns An array containing the URLs of all the Pods linked from the agent's
 * profile resource using the `pim:storage` predicate.
 * @since 1.18.0
 */


function getPodUrlAllFrom(profiles, webId) {
  const result = new Set();
  [profiles.webIdProfile, ...profiles.altProfileAll].forEach(profileResource => {
    const webIdThing = getThing(profileResource, webId);

    if (webIdThing !== null) {
      getIriAll(webIdThing, pim.storage).forEach(podIri => result.add(podIri));
    }
  });
  return Array.from(result);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const prefixes = {
  acl: "http://www.w3.org/ns/auth/acl#",
  acp: "http://www.w3.org/ns/solid/acp#",
  cc: "http://creativecommons.org/ns#",
  cert: "http://www.w3.org/ns/auth/cert#",
  csvw: "http://www.w3.org/ns/csvw#",
  current: "#",
  dc: "http://purl.org/dc/terms/",
  dcam: "http://purl.org/dc/dcam/",
  dcat: "http://www.w3.org/ns/dcat#",
  dctype: "http://purl.org/dc/dcmitype/",
  foaf: "http://xmlns.com/foaf/0.1/",
  ldp: "http://www.w3.org/ns/ldp#",
  owl: "http://www.w3.org/2002/07/owl#",
  posixstat: "http://www.w3.org/ns/posix/stat#",
  rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  rdfs: "http://www.w3.org/2000/01/rdf-schema#",
  schema: "https://schema.org/",
  shacl: "http://www.w3.org/ns/shacl#",
  skos: "http://www.w3.org/2004/02/skos/core#",
  skosxl: "http://www.w3.org/2008/05/skos-xl#",
  solid: "http://www.w3.org/ns/solid/terms#",
  swapdoc: "http://www.w3.org/2000/10/swap/pim/doc#",
  ui: "http://www.w3.org/ns/ui#",
  vann: "http://purl.org/vocab/vann/",
  vcard: "http://www.w3.org/2006/vcard/ns#",
  ws: "http://www.w3.org/ns/pim/space#",
  xsd: "http://www.w3.org/2001/XMLSchema#"
};
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * A function to serialise a Solid Dataset as Turtle
 *
 * @param dataset The Dataset to serialize as Turtle
 * @param options.prefixes The Prefixes to use for Turtle serialisation (defaulting to a set of well known prefixes)
 * @param options.thing Restricts serialisation to the part of a dataset related to the thing
 * @returns RDF serialised as Turtle
 * @since 1.20.0
 */

async function solidDatasetAsTurtle(dataset, options) {
  const {
    prefixes: prefixes$1 = prefixes,
    thing
  } = Object.assign({}, options);
  const writer = new _n.Writer({
    format: "application/turtle",
    prefixes: prefixes$1
  });
  const subject = thing ? new _n.NamedNode(thing) : undefined; // If the subject is undefined, all the triples match.

  for (const quad of toRdfJsDataset(dataset).match(subject)) {
    writer.addQuad(quad);
  }

  return new Promise((resolve, reject) => {
    writer.end((error, result) => {
      /* istanbul ignore next */
      if (error) {
        return reject(error);
      }

      resolve(result);
    });
  });
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function internal_getAcr(resource) {
  if (!hasAccessibleAcr(resource)) {
    throw new Error(`An Access Control Resource for [${getSourceUrl(resource)}] is not available. This could be because the current user is not allowed to see it, or because their Pod Server does not support Access Control Resources.`);
  }

  return resource.internal_acp.acr;
}
/** @hidden */


function internal_setAcr(resource, acr) {
  return Object.assign(internal_cloneResource(resource), {
    internal_acp: Object.assign(Object.assign({}, resource.internal_acp), {
      acr: acr
    })
  });
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new [[Control]].
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_createControl(options) {
  let control = createThing(options);
  control = setIri(control, rdf.type, acp.AccessControl);
  return control;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Find an [[Control]] with a given URL in a given Resource with an Access Control Resource.
 *
 * @returns The requested Access Control, or `null` if it could not be found.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_getControl(withAccessControlResource, url, options) {
  const acr = internal_getAcr(withAccessControlResource);
  const foundThing = getThing(acr, url, options);

  if (foundThing === null || !getIriAll(foundThing, rdf.type).includes(acp.AccessControl)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[Control]]s in the Access Control Resource of a given Resource.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_getControlAll(withAccessControlResource, options) {
  const acr = internal_getAcr(withAccessControlResource);
  const foundThings = getThingAll(acr, options);
  const explicitAccessControl = foundThings.filter(foundThing => getIriAll(foundThing, rdf.type).includes(acp.AccessControl));
  const implicitAccessControl = foundThings.filter(foundThing => getIriAll(foundThing, acp.accessControl).length > 0).map(thingWithAccessControl => {
    // The initial filter ensures that at least one AccessControl will be found.
    const controlIri = getIriAll(thingWithAccessControl, acp.accessControl)[0]; // The found control is only an object in the current dataset, so we create the
    // associated thing in order to possibly make it a subject.

    return createThing({
      url: controlIri
    });
  });
  return explicitAccessControl.concat(implicitAccessControl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert an [[Control]] into the [[AccessControlResource]] of a Resource, replacing previous
 * instances of that Access Control.
 *
 * @param withAccessControlResource A Resource with the Access Control Resource into which to insert an Access Control.
 * @param control The Control to insert into the Access Control Resource.
 * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, but with the given Access Control.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_setControl(withAccessControlResource, control) {
  const acr = internal_getAcr(withAccessControlResource);
  const updatedAcr = setThing(acr, control);
  const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an [[Control]] such that that Policy applies to the Resource to which
 * the [[Control]] is linked.
 *
 * @param accessControl The [[Control]] to which the Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_addPolicyUrl(accessControl, policyUrl) {
  return addIri(accessControl, acp.apply, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all Policies that apply to the Resource to which the given [[Control]] is linked, and
 * which can be removed by anyone with Write access to the Access Control Resource that contains the
 * [[Control]].
 *
 * @param accessControl The [[Control]] of which to get the Policies.
 * @returns The Policies that are listed in this [[Control]] as applying to the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_getPolicyUrlAll(accessControl) {
  return getIriAll(accessControl, acp.apply);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove a given Policy that applies to the Resource to which the given [[Control]] is linked,
 * and which can be removed by anyone with Write access to the Access Control Resource that contains
 * the Access Control.
 *
 * @param accessControl The [[Control]] of which to remove the Policies.
 * @param policyUrl URL of the Policy that should no longer apply to the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given Policy removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removePolicyUrl(accessControl, policyUrl) {
  return removeIri(accessControl, acp.apply, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove all Policies that apply to the Resource to which the given [[Control]] is linked, and
 * which can be removed by anyone with Write access to the Access Control Resource that contains the
 * [[Control]].
 *
 * @param accessControl The [[Control]] of which to remove the Policies.
 * @returns A new [[Control]] equal to the given [[Control]], but with all Policies removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removePolicyUrlAll(accessControl) {
  return removeAll(accessControl, acp.apply);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an [[Control]] such that that Policy applies to the children of the
 * Resource to which the [[Control]] is linked.
 *
 * @param accessControl The [[Control]] to which the Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the children of the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it as a Member Policy.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_addMemberPolicyUrl(accessControl, policyUrl) {
  return addIri(accessControl, acp.applyMembers, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all Policies that apply to the children of the Resource to which the given [[Control]] is
 * linked, and which can be removed by anyone with Write access to the Access Control Resource that
 * contains the [[Control]].
 *
 * @param accessControl The [[Control]] of which to get the Policies.
 * @returns The Policies that are listed in this [[Control]] as applying to the children of the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_getMemberPolicyUrlAll(accessControl) {
  return getIriAll(accessControl, acp.applyMembers);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove a given Policy that applies to the children of the Resource to which the given Access
 * Control is linked, and which can be removed by anyone with Write access to the Access Control
 * Resource that contains the Access Control.
 *
 * @param accessControl The [[Control]] of which to remove the Member Policy.
 * @param policyUrl URL of the Member Policy that should no longer apply to the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given Member Policy removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removeMemberPolicyUrl(accessControl, policyUrl) {
  return removeIri(accessControl, acp.applyMembers, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove all Policies that apply to the children of the Resource to which the given Access Control
 * is linked, and which can be removed by anyone with Write access to the Access Control Resource
 * that contains the Access Control.
 *
 * @param accessControl The [[Control]] of which to remove the Member Policies.
 * @returns A new [[Control]] equal to the given [[Control]], but with all Member Policies removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removeMemberPolicyUrlAll(accessControl) {
  return removeAll(accessControl, acp.applyMembers);
}

function internal_getInitialisedControl(resourceWithAcr) {
  const allControls = internal_getControlAll(resourceWithAcr);
  return allControls.length === 0 ? internal_createControl() : allControls[0];
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a Resource, check whether it is governed by Access Policies.
 * (Specifically, a Resource that is governed by Access Policies will refer to exactly one Access
 * Control Resource, and expose that to users who are allowed to see or modify access to the given
 * Resource.)
 *
 * @param resource Resource which may or may not be governed by Access Policies.
 * @returns True if the Resource refers to an Access Control Resource and is hence governed by Access Policies, or false if it does not.
 * @since 1.6.0
 */


function hasLinkedAcr(resource) {
  return hasServerResourceInfo(resource) && Array.isArray(resource.internal_resourceInfo.linkedResources[acp.accessControl]) && resource.internal_resourceInfo.linkedResources[acp.accessControl].length === 1;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access
 * Control Resource itself, rather than the Resource it governs.
 *
 * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Access Control Resource.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.
 * @since 1.6.0
 */


function addAcrPolicyUrl$1(resourceWithAcr, policyUrl) {
  var _a;

  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({
    url: acrUrl
  });
  acrThing = addIri(acrThing, acp.access, policyUrl);
  const updatedAcr = setThing(acr, acrThing);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to a Resource's Access Control Resource such that that
 * Policy applies to the Access Control Resources of child Resources.
 *
 * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Access Control Resources of children of the Resource.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.
 * @since 1.6.0
 */


function addMemberAcrPolicyUrl$1(resourceWithAcr, policyUrl) {
  var _a;

  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({
    url: acrUrl
  });
  acrThing = addIri(acrThing, acp.accessMembers, policyUrl);
  const updatedAcr = setThing(acr, acrThing);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to an Access Control Resource itself, rather than
 * to the Resource it governs.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.
 * @returns URLs of the Policies that govern access to the given Access Control Resource.
 * @since 1.6.0
 */


function getAcrPolicyUrlAll$1(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return [];
  }

  return getIriAll(acrThing, acp.access);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to the Access Control Resources of the Resource's
 * children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.
 * @returns URLs of the Policies that govern access to the Access Control Resources of the given Resource's children.
 * @since 1.6.0
 */


function getMemberAcrPolicyUrlAll$1(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return [];
  }

  return getIriAll(acrThing, acp.accessMembers);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to an Access Control Resource itself.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to which the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy removed from it.
 * @since 1.6.0
 */


function removeAcrPolicyUrl$1(resourceWithAcr, policyUrl) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeIri(acrThing, acp.access, policyUrl);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to the Access Control Resources of the
 * Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to whose children's ACRs the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given member ACR Policy removed from it.
 * @since 1.6.0
 */


function removeMemberAcrPolicyUrl$1(resourceWithAcr, policyUrl) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeIri(acrThing, acp.accessMembers, policyUrl);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to an Access Control Resource itself.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to which no more Policies should apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to it.
 * @since 1.6.0
 */


function removeAcrPolicyUrlAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeAll(acrThing, acp.access);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to the Access Control Resources of the Resource's
 * children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children's ACRs.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to its children's ACRs.
 * @since 1.6.0
 */


function removeMemberAcrPolicyUrlAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeAll(acrThing, acp.accessMembers);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that Resource.
 *
 * @param resourceWithAcr The Resource to which the ACR Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Resource.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy added to it.
 * @since 1.6.0
 */


function addPolicyUrl$1(resourceWithAcr, policyUrl) {
  const control = internal_getInitialisedControl(resourceWithAcr);
  const updatedControl = internal_addPolicyUrl(control, policyUrl);
  const updatedResource = internal_setControl(resourceWithAcr, updatedControl);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to a Resource's Access Control Resource such that that
 * Policy applies to that Resource's children.
 *
 * @param resourceWithAcr The Resource to whose Access Control Resource the Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Resource's children.
 * @returns A new Resource equal to the given Resource, but with the given Member Policy added to its Access Control Resource.
 * @since 1.6.0
 */


function addMemberPolicyUrl$1(resourceWithAcr, policyUrl) {
  const control = internal_getInitialisedControl(resourceWithAcr);
  const updatedControl = internal_addMemberPolicyUrl(control, policyUrl);
  const updatedResource = internal_setControl(resourceWithAcr, updatedControl);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to a Resource.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.
 * @returns URLs of the Policies that govern access to the given Resource.
 * @since 1.6.0
 */


function getPolicyUrlAll$1(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const policyUrlsByControl = controls.map(control => internal_getPolicyUrlAll(control));
  const uniquePolicyUrls = new Set();
  policyUrlsByControl.forEach(policyUrls => {
    policyUrls.forEach(url => uniquePolicyUrls.add(url));
  });
  return Array.from(uniquePolicyUrls);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to a Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.
 * @returns URLs of the Policies that govern access to the given Resource's children.
 * @since 1.6.0
 */


function getMemberPolicyUrlAll$1(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const memberPolicyUrlsByControl = controls.map(control => internal_getMemberPolicyUrlAll(control));
  const uniquePolicyUrls = new Set();
  memberPolicyUrlsByControl.forEach(policyUrls => {
    policyUrls.forEach(url => uniquePolicyUrls.add(url));
  });
  return Array.from(uniquePolicyUrls);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to a Resource.
 *
 * @param resourceWithAcr The Resource, with its Access Control Resource, to which the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy removed from it.
 * @since 1.6.0
 */


function removePolicyUrl$1(resourceWithAcr, policyUrl) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removePolicyUrl(control, policyUrl));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to the Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to whose children the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Member Policy removed from it.
 * @since 1.6.0
 */


function removeMemberPolicyUrl$1(resourceWithAcr, policyUrl) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removeMemberPolicyUrl(control, policyUrl));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to a Resource.
 *
 * @param resourceWithAcr The Resource, with its Access Control Resource, to which no more Policies should apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource.
 * @since 1.6.0
 */


function removePolicyUrlAll(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removePolicyUrlAll(control));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to the Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource's children.
 * @since 1.6.0
 */


function removeMemberPolicyUrlAll(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removeMemberPolicyUrlAll(control));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * Gets a human-readable representation of the given [[Control]] to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param resourceWithAcr The Resource with an attached Access Control Resource of which you want to get a human-readable representation.
 * @since 1.6.0
 * @deprecated
 */


function acrAsMarkdown(resourceWithAcr) {
  let markdown = `# Access controls for ${getSourceUrl(resourceWithAcr)}\n`;
  const policyUrls = getPolicyUrlAll$1(resourceWithAcr);
  const memberPolicyUrls = getMemberPolicyUrlAll$1(resourceWithAcr);
  const acrPolicyUrls = getAcrPolicyUrlAll$1(resourceWithAcr);
  const memberAcrPolicyUrls = getMemberAcrPolicyUrlAll$1(resourceWithAcr);

  if (policyUrls.length === 0 && memberPolicyUrls.length === 0 && acrPolicyUrls.length === 0 && memberAcrPolicyUrls.length === 0) {
    markdown += "\n<no policies specified yet>\n";
  }

  if (policyUrls.length > 0) {
    markdown += "\nThe following policies apply to this resource:\n- ";
    markdown += policyUrls.join("\n- ") + "\n";
  }

  if (acrPolicyUrls.length > 0) {
    markdown += "\nThe following policies apply to the access control resource for this resource:\n- ";
    markdown += acrPolicyUrls.join("\n- ") + "\n";
  }

  if (memberPolicyUrls.length > 0) {
    markdown += "\nThe following policies apply to the children of this resource:\n- ";
    markdown += memberPolicyUrls.join("\n- ") + "\n";
  }

  if (memberAcrPolicyUrls.length > 0) {
    markdown += "\nThe following policies apply to the access control resources for children of this resource:\n- ";
    markdown += memberAcrPolicyUrls.join("\n- ") + "\n";
  }

  return markdown;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


const ACP_NAMESPACE = "http://www.w3.org/ns/solid/acp#";
/** @hidden */

const ACP = {
  AccessControl: ACP_NAMESPACE.concat("AccessControl"),
  AccessControlResource: ACP_NAMESPACE.concat("AccessControlResource"),
  AuthenticatedAgent: ACP_NAMESPACE.concat("AuthenticatedAgent"),
  CreatorAgent: ACP_NAMESPACE.concat("CreatorAgent"),
  Matcher: ACP_NAMESPACE.concat("Matcher"),
  Policy: ACP_NAMESPACE.concat("Policy"),
  PublicAgent: ACP_NAMESPACE.concat("PublicAgent"),
  access: ACP_NAMESPACE.concat("access"),
  accessControl: ACP_NAMESPACE.concat("accessControl"),
  agent: ACP_NAMESPACE.concat("agent"),
  allOf: ACP_NAMESPACE.concat("allOf"),
  allow: ACP_NAMESPACE.concat("allow"),
  anyOf: ACP_NAMESPACE.concat("anyOf"),
  apply: ACP_NAMESPACE.concat("apply"),
  client: ACP_NAMESPACE.concat("client"),
  deny: ACP_NAMESPACE.concat("deny"),
  memberAccessControl: ACP_NAMESPACE.concat("memberAccessControl"),
  noneOf: ACP_NAMESPACE.concat("noneOf"),
  vc: ACP_NAMESPACE.concat("vc")
};
/** @hidden */

const ACL_NAMESPACE = "http://www.w3.org/ns/auth/acl#";
/** @hidden */

const ACL = {
  Append: ACL_NAMESPACE.concat("Append"),
  Control: ACL_NAMESPACE.concat("Control"),
  Read: ACL_NAMESPACE.concat("Read"),
  Write: ACL_NAMESPACE.concat("Write")
};
/** @hidden */

const VC_ACCESS_GRANT = "http://www.w3.org/ns/solid/vc#SolidAccessGrant";
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */

function getAccessControlResourceThing(resource) {
  const acr = internal_getAcr(resource);
  const acrUrl = getSourceUrl(acr);
  return getThing(acr, acrUrl);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


const DEFAULT_ACCESS_CONTROL = "defaultAccessControl";
/** @hidden */

const DEFAULT_ACR_ACCESS_CONTROL = "defaultAcrAccessControl";
/** @hidden */

const DEFAULT_MEMBER_ACCESS_CONTROL = "defaultMemberAccessControl";
/** @hidden */

const DEFAULT_MEMBER_ACR_ACCESS_CONTROL = "defaultMemberAcrAccessControl";
/** @hidden */

function getDefaultAccessControlUrl(resource, name) {
  const acr = internal_getAcr(resource);
  const acrUrl = getSourceUrl(acr);
  return acrUrl.concat("#").concat(name);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function getDefaultAccessControlThing(resource, name) {
  const acr = internal_getAcr(resource);
  const defaultAccessControlUrl = getDefaultAccessControlUrl(resource, name);
  const accessControlThing = getThing(acr, defaultAccessControlUrl);

  if (accessControlThing === null || typeof accessControlThing === "undefined") {
    return createThing({
      url: defaultAccessControlUrl
    });
  }

  return accessControlThing;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function getModes(policy, type) {
  const modes = getIriAll(policy, type);
  return {
    read: modes.includes(ACL.Read),
    append: modes.includes(ACL.Append),
    write: modes.includes(ACL.Write),
    controlRead: false,
    controlWrite: false
  };
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @hidden
 *
 * Internal function that attaches an ACR to a Resource. Prefer using this than
 * setting the internal values manually (easier to refactor when changing the internals).
 */


function setAcr(resource, acr) {
  return Object.assign(internal_cloneResource(resource), {
    internal_acp: {
      acr
    }
  });
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function setModes(policy, modes, type) {
  let newPolicy = removeAll(policy, type);

  if (modes.read || modes.controlRead) {
    newPolicy = addIri(newPolicy, type, ACL.Read);
  }

  if (modes.append) {
    newPolicy = addIri(newPolicy, type, ACL.Append);
  }

  if (modes.write || modes.controlWrite) {
    newPolicy = addIri(newPolicy, type, ACL.Write);
  }

  return newPolicy;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const DEFAULT_VC_POLICY_NAME = "defaultVcPolicy";
const DEFAULT_VC_MATCHER_NAME = "defaultVcMatcher";
/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Set the maximum access modes that are allowed for a VC holder for a given resource.
 * If the resource owner issued an Access Grant for the resource, the agent that
 * has been granted access will have at most the permissions set by this function.
 * The Access Grant may be more restrictive.
 *
 * Note that additional access may have been set if the ACR has been manipulated
 * not using this library, which is currently out of scope. In this case, the access
 * set by this function may not apply.
 *
 * @param resourceWithAcr The resource for which the access modes are being set for VC holders.
 * @param access The access modes to set. Setting a mode to `true` will enable it, to `false`
 * will disable it, and to `undefined` will leave it unchanged compared to what was previously
 * set.
 * @returns A copy of the resource and its attached ACR, updated to the new access modes.
 * @since 1.17.0
 */

function setVcAccess(resourceWithAcr, access) {
  var _a, _b;

  let acr = internal_getAcr(resourceWithAcr);
  const defaultVcPolicyIri = `${getSourceIri(acr)}#${DEFAULT_VC_POLICY_NAME}`;
  const defaultVcMatcherIri = `${getSourceIri(acr)}#${DEFAULT_VC_MATCHER_NAME}`;
  let accessControl = getDefaultAccessControlThing(resourceWithAcr, "defaultAccessControl");
  let acrThing = (_a = getAccessControlResourceThing(resourceWithAcr)) !== null && _a !== void 0 ? _a : buildThing({
    url: getSourceIri(acr)
  }).addIri(ACP.accessControl, accessControl).build();

  if (!getIriAll(acrThing, ACP.accessControl).includes(asIri(accessControl))) {
    // Case when the ACR Thing existed, but did not include a link to the default Access Control.
    acrThing = addIri(acrThing, ACP.accessControl, accessControl);
  }

  let vcPolicy = getThing(acr, defaultVcPolicyIri);

  if (vcPolicy === null) {
    // If the policy does not exist, create it and link the default Access Control to it.
    vcPolicy = buildThing({
      url: defaultVcPolicyIri
    }).addIri(rdf.type, ACP.Policy).addIri(ACP.anyOf, defaultVcMatcherIri).build();
    accessControl = addIri(accessControl, ACP.apply, vcPolicy);
  }

  const vcMatcher = (_b = getThing(acr, defaultVcMatcherIri)) !== null && _b !== void 0 ? _b : buildThing({
    url: defaultVcMatcherIri
  }).addIri(rdf.type, ACP.Matcher).addIri(ACP.vc, VC_ACCESS_GRANT).build();
  const currentModes = getModes(vcPolicy, ACP.allow); // Only change the modes which are set in `access`, and preserve the others.

  vcPolicy = setModes(vcPolicy, Object.assign(Object.assign({}, currentModes), access), ACP.allow); // Write the changed access control, policy and matchers in the ACR

  acr = [acrThing, accessControl, vcPolicy, vcMatcher].reduce(setThing, acr);
  return setAcr(resourceWithAcr, acr);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const DEFAULT_NO_ACCESS = {
  read: false,
  append: false,
  write: false,
  controlRead: false,
  controlWrite: false
};

const linkExists = (subject, predicate, object) => getIriAll(subject, predicate).includes(asIri(object)); // TODO: It should be possible to write a `chainExists` function, taking in a chain
// of Thing, predicate, Thing, predicate... and checks whether such chain exists
// in a given dataset. It would make the following function much easier to read,
// instead of checking at each link that it isn't null and it is connected to the
// next link.

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the maximum access modes that are allowed for a VC holder for a given resource.
 * If the resource owner issued an Access Grant for the resource, the agent that
 * has been granted access will have at most the permissions returned by this function.
 * The Access Grant may be more restrictive.
 *
 * Note that only the modes set using [[setVcAccess]] will be returned by this function.
 * Additional access may have been set if the ACR has been manipulated not using this
 * library, which is currently out of scope.
 *
 * @param resourceWithAcr The resource for which the VC access modes are looked up.
 * @returns The access modes available to a VC holder.
 * @since 1.17.0
 */


function getVcAccess(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const accessControl = getDefaultAccessControlThing(resourceWithAcr, "defaultAccessControl");
  const acrThing = getAccessControlResourceThing(resourceWithAcr);

  if (acrThing === null || !linkExists(acrThing, ACP.accessControl, accessControl)) {
    return DEFAULT_NO_ACCESS;
  }

  const defaultVcPolicyIri = `${getSourceIri(acr)}#${DEFAULT_VC_POLICY_NAME}`;
  const vcPolicy = getThing(acr, defaultVcPolicyIri);

  if (vcPolicy === null || !linkExists(accessControl, ACP.apply, vcPolicy)) {
    return DEFAULT_NO_ACCESS;
  }

  const defaultVcMatcherIri = `${getSourceIri(acr)}#${DEFAULT_VC_MATCHER_NAME}`;
  const vcMatcher = getThing(acr, defaultVcMatcherIri);

  if (vcMatcher === null || !linkExists(vcPolicy, ACP.anyOf, vcMatcher)) {
    return DEFAULT_NO_ACCESS;
  }

  return getModes(vcPolicy, ACP.allow);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a SolidDataset and its associated Access Control Resource (if available to the current user).
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A SolidDataset and the ACR that applies to it, if available to the authenticated user.
 * @since 1.6.0
 */


async function getSolidDatasetWithAcr(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const solidDataset = await getSolidDataset(urlString, config);
  const acp = await fetchAcr(solidDataset, config);
  return Object.assign(Object.assign({}, solidDataset), acp);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a file and its associated Access Control Resource (if available to the current user).
 *
 * @param url URL of the file to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A file and the ACR that applies to it, if available to the authenticated user.
 * @since 1.6.0
 */


async function getFileWithAcr(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const file = await getFile(urlString, config);
  const acp = await fetchAcr(file, config);
  return Object.assign(file, acp);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Retrieve information about a Resource and its associated Access Control Resource (if available to
 * the current user), without fetching the Resource itself.
 *
 * @param url URL of the Resource about which to fetch its information.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Metadata describing a Resource, and the ACR that applies to it, if available to the authenticated user.
 * @since 1.6.0
 */


async function getResourceInfoWithAcr(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const resourceInfo = await getResourceInfo(urlString, config);
  const acp = await fetchAcr(resourceInfo, config);
  return Object.assign(Object.assign({}, resourceInfo), acp);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a SolidDataset, and:
 * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to
 *                                          the current user), and all the Access Control Policies
 *                                          referred to therein, if available to the current user.
 * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current
 *                                          user), or its Fallback ACL if it does not exist.
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A SolidDataset and either the ACL access data or the ACR access data, if available to the current user.
 * @since 1.6.0
 */


async function getSolidDatasetWithAccessDatasets(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const solidDataset = await getSolidDataset(urlString, config);

  if (hasAccessibleAcl(solidDataset)) {
    const acl = await internal_fetchAcl(solidDataset, config);
    return internal_setAcl(solidDataset, acl);
  } else {
    const acr = await fetchAcr(solidDataset, config);
    return Object.assign(Object.assign({}, solidDataset), acr);
  }
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a File, and:
 * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to
 *                                          the current user), and all the Access Control Policies
 *                                          referred to therein, if available to the current user.
 * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current
 *                                          user), or its Fallback ACL if it does not exist.
 *
 * @param url URL of the File to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A File and either the ACL access data or the ACR access data, if available to the current user.
 * @since 1.6.0
 */


async function getFileWithAccessDatasets(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const file = await getFile(urlString, config);

  if (hasAccessibleAcl(file)) {
    const acl = await internal_fetchAcl(file, config);
    return internal_setAcl(file, acl);
  } else {
    const acr = await fetchAcr(file, config);
    return Object.assign(file, acr);
  }
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch information about a Resource, and:
 * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to
 *                                          the current user), and all the Access Control Policies
 *                                          referred to therein, if available to the current user.
 * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current
 *                                          user), or its Fallback ACL if it does not exist.
 *
 * @param url URL of the Resource information about which to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Information about a Resource and either the ACL access data or the ACR access data, if available to the current user.
 * @since 1.6.0
 */


async function getResourceInfoWithAccessDatasets(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const resourceInfo = await getResourceInfo(urlString, config);

  if (hasAccessibleAcl(resourceInfo)) {
    const acl = await internal_fetchAcl(resourceInfo, config);
    return internal_setAcl(resourceInfo, acl);
  } else {
    const acr = await fetchAcr(resourceInfo, config);
    return Object.assign(Object.assign({}, resourceInfo), acr);
  }
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Save a Resource's Access Control Resource.
 *
 * @param resource Resource with an Access Control Resource that should be saved.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @since 1.6.0
 */


async function saveAcrFor(resource, options = internal_defaultFetchOptions) {
  const acr = internal_getAcr(resource);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const savedAcr = await saveSolidDatasetAt(getSourceUrl(acr), acr, config);
  return internal_setAcr(resource, savedAcr);
}
/**
 * @param resource Resource of which to check whether it has an Access Control Resource attached.
 * @returns Boolean representing whether the given Resource has an Access Control Resource attached for use in e.g. [[getPolicyUrlAll]].
 * @since 1.6.0
 */


function hasAccessibleAcr(resource) {
  return typeof resource.internal_acp === "object" && resource.internal_acp !== null && typeof resource.internal_acp.acr === "object" && resource.internal_acp.acr !== null;
}

async function fetchAcr(resource, options) {
  let acrUrl = undefined;

  if (hasLinkedAcr(resource)) {
    // Whereas a Resource can generally have multiple linked Resources for the same relation,
    // it can only have one Access Control Resource for that ACR to be valid.
    // Hence the accessing of [0] directly:
    acrUrl = resource.internal_resourceInfo.linkedResources[acp.accessControl][0];
  } else if (hasAccessibleAcl(resource)) {
    // The ACP proposal will be updated to expose the Access Control Resource
    // via a Link header with rel="acl", just like WAC. That means that if
    // an ACL is advertised, we can still fetch its metadata — if that indicates
    // that it's actually an ACP Access Control Resource, then we can fetch that
    // instead.
    const aclResourceInfo = await getResourceInfo(resource.internal_resourceInfo.aclUrl, options);

    if (isAcr(aclResourceInfo)) {
      acrUrl = getSourceUrl(aclResourceInfo);
    }
  } // If the Resource doesn't advertise an ACR via the old Link header,
  // nor via a rel="acl" header, then return, indicating that no ACR could be
  // fetched:


  if (typeof acrUrl !== "string") {
    return {
      internal_acp: {
        acr: null
      }
    };
  }

  let acr;

  try {
    acr = await getSolidDataset(acrUrl, options);
  } catch (e) {
    return {
      internal_acp: {
        acr: null
      }
    };
  }

  const acrDataset = Object.assign(Object.assign({}, acr), {
    accessTo: getSourceUrl(resource)
  });
  const acpInfo = {
    internal_acp: {
      acr: acrDataset
    }
  };
  return acpInfo;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * To make it easy to fetch all the relevant Access Policy Resources,
 * this function returns all referenced Access Policy Resources referenced in an
 * Access Control Resource.
 * In other words, if Access Controls refer to different Policies in the same
 * Access Policy Resource, this function will only return that Access Policy
 * Resource's URL once.
 *
 * @param withAcr A Resource with an Access Control Resource attached.
 * @returns List of all unique Access Policy Resources that are referenced in the given Access Control Resource.
 * @since 1.6.0
 */


function getReferencedPolicyUrlAll(withAcr) {
  const policyUrls = getPolicyUrlAll$1(withAcr).map(normalizeServerSideIri).concat(getMemberPolicyUrlAll$1(withAcr).map(normalizeServerSideIri)).concat(getAcrPolicyUrlAll$1(withAcr).map(normalizeServerSideIri)).concat(getMemberAcrPolicyUrlAll$1(withAcr).map(normalizeServerSideIri));
  const uniqueUrls = Array.from(new Set(policyUrls));
  return uniqueUrls;
}
/**
 * Verify whether the access to the given resource is controlled using the ACP
 * system.
 * @param resource The target resource
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns True if the access to the resource is controlled using ACP, false otherwise.
 * @since 1.14.0.
 */


async function isAcpControlled(resource, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(resource);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const resourceInfo = await getResourceInfo(urlString, config);
  return hasAccessibleAcr(await fetchAcr(resourceInfo, config));
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a Resource, find out the URL of its governing Access Control Resource.
 *
 * @param resource Resource which should be governed by Access Policies.
 * @returns The URL of the Access Control Resource, or undefined if not ACR is found.
 * @since 1.15.0
 */


function getLinkedAcrUrl(resource) {
  if (!hasServerResourceInfo(resource)) {
    return undefined;
  } // Two rels types are acceptable to indicate a link to an ACR.


  const acrLinks = [acp.accessControl, "acl"].map(rel => {
    if (Array.isArray(resource.internal_resourceInfo.linkedResources[rel]) && resource.internal_resourceInfo.linkedResources[rel].length === 1) {
      return resource.internal_resourceInfo.linkedResources[rel][0];
    }
  });
  return acrLinks.find(x => x !== undefined);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * NOTE: Don't export for now (i.e. if exported, should this be `isAcpRule()` so
 * as not to clash with `isAclRule()`.
 *
 * @param thing the [[Thing]] to check to see if it's an ACP rule or not
 */


function isRule(thing) {
  return getIriAll(thing, rdf.type).includes(acp.Rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a rule that refines the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" rules,
 * they will not be granted access.
 *
 * Also see [[addAnyOfRuleUrl]] and [[addNoneOfRuleUrl]].
 *
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rule The rule to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new rule added.
 * @since 1.6.0
 */


function addAllOfRuleUrl(policy, rule) {
  return addIri(policy, acp.allOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a rule that refines the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" rules,
 * they will not be granted access.
 * @param policy The [[Policy]] from which the rule should be removed.
 * @param rule The rule to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the rule removed.
 * @since 1.6.0
 */


function removeAllOfRuleUrl(policy, rule) {
  return removeIri(policy, acp.allOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrites the rule refining the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" rules,
 * they will not be granted access.
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rules The rules the policy requires.
 * @returns A new [[Policy]] clone of the original one, with the "All Of" rules replaced.
 * @since 1.6.0
 */


function setAllOfRuleUrl(policy, rule) {
  return setIri(policy, acp.allOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "All Of" [[Rule]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the rules should be read.
 * @returns A list of the "All Of" [[Rule]]s
 * @since 1.6.0
 */


function getAllOfRuleUrlAll(policy) {
  return getIriAll(policy, acp.allOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a rule that extends the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" rules,
 * they will be granted access.
 *
 * Also see [[addAllOfRuleUrl]] and [[addNoneOfRuleUrl]].
 *
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rule The rule to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new rule added.
 * @since 1.6.0
 */


function addAnyOfRuleUrl(policy, rule) {
  return addIri(policy, acp.anyOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a rule that extends the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" rules,
 * they will be granted access.
 * @param policy The [[Policy]] from which the rule should be removed.
 * @param rule The rule to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the rule removed.
 * @since 1.6.0
 */


function removeAnyOfRuleUrl(policy, rule) {
  return removeIri(policy, acp.anyOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the rule extending the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" rules,
 * they will be granted access.
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rules The rules the policy accepts.
 * @returns A new [[Policy]] clone of the original one, with the "Any Of" rules replaced.
 * @since 1.6.0
 */


function setAnyOfRuleUrl(policy, rule) {
  return setIri(policy, acp.anyOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "Any Of" [[Rule]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the rules should be read.
 * @returns A list of the "Any Of" [[Rule]]s
 * @since 1.6.0
 */


function getAnyOfRuleUrlAll(policy) {
  return getIriAll(policy, acp.anyOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a rule that restricts the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the forbidden rules,
 * they will **not** be granted access.
 *
 * Also see [[addAllOfRuleUrl]] and [[addAnyOfRuleUrl]].
 *
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rule The rule to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new rule added.
 * @since 1.6.0
 */


function addNoneOfRuleUrl(policy, rule) {
  return addIri(policy, acp.noneOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a rule that restricts the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the forbidden rules,
 * they will **not** be granted access.
 * @param policy The [[Policy]] from which the rule should be removed.
 * @param rule The rule to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the rule removed.
 * @since 1.6.0
 */


function removeNoneOfRuleUrl(policy, rule) {
  return removeIri(policy, acp.noneOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set the rules restrincting the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "None Of" rules,
 * they will not be granted access.
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rules The rules the policy accepts.
 * @returns A new [[Policy]] clone of the original one, with the "Any Of" rules replaced.
 * @since 1.6.0
 */


function setNoneOfRuleUrl(policy, rule) {
  return setIri(policy, acp.noneOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "None Of" [[Rule]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the rules should be read.
 * @returns A list of the forbidden [[Rule]]s
 * @since 1.6.0
 */


function getNoneOfRuleUrlAll(policy) {
  return getIriAll(policy, acp.noneOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[Rule]].
 *
 * @param url URL that identifies this [[Rule]].
 * @since 1.6.0
 */


function createRule(url) {
  const stringUrl = internal_toIriString(url);
  let ruleThing = createThing({
    url: stringUrl
  });
  ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);
  return ruleThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[ResourceRule]] for the given Resource.
 *
 * @param resourceWithAcr The Resource to which the new Rule is to apply.
 * @param name Name that identifies this [[Rule]].
 * @since 1.6.0
 */


function createResourceRuleFor(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const url = new URL(getSourceUrl(acr));
  url.hash = `#${name}`;
  let ruleThing = createThing({
    url: url.href
  });
  ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);
  return ruleThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[Rule]] with the given URL from an [[SolidDataset]].
 *
 * @param ruleResource The Resource that contains the given [[Rule]].
 * @param url URL that identifies this [[Rule]].
 * @returns The requested [[Rule]], if it exists, or `null` if it does not.
 * @since 1.6.0
 */


function getRule(ruleResource, url) {
  const foundThing = getThing(ruleResource, url);

  if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Rule) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourceRule]] with the given name from an Resource's Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceRule]].
 * @param name Name that identifies this [[ResourceRule]].
 * @returns The requested [[ResourceRule]], if it exists, or `null` if it does not.
 * @since 1.6.0
 */


function getResourceRule(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (foundThing === null || !isRule(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Gets the [[Rule]]s from a [[SolidDataset]].
 *
 * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.
 * @returns The [[Rule]]s contained in this resource.
 * @since 1.6.0
 */


function getRuleAll(ruleResource) {
  const things = getThingAll(ruleResource);
  return things.filter(isRule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Gets the [[ResourceRule]]s from a Resource's Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.
 * @returns The [[ResourceRule]]s contained in this Resource's Access Control Resource.
 * @since 1.6.0
 */


function getResourceRuleAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const things = getThingAll(acr);
  return things.filter(isRule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the given [[Rule]] from the given [[SolidDataset]].
 *
 * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.
 * @returns A new SolidDataset equal to the given Rule Resource, but without the given Rule.
 * @since 1.6.0
 */


function removeRule(ruleResource, rule) {
  return removeThing(ruleResource, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the given [[ResourceRule]] from the given Resource's Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.
 * @returns A new Resource equal to the given Resource, but without the given Rule in its ACR.
 * @since 1.6.0
 */


function removeResourceRule(resourceWithAcr, rule) {
  const acr = internal_getAcr(resourceWithAcr);
  let ruleToRemove;

  if (typeof rule === "string") {
    try {
      new URL(rule);
      ruleToRemove = rule;
    } catch (e) {
      // If the given Rule to remove is the name of the Rule,
      // resolve it to its full URL — developers usually refer to either the
      // Rule itself, or by its name, as they do not have access to the ACR
      // directly.
      const ruleUrl = new URL(getSourceUrl(acr));
      ruleUrl.hash = `#${rule}`;
      ruleToRemove = ruleUrl.href;
    }
  } else if (isNamedNode(rule)) {
    ruleToRemove = internal_toIriString(rule);
  } else {
    ruleToRemove = asUrl(rule);
  } // Check whether the actual Rule (i.e. with the Rule type) exists:


  const matchingRule = getResourceRule(resourceWithAcr, new URL(ruleToRemove).hash.substring(1));

  if (matchingRule === null) {
    // No such Rule exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, matchingRule);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[Rule]] into the given [[SolidDataset]], replacing previous
 * instances of that Rule.
 *
 * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.
 * @returns A new SolidDataset equal to the given Rule Resource, but with the given Rule.
 * @since 1.6.0
 */


function setRule(ruleResource, rule) {
  return setThing(ruleResource, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourceRule]] into the given Resource's Access Control Resource,
 * replacing previous instances of that Rule.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.
 * @returns A new Resource equal to the given Resource, but with the given Rule in its ACR.
 * @since 1.6.0
 */


function setResourceRule(resourceWithAcr, rule) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, rule);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * List all the agents a [[Rule]] applies **directly** to. This will not include agents
 * that are part of a group the [[Rule]] applies to, nor will it include specific agent
 * classes, such as authenticated or public agents.
 *
 * @param rule The rule from which agents are read.
 * @returns A list of the WebIDs of agents included in the rule.
 * @since 1.6.0
 */


function getAgentAll$1(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent !== acp.PublicAgent && agent !== acp.AuthenticatedAgent && agent !== acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the agents the [[Rule]] applies to with the provided agents.
 *
 * @param rule The rule for which agents are set.
 * @param agent The agent the rule should apply to.
 * @returns A copy of the input rule, applying to a different set of agents.
 * @since 1.6.0
 */


function setAgent$1(rule, agent) {
  // Preserve the special agent classes authenticated and public, which we
  // don't want to overwrite with this function.
  const isPublic = hasPublic$1(rule);
  const isAuthenticated = hasAuthenticated$1(rule);
  const isCreator = hasCreator$1(rule);
  let result = setIri(rule, acp.agent, agent); // Restore public and authenticated

  if (isPublic) {
    result = setPublic$1(result);
  }

  if (isAuthenticated) {
    result = setAuthenticated$1(result);
  }

  if (isCreator) {
    result = setCreator$1(result);
  }

  return result;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Rule]] to an additional agent.
 *
 * @param rule The [[Rule]] to be applied to an additional agent.
 * @param agent The agent the [[Rule]] should apply to.
 * @returns A copy of the [[Rule]], applying to an additional agent.
 * @since 1.6.0
 */


function addAgent$1(rule, agent) {
  return addIri(rule, acp.agent, agent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Rule]] from applying to a given agent directly. This will not
 * remove the agent from any groups the rule applies to.
 *
 * @param rule The [[Rule]] that should no longer apply to a given agent.
 * @param agent The agent the rule should no longer apply to.
 * @returns A copy of the rule, not applying to the given agent.
 * @since 1.6.0
 */


function removeAgent$1(rule, agent) {
  return removeIri(rule, acp.agent, agent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Lists all the groups a [[Rule]] applies to.
 *
 * @param rule The rule from which groups are read.
 * @returns A list of the [[URL]]'s of groups included in the rule.
 * @since 1.6.0
 * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.
 */


function getGroupAll(rule) {
  return getIriAll(rule, acp.group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the groups the [[Rule]] applies to with the provided groups.
 *
 * @param rule The rule for which groups are set.
 * @param group The group the rule should apply to.
 * @returns A copy of the input rule, applying to a different set of groups.
 * @since 1.6.0
 * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.
 */


function setGroup(rule, group) {
  return setIri(rule, acp.group, group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Rule]] to an additional group.
 *
 * @param rule The [[Rule]] to be applied to an additional group.
 * @param agent The group the [[Rule]] should apply to.
 * @returns A copy of the [[Rule]], applying to an additional group.
 * @since 1.6.0
 * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.
 */


function addGroup(rule, group) {
  return addIri(rule, acp.group, group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Rule]] from applying to a given group.
 *
 * @param rule The [[Rule]] that should no longer apply to a given group.
 * @param agent The group the rule should no longer apply to.
 * @returns A copy of the rule, not applying to the given group.
 * @since 1.6.0
 * @deprecated Access Control Policies will no longer support vcard:Group. You can re-use a Rule listing multiple Agents to get the same functionality.
 */


function removeGroup(rule, group) {
  return removeIri(rule, acp.group, group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to any agent.
 *
 * @param rule The rule checked for public access.
 * @returns Whether the rule applies to any agent or not.
 * @since 1.6.0
 */


function hasPublic$1(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent === acp.PublicAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to apply to any Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply to any agent.
 * @since 1.6.0
 */


function setPublic$1(rule) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.");
  }

  return addIri(rule, acp.agent, acp.PublicAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to no longer apply to any Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to no longer apply to any agent.
 * @since 1.6.0
 */


function removePublic$1(rule) {
  return removeIri(rule, acp.agent, acp.PublicAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to any authenticated agent.
 *
 * @param rule The rule checked for authenticated access.
 * @returns Whether the rule applies to any authenticated agent or not.
 * @since 1.6.0
 */


function hasAuthenticated$1(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent === acp.AuthenticatedAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to apply to any authenticated Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply to any authenticated Agent.
 * @since 1.6.0
 */


function setAuthenticated$1(rule) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.");
  }

  return addIri(rule, acp.agent, acp.AuthenticatedAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to no longer apply to any authenticated Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply/not apply to any authenticated agent.
 * @since 1.6.0
 */


function removeAuthenticated$1(rule) {
  return removeIri(rule, acp.agent, acp.AuthenticatedAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to the creator of the Resource.
 *
 * @param rule The rule checked for authenticated access.
 * @returns Whether the rule applies to the creator of the Resource or not.
 * @since 1.6.0
 */


function hasCreator$1(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent === acp.CreatorAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to apply to the creator of a Resource.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply to the creator of a Resource.
 * @since 1.6.0
 */


function setCreator$1(rule) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.");
  }

  return addIri(rule, acp.agent, acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to no longer apply to the creator of a Resource.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply/not apply to the creator of a Resource.
 * @since 1.6.0
 */


function removeCreator$1(rule) {
  return removeIri(rule, acp.agent, acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * List all the clients a [[Rule]] applies **directly** to. This will not include
 * specific client classes, such as public clients.
 *
 * @param rule The rule from which clients are read.
 * @returns A list of the WebIDs of clients included in the rule.
 * @since 1.6.0
 */


function getClientAll$1(rule) {
  return getIriAll(rule, acp.client).filter(client => client !== solid.PublicOidcClient);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the clients the [[Rule]] applies to with the provided Client.
 *
 * @param rule The rule for which clients are set.
 * @param client The Client the rule should apply to.
 * @returns A copy of the input rule, applying to a different set of Clients.
 * @since 1.6.0
 */


function setClient$1(rule, client) {
  // Preserve the special "any client" class, which we
  // don't want to overwrite with this function.
  const anyClientEnabled = hasAnyClient$1(rule);
  let result = setIri(rule, acp.client, client); // Restore the "any client" class

  if (anyClientEnabled) {
    result = setAnyClient$1(result);
  }

  return result;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Rule]] to an additional Client.
 *
 * @param rule The [[Rule]] to be applied to an additional Client.
 * @param client The Client the [[Rule]] should apply to.
 * @returns A copy of the [[Rule]], applying to an additional Client.
 * @since 1.6.0
 */


function addClient$1(rule, client) {
  return addIri(rule, acp.client, client);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Rule]] from applying to a given Client directly.
 *
 * @param rule The [[Rule]] that should no longer apply to a given Client.
 * @param client The Client the rule should no longer apply to.
 * @returns A copy of the rule, not applying to the given Client.
 * @since 1.6.0
 */


function removeClient$1(rule, client) {
  return removeIri(rule, acp.client, client);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to any client, i.e. all the applications
 * regardless of their identifier.
 *
 * @param rule The rule checked for authenticated access.
 * @returns Whether the rule applies to public clients.
 * @since 1.6.0
 */


function hasAnyClient$1(rule) {
  return getIriAll(rule, acp.client).filter(client => client === solid.PublicOidcClient).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Make the [[Rule]] apply to any client application.
 *
 * @param rule The rule for which clients are set.
 * @returns A copy of the rule, updated to apply to any client
 * @since 1.6.0
 */


function setAnyClient$1(rule) {
  return addIri(rule, acp.client, solid.PublicOidcClient);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Make the [[Rule]] no longer apply to any client application.
 *
 * @param rule The rule for which clients are set.
 * @returns A copy of the rule, updated to no longer apply to any client
 * @since 1.6.0
 */


function removeAnyClient$1(rule) {
  return removeIri(rule, acp.client, solid.PublicOidcClient);
}
/**
 * Gets a human-readable representation of the given [[Rule]] to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param rule The Rule to get a human-readable representation of.
 * @since 1.6.0
 */


function ruleAsMarkdown(rule) {
  let markdown = `## Rule: ${asUrl(rule)}\n\n`;
  let targetEnumeration = "";

  if (hasPublic$1(rule)) {
    targetEnumeration += "- Everyone\n";
  }

  if (hasAuthenticated$1(rule)) {
    targetEnumeration += "- All authenticated agents\n";
  }

  if (hasCreator$1(rule)) {
    targetEnumeration += "- The creator of this resource\n";
  }

  if (hasAnyClient$1(rule)) {
    targetEnumeration += "- Users of any client application\n";
  }

  const targetAgents = getAgentAll$1(rule);

  if (targetAgents.length > 0) {
    targetEnumeration += "- The following agents:\n  - ";
    targetEnumeration += targetAgents.join("\n  - ") + "\n";
  }

  const targetGroups = getGroupAll(rule);

  if (targetGroups.length > 0) {
    targetEnumeration += "- Members of the following groups:\n  - ";
    targetEnumeration += targetGroups.join("\n  - ") + "\n";
  }

  const targetClients = getClientAll$1(rule);

  if (targetClients.length > 0) {
    targetEnumeration += "- Users of the following client applications:\n  - ";
    targetEnumeration += targetClients.join("\n  - ") + "\n";
  }

  markdown += targetEnumeration.length > 0 ? "This rule applies to:\n" + targetEnumeration : "<empty>\n";
  return markdown;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @param thing the [[Thing]] to check to see if it's an ACP Policy or not
 */


function isPolicy(thing) {
  return getIriAll(thing, rdf.type).includes(acp.Policy);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[Policy]].
 *
 * @param url URL that identifies this Policy.
 * @since 1.6.0
 */


function createPolicy(url) {
  const stringUrl = internal_toIriString(url);
  let policyThing = createThing({
    url: stringUrl
  });
  policyThing = setUrl(policyThing, rdf.type, acp.Policy);
  return policyThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[Policy]] with the given URL from an [[SolidDataset]].
 *
 * @param policyResource The Resource that contains the given Policy.
 * @param url URL that identifies this Policy.
 * @returns The requested Policy, if it exists, or `null` if it does not.
 * @since 1.6.0
 */


function getPolicy(policyResource, url) {
  const foundThing = getThing(policyResource, url);

  if (foundThing === null || !isPolicy(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[Policy]]'s in a given [[SolidDataset]].
 *
 * @param policyResource The Resource that contains Access Policies.
 * @since 1.6.0
 */


function getPolicyAll(policyResource) {
  const foundThings = getThingAll(policyResource);
  const foundPolicies = foundThings.filter(thing => !isThingLocal(thing) && isPolicy(thing));
  return foundPolicies;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove the given [[Policy]] from the given [[SolidDataset]].
 *
 * @param policyResource The Resource that contains Access Policies.
 * @param policy The Policy to remove from the resource.
 * @since 1.6.0
 */


function removePolicy(policyResource, policy) {
  return removeThing(policyResource, policy);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[Policy]] into the given [[SolidDataset]], replacing previous instances of that Policy.
 *
 * @param policyResource The Resource that contains Access Policies.
 * @param policy The Policy to insert into the Resource.
 * @returns A new dataset equal to the given resource, but with the given Policy.
 * @since 1.6.0
 */


function setPolicy(policyResource, policy) {
  return setThing(policyResource, policy);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given
 * Policy, but with the given Access Modes allowed on it.
 *
 * @param policy The Policy on which to set the modes to allow.
 * @param modes Modes to allow for this Policy.
 * @since Not released yet.
 */


function setAllowModesV2(policy, modes) {
  let newPolicy = removeAll(policy, acp.allow);

  if (modes.read === true) {
    newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.read);
  }

  if (modes.append === true) {
    newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.append);
  }

  if (modes.write === true) {
    newPolicy = addIri(newPolicy, acp.allow, internal_accessModeIriStrings.write);
  }

  return newPolicy;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given
 * Policy, but with the given Access Modes allowed on it.
 *
 * @param policy The Policy on which to set the modes to allow.
 * @param modes Modes to allow for this Policy.
 * @since 1.6.0
 * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[setAllowModesV2]].
 */


function setAllowModesV1(policy, modes) {
  let newPolicy = removeAll(policy, acp.allow);

  if (modes.read === true) {
    newPolicy = addIri(newPolicy, acp.allow, acp.Read);
  }

  if (modes.append === true) {
    newPolicy = addIri(newPolicy, acp.allow, acp.Append);
  }

  if (modes.write === true) {
    newPolicy = addIri(newPolicy, acp.allow, acp.Write);
  }

  return newPolicy;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]], return which [[AccessModes]] it allows.
 *
 * @param policy The Policy for which you want to know the Access Modes it allows.
 * @since Not released yet.
 */


function getAllowModesV2(policy) {
  const allowedModes = getIriAll(policy, acp.allow);
  return {
    read: allowedModes.includes(internal_accessModeIriStrings.read),
    append: allowedModes.includes(internal_accessModeIriStrings.append),
    write: allowedModes.includes(internal_accessModeIriStrings.write)
  };
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]], return which [[AccessModes]] it allows.
 *
 * @param policy The Policy for which you want to know the Access Modes it allows.
 * @since 1.6.0
 * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[getAllowModesV2]].
 */


function getAllowModesV1(policy) {
  const allowedModes = getIriAll(policy, acp.allow);
  return {
    read: allowedModes.includes(acp.Read),
    append: allowedModes.includes(acp.Append),
    write: allowedModes.includes(acp.Write)
  };
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given
 * Policy, but with the given Access Modes disallowed on it.
 *
 * @param policy The Policy on which to set the modes to disallow.
 * @param modes Modes to disallow for this Policy.
 * @since Not released yet.
 */


function setDenyModesV2(policy, modes) {
  let newPolicy = removeAll(policy, acp.deny);

  if (modes.read === true) {
    newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.read);
  }

  if (modes.append === true) {
    newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.append);
  }

  if (modes.write === true) {
    newPolicy = addIri(newPolicy, acp.deny, internal_accessModeIriStrings.write);
  }

  return newPolicy;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given
 * Policy, but with the given Access Modes disallowed on it.
 *
 * @param policy The Policy on which to set the modes to disallow.
 * @param modes Modes to disallow for this Policy.
 * @since 1.6.0
 * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[setDenyModesV2]].
 */


function setDenyModesV1(policy, modes) {
  let newPolicy = removeAll(policy, acp.deny);

  if (modes.read === true) {
    newPolicy = addIri(newPolicy, acp.deny, acp.Read);
  }

  if (modes.append === true) {
    newPolicy = addIri(newPolicy, acp.deny, acp.Append);
  }

  if (modes.write === true) {
    newPolicy = addIri(newPolicy, acp.deny, acp.Write);
  }

  return newPolicy;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]], return which [[AccessModes]] it disallows.
 *
 * @param policy The Policy on which you want to know the Access Modes it disallows.
 * @since Not released yet.
 */


function getDenyModesV2(policy) {
  const deniedModes = getIriAll(policy, acp.deny);
  return {
    read: deniedModes.includes(internal_accessModeIriStrings.read),
    append: deniedModes.includes(internal_accessModeIriStrings.append),
    write: deniedModes.includes(internal_accessModeIriStrings.write)
  };
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]], return which [[AccessModes]] it disallows.
 *
 * @param policy The Policy on which you want to know the Access Modes it disallows.
 * @since 1.6.0
 * @deprecated The Access Control Policies proposal will be updated to use a different vocabulary for allow- and deny-modes. To be compatible with servers that implement that, use [[getDenyModesV2]].
 */


function getDenyModesV1(policy) {
  const deniedModes = getIriAll(policy, acp.deny);
  return {
    read: deniedModes.includes(acp.Read),
    append: deniedModes.includes(acp.Append),
    write: deniedModes.includes(acp.Write)
  };
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[ResourcePolicy]] for the given Resource.
 *
 * @param resourceWithAcr The Resource to which the Policy is to apply.
 * @param name The name that identifies this Policy.
 * @since 1.6.0
 */


function createResourcePolicyFor(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const url = new URL(getSourceUrl(acr));
  url.hash = `#${name}`;
  let policyThing = createThing({
    url: url.href
  });
  policyThing = setUrl(policyThing, rdf.type, acp.Policy);
  return policyThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourcePolicy]] with the given name that applies to a Resource
 * from its Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose ACR contains the given Policy.
 * @param name The name that identifies this Policy.
 * @returns The requested Policy, if it exists and applies to the given Resource, or `null` if it does not.
 * @since 1.6.0
 */


function getResourcePolicy(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (!getPolicyUrlAll$1(resourceWithAcr).includes(url.href) || foundThing === null || !isPolicy(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourcePolicy]] with the given name that applies to a Resource's
 * Access Control Resource from that Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose ACR contains the given Policy.
 * @param name The name that identifies this Policy.
 * @returns The requested Policy, if it exists and applies to the Resource's ACR, or `null` if it does not.
 * @since 1.6.0
 */


function getResourceAcrPolicy(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (!getAcrPolicyUrlAll$1(resourceWithAcr).includes(url.href) || foundThing === null || !isPolicy(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[ResourcePolicy]]'s that apply to a Resource in its Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies applying to it.
 * @since 1.6.0
 */


function getResourcePolicyAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const policyUrls = getPolicyUrlAll$1(resourceWithAcr);
  const foundThings = policyUrls.map(policyUrl => getThing(acr, policyUrl));
  const foundPolicies = foundThings.filter(thing => thing !== null && isPolicy(thing));
  return foundPolicies;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[ResourcePolicy]]'s that apply to a given Resource's Access Control
 * Resource from that Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @since 1.6.0
 */


function getResourceAcrPolicyAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const policyUrls = getAcrPolicyUrlAll$1(resourceWithAcr);
  const foundThings = policyUrls.map(policyUrl => getThing(acr, policyUrl));
  const foundPolicies = foundThings.filter(thing => thing !== null && isPolicy(thing));
  return foundPolicies;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove the given [[ResourcePolicy]] from the given Resource's Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to remove from the Resource's Access Control Resource.
 * @since 1.6.0
 */


function removeResourcePolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  let policyToRemove = policy;

  if (typeof policyToRemove === "string") {
    try {
      new URL(policyToRemove);
    } catch (e) {
      // If the given Policy to remove is the name of the Policy,
      // resolve it to its full URL — developers usually refer to either the
      // Policy itself, or by its name, as they do not have access to the ACR
      // directly.
      const policyUrl = new URL(getSourceUrl(acr));
      policyUrl.hash = `#${policy}`;
      policyToRemove = policyUrl.href;
    }
  }

  let policyUrlString;

  if (typeof policyToRemove === "string") {
    policyUrlString = policyToRemove;
  } else if (isNamedNode(policyToRemove)) {
    policyUrlString = internal_toIriString(policyToRemove);
  } else {
    policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));
  } // Check whether the actual Policy (i.e. with the Policy type) exists:


  const matchingRule = getResourcePolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));

  if (matchingRule === null) {
    // No such Policy exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, policyToRemove);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return removePolicyUrl$1(updatedResource, policyUrlString);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove the given [[ResourcePolicy]] that applies to a given Resource's Access
 * Control Resource from that Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The ACR Policy to remove from the Resource's Access Control Resource.
 * @since 1.6.0
 */


function removeResourceAcrPolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  let policyToRemove = policy;

  if (typeof policyToRemove === "string") {
    try {
      new URL(policyToRemove);
    } catch (e) {
      // If the given Policy to remove is the name of the Policy,
      // resolve it to its full URL — developers usually refer to either the
      // Policy itself, or by its name, as they do not have access to the ACR
      // directly.
      const policyUrl = new URL(getSourceUrl(acr));
      policyUrl.hash = `#${policy}`;
      policyToRemove = policyUrl.href;
    }
  }

  let policyUrlString;

  if (typeof policyToRemove === "string") {
    policyUrlString = policyToRemove;
  } else if (isNamedNode(policyToRemove)) {
    policyUrlString = internal_toIriString(policyToRemove);
  } else {
    policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));
  } // Check whether the actual Policy (i.e. with the Policy type) exists:


  const matchingRule = getResourceAcrPolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));

  if (matchingRule === null) {
    // No such Policy exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, policyToRemove);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return removeAcrPolicyUrl$1(updatedResource, policyUrlString);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control
 * Resource, replacing previous instances of that Policy.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to insert into the Resource's Access Control Resource.
 * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.
 * @since 1.6.0
 */


function setResourcePolicy$1(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, policy);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  const policyUrl = asUrl(policy, getSourceUrl(acr));
  return addPolicyUrl$1(updatedResource, policyUrl);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control
 * Resource, replacing previous instances of that Policy, to apply to the Access
 * Control Resource itself.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to insert into the Resource's Access Control Resource.
 * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource, applying to that Access Control Resource.
 * @since 1.6.0
 */


function setResourceAcrPolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, policy);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  const policyUrl = asUrl(policy, getSourceUrl(acr));
  return addAcrPolicyUrl$1(updatedResource, policyUrl);
}
/**
 * Gets a human-readable representation of the given [[Policy]] to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param policy The Policy to get a human-readable representation of.
 * @since 1.6.0
 * @deprecated
 */


function policyAsMarkdown(policy) {
  function getStatus(allow, deny) {
    if (deny) {
      return "denied";
    }

    if (allow) {
      return "allowed";
    }

    return "unspecified";
  }

  const allowModes = getAllowModesV1(policy);
  const denyModes = getDenyModesV1(policy);
  let markdown = `## Policy: ${asUrl(policy)}\n\n`;
  markdown += `- Read: ${getStatus(allowModes.read, denyModes.read)}\n`;
  markdown += `- Append: ${getStatus(allowModes.append, denyModes.append)}\n`;
  markdown += `- Write: ${getStatus(allowModes.write, denyModes.write)}\n`;
  const allOfRules = getAllOfRuleUrlAll(policy);
  const anyOfRules = getAnyOfRuleUrlAll(policy);
  const noneOfRules = getNoneOfRuleUrlAll(policy);

  if (allOfRules.length === 0 && anyOfRules.length === 0 && noneOfRules.length === 0) {
    markdown += "\n<no rules specified yet>\n";
  }

  if (allOfRules.length > 0) {
    markdown += "\nAll of these rules should match:\n";
    markdown += "- " + allOfRules.join("\n- ") + "\n";
  }

  if (anyOfRules.length > 0) {
    markdown += "\nAt least one of these rules should match:\n";
    markdown += "- " + anyOfRules.join("\n- ") + "\n";
  }

  if (noneOfRules.length > 0) {
    markdown += "\nNone of these rules should match:\n";
    markdown += "- " + noneOfRules.join("\n- ") + "\n";
  }

  return markdown;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 *
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * [[AccessControlResource]].
 * ```
 *
 * Initialises a new empty Access Control Resource for a given Resource for use
 * in **unit tests**.
 *
 * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.
 * @returns The mocked empty Access Control Resource for the given Resource.
 * @since 1.6.0
 */


function mockAcrFor(resourceUrl) {
  const acrUrl = new URL("access-control-resource", resourceUrl).href;
  const acr = Object.assign(Object.assign({}, mockSolidDatasetFrom(acrUrl)), {
    accessTo: resourceUrl
  });
  return acr;
}
/**
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * Resource with an [[AccessControlResource]].
 * ```
 *
 * Attaches an Access Control Resource to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getPolicyUrlAll]].
 *
 * @param resource The Resource to mock up with a new resource ACL.
 * @param accessControlResource The Access Control Resource to attach to the given Resource.
 * @returns The input Resource with an empty resource ACL attached.
 * @since 1.6.0
 */


function addMockAcrTo(resource, accessControlResource = mockAcrFor(getSourceUrl(resource))) {
  const resourceWithAcr = Object.assign(internal_cloneResource(resource), {
    internal_acp: {
      acr: accessControlResource,
      aprs: {}
    }
  });
  return resourceWithAcr;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const v2AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor
};
const v2ControlFunctions = {
  acrAsMarkdown,
  addAcrPolicyUrl: addAcrPolicyUrl$1,
  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,
  addMemberPolicyUrl: addMemberPolicyUrl$1,
  addPolicyUrl: addPolicyUrl$1,
  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,
  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,
  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,
  getPolicyUrlAll: getPolicyUrlAll$1,
  hasLinkedAcr,
  removeAcrPolicyUrl: removeAcrPolicyUrl$1,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,
  removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrl: removeMemberPolicyUrl$1,
  removeMemberPolicyUrlAll,
  removePolicyUrl: removePolicyUrl$1,
  removePolicyUrlAll
};
const v2PolicyFunctions = {
  createPolicy,
  getAllowModes: getAllowModesV1,
  getDenyModes: getDenyModesV1,
  getPolicy,
  getPolicyAll,
  policyAsMarkdown,
  removePolicy,
  setAllowModes: setAllowModesV1,
  setDenyModes: setDenyModesV1,
  setPolicy
};
const v2RuleFunctions = {
  addAgent: addAgent$1,
  addForbiddenRuleUrl: addNoneOfRuleUrl,
  addGroup,
  addOptionalRuleUrl: addAnyOfRuleUrl,
  addRequiredRuleUrl: addAllOfRuleUrl,
  createRule,
  getAgentAll: getAgentAll$1,
  getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,
  getGroupAll,
  getOptionalRuleUrlAll: getAnyOfRuleUrlAll,
  getRequiredRuleUrlAll: getAllOfRuleUrlAll,
  getRule,
  getRuleAll,
  hasAuthenticated: hasAuthenticated$1,
  hasCreator: hasCreator$1,
  hasPublic: hasPublic$1,
  removeAgent: removeAgent$1,
  removeForbiddenRuleUrl: removeNoneOfRuleUrl,
  removeGroup,
  removeOptionalRuleUrl: removeAnyOfRuleUrl,
  removeRequiredRuleUrl: removeAllOfRuleUrl,
  removeRule,
  ruleAsMarkdown,
  setAgent: setAgent$1,
  setForbiddenRuleUrl: setNoneOfRuleUrl,
  setGroup,
  setOptionalRuleUrl: setAnyOfRuleUrl,
  setRequiredRuleUrl: setAllOfRuleUrl,
  setRule
};
const v2MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
/* istanbul ignore next Not a supported public API: */

/** @deprecated Replaced by [[setPublic]] */

function previousSetPublicSignature(rule, enable) {
  return enable ? setPublic$1(rule) : removePublic$1(rule);
}
/* istanbul ignore next Not a supported public API: */

/** @deprecated Replaced by [[setAuthenticated]] */


function previousSetAuthenticatedSignature(rule, enable) {
  return enable ? setAuthenticated$1(rule) : removeAuthenticated$1(rule);
}
/* istanbul ignore next Not a supported public API: */

/** @deprecated Replaced by [[setCreator]] */


function previousSetCreatorSignature(rule, enable) {
  return enable ? setCreator$1(rule) : removeCreator$1(rule);
}

const deprecatedFunctions$1 = {
  /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */
  getForbiddenRuleurlAll: getNoneOfRuleUrlAll,
  setPublic: previousSetPublicSignature,
  setAuthenticated: previousSetAuthenticatedSignature,
  setCreator: previousSetCreatorSignature
};
/**
 * @hidden
 * @deprecated Replaced by [[acp_v3]].
 */

const acp_v2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v2AcpFunctions), v2ControlFunctions), v2PolicyFunctions), v2RuleFunctions), v2MockFunctions), deprecatedFunctions$1);
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.acp_v2 = acp_v2;
const v1AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor
};
const v1PolicyFunctions = {
  createPolicy,
  getAllowModes: getAllowModesV1,
  getDenyModes: getDenyModesV1,
  getPolicy,
  getPolicyAll,
  policyAsMarkdown,
  removePolicy,
  setAllowModes: setAllowModesV1,
  setDenyModes: setDenyModesV1,
  setPolicy
};
const v1RuleFunctions = {
  addAgent: addAgent$1,
  addForbiddenRuleUrl: addNoneOfRuleUrl,
  addGroup,
  addOptionalRuleUrl: addAnyOfRuleUrl,
  addRequiredRuleUrl: addAllOfRuleUrl,
  createRule,
  getAgentAll: getAgentAll$1,
  getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,
  getGroupAll,
  getOptionalRuleUrlAll: getAnyOfRuleUrlAll,
  getRequiredRuleUrlAll: getAllOfRuleUrlAll,
  getRule,
  getRuleAll,
  hasAuthenticated: hasAuthenticated$1,
  hasCreator: hasCreator$1,
  hasPublic: hasPublic$1,
  removeAgent: removeAgent$1,
  removeForbiddenRuleUrl: removeNoneOfRuleUrl,
  removeGroup,
  removeOptionalRuleUrl: removeAnyOfRuleUrl,
  removeRequiredRuleUrl: removeAllOfRuleUrl,
  removeRule,
  ruleAsMarkdown,
  setAgent: setAgent$1,
  setForbiddenRuleUrl: setNoneOfRuleUrl,
  setGroup,
  setOptionalRuleUrl: setAnyOfRuleUrl,
  setRequiredRuleUrl: setAllOfRuleUrl,
  setRule
};
const v1MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
const v1ControlFunctions = {
  hasLinkedAcr,
  addAcrPolicyUrl: addAcrPolicyUrl$1,
  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,
  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,
  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,
  removeAcrPolicyUrl: removeAcrPolicyUrl$1,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,
  removeMemberAcrPolicyUrlAll
};
const deprecatedFunctions = {
  createControl: internal_createControl,
  getControl: internal_getControl,
  getAllControl: internal_getControlAll,
  getControlAll: internal_getControlAll,
  setControl: internal_setControl,
  removeControl: removeControl,
  addPolicyUrl: internal_addPolicyUrl,
  getPolicyUrlAll: internal_getPolicyUrlAll,
  removePolicyUrl: internal_removePolicyUrl,
  removePolicyUrlAll: internal_removePolicyUrlAll,
  addMemberPolicyUrl: internal_addMemberPolicyUrl,
  getMemberPolicyUrlAll: internal_getMemberPolicyUrlAll,
  removeMemberPolicyUrl: internal_getMemberPolicyUrlAll,
  removeMemberPolicyUrlAll: internal_removeMemberPolicyUrlAll,

  /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */
  getForbiddenRuleurlAll: getNoneOfRuleUrlAll,
  setPublic: previousSetPublicSignature,
  setAuthenticated: previousSetAuthenticatedSignature,
  setCreator: previousSetCreatorSignature
};
/**
 * @hidden
 * @deprecated Replaced by [[acp_v2]].
 */

const acp_v1 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v1AcpFunctions), v1PolicyFunctions), v1RuleFunctions), v1MockFunctions), v1ControlFunctions), deprecatedFunctions);
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove an [[Control]] from the [[AccessControlResource]] of a Resource.
 *
 * @param withAccessControlResource A Resource with the Access Control Resource from which to remove an Access Control.
 * @param control The [[Control]] to remove from the given Access Control Resource.
 * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, excluding the given Access Control.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */

exports.acp_v1 = acp_v1;

function removeControl(withAccessControlResource, control) {
  const acr = internal_getAcr(withAccessControlResource);
  const updatedAcr = removeThing(acr, control);
  const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);
  return updatedResource;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const v3AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getLinkedAcrUrl,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor,
  isAcpControlled
};
const v3ControlFunctions = {
  acrAsMarkdown,
  addAcrPolicyUrl: addAcrPolicyUrl$1,
  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,
  addMemberPolicyUrl: addMemberPolicyUrl$1,
  addPolicyUrl: addPolicyUrl$1,
  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,
  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,
  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,
  getPolicyUrlAll: getPolicyUrlAll$1,
  hasLinkedAcr,
  removeAcrPolicyUrl: removeAcrPolicyUrl$1,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,
  removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrl: removeMemberPolicyUrl$1,
  removeMemberPolicyUrlAll,
  removePolicyUrl: removePolicyUrl$1,
  removePolicyUrlAll
};
const v3PolicyFunctions = {
  createPolicy,
  getAllowModes: getAllowModesV1,
  getDenyModes: getDenyModesV1,
  getPolicy,
  getPolicyAll,
  policyAsMarkdown,
  removePolicy,
  setAllowModes: setAllowModesV1,
  setDenyModes: setDenyModesV1,
  setPolicy,
  createResourcePolicyFor,
  getResourceAcrPolicy,
  getResourceAcrPolicyAll,
  getResourcePolicy,
  getResourcePolicyAll,
  removeResourceAcrPolicy,
  removeResourcePolicy,
  setResourceAcrPolicy,
  setResourcePolicy: setResourcePolicy$1
};
const v3RuleFunctions = {
  addAgent: addAgent$1,
  addGroup,
  createRule,
  getAgentAll: getAgentAll$1,
  getGroupAll,
  getRule,
  getRuleAll,
  removeAgent: removeAgent$1,
  removeGroup,
  removeRule,
  ruleAsMarkdown,
  setAgent: setAgent$1,
  setGroup,
  setRule,
  addClient: addClient$1,
  getClientAll: getClientAll$1,
  hasAnyClient: hasAnyClient$1,
  removeClient: removeClient$1,
  setAnyClient: setAnyClient$1,
  setClient: setClient$1,
  removeAnyClient: removeAnyClient$1,
  hasAuthenticated: hasAuthenticated$1,
  hasCreator: hasCreator$1,
  hasPublic: hasPublic$1,
  setAuthenticated: setAuthenticated$1,
  setCreator: setCreator$1,
  setPublic: setPublic$1,
  removeAuthenticated: removeAuthenticated$1,
  removeCreator: removeCreator$1,
  removePublic: removePublic$1,
  getAnyOfRuleUrlAll,
  addAnyOfRuleUrl,
  removeAnyOfRuleUrl,
  setAnyOfRuleUrl,
  getAllOfRuleUrlAll,
  addAllOfRuleUrl,
  removeAllOfRuleUrl,
  setAllOfRuleUrl,
  getNoneOfRuleUrlAll,
  addNoneOfRuleUrl,
  removeNoneOfRuleUrl,
  setNoneOfRuleUrl,
  createResourceRuleFor,
  getResourceRule,
  getResourceRuleAll,
  removeResourceRule,
  setResourceRule
};
const v3MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
/**
 * @hidden
 * @deprecated Please import "acp_ess_1" directly.
 */

const acp_v3 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v3AcpFunctions), v3ControlFunctions), v3PolicyFunctions), v3RuleFunctions), v3MockFunctions);
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */

exports.acp_v3 = acp_v3;

function setAccessControlResourceThing(resource, thing) {
  return Object.assign(internal_cloneResource(resource), {
    internal_acp: Object.assign(Object.assign({}, resource.internal_acp), {
      acr: setThing(resource.internal_acp.acr, thing)
    })
  });
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function getAccessControlTypeFromDefaultAccessControlName(name) {
  if (name.includes("Member")) {
    return ACP.memberAccessControl;
  }

  return ACP.accessControl;
}
/** @hidden */


function setDefaultAccessControlThingIfNotExist(resource, name) {
  const defaultAccessControlThingUrl = getDefaultAccessControlUrl(resource, name);
  const acr = internal_getAcr(resource); // Get the Access Control Resource Thing or create it

  let accessControlResourceThing = getAccessControlResourceThing(resource);

  if (accessControlResourceThing === null || typeof accessControlResourceThing === "undefined") {
    accessControlResourceThing = createThing({
      url: getSourceUrl(acr)
    });
  } // Get the Default Access Control Thing or create it and return


  const accessControlUrlAll = getIriAll(accessControlResourceThing, getAccessControlTypeFromDefaultAccessControlName(name));

  if (!accessControlUrlAll.includes(defaultAccessControlThingUrl)) {
    accessControlResourceThing = buildThing(accessControlResourceThing).addUrl(getAccessControlTypeFromDefaultAccessControlName(name), defaultAccessControlThingUrl).build();
    return setAccessControlResourceThing(resource, accessControlResourceThing);
  } // Return the original resource if the ACR and Default AC exist


  return resource;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Add a policy applying to the ACR of the given resource.
 *
 * @param resourceWithAcr The resource for which to add the URL of a policy
 * applying to its access control resource.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function addAcrPolicyUrl(resourceWithAcr, policyUrl) {
  const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_ACR_ACCESS_CONTROL);
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_ACR_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.access, policyUrl).build());
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Add a policy applying to the ACRs of the given resource's children.
 *
 * @param resourceWithAcr The resource for which to add the URL of a policy
 * applying to its children's access control resources.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function addMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {
  const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.access, policyUrl).build());
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Add a policy applying to the given resource's children.
 *
 * @param resourceWithAcr The resource for which to add the URL of a policy
 * applying to its children.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function addMemberPolicyUrl(resourceWithAcr, policyUrl) {
  const resourceWithAcrContainingDefaultMemberAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_MEMBER_ACCESS_CONTROL);
  const defaultMemberAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultMemberAccessControl, DEFAULT_MEMBER_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcrContainingDefaultMemberAccessControl, buildThing(defaultMemberAccessControlThing).addUrl(ACP.apply, policyUrl).build());
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Add a policy applying to the given resource.
 *
 * @param resourceWithAcr The resource for which to add the URL of a policy
 * applying to it.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function addPolicyUrl(resourceWithAcr, policyUrl) {
  const resourceWithAcrContainingDefaultAccessControl = setDefaultAccessControlThingIfNotExist(resourceWithAcr, DEFAULT_ACCESS_CONTROL);
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcrContainingDefaultAccessControl, DEFAULT_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcrContainingDefaultAccessControl, buildThing(defaultAccessControlThing).addUrl(ACP.apply, policyUrl).build());
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the URL of all access controls linked to the given resource's ACR.
 *
 * @param resourceWithAcr The resource for which to retrieve URLs of access
 * controls applying to it.
 * @returns Access Control URL array
 * @since 1.6.0
 */


function getAccessControlUrlAll(resourceWithAcr) {
  const acrThing = getAccessControlResourceThing(resourceWithAcr);

  if (acrThing === null) {
    return [];
  }

  return getIriAll(acrThing, ACP.accessControl);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function getPolicyUrls(resource, accessControlUrls, type) {
  const acr = internal_getAcr(resource);
  return Array.from(new Set(accessControlUrls.map(accessControlUrl => {
    const accessControlThing = getThing(acr, accessControlUrl); // istanbul ignore next

    if (accessControlThing !== null) {
      return getIriAll(accessControlThing, type);
    } // istanbul ignore next


    return [];
  }).reduce((previousValue, currentValue) => previousValue.concat(currentValue), [])));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the URLs of policies applying to the ACR of the given resource.
 *
 * @param resourceWithAcr The resource for which to retrieve URLs of policies
 * applying to its access control resource.
 * @returns Policy URL array.
 * @since 1.16.1
 */


function getAcrPolicyUrlAll(resourceWithAcr) {
  return getPolicyUrls(resourceWithAcr, getAccessControlUrlAll(resourceWithAcr), ACP.access);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the URL of all member access controls linked to the given resource's ACR.
 *
 * @param resourceWithAcr The resource for which to retrieve URLs of access
 * controls inherited by its children.
 * @returns Access Control URL array
 * @since 1.6.0
 */


function getMemberAccessControlUrlAll(resourceWithAcr) {
  const acrThing = getAccessControlResourceThing(resourceWithAcr);

  if (acrThing === null) {
    return [];
  }

  return getIriAll(acrThing, ACP.memberAccessControl);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the URLs of policies applying to the ACRs of the given resource's
 * children.
 *
 * @param resourceWithAcr The resource for which to retrieve URLs of policies
 * applying to its children's access control resources.
 * @returns Policy URL array.
 * @since 1.16.1
 */


function getMemberAcrPolicyUrlAll(resourceWithAcr) {
  return getPolicyUrls(resourceWithAcr, getMemberAccessControlUrlAll(resourceWithAcr), ACP.access);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the URLs of policies applying to the given resource's children.
 *
 * @param resourceWithAcr The resource for which to retrieve URLs policies
 * applying to its children.
 * @returns Policy URL array.
 * @since 1.16.1
 */


function getMemberPolicyUrlAll(resourceWithAcr) {
  return getPolicyUrls(resourceWithAcr, getMemberAccessControlUrlAll(resourceWithAcr), ACP.apply);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Get the URLs of policies applying to the given resource.
 *
 * @param resourceWithAcr The resource for which to retrieve URLs of policies
 * applying to it.
 * @returns Policy URL array.
 * @since 1.16.1
 */


function getPolicyUrlAll(resourceWithAcr) {
  return getPolicyUrls(resourceWithAcr, getAccessControlUrlAll(resourceWithAcr), ACP.apply);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Remove a policy applying to the ACR of the given resource.
 *
 * @param resourceWithAcr The resource for which to remove the URL of a policy
 * applying to its access control resource.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function removeAcrPolicyUrl(resourceWithAcr, policyUrl) {
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_ACR_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.access, policyUrl));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Remove a policy applying to the ACRs of the given resource's children.
 *
 * @param resourceWithAcr The resource for which to remove the URL of a policy
 * applying to its children's access control resources.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function removeMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_MEMBER_ACR_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.access, policyUrl));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Remove a policy applying to the given resource's children.
 *
 * @param resourceWithAcr The resource for which to remove the URL of a policy
 * applying to its children.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function removeMemberPolicyUrl(resourceWithAcr, policyUrl) {
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_MEMBER_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.apply, policyUrl));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Remove a policy applying to the given resource.
 *
 * @param resourceWithAcr The resource for which to remove the URL of a policy
 * applying to it.
 * @param policyUrl A Policy URL.
 * @returns The resource with its ammended access control resource.
 * @since 1.16.1
 */


function removePolicyUrl(resourceWithAcr, policyUrl) {
  const defaultAccessControlThing = getDefaultAccessControlThing(resourceWithAcr, DEFAULT_ACCESS_CONTROL);
  return setAccessControlResourceThing(resourceWithAcr, removeIri(defaultAccessControlThing, ACP.apply, policyUrl));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control
 * Resource, replacing previous instances of that Policy.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to insert into the Resource's Access Control Resource.
 * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.
 * @since 1.18.0
 */


function setResourcePolicy(resourceWithAcr, policy) {
  return setAccessControlResourceThing(resourceWithAcr, policy);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @param thing the [[Thing]] to check to see if it's an ACP Matcher or not
 */


function isMatcher(thing) {
  return getIriAll(thing, rdf.type).includes(acp.Matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a Matcher that refines the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" Matchers,
 * they will not be granted access.
 *
 * Also see [[addAnyOfMatcherUrl]] and [[addNoneOfMatcherUrl]].
 *
 * @param policy The [[Policy]] to which the Matcher should be added.
 * @param matcher The Matcher to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new Matcher added.
 * @since Not released yet.
 */


function addAllOfMatcherUrl(policy, matcher) {
  return addIri(policy, acp.allOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a Matcher that refines the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" Matchers,
 * they will not be granted access.
 * @param policy The [[Policy]] from which the Matcher should be removed.
 * @param matcher The Matcher to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the Matcher removed.
 * @since Not released yet.
 */


function removeAllOfMatcherUrl(policy, matcher) {
  return removeIri(policy, acp.allOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrites the Matcher refining the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" Matchers,
 * they will not be granted access.
 * @param policy The [[Policy]] to which the Matcher should be added.
 * @param matcher The Matcher to set for the Policy.
 * @returns A new [[Policy]] clone of the original one, with the "All Of" Matchers replaced.
 * @since Not released yet.
 */


function setAllOfMatcherUrl(policy, matcher) {
  return setIri(policy, acp.allOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "All Of" [[Matcher]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the Matchers should be read.
 * @returns A list of the "All Of" [[Matcher]]s
 * @since Not released yet.
 */


function getAllOfMatcherUrlAll(policy) {
  return getIriAll(policy, acp.allOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a Matcher that extends the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" Matchers,
 * they will be granted access.
 *
 * Also see [[addAllOfMatcherUrl]] and [[addNoneOfMatcherUrl]].
 *
 * @param policy The [[Policy]] to which the Matcher should be added.
 * @param matcher The Matcher to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new Matcher added.
 * @since Not released yet.
 */


function addAnyOfMatcherUrl(policy, matcher) {
  return addIri(policy, acp.anyOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a Matcher that extends the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" Matchers,
 * they will be granted access.
 * @param policy The [[Policy]] from which the Matcher should be removed.
 * @param matcher The Matcher to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the Matcher removed.
 * @since Not released yet.
 */


function removeAnyOfMatcherUrl(policy, matcher) {
  return removeIri(policy, acp.anyOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the Matcher extending the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" Matchers,
 * they will be granted access.
 * @param policy The [[Policy]] to which the Matcher should be added.
 * @param matcher The Matcher to set for the Policy.
 * @returns A new [[Policy]] clone of the original one, with the "Any Of" Matchers replaced.
 * @since Not released yet.
 */


function setAnyOfMatcherUrl(policy, matcher) {
  return setIri(policy, acp.anyOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "Any Of" [[Matcher]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the Matchers should be read.
 * @returns A list of the "Any Of" [[Matcher]]s
 * @since Not released yet.
 */


function getAnyOfMatcherUrlAll(policy) {
  return getIriAll(policy, acp.anyOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a Matcher that restricts the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is matched by another Matcher, but **also**
 * by the given Matcher, they will **not** be granted access.
 *
 * Also see [[addAllOfMatcherUrl]] and [[addAnyOfMatcherUrl]].
 *
 * @param policy The [[Policy]] to which the Matcher should be added.
 * @param matcher The Matcher to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new Matcher added.
 * @since Not released yet.
 */


function addNoneOfMatcherUrl(policy, matcher) {
  return addIri(policy, acp.noneOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a Matcher that restricts the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is matched by another Matcher, but **also**
 * in any of the "None Of" Matchers, they will **not** be granted access.
 *
 * @param policy The [[Policy]] from which the Matcher should be removed.
 * @param matcher The Matcher to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the Matcher removed.
 * @since Not released yet.
 */


function removeNoneOfMatcherUrl(policy, matcher) {
  return removeIri(policy, acp.noneOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set the Matchers restricting the scope of a given [[Policy]]. If an agent
 * requesting access to a resource is matched by another Matcher, but **also**
 * by any of the "None Of" Matchers, they will not be granted access.
 *
 * @param policy The [[Policy]] to which the Matcher should be added.
 * @param matcher The Matcher to set for the Policy.
 * @returns A new [[Policy]] clone of the original one, with the "None Of" Matchers replaced.
 * @since Not released yet.
 */


function setNoneOfMatcherUrl(policy, matcher) {
  return setIri(policy, acp.noneOf, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "None Of" [[Matcher]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the Matchers should be read.
 * @returns A list of the forbidden [[Matcher]]s
 * @since Not released yet.
 */


function getNoneOfMatcherUrlAll(policy) {
  return getIriAll(policy, acp.noneOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[Matcher]].
 *
 * @param url URL that identifies this [[Matcher]].
 * @since Not released yet.
 */


function createMatcher(url) {
  const stringUrl = internal_toIriString(url);
  let matcherThing = createThing({
    url: stringUrl
  });
  matcherThing = setUrl(matcherThing, rdf.type, acp.Matcher);
  return matcherThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[ResourceMatcher]] for the given Resource.
 *
 * @param resourceWithAcr The Resource to which the new Matcher is to apply.
 * @param name Name that identifies this [[Matcher]].
 * @since Not released yet.
 */


function createResourceMatcherFor(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const url = new URL(getSourceUrl(acr));
  url.hash = `#${name}`;
  let matcherThing = createThing({
    url: url.href
  });
  matcherThing = setUrl(matcherThing, rdf.type, acp.Matcher);
  return matcherThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[Matcher]] with the given URL from an [[SolidDataset]].
 *
 * @param matcherResource The Resource that contains the given [[Matcher]].
 * @param url URL that identifies this [[Matcher]].
 * @returns The requested [[Matcher]], if it exists, or `null` if it does not.
 * @since Not released yet.
 */


function getMatcher(matcherResource, url) {
  const foundThing = getThing(matcherResource, url);

  if (foundThing === null || !isMatcher(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourceMatcher]] with the given name from an Resource's Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceMatcher]].
 * @param name Name that identifies this [[ResourceMatcher]].
 * @returns The requested [[ResourceMatcher]], if it exists, or `null` if it does not.
 * @since Not released yet.
 */


function getResourceMatcher(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (foundThing === null || !isMatcher(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Gets the [[Matcher]]s from a [[SolidDataset]].
 *
 * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.
 * @returns The [[Matcher]]s contained in this resource.
 * @since Not released yet.
 */


function getMatcherAll(matcherResource) {
  const things = getThingAll(matcherResource);
  return things.filter(isMatcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Gets the [[ResourceMatcher]]s from a Resource's Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.
 * @returns The [[ResourceMatcher]]s contained in this Resource's Access Control Resource.
 * @since Not released yet.
 */


function getResourceMatcherAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const things = getThingAll(acr);
  return things.filter(isMatcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the given [[Matcher]] from the given [[SolidDataset]].
 *
 * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.
 * @returns A new SolidDataset equal to the given Matcher Resource, but without the given Matcher.
 * @since Not released yet.
 */


function removeMatcher(matcherResource, matcher) {
  return removeThing(matcherResource, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the given [[ResourceMatcher]] from the given Resource's Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.
 * @returns A new Resource equal to the given Resource, but without the given Matcher in its ACR.
 * @since Not released yet.
 */


function removeResourceMatcher(resourceWithAcr, matcher) {
  const acr = internal_getAcr(resourceWithAcr);
  let matcherToRemove;

  if (typeof matcher === "string") {
    try {
      new URL(matcher);
      matcherToRemove = matcher;
    } catch (e) {
      // If the given Matcher to remove is the name of the Matcher,
      // resolve it to its full URL — developers usually refer to either the
      // Matcher itself, or by its name, as they do not have access to the ACR
      // directly.
      const matcherUrl = new URL(getSourceUrl(acr));
      matcherUrl.hash = `#${matcher}`;
      matcherToRemove = matcherUrl.href;
    }
  } else if (isNamedNode(matcher)) {
    matcherToRemove = internal_toIriString(matcher);
  } else {
    matcherToRemove = asUrl(matcher);
  } // Check whether the actual Matcher (i.e. with the Matcher type) exists:


  const matchingMatcher = getResourceMatcher(resourceWithAcr, new URL(matcherToRemove).hash.substring(1));

  if (matchingMatcher === null) {
    // No such Matcher exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, matchingMatcher);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[Matcher]] into the given [[SolidDataset]], replacing previous
 * instances of that Matcher.
 *
 * @param matcherResource The Resource that contains (zero or more) [[Matcher]]s.
 * @returns A new SolidDataset equal to the given Matcher Resource, but with the given Matcher.
 * @since Not released yet.
 */


function setMatcher(matcherResource, matcher) {
  return setThing(matcherResource, matcher);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourceMatcher]] into the given Resource's Access Control Resource,
 * replacing previous instances of that Matcher.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceMatcher]]s.
 * @returns A new Resource equal to the given Resource, but with the given Matcher in its ACR.
 * @since Not released yet.
 */


function setResourceMatcher(resourceWithAcr, matcher) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, matcher);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * List all the agents a [[Matcher]] applies **directly** to. This will not include agents
 * that are matched on a property other than their WebID.
 *
 * @param matcher The matcher from which agents are read.
 * @returns A list of the WebIDs of agents included in the matcher.
 * @since Not released yet.
 */


function getAgentAll(matcher) {
  return getIriAll(matcher, acp.agent).filter(agent => agent !== acp.PublicAgent && agent !== acp.AuthenticatedAgent && agent !== acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the agents the [[Matcher]] applies to with the provided agents.
 *
 * @param matcher The matcher for which agents are set.
 * @param agent The agent the matcher should apply to.
 * @returns A copy of the input matcher, applying to a different set of agents.
 * @since Not released yet.
 */


function setAgent(matcher, agent) {
  // Preserve the special agent classes authenticated and public, which we
  // don't want to overwrite with this function.
  const isPublic = hasPublic(matcher);
  const isAuthenticated = hasAuthenticated(matcher);
  const isCreator = hasCreator(matcher);
  let result = setIri(matcher, acp.agent, agent); // Restore public and authenticated

  if (isPublic) {
    result = setPublic(result);
  }

  if (isAuthenticated) {
    result = setAuthenticated(result);
  }

  if (isCreator) {
    result = setCreator(result);
  }

  return result;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Matcher]] to an additional agent.
 *
 * @param matcher The [[Matcher]] to be applied to an additional agent.
 * @param agent The agent the [[Matcher]] should apply to.
 * @returns A copy of the [[Matcher]], applying to an additional agent.
 * @since Not released yet.
 */


function addAgent(matcher, agent) {
  return addIri(matcher, acp.agent, agent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Matcher]] from applying to a given agent directly. This will not
 * prevent the agent from matching on other properties than its WebID.
 *
 * @param matcher The [[Matcher]] that should no longer apply to a given agent.
 * @param agent The agent the Matcher should no longer apply to.
 * @returns A copy of the Matcher, not applying to the given agent.
 * @since Not released yet.
 */


function removeAgent(matcher, agent) {
  return removeIri(matcher, acp.agent, agent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the Matcher applies to any agent.
 *
 * @param matcher The Matcher checked for public access.
 * @returns Whether the Matcher applies to any agent or not.
 * @since Not released yet.
 */


function hasPublic(matcher) {
  return getIriAll(matcher, acp.agent).filter(agent => agent === acp.PublicAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Matcher to apply to any Agent.
 *
 * @param matcher The Matcher being modified.
 * @returns A copy of the Matcher, updated to apply to any agent.
 * @since Not released yet.
 */


function setPublic(matcher) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.");
  }

  return addIri(matcher, acp.agent, acp.PublicAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Matcher to no longer apply to any Agent.
 *
 * @param matcher The Matcher being modified.
 * @returns A copy of the Matcher, updated to no longer apply to any agent.
 * @since Not released yet.
 */


function removePublic(matcher) {
  return removeIri(matcher, acp.agent, acp.PublicAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the Matcher applies to any authenticated agent.
 *
 * @param matcher The Matcher checked for authenticated access.
 * @returns Whether the Matcher applies to any authenticated agent or not.
 * @since Not released yet.
 */


function hasAuthenticated(matcher) {
  return getIriAll(matcher, acp.agent).filter(agent => agent === acp.AuthenticatedAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Matcher to apply to any authenticated Agent.
 *
 * @param matcher The Matcher being modified.
 * @returns A copy of the Matcher, updated to apply to any authenticated Agent.
 * @since Not released yet.
 */


function setAuthenticated(matcher) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.");
  }

  return addIri(matcher, acp.agent, acp.AuthenticatedAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Matcher to no longer apply to any authenticated Agent.
 *
 * @param matcher The Matcher being modified.
 * @returns A copy of the Matcher, updated to apply/not apply to any authenticated agent.
 * @since Not released yet.
 */


function removeAuthenticated(matcher) {
  return removeIri(matcher, acp.agent, acp.AuthenticatedAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the Matcher applies to the creator of the Resource.
 *
 * @param matcher The Matcher checked for authenticated access.
 * @returns Whether the Matcher applies to the creator of the Resource or not.
 * @since Not released yet.
 */


function hasCreator(matcher) {
  return getIriAll(matcher, acp.agent).filter(agent => agent === acp.CreatorAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Matcher to apply to the creator of a Resource.
 *
 * @param matcher The Matcher being modified.
 * @returns A copy of the Matcher, updated to apply to the creator of a Resource.
 * @since Not released yet.
 */


function setCreator(matcher) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.");
  }

  return addIri(matcher, acp.agent, acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Matcher to no longer apply to the creator of a Resource.
 *
 * @param matcher The Matcher being modified.
 * @returns A copy of the Matcher, updated to apply/not apply to the creator of a Resource.
 * @since Not released yet.
 */


function removeCreator(matcher) {
  return removeIri(matcher, acp.agent, acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * List all the clients a [[Matcher]] applies **directly** to. This will not include
 * specific client classes, such as public clients.
 *
 * @param matcher The Matcher from which clients are read.
 * @returns A list of the WebIDs of clients included in the Matcher.
 * @since Not released yet.
 */


function getClientAll(matcher) {
  return getIriAll(matcher, acp.client).filter(client => client !== solid.PublicOidcClient).concat(getStringNoLocaleAll(matcher, acp.client));
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the clients the [[Matcher]] applies to with the provided Client.
 *
 * @param matcher The Matcher for which clients are set.
 * @param client The Client the Matcher should apply to.
 * @returns A copy of the input Matcher, applying to a different set of Clients.
 */


function setClient(matcher, client) {
  // Preserve the special "any client" class, which we
  // don't want to overwrite with this function.
  const anyClientEnabled = hasAnyClient(matcher);
  let result = setIri(matcher, acp.client, client); // Restore the "any client" class

  if (anyClientEnabled) {
    result = setAnyClient(result);
  }

  return result;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Matcher]] to an additional Client.
 *
 * @param matcher The [[Matcher]] to be applied to an additional Client.
 * @param client The Client the [[Matcher]] should apply to.
 * @returns A copy of the [[Matcher]], applying to an additional Client.
 * @since Not released yet.
 */


function addClient(matcher, client) {
  if (!internal_isValidUrl(client)) {
    return addStringNoLocale(matcher, acp.client, client);
  }

  return addIri(matcher, acp.client, client);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Matcher]] from applying to a given Client directly.
 *
 * @param matcher The [[Matcher]] that should no longer apply to a given Client.
 * @param client The Client the Matcher should no longer apply to.
 * @returns A copy of the Matcher, not applying to the given Client.
 * @since Not released yet.
 */


function removeClient(matcher, client) {
  if (!internal_isValidUrl(client)) {
    return removeStringNoLocale(matcher, acp.client, client);
  }

  return removeIri(matcher, acp.client, client);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the Matcher applies to any client, i.e. all the applications
 * regardless of their identifier.
 *
 * @param matcher The Matcher checked for authenticated access.
 * @returns Whether the Matcher applies to public clients.
 * @since Not released yet.
 * @deprecated
 */


function hasAnyClient(matcher) {
  return getIriAll(matcher, acp.client).filter(client => client === solid.PublicOidcClient).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Make the [[Matcher]] apply to any client application.
 *
 * @param matcher The Matcher for which clients are set.
 * @returns A copy of the Matcher, updated to apply to any client
 * @since Not released yet.
 * @deprecated
 */


function setAnyClient(matcher) {
  return addIri(matcher, acp.client, solid.PublicOidcClient);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Make the [[Matcher]] no longer apply to any client application.
 *
 * @param matcher The Matcher for which clients are set.
 * @returns A copy of the Matcher, updated to no longer apply to any client
 * @since Not released yet.
 * @deprecated
 */


function removeAnyClient(matcher) {
  return removeIri(matcher, acp.client, solid.PublicOidcClient);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const v4AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor,
  isAcpControlled,
  getVcAccess,
  setVcAccess
};
const v4ControlFunctions = {
  addAcrPolicyUrl,
  addMemberAcrPolicyUrl,
  addMemberPolicyUrl,
  addPolicyUrl,
  getAcrPolicyUrlAll,
  getMemberAcrPolicyUrlAll,
  getMemberPolicyUrlAll,
  getPolicyUrlAll,
  hasLinkedAcr,
  removeAcrPolicyUrl,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl,
  removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrl,
  removeMemberPolicyUrlAll,
  removePolicyUrl,
  removePolicyUrlAll
};
const v4PolicyFunctions = {
  createPolicy,
  getAllowModes: getAllowModesV2,
  getDenyModes: getDenyModesV2,
  getPolicy,
  getPolicyAll,
  removePolicy,
  setAllowModes: setAllowModesV2,
  setDenyModes: setDenyModesV2,
  setPolicy,
  createResourcePolicyFor,
  getResourceAcrPolicy,
  getResourceAcrPolicyAll,
  getResourcePolicy,
  getResourcePolicyAll,
  removeResourceAcrPolicy,
  removeResourcePolicy,
  setResourcePolicy
};
const v4MatcherFunctions = {
  addAgent,
  createMatcher,
  getAgentAll,
  getMatcher,
  getMatcherAll,
  removeAgent,
  removeMatcher,
  setAgent,
  setMatcher,
  addClient,
  getClientAll,
  hasAnyClient,
  removeClient,
  setAnyClient,
  setClient,
  removeAnyClient,
  hasAuthenticated,
  hasCreator,
  hasPublic,
  setAuthenticated,
  setCreator,
  setPublic,
  removeAuthenticated,
  removeCreator,
  removePublic,
  getAnyOfMatcherUrlAll,
  addAnyOfMatcherUrl,
  removeAnyOfMatcherUrl,
  setAnyOfMatcherUrl,
  getAllOfMatcherUrlAll,
  addAllOfMatcherUrl,
  removeAllOfMatcherUrl,
  setAllOfMatcherUrl,
  getNoneOfMatcherUrlAll,
  addNoneOfMatcherUrl,
  removeNoneOfMatcherUrl,
  setNoneOfMatcherUrl,
  createResourceMatcherFor,
  getResourceMatcher,
  getResourceMatcherAll,
  removeResourceMatcher,
  setResourceMatcher
};
const v4MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
/**
 * @hidden
 * @deprecated Please import "acp_ess_2" directly.
 */

const acp_v4 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v4AcpFunctions), v4ControlFunctions), v4PolicyFunctions), v4MatcherFunctions), v4MockFunctions);
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.acp_v4 = acp_v4;
const knownActorRelations$1 = [acp.agent, acp.group];
/**
 * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this actor.
 *
 * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setActorAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to get the access for.
 * @param actor Which instance of the given actor type you want to get the access for.
 * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.
 */

function internal_getActorAccess$1(acpData, actorRelation, actor) {
  if (acpData.inaccessibleUrls.length > 0) {
    // If we can't see all access data,
    // we can't reliably determine what access the given actor has:
    return null;
  }

  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));
  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));
  const initialAccess = {
    read: false,
    append: false,
    write: false,
    controlRead: false,
    controlWrite: false
  }; // All allowed reading and writing defined in ACR policies
  // determines whether the `controlRead` and `controlWrite` statuses are `true`.

  const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {
    const allAllowedAccess = Object.assign({}, acc);
    const allowModes = getAllowModesV1(policy);

    if (allowModes.read) {
      allAllowedAccess.controlRead = true;
    }

    if (allowModes.write) {
      allAllowedAccess.controlWrite = true;
    }

    return allAllowedAccess;
  }, initialAccess); // Then allowed reading, appending and writing in regular policies
  // determines whether the respective status is `true`.

  const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {
    const allAllowedAccess = Object.assign({}, acc);
    const allowModes = getAllowModesV1(policy);

    if (allowModes.read) {
      allAllowedAccess.read = true;
    }

    if (allowModes.append) {
      allAllowedAccess.append = true;
    }

    if (allowModes.write) {
      allAllowedAccess.write = true;
    }

    return allAllowedAccess;
  }, allowedAcrAccess); // At this point, everything that has been explicitly allowed is true.
  // However, it could still be overridden by access that is explicitly denied.
  // Starting with `controlRead` and `controlWrite`,
  // by inspecting denied reading and writing defined in the ACR policies.

  const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {
    const allDeniedAccess = Object.assign({}, acc);
    const denyModes = getDenyModesV1(policy);

    if (denyModes.read === true) {
      allDeniedAccess.controlRead = false;
    }

    if (denyModes.write === true) {
      allDeniedAccess.controlWrite = false;
    }

    return allDeniedAccess;
  }, withAllowedAccess); // And finally, we set to `false` those access modes that are explicitly denied
  // in the regular policies:

  const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {
    const allDeniedAccess = Object.assign({}, acc);
    const denyModes = getDenyModesV1(policy);

    if (denyModes.read === true) {
      allDeniedAccess.read = false;
    }

    if (denyModes.append === true) {
      allDeniedAccess.append = false;
    }

    if (denyModes.write === true) {
      allDeniedAccess.write = false;
    }

    return allDeniedAccess;
  }, withAcrDeniedAccess);
  return withDeniedAccess;
}
/**
 * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this Agent.
 *
 * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param webId WebID of the Agent you want to get the access for.
 * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.
 */


function internal_getAgentAccess$1(acpData, webId) {
  return internal_getActorAccess$1(acpData, acp.agent, webId);
}
/**
 * Get an overview of what access is defined for a given Group in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this Group.
 *
 * Additionally, this only considers access given _explicitly_ to the given Group, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setGroupAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param groupUrl URL of the Group you want to get the access for.
 * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.
 */


function internal_getGroupAccess(acpData, groupUrl) {
  return internal_getActorAccess$1(acpData, acp.group, groupUrl);
}
/**
 * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to everybody.
 *
 * Additionally, this only considers access given _explicitly_ to everybody, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setPublicAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.
 */


function internal_getPublicAccess$1(acpData) {
  return internal_getActorAccess$1(acpData, acp.agent, acp.PublicAgent);
}

function policyAppliesTo$1(policy, actorRelation, actor, acpData) {
  const allowModes = getIriAll(policy, acp.allow);
  const denyModes = getIriAll(policy, acp.deny);

  if (allowModes.length + denyModes.length === 0) {
    // A Policy that does not specify access modes does not do anything:
    return false;
  } // Note: the non-null assertions (`!`) here should be valid because
  //       the caller of `policyAppliesTo` should already have validated that
  //       the return value of internal_getPoliciesAndRules() did not have any
  //       inaccessible URLs, so we should be able to find every Rule.


  const allOfRules = getAllOfRuleUrlAll(policy).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));
  const anyOfRules = getAnyOfRuleUrlAll(policy).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));
  const noneOfRules = getNoneOfRuleUrlAll(policy).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl)); // We assume that this Policy applies if this specific actor is mentioned
  // and no further restrictions are in place.
  // (In other words, the Policy may apply to others *in addition to* this
  // actor, but if it applies to this actor *unless* some other condition holds,
  // we cannot be sure whether it will apply to this actor.)
  // This means that:

  return (// Every existing allOf Rule explicitly applies explicitly to this given actor:
    allOfRules.every(rule => ruleAppliesTo(rule, actorRelation, actor)) && ( // If there are anyOf Rules, at least one applies explicitly to this actor:
    anyOfRules.length === 0 || anyOfRules.some(rule => ruleAppliesTo(rule, actorRelation, actor))) && // No further restrictions are in place that make this sometimes not apply
    // to the given actor:
    noneOfRules.length === 0
  );
}

function policyConflictsWith$1(policy, otherAccess) {
  const allowModes = getIriAll(policy, acp.allow);
  const denyModes = getIriAll(policy, acp.deny);
  return otherAccess.read === true && denyModes.includes(acp.Read) || otherAccess.read === false && allowModes.includes(acp.Read) && !denyModes.includes(acp.Read) || otherAccess.append === true && denyModes.includes(acp.Append) || otherAccess.append === false && allowModes.includes(acp.Append) && !denyModes.includes(acp.Append) || otherAccess.write === true && denyModes.includes(acp.Write) || otherAccess.write === false && allowModes.includes(acp.Write) && !denyModes.includes(acp.Write);
}

function ruleAppliesTo(rule, actorRelation, actor) {
  // A Rule that does not list *any* actor matches for everyone:
  let isEmpty = true;
  knownActorRelations$1.forEach(knownActorRelation => {
    isEmpty && (isEmpty = getIri(rule, knownActorRelation) === null);
  });
  return isEmpty || getIriAll(rule, actorRelation).includes(actor);
}
/**
 * Get a set of all actors mentioned in an ACR by active Rules (i.e. that are
 * referenced by Policies referenced by the ACR Control, and therefore that
 * effectively apply).
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param actorRelation
 */


function internal_findActorAll$1(acpData, actorRelation) {
  const actors = new Set(); // This code could be prettier using flat(), which isn't supported by nodeJS 10.
  // If you read this comment after April 2021, feel free to refactor.

  acpData.rules.forEach(rule => {
    getIriAll(rule, actorRelation).filter(iri => ![acp.PublicAgent, acp.CreatorAgent, acp.AuthenticatedAgent].includes(iri) || actorRelation != acp.agent).forEach(iri => actors.add(iri));
  });
  return actors;
}
/**
 * Iterate through all the actors active for an ACR, and list all of their access.
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param actorRelation The type of actor we want to list access for
 * @returns A map with each actor access indexed by their URL, or null if some
 * external policies are referenced.
 */


function internal_getActorAccessAll$1(acpData, actorRelation) {
  if (acpData.inaccessibleUrls.length > 0) {
    // If we can't see all access data,
    // we can't reliably determine what access actors of the given type have:
    return null;
  }

  const result = {};
  const actors = internal_findActorAll$1(acpData, actorRelation);
  actors.forEach(iri => {
    // The type assertion holds, because if internal_getActorAccess were null,
    // we would have returned {} already.
    const access = internal_getActorAccess$1(acpData, actorRelation, iri);
    result[iri] = access;
  });
  return result;
}
/**
 * Get an overview of what access are defined for all Groups in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to the mentionned
 * Groups.
 *
 * Additionally, this only considers access given _explicitly_ to individual Groups, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @returns A map with each Group's access indexed by their URL, or null if some
 * external policies are referenced.
 */


function internal_getGroupAccessAll(acpData) {
  return internal_getActorAccessAll$1(acpData, acp.group);
}
/**
 * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to the mentionned
 * Agents.
 *
 * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @returns A map with each Agent's access indexed by their WebID, or null if some
 * external policies are referenced.
 */


function internal_getAgentAccessAll$1(acpData) {
  return internal_getActorAccessAll$1(acpData, acp.agent);
}
/**
 * Set access to a Resource for a specific actor.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for the given
 * actor specifically. In other words, it can, for example, add Policies that
 * give a particular Group Read access to the Resource. However, if other
 * Policies specify that everyone in that Group is *denied* Read access *except*
 * for a particular Agent, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for an agent matching the given actor.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to set the access for.
 * @param actor Which instance of the given actor type you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setActorAccess$1(resource, acpData, actorRelation, actor, access) {
  var _a, _b, _c, _d, _e;

  if (!hasAccessibleAcr(resource) || acpData.inaccessibleUrls.length > 0) {
    return null;
  } // Get the access that currently applies to the given actor


  const existingAccess = internal_getActorAccess$1(acpData, actorRelation, actor);
  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */

  if (existingAccess === null) {
    return null;
  } // Get all Policies that apply specifically to the given actor


  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData));
  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo$1(policy, actorRelation, actor, acpData)); // We only need to override Policies that define access other than what we want:

  const conflictingAcrPolicies = applicableAcrPolicies.filter(policy => policyConflictsWith$1(policy, {
    read: access.controlRead,
    write: access.controlWrite
  }));
  const conflictingPolicies = applicablePolicies.filter(policy => policyConflictsWith$1(policy, {
    read: access.read,
    append: access.append,
    write: access.write
  })); // For every Policy that applies specifically to the given Actor, but _also_
  // to another actor (i.e. that applies using an anyOf Rule, or a Rule that
  // mentions both the given and another actor)...

  const otherActorAcrPolicies = conflictingAcrPolicies.filter(acrPolicy => policyHasOtherActors$1(acrPolicy, actorRelation, actor, acpData));
  const otherActorPolicies = conflictingPolicies.filter(policy => policyHasOtherActors$1(policy, actorRelation, actor, acpData)); // ...check what access the current actor would have if we removed them...

  const acpDataWithPoliciesExcluded = Object.assign(Object.assign({}, acpData), {
    acrPolicies: acpData.acrPolicies.filter(acrPolicy => !otherActorAcrPolicies.includes(acrPolicy)),
    policies: acpData.policies.filter(policy => !otherActorPolicies.includes(policy))
  });
  const remainingAccess = internal_getActorAccess$1(acpDataWithPoliciesExcluded, actorRelation, actor);
  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */

  if (remainingAccess === null) {
    return null;
  } // ...add copies of those Policies and their Rules, but excluding the given actor...


  let updatedResource = resource;
  otherActorAcrPolicies.forEach(acrPolicy => {
    const [policyCopy, ruleCopies] = copyPolicyExcludingActor$1(acrPolicy, resource, acpData, actorRelation, actor);
    updatedResource = setResourceAcrPolicy(updatedResource, policyCopy);
    updatedResource = ruleCopies.reduce(setResourceRule, updatedResource);
  });
  otherActorPolicies.forEach(policy => {
    const [policyCopy, ruleCopies] = copyPolicyExcludingActor$1(policy, resource, acpData, actorRelation, actor);
    updatedResource = setResourcePolicy$1(updatedResource, policyCopy);
    updatedResource = ruleCopies.reduce(setResourceRule, updatedResource);
  }); // ...add a new Policy that applies the given access,
  // and the previously applying access for access modes that were undefined...

  const newRuleName = `rule_${encodeURIComponent(`${actorRelation}_${actor}`)}`;
  let newRule = createResourceRuleFor(resource, newRuleName);
  newRule = setIri(newRule, actorRelation, actor);
  const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;
  const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;
  let acrPoliciesToUnapply = otherActorAcrPolicies; // Only replace existing Policies if the defined access actually changes:

  if (newControlReadAccess !== remainingAccess.controlRead || newControlWriteAccess !== remainingAccess.controlWrite) {
    const newAcrPolicyName = `acr_policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;
    let newAcrPolicy = createResourcePolicyFor(resource, newAcrPolicyName);
    newAcrPolicy = setAllowModesV1(newAcrPolicy, {
      read: newControlReadAccess === true,
      append: false,
      write: newControlWriteAccess === true
    });
    newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newRule);
    updatedResource = setResourceAcrPolicy(updatedResource, newAcrPolicy);
    updatedResource = setResourceRule(updatedResource, newRule); // If we don't have to set new access, we only need to unapply the
    // ACR Policies that applied to both the given actor and other actors
    // (because they have been replaced by clones not mentioning the given
    // actor). Hence `policiesToUnApply` is initialised to `otherActorPolicies`.
    // However, if we're in this if branch, that means we also had to replace
    // Policies that defined access for just this actor, so we'll have to remove
    // all Policies mentioning this actor:

    acrPoliciesToUnapply = conflictingAcrPolicies;
  }

  const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;
  const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;
  const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;
  let policiesToUnapply = otherActorPolicies; // Only replace existing Policies if the defined access actually changes:

  if (newReadAccess !== remainingAccess.read || newAppendAccess !== remainingAccess.append || newWriteAccess !== remainingAccess.write) {
    const newPolicyName = `policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;
    let newPolicy = createResourcePolicyFor(resource, newPolicyName);
    newPolicy = setAllowModesV1(newPolicy, {
      read: newReadAccess === true,
      append: newAppendAccess === true,
      write: newWriteAccess === true
    });
    newPolicy = addIri(newPolicy, acp.allOf, newRule);
    updatedResource = setResourcePolicy$1(updatedResource, newPolicy);
    updatedResource = setResourceRule(updatedResource, newRule); // If we don't have to set new access, we only need to unapply the
    // Policies that applied to both the given actor and other actors (because
    // they have been replaced by clones not mentioning the given actor). Hence
    // `policiesToUnApply` is initialised to `otherActorPolicies`.
    // However, if we're in this if branch, that means we also had to replace
    // Policies that defined access for just this actor, so we'll have to remove
    // all Policies mentioning this actor:

    policiesToUnapply = conflictingPolicies;
  } // ...then remove existing Policy URLs that mentioned both the given actor
  // and other actors from the given Resource and apply the new ones (but do not
  // remove the actual old Policies - they might still apply to other Resources!).


  acrPoliciesToUnapply.forEach(previouslyApplicableAcrPolicy => {
    updatedResource = removeAcrPolicyUrl$1(updatedResource, asIri(previouslyApplicableAcrPolicy));
  });
  policiesToUnapply.forEach(previouslyApplicablePolicy => {
    updatedResource = removePolicyUrl$1(updatedResource, asIri(previouslyApplicablePolicy));
  });
  return updatedResource;
}
/**
 * Set access to a Resource for a specific Agent.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for the given
 * Agent specifically. In other words, it can, for example, add Policies that
 * give a particular Agent Read access to the Resource. However, if other
 * Policies specify that that Agent is *denied* Read access *except* if they're
 * in a particular Group, then that will be left intact.
 * This means that, unless *only* this function is used to manipulate access to
 * this Resource, the set access might not be equal to the effective access for
 * the given Agent.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param webId Which Agent you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setAgentAccess$1(resource, acpData, webId, access) {
  return internal_setActorAccess$1(resource, acpData, acp.agent, webId, access);
}
/**
 * Set access to a Resource for a specific Group.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for the given
 * Group specifically. In other words, it can, for example, add Policies that
 * give a particular Group Read access to the Resource. However, if other
 * Policies specify that it is *denied* Read access *except* if they're a
 * particular Agent, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for Agents in the given Group.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param groupUrl Which Group you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Group. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setGroupAccess(resource, acpData, groupUrl, access) {
  return internal_setActorAccess$1(resource, acpData, acp.group, groupUrl, access);
}
/**
 * Set access to a Resource for everybody.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for everybody
 * specifically. In other words, it can, for example, add Policies that
 * give everybody Read access to the Resource. However, if other
 * Policies specify that everybody is *denied* Read access *except* if they're
 * in a particular Group, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for a particular Agent.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Rules that apply to a particular Resource.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setPublicAccess$1(resource, acpData, access) {
  return internal_setActorAccess$1(resource, acpData, acp.agent, acp.PublicAgent, access);
}

function policyHasOtherActors$1(policy, actorRelation, actor, acpData) {
  // Note: the non-null assertions (`!`) here should be valid because
  //       the caller of `policyHasOtherActors` should already have validated
  //       that the return value of internal_getPoliciesAndRules() did not have
  //       any inaccessible URLs, so we should be able to find every Rule.
  const allOfRules = getIriAll(policy, acp.allOf).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));
  const allOfRulesHaveOtherActors = allOfRules.some(rule => {
    return ruleHasOtherActors(rule, actorRelation, actor);
  });
  const anyOfRules = getIriAll(policy, acp.anyOf).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));
  const anyOfRulesHaveOtherActors = anyOfRules.some(rule => {
    return ruleHasOtherActors(rule, actorRelation, actor);
  });
  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */

  const noneOfRules = getIriAll(policy, acp.noneOf).map(ruleUrl => acpData.rules.find(rule => asIri(rule) === ruleUrl));
  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */

  const noneOfRulesHaveOtherActors = noneOfRules.some(rule => {
    return ruleHasOtherActors(rule, actorRelation, actor);
  });
  return allOfRulesHaveOtherActors || anyOfRulesHaveOtherActors || noneOfRulesHaveOtherActors;
}

function ruleHasOtherActors(rule, actorRelation, actor) {
  const otherActors = [];
  knownActorRelations$1.forEach(knownActorRelation => {
    const otherActorsWithThisRelation = getIriAll(rule, knownActorRelation).filter(applicableActor => applicableActor !== actor || knownActorRelation !== actorRelation); // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:

    otherActors.push(...otherActorsWithThisRelation);
  });
  return otherActors.length > 0;
}

function copyPolicyExcludingActor$1(inputPolicy, resourceWithAcr, acpData, actorRelationToExclude, actorToExclude) {
  const newIriSuffix = "_copy_without" + `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` + `_${Date.now()}_${Math.random()}`; // Create new Rules for the Policy, excluding the given Actor

  const newAllOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.allOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);
  const newAnyOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.anyOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);
  const newNoneOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.noneOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude); // Create a new Policy with the new Rules

  let newPolicy = createResourcePolicyFor(resourceWithAcr, encodeURI(asIri(inputPolicy)) + newIriSuffix);
  getIriAll(inputPolicy, acp.allow).forEach(allowMode => {
    newPolicy = addIri(newPolicy, acp.allow, allowMode);
  });
  getIriAll(inputPolicy, acp.deny).forEach(denyMode => {
    newPolicy = addIri(newPolicy, acp.deny, denyMode);
  });
  newAllOfRules.forEach(newRule => {
    newPolicy = addIri(newPolicy, acp.allOf, newRule);
  });
  newAnyOfRules.forEach(newRule => {
    newPolicy = addIri(newPolicy, acp.anyOf, newRule);
  });
  /* istanbul ignore next Policies listing noneOf Rules are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Rules to copy. */

  newNoneOfRules.forEach(newRule => {
    newPolicy = addIri(newPolicy, acp.noneOf, newRule);
  });
  return [newPolicy, newAllOfRules.concat(newAnyOfRules).concat(newNoneOfRules)];
}
/** Creates clones of all the Rules identified by `ruleIris` in `acpData`, excluding the given Actor */


function copyRulesExcludingActor(ruleIris, resourceWithAcr, acpData, iriSuffix, actorRelationToExclude, actorToExclude) {
  return ruleIris.map(ruleIri => {
    const rule = acpData.rules.find(rule => asIri(rule) === ruleIri);
    /* istanbul ignore if: getPoliciesAndRules should already have fetched all referenced Rules, so this should never be true: */

    if (typeof rule === "undefined") {
      return null;
    }

    let newRule = createResourceRuleFor(resourceWithAcr, encodeURI(asIri(rule)) + iriSuffix);
    let listsOtherActors = false;
    knownActorRelations$1.forEach(knownActorRelation => {
      getIriAll(rule, knownActorRelation).forEach(targetActor => {
        if (knownActorRelation === actorRelationToExclude && targetActor === actorToExclude) {
          return;
        }

        listsOtherActors = true;
        newRule = addIri(newRule, knownActorRelation, targetActor);
      });
    });
    return listsOtherActors ? newRule : null;
  }).filter(isNotNull$1);
}

function isNotNull$1(value) {
  return value !== null;
}

async function internal_getPoliciesAndRules(resource, options = internal_defaultFetchOptions) {
  const acrPolicyUrls = getAcrPolicyUrlAll$1(resource);
  const policyUrls = getPolicyUrlAll$1(resource);
  const allPolicyResourceUrls = getResourceUrls$1(acrPolicyUrls).concat(getResourceUrls$1(policyUrls));
  const policyResources = await getResources$1(allPolicyResourceUrls, options);
  const acrPolicies = getThingsFromResources$1(acrPolicyUrls, policyResources).filter(isNotNull$1);
  const policies = getThingsFromResources$1(policyUrls, policyResources).filter(isNotNull$1);
  const ruleUrlSet = new Set();
  acrPolicies.forEach(acrPolicy => {
    const referencedRuleUrls = getReferencedRuleUrls(acrPolicy);
    referencedRuleUrls.forEach(ruleUrl => {
      ruleUrlSet.add(ruleUrl);
    });
  });
  policies.forEach(policy => {
    const referencedRuleUrls = getReferencedRuleUrls(policy);
    referencedRuleUrls.forEach(ruleUrl => {
      ruleUrlSet.add(ruleUrl);
    });
  });
  const ruleUrls = Array.from(ruleUrlSet);
  const ruleResourceUrls = ruleUrls.map(ruleUrl => getResourceUrl$1(ruleUrl));
  const unfetchedRuleResourceUrls = ruleResourceUrls.filter(ruleResourceUrl => !allPolicyResourceUrls.includes(ruleResourceUrl));
  const ruleResources = await getResources$1(unfetchedRuleResourceUrls, options);
  const allResources = Object.assign(Object.assign({}, policyResources), ruleResources);
  const rules = getThingsFromResources$1(ruleUrls, allResources).filter(isNotNull$1);
  const inaccessibleUrls = Object.keys(allResources).filter(resourceUrl => allResources[resourceUrl] === null);
  return {
    inaccessibleUrls: inaccessibleUrls,
    acrPolicies: acrPolicies,
    policies: policies,
    rules: rules
  };
}

function getResourceUrl$1(thingUrl) {
  const thingUrlObject = new URL(thingUrl);
  thingUrlObject.hash = "";
  return thingUrlObject.href;
}

function getResourceUrls$1(thingUrls) {
  const resourceUrls = [];
  thingUrls.forEach(thingUrl => {
    const resourceUrl = getResourceUrl$1(thingUrl);

    if (!resourceUrls.includes(resourceUrl)) {
      resourceUrls.push(resourceUrl);
    }
  });
  return resourceUrls;
}

async function getResources$1(resourceUrls, options) {
  const uniqueResourceUrls = Array.from(new Set(resourceUrls));
  const resources = {};
  await Promise.all(uniqueResourceUrls.map(async resourceUrl => {
    try {
      const resource = await getSolidDataset(resourceUrl, options);
      resources[resourceUrl] = resource;
    } catch (e) {
      resources[resourceUrl] = null;
    }
  }));
  return resources;
}

function getThingsFromResources$1(thingUrls, resources) {
  return thingUrls.map(thingUrl => {
    const resourceUrl = getResourceUrl$1(thingUrl);
    const resource = resources[resourceUrl];

    if (!resource) {
      return null;
    }

    return getThing(resource, thingUrl);
  });
}

function getReferencedRuleUrls(policy) {
  return getAllOfRuleUrlAll(policy).concat(getAnyOfRuleUrlAll(policy)).concat(getNoneOfRuleUrlAll(policy));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function universalAccessToAcl(newAccess, previousAccess) {
  var _a, _b, _c, _d; // Universal access is aligned on ACP, which means there is a distinction between
  // controlRead and controlWrite. This split doesn't exist in WAC, which is why
  // the type for the input variable of this function is a restriction on the
  // universal Access type.


  if (newAccess.controlRead !== newAccess.controlWrite) {
    throw new Error("For Pods using Web Access Control, controlRead and controlWrite must be equal.");
  }

  return {
    read: (_a = newAccess.read) !== null && _a !== void 0 ? _a : previousAccess.read,
    append: (_b = newAccess.append) !== null && _b !== void 0 ? _b : previousAccess.append,
    write: (_c = newAccess.write) !== null && _c !== void 0 ? _c : previousAccess.write,
    control: (_d = newAccess.controlRead) !== null && _d !== void 0 ? _d : previousAccess.control
  };
}

function aclAccessToUniversal(access) {
  // In ACL, denying access to an actor is a notion that doesn't exist, so an
  // access is either granted or not for a given mode.
  // This creates a misalignment with the ACP notion of an access being granted,
  // denied, or simply not mentioned. Here, we convert the boolean vision of
  // ACL into the boolean or undefined vision of ACP.
  return {
    read: access.read,
    write: access.write,
    append: access.append,
    controlRead: access.control,
    controlWrite: access.control
  };
}

async function getActorAccess(resource, actor, accessEvaluationCallback, options) {
  const resourceAcl = await internal_fetchAcl(resource, options);
  const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl), actor);

  if (wacAccess === null) {
    return null;
  }

  return aclAccessToUniversal(wacAccess);
}

async function getActorClassAccess(resource, accessEvaluationCallback, options) {
  const resourceAcl = await internal_fetchAcl(resource, options);
  const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));

  if (wacAccess === null) {
    return null;
  }

  return aclAccessToUniversal(wacAccess);
}

async function getActorAccessAll(resource, accessEvaluationCallback, options) {
  const resourceAcl = await internal_fetchAcl(resource, options);
  const wacAgentAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));

  if (wacAgentAccess === null) {
    return null;
  }

  const result = {};

  for (const [webId, wacAccess] of Object.entries(wacAgentAccess)) {
    result[webId] = aclAccessToUniversal(wacAccess);
  }

  return result;
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted to the given Agent.
 *
 * Note that this only lists permissions granted to the given Agent individually,
 * and will not exhaustively list modes the given Agent may have access to because
 * they apply to everyone, or because they apply to the Agent through a group for
 * instance.
 *
 * @param resource The URL of the Resource for which we want to list Access
 * @param agent The Agent for which the Access is granted
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.
 */


function getAgentAccess$4(resource, agent, options = internal_defaultFetchOptions) {
  return getActorAccess(resource, agent, getAgentAccess$5, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted to the given Group.
 *
 * Note that this only lists permissions granted to the given Group individually,
 * and will not exhaustively list modes the given Group may have access to because
 * they apply to everyone, or because they apply to the Group through another
 * Group that may contain it for instance.
 *
 * @param resource The URL of the Resource for which we want to list Access
 * @param group The Group for which the Access is granted
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.
 */


function getGroupAccess$1(resource, group, options = internal_defaultFetchOptions) {
  return getActorAccess(resource, group, getGroupAccess$2, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted to everyone.
 *
 * Note that this only lists permissions explicitly granted to everyone as a whole,
 * and will not exhaustively list modes any individual Agent or Group may have
 * access to because they specifically apply to them only.
 *
 * @param resource The URL of the Resource for which we want to list public Access
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns What Access modes are granted to the everyone explicitly, or null if it could not be determined.
 */


function getPublicAccess$4(resource, options = internal_defaultFetchOptions) {
  return getActorClassAccess(resource, getPublicAccess$5, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted explicitly to each individual Agent.
 *
 * Note that this only lists permissions granted to each Agent individually,
 * and will not exhaustively list modes any Agent may have access to because
 * they apply to everyone, or because they apply to an Agent through a group for
 * instance.
 *
 * @param resource The URL of the Resource for which we want to list Agents Access
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A map of Agent WebIDs and the access granted to them, or null if it could not be determined.
 */


function getAgentAccessAll$4(resource, options = internal_defaultFetchOptions) {
  return getActorAccessAll(resource, getAgentAccessAll$5, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted explicitly to each individual Group.
 *
 * Note that this only lists permissions granted to each Group individually,
 * and will not exhaustively list modes any Group may have access to because
 * they apply individually to all of the Agents in the Group, or to everyone
 * for instance.
 *
 * @param resource The URL of the Resource for which we want to list Agents Access
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A map of Group URLs and the access granted to them, or null if it could not be determined.
 */


function getGroupAccessAll$1(resource, options = internal_defaultFetchOptions) {
  return getActorAccessAll(resource, getGroupAccessAll$2, options);
}

async function prepareResourceAcl(resource, options) {
  if (!hasAccessibleAcl(resource)) {
    return null;
  }

  const acl = await internal_fetchAcl(resource, options);
  const resourceWithAcl = internal_setAcl(resource, acl);
  let resourceAcl;

  if (hasResourceAcl(resourceWithAcl)) {
    // This is the simple case, where the Resource ACL we need to update already
    // exists.
    resourceAcl = internal_getResourceAcl(resourceWithAcl);
  } else if (hasFallbackAcl(resourceWithAcl)) {
    // In this case, the Resource ACL needs to be created first, and then updated.
    resourceAcl = createAclFromFallbackAcl(resourceWithAcl);
  } else {
    return null;
  }

  return internal_setResourceAcl(resourceWithAcl, resourceAcl);
}

async function saveUpdatedAcl(resource, acl, options) {
  let savedAcl = null;

  try {
    savedAcl = await saveAclFor(resource, acl, options);
    return internal_setResourceAcl(resource, savedAcl);
  } catch (e) {
    return null;
  }
}

async function setActorClassAccess(resource, access, getAccess, setAccess, options) {
  const resourceWithOldAcl = await prepareResourceAcl(resource, options);

  if (resourceWithOldAcl === null) {
    return null;
  }

  const resourceAcl = getResourceAcl(resourceWithOldAcl);
  const currentAccess = getAccess(resourceWithOldAcl);
  const wacAccess = universalAccessToAcl(access, currentAccess);
  const updatedResourceAcl = setAccess(resourceAcl, wacAccess);
  return await saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);
}

async function setActorAccess(resource, actor, access, getAccess, setAccess, options) {
  const resourceWithOldAcl = await prepareResourceAcl(resource, options);

  if (resourceWithOldAcl === null) {
    return null;
  }

  const currentAccess = getAccess(resourceWithOldAcl, actor);
  const resourceAcl = getResourceAcl(resourceWithOldAcl);
  const wacAccess = universalAccessToAcl(access, currentAccess);
  const updatedResourceAcl = setAccess(resourceAcl, actor, wacAccess);
  return await saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);
}
/**
 * Set the Access modes for a given Agent to a given Resource.
 *
 * Important note: if the target resource did not have a Resource ACL, and its
 * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create
 * a new Resource ACL. This has the side effect that the next time the Fallback
 * ACL is updated, the changes _will not impact_ the target resource.
 *
 * If the target Resource's Access mode cannot be determined, e.g. the user does
 * not have Read and Write access to the target Resource's ACL, or to its
 * fallback ACL if it does not have a Resource ACL, then `null` is returned.
 *
 * @param resource The Resource for which Access is being set
 * @param agent The Agent for whom Access is being set
 * @param access The Access being set
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns The Resource, with its ACL updated, or null if the new Access could not
 * be set.
 */


async function setAgentResourceAccess(resource, agent, access, options = internal_defaultFetchOptions) {
  return await setActorAccess(resource, agent, access, getAgentAccess$5, setAgentResourceAccess$1, options);
}
/**
 * Set the Access modes for a given Group to a given Resource.
 *
 * Important note: if the target resource did not have a Resource ACL, and its
 * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create
 * a new Resource ACL. This has the side effect that the next time the Fallback
 * ACL is updated, the changes _will not impact_ the target resource.
 *
 * If the target Resource's Access mode cannot be determined, e.g. the user does
 * not have Read and Write access to the target Resource's ACL, or to its
 * fallback ACL if it does not have a Resource ACL, then `null` is returned.
 *
 * @param resource The Resource for which Access is being set
 * @param agent The Group for which Access is being set
 * @param access The Access being set
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns The Resource, with its ACL updated, or null if the new Access could not
 * be set.
 */


async function setGroupResourceAccess(resource, group, access, options = internal_defaultFetchOptions) {
  return await setActorAccess(resource, group, access, getGroupAccess$2, setGroupResourceAccess$1, options);
}
/**
 * Set the Access modes for everyone to a given Resource.
 *
 * Important note: if the target resource did not have a Resource ACL, and its
 * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create
 * a new Resource ACL. This has the side effect that the next time the Fallback
 * ACL is updated, the changes _will not impact_ the target resource.
 *
 * If the target Resource's Access mode cannot be determined, e.g. the user does
 * not have Read and Write access to the target Resource's ACL, or to its
 * fallback ACL if it does not have a Resource ACL, then `null` is returned.
 *
 * @param resource The Resource for which Access is being set
 * @param access The Access being set
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns The Resource, with its ACL updated, or null if the new Access could not
 * be set.
 */


async function setPublicResourceAccess(resource, access, options = internal_defaultFetchOptions) {
  return await setActorClassAccess(resource, access, getPublicAccess$5, setPublicResourceAccess$1, options);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var universal = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAccessFor: getAccessFor,
  getAccessForAll: getAccessForAll,
  setAccessFor: setAccessFor,
  getAgentAccess: getAgentAccess$3,
  setAgentAccess: setAgentAccess$3,
  getAgentAccessAll: getAgentAccessAll$3,
  getGroupAccess: getGroupAccess,
  getGroupAccessAll: getGroupAccessAll,
  setGroupAccess: setGroupAccess,
  getPublicAccess: getPublicAccess$3,
  setPublicAccess: setPublicAccess$3
});
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.access = universal;

async function getAccessFor(resourceUrl, actorType, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {
  if (actorType === "agent") {
    if (typeof actor !== "string") {
      throw new Error("When reading Agent-specific access, the given agent cannot be left undefined.");
    }

    return await getAgentAccess$3(resourceUrl, actor, options);
  }

  if (actorType === "group") {
    if (typeof actor !== "string") {
      throw new Error("When reading Group-specific access, the given group cannot be left undefined.");
    }

    return await getGroupAccess(resourceUrl, actor, options);
  }

  if (actorType === "public") {
    if (typeof actor === "string") {
      throw new Error(`When reading public access, no actor type should be specified (here [${actor}]).`);
    }

    return await getPublicAccess$3(resourceUrl, actor);
  }

  return null;
}
/**
 * Get an overview of what access is defined for a given set of actors: all Agents
 * or all Groups.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given actor (Agent
 *   or Group). If additional restrictions are set up to apply to the given Agent
 *   in a particular situation, those will not be reflected in the return value
 *   of this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param actorType type of actor whose access is being read.
 * @returns What access is set for the given resource, grouped by resp. Agent or Group.
 * @since 1.5.0
 *
 * @hidden
 * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.
 */


async function getAccessForAll(resourceUrl, actorType, options = internal_defaultFetchOptions) {
  if (actorType === "agent") {
    return await getAgentAccessAll$3(resourceUrl, options);
  }

  if (actorType === "group") {
    return await getGroupAccessAll(resourceUrl, options);
  }

  return null;
}

async function setAccessFor(resourceUrl, actorType, access, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {
  if (actorType === "agent") {
    if (typeof actor !== "string") {
      throw new Error("When writing Agent-specific access, the given agent cannot be left undefined.");
    }

    return await setAgentAccess$3(resourceUrl, actor, access, options);
  }

  if (actorType === "group") {
    if (typeof actor !== "string") {
      throw new Error("When writing Group-specific access, the given group cannot be left undefined.");
    }

    return await setGroupAccess(resourceUrl, actor, access, options);
  }

  if (actorType === "public") {
    if (typeof actor === "string") {
      throw new Error(`When writing public access, no actor type should be specified (here [${actor}]).`);
    }

    return await setPublicAccess$3(resourceUrl, access, actor);
  }

  return null;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for a given Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given Agent. If
 *   additional restrictions are set up to apply to the given Agent in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param webId WebID of the Agent you want to get the access for.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function getAgentAccess$3(resourceUrl, webId, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    return internal_getAgentAccess$1(acpData, webId);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getAgentAccess$4(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Set access to a Resource for a specific Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for the given Agent. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Agent has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change the Agent's access to.
 * @param webId WebID of the Agent you want to set access for.
 * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for the given Agent explicitly.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function setAgentAccess$3(resourceUrl, webId, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    const updatedResource = internal_setAgentAccess$1(resourceInfo, acpData, webId, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return await getAgentAccess$3(resourceUrl, webId, options);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);
    return await getAgentAccess$4(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for all Agents with respect to a given
 * Resource.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the returned Agents. If
 *   additional restrictions are set up to apply to the listed Agents in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @returns The access information to the Resource, grouped by Agent.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function getAgentAccessAll$3(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    return internal_getAgentAccessAll$1(acpData);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getAgentAccessAll$4(resourceInfo, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for a given Group.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given Group. If
 *   additional restrictions are set up to apply to the given Group in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param webId WebID of the Group you want to get the access for.
 * @since 1.5.0
 * @hidden
 * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.
 */


async function getGroupAccess(resourceUrl, webId, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    return internal_getGroupAccess(acpData, webId);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getGroupAccess$1(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for all Groups with respect to a given
 * Resource.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the returned Groups. If
 *   additional restrictions are set up to apply to the listed Groups in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @returns The access information to the Resource, sorted by Group.
 * @since 1.5.0
 * @hidden
 * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.
 */


async function getGroupAccessAll(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    return internal_getGroupAccessAll(acpData);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getGroupAccessAll$1(resourceInfo, options);
  }

  return null;
}
/**
 * Set access to a Resource for a specific Group.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for the given Group. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Group has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change the Group's access to.
 * @param groupUrl URL of the Group you want to set access for.
 * @param access What access permissions you want to set for the given Group to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for the given Group explicitly.
 * @since 1.5.0
 * @hidden
 * @deprecated Access Control Policies will no longer support vcard:Group. Use the mechanism-specific access API's if you want to define access for groups of people.
 */


async function setGroupAccess(resourceUrl, groupUrl, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    const updatedResource = internal_setGroupAccess(resourceInfo, acpData, groupUrl, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return getGroupAccess(resourceUrl, groupUrl, options);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setGroupResourceAccess(resourceInfo, groupUrl, wacAccess, options);
    return await getGroupAccess$1(resourceInfo, groupUrl, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for everyone.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for everyone. If
 *   additional restrictions are set up to apply to users in a particular
 *   situation, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @since 1.5.0
 *
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function getPublicAccess$3(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    return internal_getPublicAccess$1(acpData);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getPublicAccess$4(resourceInfo, options);
  }

  return null;
}
/**
 * Set access to a Resource for everybody.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for everybody. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access a user has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change public access to.
 * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for everybody explicitly.
 * @since 1.5.0
 *
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function setPublicAccess$3(resourceUrl, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndRules(resourceInfo, options);
    const updatedResource = internal_setPublicAccess$1(resourceInfo, acpData, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return getPublicAccess$3(resourceUrl, options);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setPublicResourceAccess(resourceInfo, wacAccess, options);
    return await getPublicAccess$4(resourceInfo, options);
  }

  return null;
}

var universal_v1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAgentAccess: getAgentAccess$3,
  setAgentAccess: setAgentAccess$3,
  getAgentAccessAll: getAgentAccessAll$3,
  getGroupAccess: getGroupAccess,
  getGroupAccessAll: getGroupAccessAll,
  setGroupAccess: setGroupAccess,
  getPublicAccess: getPublicAccess$3,
  setPublicAccess: setPublicAccess$3,
  getAccessFor: getAccessFor,
  getAccessForAll: getAccessForAll,
  setAccessFor: setAccessFor
});
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.access_v1 = universal_v1;
const knownActorRelations = [acp.agent];
/**
 * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this actor.
 *
 * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setActorAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param actorRelation What type of actor (e.g. acp:agent) you want to get the access for.
 * @param actor Which instance of the given actor type you want to get the access for.
 * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.
 */

function internal_getActorAccess(acpData, actorRelation, actor) {
  if (acpData.inaccessibleUrls.length > 0) {
    // If we can't see all access data,
    // we can't reliably determine what access the given actor has:
    return null;
  }

  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));
  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));
  const initialAccess = {
    read: false,
    append: false,
    write: false,
    controlRead: false,
    controlWrite: false
  }; // All allowed reading and writing defined in ACR policies
  // determines whether the `controlRead` and `controlWrite` statuses are `true`.

  const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {
    const allAllowedAccess = Object.assign({}, acc);
    const allowModes = getAllowModesV2(policy);

    if (allowModes.read) {
      allAllowedAccess.controlRead = true;
    }

    if (allowModes.write) {
      allAllowedAccess.controlWrite = true;
    }

    return allAllowedAccess;
  }, initialAccess); // Then allowed reading, appending and writing in regular policies
  // determines whether the respective status is `true`.

  const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {
    const allAllowedAccess = Object.assign({}, acc);
    const allowModes = getAllowModesV2(policy);

    if (allowModes.read) {
      allAllowedAccess.read = true;
    }

    if (allowModes.append) {
      allAllowedAccess.append = true;
    }

    if (allowModes.write) {
      allAllowedAccess.write = true;
    }

    return allAllowedAccess;
  }, allowedAcrAccess); // At this point, everything that has been explicitly allowed is true.
  // However, it could still be overridden by access that is explicitly denied.
  // Starting with `controlRead` and `controlWrite`,
  // by inspecting denied reading and writing defined in the ACR policies.

  const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {
    const allDeniedAccess = Object.assign({}, acc);
    const denyModes = getDenyModesV2(policy);

    if (denyModes.read === true) {
      allDeniedAccess.controlRead = false;
    }

    if (denyModes.write === true) {
      allDeniedAccess.controlWrite = false;
    }

    return allDeniedAccess;
  }, withAllowedAccess); // And finally, we set to `false` those access modes that are explicitly denied
  // in the regular policies:

  const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {
    const allDeniedAccess = Object.assign({}, acc);
    const denyModes = getDenyModesV2(policy);

    if (denyModes.read === true) {
      allDeniedAccess.read = false;
    }

    if (denyModes.append === true) {
      allDeniedAccess.append = false;
    }

    if (denyModes.write === true) {
      allDeniedAccess.write = false;
    }

    return allDeniedAccess;
  }, withAcrDeniedAccess);
  return withDeniedAccess;
}
/**
 * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this Agent.
 *
 * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param webId WebID of the Agent you want to get the access for.
 * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.
 */


function internal_getAgentAccess(acpData, webId) {
  return internal_getActorAccess(acpData, acp.agent, webId);
}
/**
 * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to everybody.
 *
 * Additionally, this only considers access given _explicitly_ to everybody, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setPublicAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.
 */


function internal_getPublicAccess(acpData) {
  return internal_getActorAccess(acpData, acp.agent, acp.PublicAgent);
}

function policyAppliesTo(policy, actorRelation, actor, acpData) {
  const allowModes = getIriAll(policy, acp.allow);
  const denyModes = getIriAll(policy, acp.deny);

  if (allowModes.length + denyModes.length === 0) {
    // A Policy that does not specify access modes does not do anything:
    return false;
  } // Note: the non-null assertions (`!`) here should be valid because
  //       the caller of `policyAppliesTo` should already have validated that
  //       the return value of internal_getPoliciesAndMatchers() did not have any
  //       inaccessible URLs, so we should be able to find every Matcher.


  const allOfMatchers = getAllOfMatcherUrlAll(policy).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));
  const anyOfMatchers = getAnyOfMatcherUrlAll(policy).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));
  const noneOfMatchers = getNoneOfMatcherUrlAll(policy).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl)); // We assume that this Policy applies if this specific actor is mentioned
  // and no further restrictions are in place.
  // (In other words, the Policy may apply to others *in addition to* this
  // actor, but if it applies to this actor *unless* some other condition holds,
  // we cannot be sure whether it will apply to this actor.)
  // This means that:

  return (// Every existing allOf Matcher explicitly applies explicitly to this given actor:
    allOfMatchers.every(matcher => matcherAppliesTo(matcher, actorRelation, actor)) && ( // If there are anyOf Matchers, at least one applies explicitly to this actor:
    anyOfMatchers.length === 0 || anyOfMatchers.some(matcher => matcherAppliesTo(matcher, actorRelation, actor))) && // There is at least one allOf or anyOf Matcher:
    allOfMatchers.length + anyOfMatchers.length > 0 && // No further restrictions are in place that make this sometimes not apply
    // to the given actor:
    noneOfMatchers.length === 0
  );
}

function policyConflictsWith(policy, otherAccess) {
  const allowModes = getIriAll(policy, acp.allow);
  const denyModes = getIriAll(policy, acp.deny);
  return otherAccess.read === true && denyModes.includes(internal_accessModeIriStrings.read) || otherAccess.read === false && allowModes.includes(internal_accessModeIriStrings.read) && !denyModes.includes(internal_accessModeIriStrings.read) || otherAccess.append === true && denyModes.includes(internal_accessModeIriStrings.append) || otherAccess.append === false && allowModes.includes(internal_accessModeIriStrings.append) && !denyModes.includes(internal_accessModeIriStrings.append) || otherAccess.write === true && denyModes.includes(internal_accessModeIriStrings.write) || otherAccess.write === false && allowModes.includes(internal_accessModeIriStrings.write) && !denyModes.includes(internal_accessModeIriStrings.write);
}

function matcherAppliesTo(matcher, actorRelation, actor) {
  return getIriAll(matcher, actorRelation).includes(actor);
}
/**
 * Get a set of all actors mentioned in an ACR by active Matchers (i.e. that are
 * referenced by Policies referenced by the ACR Control, and therefore that
 * effectively apply).
 *
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param actorRelation
 */


function internal_findActorAll(acpData, actorRelation) {
  const actors = new Set(); // This code could be prettier using flat(), which isn't supported by nodeJS 10.
  // If you read this comment after April 2021, feel free to refactor.

  acpData.matchers.forEach(matcher => {
    getIriAll(matcher, actorRelation).filter(iri => ![acp.PublicAgent, acp.CreatorAgent, acp.AuthenticatedAgent].includes(iri) || actorRelation != acp.agent).forEach(iri => actors.add(iri));
  });
  return actors;
}
/**
 * Iterate through all the actors active for an ACR, and list all of their access.
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param actorRelation The type of actor we want to list access for
 * @returns A map with each actor access indexed by their URL, or null if some
 * external policies are referenced.
 */


function internal_getActorAccessAll(acpData, actorRelation) {
  if (acpData.inaccessibleUrls.length > 0) {
    // If we can't see all access data,
    // we can't reliably determine what access actors of the given type have:
    return null;
  }

  const result = {};
  const actors = internal_findActorAll(acpData, actorRelation);
  actors.forEach(iri => {
    // The type assertion holds, because if internal_getActorAccess were null,
    // we would have returned {} already.
    const access = internal_getActorAccess(acpData, actorRelation, iri);
    result[iri] = access;
  });
  return result;
}
/**
 * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Matcher applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to the mentionned
 * Agents.
 *
 * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @returns A map with each Agent's access indexed by their WebID, or null if some
 * external policies are referenced.
 */


function internal_getAgentAccessAll(acpData) {
  return internal_getActorAccessAll(acpData, acp.agent);
}
/**
 * Set access to a Resource for a specific actor.
 *
 * This function adds the relevant Access Control Policies and Matchers to a
 * Resource's Access Control Resource to define the given access for the given
 * actor specifically. In other words, it can, for example, add Policies that
 * give the general Public Read access to the Resource. However, if other
 * Policies specify that everyone is *denied* Read access *except* for a
 * particular Agent, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for an agent matching the given actor.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Matchers
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param actorRelation What type of actor (e.g. acp:agent) you want to set the access for.
 * @param actor Which instance of the given actor type you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setActorAccess(resource, acpData, actorRelation, actor, access) {
  var _a, _b, _c, _d, _e;

  if (!hasAccessibleAcr(resource) || acpData.inaccessibleUrls.length > 0) {
    return null;
  } // Get the access that currently applies to the given actor


  const existingAccess = internal_getActorAccess(acpData, actorRelation, actor);
  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */

  if (existingAccess === null) {
    return null;
  } // Get all Policies that apply specifically to the given actor


  const applicableAcrPolicies = acpData.acrPolicies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData));
  const applicablePolicies = acpData.policies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acpData)); // We only need to override Policies that define access other than what we want:

  const conflictingAcrPolicies = applicableAcrPolicies.filter(policy => policyConflictsWith(policy, {
    read: access.controlRead,
    write: access.controlWrite
  }));
  const conflictingPolicies = applicablePolicies.filter(policy => policyConflictsWith(policy, {
    read: access.read,
    append: access.append,
    write: access.write
  })); // For every Policy that applies specifically to the given Actor, but _also_
  // to another actor (i.e. that applies using an anyOf Matcher, or a Matcher that
  // mentions both the given and another actor)...

  const otherActorAcrPolicies = conflictingAcrPolicies.filter(acrPolicy => policyHasOtherActors(acrPolicy, actorRelation, actor, acpData));
  const otherActorPolicies = conflictingPolicies.filter(policy => policyHasOtherActors(policy, actorRelation, actor, acpData)); // ...check what access the current actor would have if we removed them...

  const acpDataWithPoliciesExcluded = Object.assign(Object.assign({}, acpData), {
    acrPolicies: acpData.acrPolicies.filter(acrPolicy => !otherActorAcrPolicies.includes(acrPolicy)),
    policies: acpData.policies.filter(policy => !otherActorPolicies.includes(policy))
  });
  const remainingAccess = internal_getActorAccess(acpDataWithPoliciesExcluded, actorRelation, actor);
  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */

  if (remainingAccess === null) {
    return null;
  } // ...add copies of those Policies and their Matchers, but excluding the given actor...


  let updatedResource = resource;
  otherActorAcrPolicies.forEach(acrPolicy => {
    const [policyCopy, matcherCopies] = copyPolicyExcludingActor(acrPolicy, resource, acpData, actorRelation, actor);
    updatedResource = setResourceAcrPolicy(updatedResource, policyCopy);
    updatedResource = matcherCopies.reduce(setResourceMatcher, updatedResource);
  });
  otherActorPolicies.forEach(policy => {
    const [policyCopy, matcherCopies] = copyPolicyExcludingActor(policy, resource, acpData, actorRelation, actor);
    updatedResource = setResourcePolicy$1(updatedResource, policyCopy);
    updatedResource = matcherCopies.reduce(setResourceMatcher, updatedResource);
  }); // ...add a new Policy that applies the given access,
  // and the previously applying access for access modes that were undefined...

  const newMatcherName = `matcher_${encodeURIComponent(`${actorRelation}_${actor}`)}`;
  let newMatcher = createResourceMatcherFor(resource, newMatcherName);
  newMatcher = setIri(newMatcher, actorRelation, actor);
  const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;
  const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;
  let acrPoliciesToUnapply = otherActorAcrPolicies; // Only replace existing Policies if the defined access actually changes:

  if (newControlReadAccess !== remainingAccess.controlRead || newControlWriteAccess !== remainingAccess.controlWrite) {
    const newAcrPolicyName = `acr_policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;
    let newAcrPolicy = createResourcePolicyFor(resource, newAcrPolicyName);
    newAcrPolicy = setAllowModesV2(newAcrPolicy, {
      read: newControlReadAccess === true,
      append: false,
      write: newControlWriteAccess === true
    });
    newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newMatcher);
    updatedResource = setResourceAcrPolicy(updatedResource, newAcrPolicy);
    updatedResource = setResourceMatcher(updatedResource, newMatcher); // If we don't have to set new access, we only need to unapply the
    // ACR Policies that applied to both the given actor and other actors
    // (because they have been replaced by clones not mentioning the given
    // actor). Hence `policiesToUnApply` is initialised to `otherActorPolicies`.
    // However, if we're in this if branch, that means we also had to replace
    // Policies that defined access for just this actor, so we'll have to remove
    // all Policies mentioning this actor:

    acrPoliciesToUnapply = conflictingAcrPolicies;
  }

  const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;
  const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;
  const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;
  let policiesToUnapply = otherActorPolicies; // Only replace existing Policies if the defined access actually changes:

  if (newReadAccess !== remainingAccess.read || newAppendAccess !== remainingAccess.append || newWriteAccess !== remainingAccess.write) {
    const newPolicyName = `policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;
    let newPolicy = createResourcePolicyFor(resource, newPolicyName);
    newPolicy = setAllowModesV2(newPolicy, {
      read: newReadAccess === true,
      append: newAppendAccess === true,
      write: newWriteAccess === true
    });
    newPolicy = addIri(newPolicy, acp.allOf, newMatcher);
    updatedResource = setResourcePolicy$1(updatedResource, newPolicy);
    updatedResource = setResourceMatcher(updatedResource, newMatcher); // If we don't have to set new access, we only need to unapply the
    // Policies that applied to both the given actor and other actors (because
    // they have been replaced by clones not mentioning the given actor). Hence
    // `policiesToUnApply` is initialised to `otherActorPolicies`.
    // However, if we're in this if branch, that means we also had to replace
    // Policies that defined access for just this actor, so we'll have to remove
    // all Policies mentioning this actor:

    policiesToUnapply = conflictingPolicies;
  } // ...then remove existing Policy URLs that mentioned both the given actor
  // and other actors from the given Resource and apply the new ones (but do not
  // remove the actual old Policies - they might still apply to other Resources!).


  acrPoliciesToUnapply.forEach(previouslyApplicableAcrPolicy => {
    updatedResource = removeAcrPolicyUrl$1(updatedResource, asIri(previouslyApplicableAcrPolicy));
  });
  policiesToUnapply.forEach(previouslyApplicablePolicy => {
    updatedResource = removePolicyUrl$1(updatedResource, asIri(previouslyApplicablePolicy));
  });
  return updatedResource;
}
/**
 * Set access to a Resource for a specific Agent.
 *
 * This function adds the relevant Access Control Policies and Matchers to a
 * Resource's Access Control Resource to define the given access for the given
 * Agent specifically. In other words, it can, for example, add Policies that
 * give a particular Agent Read access to the Resource. However, if other
 * Policies specify that that Agent is *denied* Read access *except* if they
 * match on some other characteristic, then that will be left intact.
 * This means that, unless *only* this function is used to manipulate access to
 * this Resource, the set access might not be equal to the effective access for
 * the given Agent.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Matchers
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param webId Which Agent you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setAgentAccess(resource, acpData, webId, access) {
  return internal_setActorAccess(resource, acpData, acp.agent, webId, access);
}
/**
 * Set access to a Resource for everybody.
 *
 * This function adds the relevant Access Control Policies and Matchers to a
 * Resource's Access Control Resource to define the given access for everybody
 * specifically. In other words, it can, for example, add Policies that
 * give everybody Read access to the Resource. However, if other
 * Policies specify that everybody is *denied* Read access *except* if they're
 * a particular Agent, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for a particular Agent.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Matchers
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param acpData All Access Control Policies and Matchers that apply to a particular Resource.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setPublicAccess(resource, acpData, access) {
  return internal_setActorAccess(resource, acpData, acp.agent, acp.PublicAgent, access);
}

function policyHasOtherActors(policy, actorRelation, actor, acpData) {
  // Note: the non-null assertions (`!`) here should be valid because
  //       the caller of `policyHasOtherActors` should already have validated
  //       that the return value of internal_getPoliciesAndMatchers() did not have
  //       any inaccessible URLs, so we should be able to find every Matcher.
  const allOfMatchers = getIriAll(policy, acp.allOf).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));
  const allOfMatchersHaveOtherActors = allOfMatchers.some(matcher => {
    return matcherHasOtherActors(matcher, actorRelation, actor);
  });
  const anyOfMatchers = getIriAll(policy, acp.anyOf).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));
  const anyOfMatchersHaveOtherActors = anyOfMatchers.some(matcher => {
    return matcherHasOtherActors(matcher, actorRelation, actor);
  });
  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Matchers */

  const noneOfMatchers = getIriAll(policy, acp.noneOf).map(matcherUrl => acpData.matchers.find(matcher => asIri(matcher) === matcherUrl));
  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Matchers */

  const noneOfMatchersHaveOtherActors = noneOfMatchers.some(matcher => {
    return matcherHasOtherActors(matcher, actorRelation, actor);
  });
  return allOfMatchersHaveOtherActors || anyOfMatchersHaveOtherActors || noneOfMatchersHaveOtherActors;
}

function matcherHasOtherActors(matcher, actorRelation, actor) {
  const otherActors = [];
  knownActorRelations.forEach(knownActorRelation => {
    const otherActorsWithThisRelation = getIriAll(matcher, knownActorRelation).filter(applicableActor => applicableActor !== actor || knownActorRelation !== actorRelation); // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:

    otherActors.push(...otherActorsWithThisRelation);
  });
  return otherActors.length > 0;
}

function copyPolicyExcludingActor(inputPolicy, resourceWithAcr, acpData, actorRelationToExclude, actorToExclude) {
  const newIriSuffix = "_copy_without" + `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` + `_${Date.now()}_${Math.random()}`; // Create new Matchers for the Policy, excluding the given Actor

  const newAllOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.allOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);
  const newAnyOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.anyOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude);
  const newNoneOfMatchers = copyMatchersExcludingActor(getIriAll(inputPolicy, acp.noneOf), resourceWithAcr, acpData, newIriSuffix, actorRelationToExclude, actorToExclude); // Create a new Policy with the new Matchers

  let newPolicy = createResourcePolicyFor(resourceWithAcr, encodeURI(asIri(inputPolicy)) + newIriSuffix);
  getIriAll(inputPolicy, acp.allow).forEach(allowMode => {
    newPolicy = addIri(newPolicy, acp.allow, allowMode);
  });
  getIriAll(inputPolicy, acp.deny).forEach(denyMode => {
    newPolicy = addIri(newPolicy, acp.deny, denyMode);
  });
  newAllOfMatchers.forEach(newMatcher => {
    newPolicy = addIri(newPolicy, acp.allOf, newMatcher);
  });
  newAnyOfMatchers.forEach(newMatcher => {
    newPolicy = addIri(newPolicy, acp.anyOf, newMatcher);
  });
  /* istanbul ignore next Policies listing noneOf Matchers are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Matchers to copy. */

  newNoneOfMatchers.forEach(newMatcher => {
    newPolicy = addIri(newPolicy, acp.noneOf, newMatcher);
  });
  return [newPolicy, newAllOfMatchers.concat(newAnyOfMatchers).concat(newNoneOfMatchers)];
}
/** Creates clones of all the Matchers identified by `matcherIris` in `acpData`, excluding the given Actor */


function copyMatchersExcludingActor(matcherIris, resourceWithAcr, acpData, iriSuffix, actorRelationToExclude, actorToExclude) {
  return matcherIris.map(matcherIri => {
    const matcher = acpData.matchers.find(matcher => asIri(matcher) === matcherIri);
    /* istanbul ignore if: getPoliciesAndMatchers should already have fetched all referenced Matchers, so this should never be true: */

    if (typeof matcher === "undefined") {
      return null;
    }

    let newMatcher = createResourceMatcherFor(resourceWithAcr, encodeURI(asIri(matcher)) + iriSuffix);
    let listsOtherActors = false;
    knownActorRelations.forEach(knownActorRelation => {
      getIriAll(matcher, knownActorRelation).forEach(targetActor => {
        if (knownActorRelation === actorRelationToExclude && targetActor === actorToExclude) {
          return;
        }

        listsOtherActors = true;
        newMatcher = addIri(newMatcher, knownActorRelation, targetActor);
      });
    });
    return listsOtherActors ? newMatcher : null;
  }).filter(isNotNull);
}

function isNotNull(value) {
  return value !== null;
}

async function internal_getPoliciesAndMatchers(resource, options = internal_defaultFetchOptions) {
  const acrPolicyUrls = getAcrPolicyUrlAll$1(resource);
  const policyUrls = getPolicyUrlAll$1(resource);
  const allPolicyResourceUrls = getResourceUrls(acrPolicyUrls).concat(getResourceUrls(policyUrls));
  const policyResources = await getResources(allPolicyResourceUrls, options);
  const acrPolicies = getThingsFromResources(acrPolicyUrls, policyResources).filter(isNotNull);
  const policies = getThingsFromResources(policyUrls, policyResources).filter(isNotNull);
  const matcherUrlSet = new Set();
  acrPolicies.forEach(acrPolicy => {
    const referencedMatcherUrls = getReferencedMatcherUrls(acrPolicy);
    referencedMatcherUrls.forEach(matcherUrl => {
      matcherUrlSet.add(matcherUrl);
    });
  });
  policies.forEach(policy => {
    const referencedMatcherUrls = getReferencedMatcherUrls(policy);
    referencedMatcherUrls.forEach(matcherUrl => {
      matcherUrlSet.add(matcherUrl);
    });
  });
  const matcherUrls = Array.from(matcherUrlSet);
  const matcherResourceUrls = matcherUrls.map(matcherUrl => getResourceUrl(matcherUrl));
  const unfetchedMatcherResourceUrls = matcherResourceUrls.filter(matcherResourceUrl => !allPolicyResourceUrls.includes(matcherResourceUrl));
  const matcherResources = await getResources(unfetchedMatcherResourceUrls, options);
  const allResources = Object.assign(Object.assign({}, policyResources), matcherResources);
  const matchers = getThingsFromResources(matcherUrls, allResources).filter(isNotNull);
  const inaccessibleUrls = Object.keys(allResources).filter(resourceUrl => allResources[resourceUrl] === null);
  return {
    inaccessibleUrls: inaccessibleUrls,
    acrPolicies: acrPolicies,
    policies: policies,
    matchers: matchers
  };
}

function getResourceUrl(thingUrl) {
  const thingUrlObject = new URL(thingUrl);
  thingUrlObject.hash = "";
  return thingUrlObject.href;
}

function getResourceUrls(thingUrls) {
  const resourceUrls = [];
  thingUrls.forEach(thingUrl => {
    const resourceUrl = getResourceUrl(thingUrl);

    if (!resourceUrls.includes(resourceUrl)) {
      resourceUrls.push(resourceUrl);
    }
  });
  return resourceUrls;
}

async function getResources(resourceUrls, options) {
  const uniqueResourceUrls = Array.from(new Set(resourceUrls));
  const resources = {};
  await Promise.all(uniqueResourceUrls.map(async resourceUrl => {
    try {
      const resource = await getSolidDataset(resourceUrl, options);
      resources[resourceUrl] = resource;
    } catch (e) {
      resources[resourceUrl] = null;
    }
  }));
  return resources;
}

function getThingsFromResources(thingUrls, resources) {
  return thingUrls.map(thingUrl => {
    const resourceUrl = getResourceUrl(thingUrl);
    const resource = resources[resourceUrl];

    if (!resource) {
      return null;
    }

    return getThing(resource, thingUrl);
  });
}

function getReferencedMatcherUrls(policy) {
  return getAllOfMatcherUrlAll(policy).concat(getAnyOfMatcherUrlAll(policy)).concat(getNoneOfMatcherUrlAll(policy));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for a given Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given Agent. If
 *   additional restrictions are set up to apply to the given Agent in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param webId WebID of the Agent you want to get the access for.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function getAgentAccess$2(resourceUrl, webId, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);
    return internal_getAgentAccess(acpData, webId);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getAgentAccess$4(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Set access to a Resource for a specific Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for the given Agent. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Agent has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change the Agent's access to.
 * @param webId WebID of the Agent you want to set access for.
 * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for the given Agent explicitly.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function setAgentAccess$2(resourceUrl, webId, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);
    const updatedResource = internal_setAgentAccess(resourceInfo, acpData, webId, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return await getAgentAccess$2(resourceUrl, webId, options);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);
    return await getAgentAccess$4(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for all Agents with respect to a given
 * Resource.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the returned Agents. If
 *   additional restrictions are set up to apply to the listed Agents in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @returns The access information to the Resource, grouped by Agent.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function getAgentAccessAll$2(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);
    return internal_getAgentAccessAll(acpData);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getAgentAccessAll$4(resourceInfo, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for everyone.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for everyone. If
 *   additional restrictions are set up to apply to users in a particular
 *   situation, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function getPublicAccess$2(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);
    return internal_getPublicAccess(acpData);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getPublicAccess$4(resourceInfo, options);
  }

  return null;
}
/**
 * Set access to a Resource for everybody.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for everybody. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access a user has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change public access to.
 * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for everybody explicitly.
 * @since 1.5.0
 * @hidden
 * @deprecated Please import from the "universal" modules.
 */


async function setPublicAccess$2(resourceUrl, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const acpData = await internal_getPoliciesAndMatchers(resourceInfo, options);
    const updatedResource = internal_setPublicAccess(resourceInfo, acpData, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return getPublicAccess$2(resourceUrl, options);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setPublicResourceAccess(resourceInfo, wacAccess, options);
    return await getPublicAccess$4(resourceInfo, options);
  }

  return null;
}

var universal_v2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAgentAccess: getAgentAccess$2,
  setAgentAccess: setAgentAccess$2,
  getAgentAccessAll: getAgentAccessAll$2,
  getPublicAccess: getPublicAccess$2,
  setPublicAccess: setPublicAccess$2,
  getAccessFor: getAccessFor,
  getAccessForAll: getAccessForAll,
  setAccessFor: setAccessFor
});
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Retrieve the Server Resource Info of Resource expressing access control over
 * another resource it is linked to. It applies in both ACP and WAC contexts:
 * the Access Control Resource is discovered consistently using a Link header
 * with `rel=acl`.
 *
 * @param {WithServerResourceInfo} resource The Resource for which ACL we want
 * to retrieve the Server Resource Info.
 * @param {DefaultOptions} options
 * @returns The Server Resource Info if available, null otherwise.
 * @since 1.19.0
 */

exports.access_v2 = universal_v2;

async function getAclServerResourceInfo(resource, options) {
  if (typeof resource.internal_resourceInfo.aclUrl === "string") {
    return await getResourceInfo(resource.internal_resourceInfo.aclUrl, options);
  }

  return null;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Policies allow or deny access modes over resources and their associated
 * access control resource.
 *
 * @param policy The Policy Thing which allows retrieved access modes.
 * @returns Policy URL array.
 * @since 1.16.1
 */


function getAllowModes(policy) {
  return getModes(policy, ACP.allow);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * The ACP specification is a draft. As such, this function is experimental and
 * subject to change, even in a non-major release.
 * See also: https://solid.github.io/authorization-panel/acp-specification/
 * ```
 *
 * Policies allow or deny access modes over resources and their associated
 * access control resource.
 *
 * @param policy The Policy Thing which denies retrieved access modes.
 * @returns Policy URL array.
 * @since 1.16.1
 */


function getDenyModes(policy) {
  return getModes(policy, ACP.deny);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function isAgentMatched(acr, policy, webId) {
  // TODO: Proper solution
  // Finalise, release and use the TypeScript ACP Solid library
  // internal_getActorAccess in acp_v2:96 doesn't reduce the policies properly
  // policyAppliesTo in acp_v2:256 assumes that every matcher is an agent matcher
  //
  // TODO: Stopgap solution
  // Implement a simplistic reduce function that
  // matches policies where the agent is present in the matchers
  const allOfMatchers = getUrlAll(policy, ACP.allOf).map(url => getThing(internal_getAcr(acr), url)).filter(thing => thing !== null);
  const allOfMatched = allOfMatchers.every(thing => {
    return getUrlAll(thing, ACP.agent).includes(webId);
  });
  const anyOfMatchers = getUrlAll(policy, ACP.anyOf).map(url => getThing(internal_getAcr(acr), url)).filter(thing => thing !== null);
  const anyOfMatched = anyOfMatchers.some(thing => {
    return getUrlAll(thing, ACP.agent).includes(webId);
  });
  const noneOfMatchers = getUrlAll(policy, ACP.noneOf).map(url => getThing(internal_getAcr(acr), url)).filter(thing => thing !== null);
  const noneOfMatched = noneOfMatchers.some(thing => {
    return getUrlAll(thing, ACP.agent).includes(webId);
  });
  return allOfMatchers.length + anyOfMatchers.length > 0 && (allOfMatchers.length === 0 || allOfMatched) && (anyOfMatchers.length === 0 || anyOfMatched) && (noneOfMatchers.length === 0 || !noneOfMatched);
}
/** @hidden */


function reduceModes(policy, modes, type) {
  const allowed = getAllowModes(policy);
  const denied = getDenyModes(policy);

  if (type === "control") {
    return {
      read: modes.read,
      append: modes.append,
      write: modes.write,
      controlRead: (modes.controlRead || allowed.read) && !denied.read,
      controlWrite: (modes.controlWrite || allowed.write) && !denied.write
    };
  }

  return {
    read: (modes.read || allowed.read) && !denied.read,
    append: (modes.append || allowed.append) && !denied.append,
    write: (modes.write || allowed.write) && !denied.write,
    controlRead: modes.controlRead,
    controlWrite: modes.controlWrite
  };
}
/**
 * Get an overview of what access is defined for a given Agent.
 *
 * @param resourceWithAcr URL of the Resource you want to read the access for.
 * @param webId WebID of the Agent you want to get the access for.
 * @since 1.16.0
 */


async function getAgentAccess$1(resourceWithAcr, webId) {
  // TODO: add support for external resources
  let resourceAccess = {
    read: false,
    append: false,
    write: false,
    controlRead: false,
    controlWrite: false
  };
  const policyAll = getPolicyUrlAll(resourceWithAcr).map(url => getThing(internal_getAcr(resourceWithAcr), url)).filter(policy => policy !== null);
  policyAll.map(policy => {
    if (isAgentMatched(resourceWithAcr, policy, webId)) {
      resourceAccess = reduceModes(policy, resourceAccess, "resource");
    }
  });
  const acrPolicyAll = getAcrPolicyUrlAll(resourceWithAcr).map(url => getThing(internal_getAcr(resourceWithAcr), url)).filter(policy => policy !== null);
  acrPolicyAll.map(policy => {
    if (isAgentMatched(resourceWithAcr, policy, webId)) {
      resourceAccess = reduceModes(policy, resourceAccess, "control");
    }
  });
  return resourceAccess;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Retrieve the URL of an Access Control Resource as per pre-draft versions of
 * the ACP specification.
 *
 * @param resource The Resource for which to retrieve the URL of the Access
 * Control Resource if it is accessible.
 * @returns The URL of the ACR or null.
 * @deprecated
 */


function getAcrUrl$1(resource) {
  const linkedAccessControlResource = resource.internal_resourceInfo.linkedResources[ACP.accessControl];

  if (Array.isArray(linkedAccessControlResource) && linkedAccessControlResource.length === 1) {
    return linkedAccessControlResource[0];
  }

  return null;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Retrieve the URL of an Access Control Resource as per the ACP Draft
 * specification.
 *
 * @param resource The Resource for which to retrieve the URL of the Access
 * Control Resource if it is accessible.
 * @returns The URL of the ACR or null.
 */


async function getAcrUrl(resource, options) {
  // TODO: Remove as soon as ESS 1.1 is phased out
  const legacyAcrUrl = getAcrUrl$1(resource);

  if (legacyAcrUrl !== null) {
    return legacyAcrUrl;
  } // The ACP Draft mandates a link rel="type" header identifies Access Control Resources


  const aclServerResourceInfo = await getAclServerResourceInfo(resource, options);

  if (aclServerResourceInfo === null) {
    return null;
  }

  const relTypeLinks = getLinkedResourceUrlAll(aclServerResourceInfo)["type"];

  if (Array.isArray(relTypeLinks) && relTypeLinks.includes(ACP.AccessControlResource)) {
    return getSourceUrl(aclServerResourceInfo);
  }

  return null;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Retrieve the Access Control Resource of a Resource as per the ACP Draft
 * specification.
 *
 * @param resource The Resource for which to retrieve the URL of the Access
 * Control Resource if it is accessible.
 * @param options Default Options such as a fetch function.
 * @returns The URL of the ACR or null.
 */


async function getResourceAcr(resource, options) {
  const acrUrl = await getAcrUrl(resource, options);

  if (acrUrl === null) {
    return null;
  }

  let acr;

  try {
    acr = await getSolidDataset(acrUrl, options);
  } catch (e) {
    return null;
  }

  return Object.assign(Object.assign({}, resource), {
    internal_acp: {
      acr: Object.assign(Object.assign({}, acr), {
        accessTo: getSourceUrl(resource)
      })
    }
  });
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for a given Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access.
 * - It will only return access specified explicitly for the given Agent within
 *   the ACL linked to the resource. If additional restrictions or external
 *   resources are used, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param webId WebID of the Agent you want to get the access for.
 * @param options Default Options such as a fetch function.
 * @since 1.19.0
 */


async function getAgentAccess(resourceUrl, webId, options) {
  const resourceInfo = await getResourceInfo(resourceUrl, options);
  const acr = await getResourceAcr(resourceInfo, options);

  if (acr === null) {
    return getAgentAccess$4(resourceInfo, webId, options);
  }

  return getAgentAccess$1(acr, webId);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function getAgentUrlAll(acr) {
  return Array.from(new Set(getThingAll(internal_getAcr(acr)).map(thing => {
    return getUrlAll(thing, ACP.agent);
  }).reduce((flatArray, agentArray) => {
    return flatArray.concat(agentArray);
  }, [])));
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for agents.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access.
 * - It will only return access specified explicitly for the given Agent within
 *   the ACL linked to the resource. If additional restrictions or external
 *   resources are used, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param options Default Options such as a fetch function.
 * @since 1.21.0
 */


async function getAgentAccessAll$1(resourceWithAcr) {
  return (await Promise.all(getAgentUrlAll(resourceWithAcr).map(async agent => ({
    [agent]: await getAgentAccess$1(resourceWithAcr, agent)
  })))).reduce((agentAccessAll, currentAgentAccess) => Object.assign(Object.assign({}, agentAccessAll), currentAgentAccess), {});
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for agents.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access.
 * - It will only return access specified explicitly for the given Agent within
 *   the ACL linked to the resource. If additional restrictions or external
 *   resources are used, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param options Default Options such as a fetch function.
 * @since 1.21.0
 */


async function getAgentAccessAll(resourceUrl, options) {
  const resourceInfo = await getResourceInfo(resourceUrl, options);
  const acr = await getResourceAcr(resourceInfo, options);

  if (acr === null) {
    return getAgentAccessAll$4(resourceInfo, options);
  }

  return getAgentAccessAll$1(acr);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is given to the public.
 *
 * @param resourceWithAcr URL of the Resource you want to read the access for.
 * @since 1.16.0
 */


async function getPublicAccess$1(resourceWithAcr) {
  return getAgentAccess$1(resourceWithAcr, ACP.PublicAgent);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for the Public.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access.
 * - It will only return access specified explicitly for the given Agent within
 *   the ACL linked to the resource. If additional restrictions or external
 *   resources are used, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param options Default Options such as a fetch function.
 * @since 1.19.0
 */


async function getPublicAccess(resourceUrl, options) {
  const resourceInfo = await getResourceInfo(resourceUrl, options);
  const acr = await getResourceAcr(resourceInfo, options);

  if (acr === null) {
    return getPublicAccess$4(resourceInfo, options);
  }

  return getPublicAccess$1(acr);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function getDefaultAgentMatcherPolicyUrl(resource, name, mode) {
  return getDefaultAccessControlUrl(resource, name).concat("AgentMatcher").concat(mode.charAt(0).toUpperCase() + mode.slice(1)).concat("Policy");
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function setDefaultAgentMatcherPolicyThingIfNotExist(resource, name, mode) {
  const policyUrl = getDefaultAgentMatcherPolicyUrl(resource, name, mode); // TODO: Re-enable when we support setting agent access on member resources
  // if (policyUrl.includes("Member") && policyUrl.includes("Acr")) {
  //   return addMemberAcrPolicyUrl(resource, policyUrl);
  // }
  // if (policyUrl.includes("Member")) {
  //   return addMemberPolicyUrl(resource, policyUrl);
  // }

  if (policyUrl.includes("Acr")) {
    return addAcrPolicyUrl(resource, policyUrl);
  }

  return addPolicyUrl(resource, policyUrl);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function getDefaultAgentMatcherPolicyMatcherUrl(resource, name, mode) {
  return getDefaultAgentMatcherPolicyUrl(resource, name, mode).concat("Matcher");
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


const DEFAULT_POLICY_MATCHER_PREDICATE = ACP.anyOf;
/**
 * This functions scaffolds the default elements required for giving access to
 * an agent:
 * 1. If the Access Control Resource is empty, create the AccessControlResource
 *    element;
 * 2. If the current default Access Control doesn't exist (the one applying to
 *    one of: the Resource, the ACR, the Member Resources or the ACR of members)
 *    create it;
 * 3. If the default Policy for allowing the Access Modes for the current
 *    default Access Control doesn't exist, create it;
 * 4. If the default "anyOf" Agent Matcher for the current Policy creates it;
 * 5. Returns an ACR with a Matcher ready to add to.
 * @hidden
 * */

function setDefaultAgentMatcherPolicyMatcherThingIfNotExist(resource, name, mode) {
  const policyUrl = getDefaultAgentMatcherPolicyUrl(resource, name, mode);
  const matcherUrl = getDefaultAgentMatcherPolicyMatcherUrl(resource, name, mode);
  let defaultAgentMatcherPolicyThing = getThing(internal_getAcr(resource), policyUrl);

  if (!defaultAgentMatcherPolicyThing) {
    resource = setDefaultAgentMatcherPolicyThingIfNotExist(resource, name, mode);
    defaultAgentMatcherPolicyThing = createThing({
      url: policyUrl
    });
    defaultAgentMatcherPolicyThing = setModes(defaultAgentMatcherPolicyThing, {
      [mode]: true
    }, ACP.allow);
  } // Get the Default Access Control Agent Matcher Policy Matcher Thing or create it and return


  const agentMatcherPolicyUrlAll = getIriAll(defaultAgentMatcherPolicyThing, DEFAULT_POLICY_MATCHER_PREDICATE);

  if (!agentMatcherPolicyUrlAll.includes(matcherUrl)) {
    defaultAgentMatcherPolicyThing = buildThing(defaultAgentMatcherPolicyThing).addUrl(DEFAULT_POLICY_MATCHER_PREDICATE, matcherUrl).build();
    return setAccessControlResourceThing(resource, defaultAgentMatcherPolicyThing);
  }

  return resource;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function setAgentAccessMode(resourceWithAcr, webId, name, mode, operation) {
  var _a;

  const matcherUrl = getDefaultAgentMatcherPolicyMatcherUrl(resourceWithAcr, name, mode); // Set default Matcher if not exists

  const resourceWithDefaultAgentMatcher = setDefaultAgentMatcherPolicyMatcherThingIfNotExist(resourceWithAcr, name, mode);
  const defaultAgentMatcherThing = (_a = getThing(internal_getAcr(resourceWithDefaultAgentMatcher), matcherUrl)) !== null && _a !== void 0 ? _a : createThing({
    url: matcherUrl
  });
  return setAccessControlResourceThing(resourceWithDefaultAgentMatcher, operation === "add" ? addAgent(defaultAgentMatcherThing, webId) : removeAgent(defaultAgentMatcherThing, webId));
}
/**
 * Set access for a given Agent.
 *
 * @param resourceWithAcr URL of the Resource you want to set the access for.
 * @param webId WebID of the Agent you want to set the access for.
 * @param access Access Modes you want to set for the agent.
 * @since 1.16.0
 */


async function setAgentAccess$1(resourceWithAcr, webId, access) {
  const agentAccessModes = await getAgentAccess$1(resourceWithAcr, webId); // Add Agent to Default Matchers (including member) if access mode is different from what exists

  if (typeof access.read === "boolean" && agentAccessModes.read !== access.read) {
    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, "read", access.read ? "add" : "remove");
  }

  if (typeof access.append === "boolean" && agentAccessModes.append !== access.append) {
    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, "append", access.append ? "add" : "remove");
  }

  if (typeof access.write === "boolean" && agentAccessModes.write !== access.write) {
    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACCESS_CONTROL, "write", access.write ? "add" : "remove");
  }

  if (typeof access.controlRead === "boolean" && agentAccessModes.controlRead !== access.controlRead) {
    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACR_ACCESS_CONTROL, "controlRead", access.controlRead ? "add" : "remove");
  }

  if (typeof access.controlWrite === "boolean" && agentAccessModes.controlWrite !== access.controlWrite) {
    resourceWithAcr = setAgentAccessMode(resourceWithAcr, webId, DEFAULT_ACR_ACCESS_CONTROL, "controlWrite", access.controlWrite ? "add" : "remove");
  }

  return resourceWithAcr;
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Set access to a resource for a given Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access.
 * - It will only set access explicitly for the given Agent. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Agent has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access will not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to set access for.
 * @param webId WebID of the Agent you want to set access for.
 * @param access The Access Modes to add (true) or remove (false).
 * @param options Default Options such as a fetch function.
 * @since 1.19.0
 */


async function setAgentAccess(resourceUrl, webId, access, options) {
  // TODO: Change the standard getAgentAccess signatures to all take a  T extends WithAcl
  const resourceInfo = await getResourceInfo(resourceUrl, options);
  const acr = await getResourceAcr(resourceInfo, options);

  if (acr === null) {
    await setAgentResourceAccess(resourceInfo, webId, access, options);
    return getAgentAccess$4(resourceInfo, webId, options);
  } // TODO: Make sure both setAgentAccessWac and setAgentAccessAcp don't save within the function, expose one standard saveAclFor function that is universal.


  try {
    await saveAcrFor(await setAgentAccess$1(acr, webId, access), options);
    return await getAgentAccess(resourceUrl, webId, options);
  } catch (e) {
    return null;
  }
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Set access for the public.
 *
 * @param resourceWithAcr URL of the Resource you want to read the access for.
 * @param access Access Modes you want to set for the agent.
 * @since 1.16.0
 */


async function setPublicAccess$1(resourceWithAcr, access) {
  return setAgentAccess$1(resourceWithAcr, ACP.PublicAgent, access);
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Set access to a resource for the public.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access.
 * - It will only set access explicitly for the given Agent. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Agent has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access will not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to set access for.
 * @param access The Access Modes to add (true) or remove (false).
 * @param options Default Options such as a fetch function.
 * @since 1.19.0
 */


async function setPublicAccess(resourceUrl, access, options) {
  const resourceInfo = await getResourceInfo(resourceUrl, options);
  const acr = await getResourceAcr(resourceInfo, options);

  if (acr === null) {
    await setPublicResourceAccess(resourceInfo, access, options);
    return getPublicAccess$4(resourceInfo, options);
  }

  try {
    await saveAcrFor(await setPublicAccess$1(acr, access), options);
    return await getPublicAccess(resourceUrl, options);
  } catch (e) {
    return null;
  }
}
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAclServerResourceInfo: getAclServerResourceInfo,
  getAgentAccess: getAgentAccess,
  getAgentAccessAll: getAgentAccessAll,
  getPublicAccess: getPublicAccess,
  setAgentAccess: setAgentAccess,
  setPublicAccess: setPublicAccess
});
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.universalAccess = index;
var ess1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getFileWithAccessDatasets: getFileWithAccessDatasets,
  getFileWithAcr: getFileWithAcr,
  getLinkedAcrUrl: getLinkedAcrUrl,
  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr: getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr: getSolidDatasetWithAcr,
  hasAccessibleAcr: hasAccessibleAcr,
  saveAcrFor: saveAcrFor,
  isAcpControlled: isAcpControlled,
  acrAsMarkdown: acrAsMarkdown,
  addAcrPolicyUrl: addAcrPolicyUrl$1,
  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl$1,
  addMemberPolicyUrl: addMemberPolicyUrl$1,
  addPolicyUrl: addPolicyUrl$1,
  getAcrPolicyUrlAll: getAcrPolicyUrlAll$1,
  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll$1,
  getMemberPolicyUrlAll: getMemberPolicyUrlAll$1,
  getPolicyUrlAll: getPolicyUrlAll$1,
  hasLinkedAcr: hasLinkedAcr,
  removeAcrPolicyUrl: removeAcrPolicyUrl$1,
  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl$1,
  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrl: removeMemberPolicyUrl$1,
  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,
  removePolicyUrl: removePolicyUrl$1,
  removePolicyUrlAll: removePolicyUrlAll,
  createPolicy: createPolicy,
  getAllowModes: getAllowModesV1,
  getDenyModes: getDenyModesV1,
  getPolicy: getPolicy,
  getPolicyAll: getPolicyAll,
  policyAsMarkdown: policyAsMarkdown,
  removePolicy: removePolicy,
  setAllowModes: setAllowModesV1,
  setDenyModes: setDenyModesV1,
  setPolicy: setPolicy,
  createResourcePolicyFor: createResourcePolicyFor,
  getResourceAcrPolicy: getResourceAcrPolicy,
  getResourceAcrPolicyAll: getResourceAcrPolicyAll,
  getResourcePolicy: getResourcePolicy,
  getResourcePolicyAll: getResourcePolicyAll,
  removeResourceAcrPolicy: removeResourceAcrPolicy,
  removeResourcePolicy: removeResourcePolicy,
  setResourceAcrPolicy: setResourceAcrPolicy,
  setResourcePolicy: setResourcePolicy$1,
  addAgent: addAgent$1,
  addNoneOfRuleUrl: addNoneOfRuleUrl,
  addGroup: addGroup,
  addAnyOfRuleUrl: addAnyOfRuleUrl,
  addAllOfRuleUrl: addAllOfRuleUrl,
  createRule: createRule,
  getAgentAll: getAgentAll$1,
  getNoneOfRuleUrlAll: getNoneOfRuleUrlAll,
  getGroupAll: getGroupAll,
  getAnyOfRuleUrlAll: getAnyOfRuleUrlAll,
  getAllOfRuleUrlAll: getAllOfRuleUrlAll,
  getRule: getRule,
  getRuleAll: getRuleAll,
  hasAuthenticated: hasAuthenticated$1,
  hasCreator: hasCreator$1,
  hasPublic: hasPublic$1,
  removeAgent: removeAgent$1,
  removeNoneOfRuleUrl: removeNoneOfRuleUrl,
  removeGroup: removeGroup,
  removeAnyOfRuleUrl: removeAnyOfRuleUrl,
  removeAllOfRuleUrl: removeAllOfRuleUrl,
  removeRule: removeRule,
  ruleAsMarkdown: ruleAsMarkdown,
  setAgent: setAgent$1,
  setAuthenticated: setAuthenticated$1,
  setCreator: setCreator$1,
  setNoneOfRuleUrl: setNoneOfRuleUrl,
  setGroup: setGroup,
  setAnyOfRuleUrl: setAnyOfRuleUrl,
  setPublic: setPublic$1,
  setAllOfRuleUrl: setAllOfRuleUrl,
  setRule: setRule,
  addClient: addClient$1,
  getClientAll: getClientAll$1,
  hasAnyClient: hasAnyClient$1,
  removeClient: removeClient$1,
  setAnyClient: setAnyClient$1,
  setClient: setClient$1,
  removeAnyClient: removeAnyClient$1,
  removeAuthenticated: removeAuthenticated$1,
  removeCreator: removeCreator$1,
  removePublic: removePublic$1,
  createResourceRuleFor: createResourceRuleFor,
  getResourceRule: getResourceRule,
  getResourceRuleAll: getResourceRuleAll,
  removeResourceRule: removeResourceRule,
  setResourceRule: setResourceRule,
  addMockAcrTo: addMockAcrTo,
  mockAcrFor: mockAcrFor
});
/**
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.acp_ess_1 = ess1;
var ess2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getFileWithAccessDatasets: getFileWithAccessDatasets,
  getFileWithAcr: getFileWithAcr,
  getLinkedAcrUrl: getLinkedAcrUrl,
  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr: getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr: getSolidDatasetWithAcr,
  hasAccessibleAcr: hasAccessibleAcr,
  saveAcrFor: saveAcrFor,
  isAcpControlled: isAcpControlled,
  hasLinkedAcr: hasLinkedAcr,
  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,
  removePolicyUrlAll: removePolicyUrlAll,
  addAcrPolicyUrl: addAcrPolicyUrl,
  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl,
  addMemberPolicyUrl: addMemberPolicyUrl,
  addPolicyUrl: addPolicyUrl,
  getAcrPolicyUrlAll: getAcrPolicyUrlAll,
  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll,
  getMemberPolicyUrlAll: getMemberPolicyUrlAll,
  getPolicyUrlAll: getPolicyUrlAll,
  removeAcrPolicyUrl: removeAcrPolicyUrl,
  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl,
  removeMemberPolicyUrl: removeMemberPolicyUrl,
  removePolicyUrl: removePolicyUrl,
  setResourcePolicy: setResourcePolicy,
  createPolicy: createPolicy,
  getPolicy: getPolicy,
  getPolicyAll: getPolicyAll,
  removePolicy: removePolicy,
  setPolicy: setPolicy,
  createResourcePolicyFor: createResourcePolicyFor,
  getResourceAcrPolicy: getResourceAcrPolicy,
  getResourceAcrPolicyAll: getResourceAcrPolicyAll,
  getResourcePolicy: getResourcePolicy,
  getResourcePolicyAll: getResourcePolicyAll,
  removeResourceAcrPolicy: removeResourceAcrPolicy,
  removeResourcePolicy: removeResourcePolicy,
  getAllowModes: getAllowModesV2,
  getDenyModes: getDenyModesV2,
  setAllowModes: setAllowModesV2,
  setDenyModes: setDenyModesV2,
  addAgent: addAgent,
  addNoneOfMatcherUrl: addNoneOfMatcherUrl,
  addAnyOfMatcherUrl: addAnyOfMatcherUrl,
  addAllOfMatcherUrl: addAllOfMatcherUrl,
  createMatcher: createMatcher,
  getAgentAll: getAgentAll,
  getNoneOfMatcherUrlAll: getNoneOfMatcherUrlAll,
  getAnyOfMatcherUrlAll: getAnyOfMatcherUrlAll,
  getAllOfMatcherUrlAll: getAllOfMatcherUrlAll,
  getMatcher: getMatcher,
  getMatcherAll: getMatcherAll,
  hasAuthenticated: hasAuthenticated,
  hasCreator: hasCreator,
  hasPublic: hasPublic,
  removeAgent: removeAgent,
  removeNoneOfMatcherUrl: removeNoneOfMatcherUrl,
  removeAnyOfMatcherUrl: removeAnyOfMatcherUrl,
  removeAllOfMatcherUrl: removeAllOfMatcherUrl,
  removeMatcher: removeMatcher,
  setAgent: setAgent,
  setAuthenticated: setAuthenticated,
  setCreator: setCreator,
  setNoneOfMatcherUrl: setNoneOfMatcherUrl,
  setAnyOfMatcherUrl: setAnyOfMatcherUrl,
  setPublic: setPublic,
  setAllOfMatcherUrl: setAllOfMatcherUrl,
  setMatcher: setMatcher,
  addClient: addClient,
  getClientAll: getClientAll,
  removeClient: removeClient,
  removeAuthenticated: removeAuthenticated,
  removeCreator: removeCreator,
  removePublic: removePublic,
  createResourceMatcherFor: createResourceMatcherFor,
  getResourceMatcher: getResourceMatcher,
  getResourceMatcherAll: getResourceMatcherAll,
  removeResourceMatcher: removeResourceMatcher,
  setResourceMatcher: setResourceMatcher,
  addMockAcrTo: addMockAcrTo,
  mockAcrFor: mockAcrFor,
  getVcAccess: getVcAccess,
  setVcAccess: setVcAccess
});
exports.acp_ess_2 = ess2;
},{"http-link-header":"node_modules/http-link-header/lib/link.js","@rdfjs/data-model":"node_modules/@rdfjs/data-model/index.js","@rdfjs/dataset":"node_modules/@rdfjs/dataset/index.js","jsonld":"node_modules/jsonld/lib/jsonld.js","n3":"node_modules/n3/src/index.js","cross-fetch":"node_modules/cross-fetch/dist/browser-ponyfill.js","_bundle_loader":"node_modules/parcel-bundler/src/builtins/bundle-loader.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/constant.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.REFRESH_BEFORE_EXPIRATION_SECONDS = exports.EVENTS = exports.PREFERRED_SIGNING_ALG = exports.SOLID_CLIENT_AUTHN_KEY_PREFIX = void 0;
exports.SOLID_CLIENT_AUTHN_KEY_PREFIX = "solidClientAuthn:";
exports.PREFERRED_SIGNING_ALG = ["ES256", "RS256"];
exports.EVENTS = {
    ERROR: "error",
    LOGIN: "login",
    LOGOUT: "logout",
    NEW_REFRESH_TOKEN: "newRefreshToken",
    SESSION_EXPIRED: "sessionExpired",
    SESSION_EXTENDED: "sessionExtended",
    SESSION_RESTORED: "sessionRestore",
    TIMEOUT_SET: "timeoutSet",
};
exports.REFRESH_BEFORE_EXPIRATION_SECONDS = 5;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class InruptError extends Error {
    constructor(messageOrIri, messageParams, appendErrorIri = true) {
        super(typeof messageOrIri === "string"
            ? InruptError.substituteParams(messageOrIri, messageParams)
            : InruptError.appendErrorIri(InruptError.lookupErrorIri(messageOrIri, messageParams), messageOrIri, appendErrorIri));
    }
    httpResponse(httpErrorResponse, appendHttpDetails = true) {
        this.message = InruptError.appendHttpResponseDetails(this.message, httpErrorResponse, appendHttpDetails);
        this.httpErrorResponse = httpErrorResponse;
        return this;
    }
    hasHttpResponse() {
        return this.httpErrorResponse !== undefined;
    }
    getHttpResponse() {
        return this.httpErrorResponse;
    }
    getHttpStatusCode() {
        if (this.httpErrorResponse === undefined) {
            throw new InruptError("This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Code.");
        }
        return this.httpErrorResponse.status;
    }
    getHttpStatusText() {
        if (this.httpErrorResponse === undefined) {
            throw new InruptError("This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Text!");
        }
        return this.httpErrorResponse.statusText;
    }
    static determineIfVocabTerm(value) {
        if (value.strict !== undefined) {
            return true;
        }
        return false;
    }
    static lookupErrorIri(iri, messageParams) {
        if (InruptError.determineIfVocabTerm(iri)) {
            const message = messageParams === undefined
                ? iri.message
                : iri.messageParams(...messageParams);
            return message === undefined
                ? `Looked up error message IRI [${iri.value}], but found no message value.`
                : message;
        }
        return `Error message looked up at: [${iri.value}]${messageParams === undefined
            ? ""
            : `, with params [${messageParams.toString()}]`}`;
    }
    static appendHttpResponseDetails(message, response, append) {
        if (append && typeof response !== "undefined") {
            return `${message} HTTP details: status code [${response.status}], status text [${response.statusText}].`;
        }
        return message;
    }
    static appendErrorIri(message, iri, append) {
        return append ? `${message} Error IRI: [${iri.value}].` : message;
    }
    static substituteParams(message, params) {
        let fullMessage = message;
        if (params !== undefined) {
            const paramsRequired = message.split("{{").length - 1;
            if (paramsRequired !== params.length) {
                throw new Error(`Setting parameters on message [${message}], but it requires [${paramsRequired}] params and we received [${params.length}].`);
            }
            for (let i = 0; i < params.length; i += 1) {
                const marker = `{{${i}}}`;
                fullMessage = fullMessage.replace(marker, params[i]);
            }
        }
        return fullMessage;
    }
}
exports.default = InruptError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/util/handlerPattern/AggregateHandler.js":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InruptError_1 = __importDefault(require("../../errors/InruptError"));
class AggregateHandler {
    constructor(handleables) {
        this.handleables = handleables;
    }
    async getProperHandler(params) {
        const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));
        for (let i = 0; i < canHandleList.length; i += 1) {
            if (canHandleList[i]) {
                return this.handleables[i];
            }
        }
        return null;
    }
    async canHandle(...params) {
        return (await this.getProperHandler(params)) !== null;
    }
    async handle(...params) {
        const handler = await this.getProperHandler(params);
        if (handler) {
            return handler.handle(...params);
        }
        throw new InruptError_1.default(`[${this.constructor.name}] cannot find a suitable handler for: ${params
            .map((param) => {
            try {
                return JSON.stringify(param);
            }
            catch (err) {
                return param.toString();
            }
        })
            .join(", ")}`);
    }
}
exports.default = AggregateHandler;

},{"../../errors/InruptError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js"}],"node_modules/jose/dist/browser/runtime/webcrypto.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCryptoKey = exports.default = void 0;
var _default = crypto;
exports.default = _default;

const isCryptoKey = key => key instanceof CryptoKey;

exports.isCryptoKey = isCryptoKey;
},{}],"node_modules/jose/dist/browser/runtime/digest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webcrypto = _interopRequireDefault(require("./webcrypto.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const digest = async (algorithm, data) => {
  const subtleDigest = `SHA-${algorithm.slice(-3)}`;
  return new Uint8Array(await _webcrypto.default.subtle.digest(subtleDigest, data));
};

var _default = digest;
exports.default = _default;
},{"./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js"}],"node_modules/jose/dist/browser/lib/buffer_utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = concat;
exports.concatKdf = concatKdf;
exports.encoder = exports.decoder = void 0;
exports.lengthAndInput = lengthAndInput;
exports.p2s = p2s;
exports.uint32be = uint32be;
exports.uint64be = uint64be;

var _digest = _interopRequireDefault(require("../runtime/digest.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const encoder = new TextEncoder();
exports.encoder = encoder;
const decoder = new TextDecoder();
exports.decoder = decoder;
const MAX_INT32 = 2 ** 32;

function concat(...buffers) {
  const size = buffers.reduce((acc, {
    length
  }) => acc + length, 0);
  const buf = new Uint8Array(size);
  let i = 0;
  buffers.forEach(buffer => {
    buf.set(buffer, i);
    i += buffer.length;
  });
  return buf;
}

function p2s(alg, p2sInput) {
  return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
}

function writeUInt32BE(buf, value, offset) {
  if (value < 0 || value >= MAX_INT32) {
    throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
  }

  buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);
}

function uint64be(value) {
  const high = Math.floor(value / MAX_INT32);
  const low = value % MAX_INT32;
  const buf = new Uint8Array(8);
  writeUInt32BE(buf, high, 0);
  writeUInt32BE(buf, low, 4);
  return buf;
}

function uint32be(value) {
  const buf = new Uint8Array(4);
  writeUInt32BE(buf, value);
  return buf;
}

function lengthAndInput(input) {
  return concat(uint32be(input.length), input);
}

async function concatKdf(secret, bits, value) {
  const iterations = Math.ceil((bits >> 3) / 32);
  const res = new Uint8Array(iterations * 32);

  for (let iter = 0; iter < iterations; iter++) {
    const buf = new Uint8Array(4 + secret.length + value.length);
    buf.set(uint32be(iter + 1));
    buf.set(secret, 4);
    buf.set(value, 4 + secret.length);
    res.set(await (0, _digest.default)('sha256', buf), iter * 32);
  }

  return res.slice(0, bits >> 3);
}
},{"../runtime/digest.js":"node_modules/jose/dist/browser/runtime/digest.js"}],"node_modules/jose/dist/browser/runtime/base64url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeBase64 = exports.encode = exports.decodeBase64 = exports.decode = void 0;

var _buffer_utils = require("../lib/buffer_utils.js");

const encodeBase64 = input => {
  let unencoded = input;

  if (typeof unencoded === 'string') {
    unencoded = _buffer_utils.encoder.encode(unencoded);
  }

  const CHUNK_SIZE = 0x8000;
  const arr = [];

  for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
    arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
  }

  return btoa(arr.join(''));
};

exports.encodeBase64 = encodeBase64;

const encode = input => {
  return encodeBase64(input).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
};

exports.encode = encode;

const decodeBase64 = encoded => {
  const binary = atob(encoded);
  const bytes = new Uint8Array(binary.length);

  for (let i = 0; i < binary.length; i++) {
    bytes[i] = binary.charCodeAt(i);
  }

  return bytes;
};

exports.decodeBase64 = decodeBase64;

const decode = input => {
  let encoded = input;

  if (encoded instanceof Uint8Array) {
    encoded = _buffer_utils.decoder.decode(encoded);
  }

  encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');

  try {
    return decodeBase64(encoded);
  } catch (_a) {
    throw new TypeError('The input to be decoded is not correctly encoded.');
  }
};

exports.decode = decode;
},{"../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js"}],"node_modules/jose/dist/browser/util/errors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JWTInvalid = exports.JWTExpired = exports.JWTClaimValidationFailed = exports.JWSSignatureVerificationFailed = exports.JWSInvalid = exports.JWKSTimeout = exports.JWKSNoMatchingKey = exports.JWKSMultipleMatchingKeys = exports.JWKSInvalid = exports.JWKInvalid = exports.JWEInvalid = exports.JWEDecryptionFailed = exports.JOSENotSupported = exports.JOSEError = exports.JOSEAlgNotAllowed = void 0;

class JOSEError extends Error {
  constructor(message) {
    var _a;

    super(message);
    this.code = 'ERR_JOSE_GENERIC';
    this.name = this.constructor.name;
    (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);
  }

  static get code() {
    return 'ERR_JOSE_GENERIC';
  }

}

exports.JOSEError = JOSEError;

class JWTClaimValidationFailed extends JOSEError {
  constructor(message, claim = 'unspecified', reason = 'unspecified') {
    super(message);
    this.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
    this.claim = claim;
    this.reason = reason;
  }

  static get code() {
    return 'ERR_JWT_CLAIM_VALIDATION_FAILED';
  }

}

exports.JWTClaimValidationFailed = JWTClaimValidationFailed;

class JWTExpired extends JOSEError {
  constructor(message, claim = 'unspecified', reason = 'unspecified') {
    super(message);
    this.code = 'ERR_JWT_EXPIRED';
    this.claim = claim;
    this.reason = reason;
  }

  static get code() {
    return 'ERR_JWT_EXPIRED';
  }

}

exports.JWTExpired = JWTExpired;

class JOSEAlgNotAllowed extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
  }

  static get code() {
    return 'ERR_JOSE_ALG_NOT_ALLOWED';
  }

}

exports.JOSEAlgNotAllowed = JOSEAlgNotAllowed;

class JOSENotSupported extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JOSE_NOT_SUPPORTED';
  }

  static get code() {
    return 'ERR_JOSE_NOT_SUPPORTED';
  }

}

exports.JOSENotSupported = JOSENotSupported;

class JWEDecryptionFailed extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWE_DECRYPTION_FAILED';
    this.message = 'decryption operation failed';
  }

  static get code() {
    return 'ERR_JWE_DECRYPTION_FAILED';
  }

}

exports.JWEDecryptionFailed = JWEDecryptionFailed;

class JWEInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWE_INVALID';
  }

  static get code() {
    return 'ERR_JWE_INVALID';
  }

}

exports.JWEInvalid = JWEInvalid;

class JWSInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWS_INVALID';
  }

  static get code() {
    return 'ERR_JWS_INVALID';
  }

}

exports.JWSInvalid = JWSInvalid;

class JWTInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWT_INVALID';
  }

  static get code() {
    return 'ERR_JWT_INVALID';
  }

}

exports.JWTInvalid = JWTInvalid;

class JWKInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWK_INVALID';
  }

  static get code() {
    return 'ERR_JWK_INVALID';
  }

}

exports.JWKInvalid = JWKInvalid;

class JWKSInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWKS_INVALID';
  }

  static get code() {
    return 'ERR_JWKS_INVALID';
  }

}

exports.JWKSInvalid = JWKSInvalid;

class JWKSNoMatchingKey extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWKS_NO_MATCHING_KEY';
    this.message = 'no applicable key found in the JSON Web Key Set';
  }

  static get code() {
    return 'ERR_JWKS_NO_MATCHING_KEY';
  }

}

exports.JWKSNoMatchingKey = JWKSNoMatchingKey;

class JWKSMultipleMatchingKeys extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
    this.message = 'multiple matching keys found in the JSON Web Key Set';
  }

  static get code() {
    return 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
  }

}

exports.JWKSMultipleMatchingKeys = JWKSMultipleMatchingKeys;

class JWKSTimeout extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWKS_TIMEOUT';
    this.message = 'request timed out';
  }

  static get code() {
    return 'ERR_JWKS_TIMEOUT';
  }

}

exports.JWKSTimeout = JWKSTimeout;

class JWSSignatureVerificationFailed extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
    this.message = 'signature verification failed';
  }

  static get code() {
    return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
  }

}

exports.JWSSignatureVerificationFailed = JWSSignatureVerificationFailed;
},{}],"node_modules/jose/dist/browser/runtime/random.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webcrypto = _interopRequireDefault(require("./webcrypto.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _webcrypto.default.getRandomValues.bind(_webcrypto.default);

exports.default = _default;
},{"./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js"}],"node_modules/jose/dist/browser/lib/iv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitLength = bitLength;
exports.default = void 0;

var _errors = require("../util/errors.js");

var _random = _interopRequireDefault(require("../runtime/random.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bitLength(alg) {
  switch (alg) {
    case 'A128GCM':
    case 'A128GCMKW':
    case 'A192GCM':
    case 'A192GCMKW':
    case 'A256GCM':
    case 'A256GCMKW':
      return 96;

    case 'A128CBC-HS256':
    case 'A192CBC-HS384':
    case 'A256CBC-HS512':
      return 128;

    default:
      throw new _errors.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
  }
}

var _default = alg => (0, _random.default)(new Uint8Array(bitLength(alg) >> 3));

exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../runtime/random.js":"node_modules/jose/dist/browser/runtime/random.js"}],"node_modules/jose/dist/browser/lib/check_iv_length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errors = require("../util/errors.js");

var _iv = require("./iv.js");

const checkIvLength = (enc, iv) => {
  if (iv.length << 3 !== (0, _iv.bitLength)(enc)) {
    throw new _errors.JWEInvalid('Invalid Initialization Vector length');
  }
};

var _default = checkIvLength;
exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./iv.js":"node_modules/jose/dist/browser/lib/iv.js"}],"node_modules/jose/dist/browser/runtime/check_cek_length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errors = require("../util/errors.js");

const checkCekLength = (cek, expected) => {
  if (cek.length << 3 !== expected) {
    throw new _errors.JWEInvalid('Invalid Content Encryption Key length');
  }
};

var _default = checkCekLength;
exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/runtime/timing_safe_equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const timingSafeEqual = (a, b) => {
  if (!(a instanceof Uint8Array)) {
    throw new TypeError('First argument must be a buffer');
  }

  if (!(b instanceof Uint8Array)) {
    throw new TypeError('Second argument must be a buffer');
  }

  if (a.length !== b.length) {
    throw new TypeError('Input buffers must have the same length');
  }

  const len = a.length;
  let out = 0;
  let i = -1;

  while (++i < len) {
    out |= a[i] ^ b[i];
  }

  return out === 0;
};

var _default = timingSafeEqual;
exports.default = _default;
},{}],"node_modules/jose/dist/browser/runtime/env.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCloudflareWorkers = isCloudflareWorkers;
exports.isNodeJs = isNodeJs;

function isCloudflareWorkers() {
  return typeof WebSocketPair === 'function';
}

function isNodeJs() {
  try {
    return process.versions.node !== undefined;
  } catch (_a) {
    return false;
  }
}
},{"process":"node_modules/process/browser.js"}],"node_modules/jose/dist/browser/lib/crypto_key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkEncCryptoKey = checkEncCryptoKey;
exports.checkSigCryptoKey = checkSigCryptoKey;

var _env = require("../runtime/env.js");

function unusable(name, prop = 'algorithm.name') {
  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}

function isAlgorithm(algorithm, name) {
  return algorithm.name === name;
}

function getHashLength(hash) {
  return parseInt(hash.name.slice(4), 10);
}

function getNamedCurve(alg) {
  switch (alg) {
    case 'ES256':
      return 'P-256';

    case 'ES384':
      return 'P-384';

    case 'ES512':
      return 'P-521';

    default:
      throw new Error('unreachable');
  }
}

function checkUsage(key, usages) {
  if (usages.length && !usages.some(expected => key.usages.includes(expected))) {
    let msg = 'CryptoKey does not support this operation, its usages must include ';

    if (usages.length > 2) {
      const last = usages.pop();
      msg += `one of ${usages.join(', ')}, or ${last}.`;
    } else if (usages.length === 2) {
      msg += `one of ${usages[0]} or ${usages[1]}.`;
    } else {
      msg += `${usages[0]}.`;
    }

    throw new TypeError(msg);
  }
}

function checkSigCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case 'HS256':
    case 'HS384':
    case 'HS512':
      {
        if (!isAlgorithm(key.algorithm, 'HMAC')) throw unusable('HMAC');
        const expected = parseInt(alg.slice(2), 10);
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
        break;
      }

    case 'RS256':
    case 'RS384':
    case 'RS512':
      {
        if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5')) throw unusable('RSASSA-PKCS1-v1_5');
        const expected = parseInt(alg.slice(2), 10);
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
        break;
      }

    case 'PS256':
    case 'PS384':
    case 'PS512':
      {
        if (!isAlgorithm(key.algorithm, 'RSA-PSS')) throw unusable('RSA-PSS');
        const expected = parseInt(alg.slice(2), 10);
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
        break;
      }

    case (0, _env.isNodeJs)() && 'EdDSA':
      {
        if (key.algorithm.name !== 'NODE-ED25519' && key.algorithm.name !== 'NODE-ED448') throw unusable('NODE-ED25519 or NODE-ED448');
        break;
      }

    case (0, _env.isCloudflareWorkers)() && 'EdDSA':
      {
        if (!isAlgorithm(key.algorithm, 'NODE-ED25519')) throw unusable('NODE-ED25519');
        break;
      }

    case 'ES256':
    case 'ES384':
    case 'ES512':
      {
        if (!isAlgorithm(key.algorithm, 'ECDSA')) throw unusable('ECDSA');
        const expected = getNamedCurve(alg);
        const actual = key.algorithm.namedCurve;
        if (actual !== expected) throw unusable(expected, 'algorithm.namedCurve');
        break;
      }

    default:
      throw new TypeError('CryptoKey does not support this operation');
  }

  checkUsage(key, usages);
}

function checkEncCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case 'A128GCM':
    case 'A192GCM':
    case 'A256GCM':
      {
        if (!isAlgorithm(key.algorithm, 'AES-GCM')) throw unusable('AES-GCM');
        const expected = parseInt(alg.slice(1, 4), 10);
        const actual = key.algorithm.length;
        if (actual !== expected) throw unusable(expected, 'algorithm.length');
        break;
      }

    case 'A128KW':
    case 'A192KW':
    case 'A256KW':
      {
        if (!isAlgorithm(key.algorithm, 'AES-KW')) throw unusable('AES-KW');
        const expected = parseInt(alg.slice(1, 4), 10);
        const actual = key.algorithm.length;
        if (actual !== expected) throw unusable(expected, 'algorithm.length');
        break;
      }

    case 'ECDH':
      if (!isAlgorithm(key.algorithm, 'ECDH')) throw unusable('ECDH');
      break;

    case 'PBES2-HS256+A128KW':
    case 'PBES2-HS384+A192KW':
    case 'PBES2-HS512+A256KW':
      if (!isAlgorithm(key.algorithm, 'PBKDF2')) throw unusable('PBKDF2');
      break;

    case 'RSA-OAEP':
    case 'RSA-OAEP-256':
    case 'RSA-OAEP-384':
    case 'RSA-OAEP-512':
      {
        if (!isAlgorithm(key.algorithm, 'RSA-OAEP')) throw unusable('RSA-OAEP');
        const expected = parseInt(alg.slice(9), 10) || 1;
        const actual = getHashLength(key.algorithm.hash);
        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
        break;
      }

    default:
      throw new TypeError('CryptoKey does not support this operation');
  }

  checkUsage(key, usages);
}
},{"../runtime/env.js":"node_modules/jose/dist/browser/runtime/env.js"}],"node_modules/jose/dist/browser/lib/invalid_key_input.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = (actual, ...types) => {
  let msg = 'Key must be ';

  if (types.length > 2) {
    const last = types.pop();
    msg += `one of type ${types.join(', ')}, or ${last}.`;
  } else if (types.length === 2) {
    msg += `one of type ${types[0]} or ${types[1]}.`;
  } else {
    msg += `of type ${types[0]}.`;
  }

  if (actual == null) {
    msg += ` Received ${actual}`;
  } else if (typeof actual === 'function' && actual.name) {
    msg += ` Received function ${actual.name}`;
  } else if (typeof actual === 'object' && actual != null) {
    if (actual.constructor && actual.constructor.name) {
      msg += ` Received an instance of ${actual.constructor.name}`;
    }
  }

  return msg;
};

exports.default = _default;
},{}],"node_modules/jose/dist/browser/runtime/is_key_like.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.types = exports.default = void 0;

var _webcrypto = require("./webcrypto.js");

var _default = key => {
  return (0, _webcrypto.isCryptoKey)(key);
};

exports.default = _default;
const types = ['CryptoKey'];
exports.types = types;
},{"./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js"}],"node_modules/jose/dist/browser/runtime/decrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buffer_utils = require("../lib/buffer_utils.js");

var _check_iv_length = _interopRequireDefault(require("../lib/check_iv_length.js"));

var _check_cek_length = _interopRequireDefault(require("./check_cek_length.js"));

var _timing_safe_equal = _interopRequireDefault(require("./timing_safe_equal.js"));

var _errors = require("../util/errors.js");

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _is_key_like = require("./is_key_like.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
  if (!(cek instanceof Uint8Array)) {
    throw new TypeError((0, _invalid_key_input.default)(cek, 'Uint8Array'));
  }

  const keySize = parseInt(enc.slice(1, 4), 10);
  const encKey = await _webcrypto.default.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['decrypt']);
  const macKey = await _webcrypto.default.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
    hash: `SHA-${keySize << 1}`,
    name: 'HMAC'
  }, false, ['sign']);
  const macData = (0, _buffer_utils.concat)(aad, iv, ciphertext, (0, _buffer_utils.uint64be)(aad.length << 3));
  const expectedTag = new Uint8Array((await _webcrypto.default.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
  let macCheckPassed;

  try {
    macCheckPassed = (0, _timing_safe_equal.default)(tag, expectedTag);
  } catch (_a) {}

  if (!macCheckPassed) {
    throw new _errors.JWEDecryptionFailed();
  }

  let plaintext;

  try {
    plaintext = new Uint8Array(await _webcrypto.default.subtle.decrypt({
      iv,
      name: 'AES-CBC'
    }, encKey, ciphertext));
  } catch (_b) {}

  if (!plaintext) {
    throw new _errors.JWEDecryptionFailed();
  }

  return plaintext;
}

async function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
  let encKey;

  if (cek instanceof Uint8Array) {
    encKey = await _webcrypto.default.subtle.importKey('raw', cek, 'AES-GCM', false, ['decrypt']);
  } else {
    (0, _crypto_key.checkEncCryptoKey)(cek, enc, 'decrypt');
    encKey = cek;
  }

  try {
    return new Uint8Array(await _webcrypto.default.subtle.decrypt({
      additionalData: aad,
      iv,
      name: 'AES-GCM',
      tagLength: 128
    }, encKey, (0, _buffer_utils.concat)(ciphertext, tag)));
  } catch (_a) {
    throw new _errors.JWEDecryptionFailed();
  }
}

const decrypt = async (enc, cek, ciphertext, iv, tag, aad) => {
  if (!(0, _webcrypto.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) {
    throw new TypeError((0, _invalid_key_input.default)(cek, ..._is_key_like.types, 'Uint8Array'));
  }

  (0, _check_iv_length.default)(enc, iv);

  switch (enc) {
    case 'A128CBC-HS256':
    case 'A192CBC-HS384':
    case 'A256CBC-HS512':
      if (cek instanceof Uint8Array) (0, _check_cek_length.default)(cek, parseInt(enc.slice(-3), 10));
      return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);

    case 'A128GCM':
    case 'A192GCM':
    case 'A256GCM':
      if (cek instanceof Uint8Array) (0, _check_cek_length.default)(cek, parseInt(enc.slice(1, 4), 10));
      return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);

    default:
      throw new _errors.JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
  }
};

var _default = decrypt;
exports.default = _default;
},{"../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../lib/check_iv_length.js":"node_modules/jose/dist/browser/lib/check_iv_length.js","./check_cek_length.js":"node_modules/jose/dist/browser/runtime/check_cek_length.js","./timing_safe_equal.js":"node_modules/jose/dist/browser/runtime/timing_safe_equal.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/runtime/zlib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inflate = exports.deflate = void 0;

var _errors = require("../util/errors.js");

const inflate = async () => {
  throw new _errors.JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `inflateRaw` decrypt option to provide Inflate Raw implementation.');
};

exports.inflate = inflate;

const deflate = async () => {
  throw new _errors.JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `deflateRaw` encrypt option to provide Deflate Raw implementation.');
};

exports.deflate = deflate;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/lib/is_disjoint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const isDisjoint = (...headers) => {
  const sources = headers.filter(Boolean);

  if (sources.length === 0 || sources.length === 1) {
    return true;
  }

  let acc;

  for (const header of sources) {
    const parameters = Object.keys(header);

    if (!acc || acc.size === 0) {
      acc = new Set(parameters);
      continue;
    }

    for (const parameter of parameters) {
      if (acc.has(parameter)) {
        return false;
      }

      acc.add(parameter);
    }
  }

  return true;
};

var _default = isDisjoint;
exports.default = _default;
},{}],"node_modules/jose/dist/browser/lib/is_object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isObject;

function isObjectLike(value) {
  return typeof value === 'object' && value !== null;
}

function isObject(input) {
  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {
    return false;
  }

  if (Object.getPrototypeOf(input) === null) {
    return true;
  }

  let proto = input;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(input) === proto;
}
},{}],"node_modules/jose/dist/browser/runtime/bogus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const bogusWebCrypto = [{
  hash: 'SHA-256',
  name: 'HMAC'
}, true, ['sign']];
var _default = bogusWebCrypto;
exports.default = _default;
},{}],"node_modules/jose/dist/browser/runtime/aeskw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrap = exports.unwrap = void 0;

var _bogus = _interopRequireDefault(require("./bogus.js"));

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _is_key_like = require("./is_key_like.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function checkKeySize(key, alg) {
  if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) {
    throw new TypeError(`Invalid key size for alg: ${alg}`);
  }
}

function getCryptoKey(key, alg, usage) {
  if ((0, _webcrypto.isCryptoKey)(key)) {
    (0, _crypto_key.checkEncCryptoKey)(key, alg, usage);
    return key;
  }

  if (key instanceof Uint8Array) {
    return _webcrypto.default.subtle.importKey('raw', key, 'AES-KW', true, [usage]);
  }

  throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types, 'Uint8Array'));
}

const wrap = async (alg, key, cek) => {
  const cryptoKey = await getCryptoKey(key, alg, 'wrapKey');
  checkKeySize(cryptoKey, alg);
  const cryptoKeyCek = await _webcrypto.default.subtle.importKey('raw', cek, ..._bogus.default);
  return new Uint8Array(await _webcrypto.default.subtle.wrapKey('raw', cryptoKeyCek, cryptoKey, 'AES-KW'));
};

exports.wrap = wrap;

const unwrap = async (alg, key, encryptedKey) => {
  const cryptoKey = await getCryptoKey(key, alg, 'unwrapKey');
  checkKeySize(cryptoKey, alg);
  const cryptoKeyCek = await _webcrypto.default.subtle.unwrapKey('raw', encryptedKey, cryptoKey, 'AES-KW', ..._bogus.default);
  return new Uint8Array(await _webcrypto.default.subtle.exportKey('raw', cryptoKeyCek));
};

exports.unwrap = unwrap;
},{"./bogus.js":"node_modules/jose/dist/browser/runtime/bogus.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/runtime/ecdhes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deriveKey = deriveKey;
exports.ecdhAllowed = ecdhAllowed;
exports.generateEpk = generateEpk;

var _buffer_utils = require("../lib/buffer_utils.js");

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _is_key_like = require("./is_key_like.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
  if (!(0, _webcrypto.isCryptoKey)(publicKey)) {
    throw new TypeError((0, _invalid_key_input.default)(publicKey, ..._is_key_like.types));
  }

  (0, _crypto_key.checkEncCryptoKey)(publicKey, 'ECDH');

  if (!(0, _webcrypto.isCryptoKey)(privateKey)) {
    throw new TypeError((0, _invalid_key_input.default)(privateKey, ..._is_key_like.types));
  }

  (0, _crypto_key.checkEncCryptoKey)(privateKey, 'ECDH', 'deriveBits');
  const value = (0, _buffer_utils.concat)((0, _buffer_utils.lengthAndInput)(_buffer_utils.encoder.encode(algorithm)), (0, _buffer_utils.lengthAndInput)(apu), (0, _buffer_utils.lengthAndInput)(apv), (0, _buffer_utils.uint32be)(keyLength));
  const sharedSecret = new Uint8Array(await _webcrypto.default.subtle.deriveBits({
    name: 'ECDH',
    public: publicKey
  }, privateKey, Math.ceil(parseInt(privateKey.algorithm.namedCurve.slice(-3), 10) / 8) << 3));
  return (0, _buffer_utils.concatKdf)(sharedSecret, keyLength, value);
}

async function generateEpk(key) {
  if (!(0, _webcrypto.isCryptoKey)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
  }

  return _webcrypto.default.subtle.generateKey(key.algorithm, true, ['deriveBits']);
}

function ecdhAllowed(key) {
  if (!(0, _webcrypto.isCryptoKey)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
  }

  return ['P-256', 'P-384', 'P-521'].includes(key.algorithm.namedCurve);
}
},{"../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/lib/check_p2s.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = checkP2s;

var _errors = require("../util/errors.js");

function checkP2s(p2s) {
  if (!(p2s instanceof Uint8Array) || p2s.length < 8) {
    throw new _errors.JWEInvalid('PBES2 Salt Input must be 8 or more octets');
  }
}
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/runtime/pbes2kw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encrypt = exports.decrypt = void 0;

var _random = _interopRequireDefault(require("./random.js"));

var _buffer_utils = require("../lib/buffer_utils.js");

var _base64url = require("./base64url.js");

var _aeskw = require("./aeskw.js");

var _check_p2s = _interopRequireDefault(require("../lib/check_p2s.js"));

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _is_key_like = require("./is_key_like.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getCryptoKey(key, alg) {
  if (key instanceof Uint8Array) {
    return _webcrypto.default.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);
  }

  if ((0, _webcrypto.isCryptoKey)(key)) {
    (0, _crypto_key.checkEncCryptoKey)(key, alg, 'deriveBits', 'deriveKey');
    return key;
  }

  throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types, 'Uint8Array'));
}

async function deriveKey(p2s, alg, p2c, key) {
  (0, _check_p2s.default)(p2s);
  const salt = (0, _buffer_utils.p2s)(alg, p2s);
  const keylen = parseInt(alg.slice(13, 16), 10);
  const subtleAlg = {
    hash: `SHA-${alg.slice(8, 11)}`,
    iterations: p2c,
    name: 'PBKDF2',
    salt
  };
  const wrapAlg = {
    length: keylen,
    name: 'AES-KW'
  };
  const cryptoKey = await getCryptoKey(key, alg);

  if (cryptoKey.usages.includes('deriveBits')) {
    return new Uint8Array(await _webcrypto.default.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
  }

  if (cryptoKey.usages.includes('deriveKey')) {
    return _webcrypto.default.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);
  }

  throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}

const encrypt = async (alg, key, cek, p2c = 2048, p2s = (0, _random.default)(new Uint8Array(16))) => {
  const derived = await deriveKey(p2s, alg, p2c, key);
  const encryptedKey = await (0, _aeskw.wrap)(alg.slice(-6), derived, cek);
  return {
    encryptedKey,
    p2c,
    p2s: (0, _base64url.encode)(p2s)
  };
};

exports.encrypt = encrypt;

const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {
  const derived = await deriveKey(p2s, alg, p2c, key);
  return (0, _aeskw.unwrap)(alg.slice(-6), derived, encryptedKey);
};

exports.decrypt = decrypt;
},{"./random.js":"node_modules/jose/dist/browser/runtime/random.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","./base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","./aeskw.js":"node_modules/jose/dist/browser/runtime/aeskw.js","../lib/check_p2s.js":"node_modules/jose/dist/browser/lib/check_p2s.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/runtime/subtle_rsaes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = subtleRsaEs;

var _errors = require("../util/errors.js");

function subtleRsaEs(alg) {
  switch (alg) {
    case 'RSA-OAEP':
    case 'RSA-OAEP-256':
    case 'RSA-OAEP-384':
    case 'RSA-OAEP-512':
      return 'RSA-OAEP';

    default:
      throw new _errors.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/runtime/check_key_length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = (alg, key) => {
  if (alg.startsWith('RS') || alg.startsWith('PS')) {
    const {
      modulusLength
    } = key.algorithm;

    if (typeof modulusLength !== 'number' || modulusLength < 2048) {
      throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
    }
  }
};

exports.default = _default;
},{}],"node_modules/jose/dist/browser/runtime/rsaes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encrypt = exports.decrypt = void 0;

var _subtle_rsaes = _interopRequireDefault(require("./subtle_rsaes.js"));

var _bogus = _interopRequireDefault(require("./bogus.js"));

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _check_key_length = _interopRequireDefault(require("./check_key_length.js"));

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _is_key_like = require("./is_key_like.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const encrypt = async (alg, key, cek) => {
  if (!(0, _webcrypto.isCryptoKey)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
  }

  (0, _crypto_key.checkEncCryptoKey)(key, alg, 'encrypt', 'wrapKey');
  (0, _check_key_length.default)(alg, key);

  if (key.usages.includes('encrypt')) {
    return new Uint8Array(await _webcrypto.default.subtle.encrypt((0, _subtle_rsaes.default)(alg), key, cek));
  }

  if (key.usages.includes('wrapKey')) {
    const cryptoKeyCek = await _webcrypto.default.subtle.importKey('raw', cek, ..._bogus.default);
    return new Uint8Array(await _webcrypto.default.subtle.wrapKey('raw', cryptoKeyCek, key, (0, _subtle_rsaes.default)(alg)));
  }

  throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
};

exports.encrypt = encrypt;

const decrypt = async (alg, key, encryptedKey) => {
  if (!(0, _webcrypto.isCryptoKey)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
  }

  (0, _crypto_key.checkEncCryptoKey)(key, alg, 'decrypt', 'unwrapKey');
  (0, _check_key_length.default)(alg, key);

  if (key.usages.includes('decrypt')) {
    return new Uint8Array(await _webcrypto.default.subtle.decrypt((0, _subtle_rsaes.default)(alg), key, encryptedKey));
  }

  if (key.usages.includes('unwrapKey')) {
    const cryptoKeyCek = await _webcrypto.default.subtle.unwrapKey('raw', encryptedKey, key, (0, _subtle_rsaes.default)(alg), ..._bogus.default);
    return new Uint8Array(await _webcrypto.default.subtle.exportKey('raw', cryptoKeyCek));
  }

  throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};

exports.decrypt = decrypt;
},{"./subtle_rsaes.js":"node_modules/jose/dist/browser/runtime/subtle_rsaes.js","./bogus.js":"node_modules/jose/dist/browser/runtime/bogus.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","./check_key_length.js":"node_modules/jose/dist/browser/runtime/check_key_length.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/lib/cek.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitLength = bitLength;
exports.default = void 0;

var _errors = require("../util/errors.js");

var _random = _interopRequireDefault(require("../runtime/random.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bitLength(alg) {
  switch (alg) {
    case 'A128GCM':
      return 128;

    case 'A192GCM':
      return 192;

    case 'A256GCM':
    case 'A128CBC-HS256':
      return 256;

    case 'A192CBC-HS384':
      return 384;

    case 'A256CBC-HS512':
      return 512;

    default:
      throw new _errors.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
  }
}

var _default = alg => (0, _random.default)(new Uint8Array(bitLength(alg) >> 3));

exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../runtime/random.js":"node_modules/jose/dist/browser/runtime/random.js"}],"node_modules/jose/dist/browser/lib/format_pem.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = (b64, descriptor) => {
  const newlined = (b64.match(/.{1,64}/g) || []).join('\n');
  return `-----BEGIN ${descriptor}-----\n${newlined}\n-----END ${descriptor}-----`;
};

exports.default = _default;
},{}],"node_modules/jose/dist/browser/runtime/asn1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toSPKI = exports.toPKCS8 = exports.fromSPKI = exports.fromPKCS8 = void 0;

var _env = require("./env.js");

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _base64url = require("./base64url.js");

var _format_pem = _interopRequireDefault(require("../lib/format_pem.js"));

var _errors = require("../util/errors.js");

var _is_key_like = require("./is_key_like.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const genericExport = async (keyType, keyFormat, key) => {
  if (!(0, _webcrypto.isCryptoKey)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
  }

  if (!key.extractable) {
    throw new TypeError('CryptoKey is not extractable');
  }

  if (key.type !== keyType) {
    throw new TypeError(`key is not a ${keyType} key`);
  }

  return (0, _format_pem.default)((0, _base64url.encodeBase64)(new Uint8Array(await _webcrypto.default.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
};

const toSPKI = key => {
  return genericExport('public', 'spki', key);
};

exports.toSPKI = toSPKI;

const toPKCS8 = key => {
  return genericExport('private', 'pkcs8', key);
};

exports.toPKCS8 = toPKCS8;

const findOid = (keyData, oid, from = 0) => {
  if (from === 0) {
    oid.unshift(oid.length);
    oid.unshift(0x06);
  }

  let i = keyData.indexOf(oid[0], from);
  if (i === -1) return false;
  const sub = keyData.subarray(i, i + oid.length);
  if (sub.length !== oid.length) return false;
  return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);
};

const getNamedCurve = keyData => {
  switch (true) {
    case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):
      return 'P-256';

    case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):
      return 'P-384';

    case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):
      return 'P-521';

    case ((0, _env.isCloudflareWorkers)() || (0, _env.isNodeJs)()) && findOid(keyData, [0x2b, 0x65, 0x70]):
      return 'Ed25519';

    case (0, _env.isNodeJs)() && findOid(keyData, [0x2b, 0x65, 0x71]):
      return 'Ed448';

    default:
      throw new _errors.JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');
  }
};

const genericImport = async (replace, keyFormat, pem, alg, options) => {
  var _a;

  let algorithm;
  let keyUsages;
  const keyData = new Uint8Array(atob(pem.replace(replace, '')).split('').map(c => c.charCodeAt(0)));
  const isPublic = keyFormat === 'spki';

  switch (alg) {
    case 'PS256':
    case 'PS384':
    case 'PS512':
      algorithm = {
        name: 'RSA-PSS',
        hash: `SHA-${alg.slice(-3)}`
      };
      keyUsages = isPublic ? ['verify'] : ['sign'];
      break;

    case 'RS256':
    case 'RS384':
    case 'RS512':
      algorithm = {
        name: 'RSASSA-PKCS1-v1_5',
        hash: `SHA-${alg.slice(-3)}`
      };
      keyUsages = isPublic ? ['verify'] : ['sign'];
      break;

    case 'RSA-OAEP':
    case 'RSA-OAEP-256':
    case 'RSA-OAEP-384':
    case 'RSA-OAEP-512':
      algorithm = {
        name: 'RSA-OAEP',
        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`
      };
      keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];
      break;

    case 'ES256':
      algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-256'
      };
      keyUsages = isPublic ? ['verify'] : ['sign'];
      break;

    case 'ES384':
      algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-384'
      };
      keyUsages = isPublic ? ['verify'] : ['sign'];
      break;

    case 'ES512':
      algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-521'
      };
      keyUsages = isPublic ? ['verify'] : ['sign'];
      break;

    case 'ECDH-ES':
    case 'ECDH-ES+A128KW':
    case 'ECDH-ES+A192KW':
    case 'ECDH-ES+A256KW':
      algorithm = {
        name: 'ECDH',
        namedCurve: getNamedCurve(keyData)
      };
      keyUsages = isPublic ? [] : ['deriveBits'];
      break;

    case ((0, _env.isCloudflareWorkers)() || (0, _env.isNodeJs)()) && 'EdDSA':
      const namedCurve = getNamedCurve(keyData).toUpperCase();
      algorithm = {
        name: `NODE-${namedCurve}`,
        namedCurve: `NODE-${namedCurve}`
      };
      keyUsages = isPublic ? ['verify'] : ['sign'];
      break;

    default:
      throw new _errors.JOSENotSupported('Invalid or unsupported "alg" (Algorithm) value');
  }

  return _webcrypto.default.subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
};

const fromPKCS8 = (pem, alg, options) => {
  return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, 'pkcs8', pem, alg, options);
};

exports.fromPKCS8 = fromPKCS8;

const fromSPKI = (pem, alg, options) => {
  return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, 'spki', pem, alg, options);
};

exports.fromSPKI = fromSPKI;
},{"./env.js":"node_modules/jose/dist/browser/runtime/env.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../lib/format_pem.js":"node_modules/jose/dist/browser/lib/format_pem.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/runtime/jwk_to_key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _env = require("./env.js");

var _webcrypto = _interopRequireDefault(require("./webcrypto.js"));

var _errors = require("../util/errors.js");

var _base64url = require("./base64url.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function subtleMapping(jwk) {
  let algorithm;
  let keyUsages;

  switch (jwk.kty) {
    case 'oct':
      {
        switch (jwk.alg) {
          case 'HS256':
          case 'HS384':
          case 'HS512':
            algorithm = {
              name: 'HMAC',
              hash: `SHA-${jwk.alg.slice(-3)}`
            };
            keyUsages = ['sign', 'verify'];
            break;

          case 'A128CBC-HS256':
          case 'A192CBC-HS384':
          case 'A256CBC-HS512':
            throw new _errors.JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);

          case 'A128GCM':
          case 'A192GCM':
          case 'A256GCM':
          case 'A128GCMKW':
          case 'A192GCMKW':
          case 'A256GCMKW':
            algorithm = {
              name: 'AES-GCM'
            };
            keyUsages = ['encrypt', 'decrypt'];
            break;

          case 'A128KW':
          case 'A192KW':
          case 'A256KW':
            algorithm = {
              name: 'AES-KW'
            };
            keyUsages = ['wrapKey', 'unwrapKey'];
            break;

          case 'PBES2-HS256+A128KW':
          case 'PBES2-HS384+A192KW':
          case 'PBES2-HS512+A256KW':
            algorithm = {
              name: 'PBKDF2'
            };
            keyUsages = ['deriveBits'];
            break;

          default:
            throw new _errors.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
        }

        break;
      }

    case 'RSA':
      {
        switch (jwk.alg) {
          case 'PS256':
          case 'PS384':
          case 'PS512':
            algorithm = {
              name: 'RSA-PSS',
              hash: `SHA-${jwk.alg.slice(-3)}`
            };
            keyUsages = jwk.d ? ['sign'] : ['verify'];
            break;

          case 'RS256':
          case 'RS384':
          case 'RS512':
            algorithm = {
              name: 'RSASSA-PKCS1-v1_5',
              hash: `SHA-${jwk.alg.slice(-3)}`
            };
            keyUsages = jwk.d ? ['sign'] : ['verify'];
            break;

          case 'RSA-OAEP':
          case 'RSA-OAEP-256':
          case 'RSA-OAEP-384':
          case 'RSA-OAEP-512':
            algorithm = {
              name: 'RSA-OAEP',
              hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
            };
            keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];
            break;

          default:
            throw new _errors.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
        }

        break;
      }

    case 'EC':
      {
        switch (jwk.alg) {
          case 'ES256':
            algorithm = {
              name: 'ECDSA',
              namedCurve: 'P-256'
            };
            keyUsages = jwk.d ? ['sign'] : ['verify'];
            break;

          case 'ES384':
            algorithm = {
              name: 'ECDSA',
              namedCurve: 'P-384'
            };
            keyUsages = jwk.d ? ['sign'] : ['verify'];
            break;

          case 'ES512':
            algorithm = {
              name: 'ECDSA',
              namedCurve: 'P-521'
            };
            keyUsages = jwk.d ? ['sign'] : ['verify'];
            break;

          case 'ECDH-ES':
          case 'ECDH-ES+A128KW':
          case 'ECDH-ES+A192KW':
          case 'ECDH-ES+A256KW':
            algorithm = {
              name: 'ECDH',
              namedCurve: jwk.crv
            };
            keyUsages = jwk.d ? ['deriveBits'] : [];
            break;

          default:
            throw new _errors.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
        }

        break;
      }

    case ((0, _env.isCloudflareWorkers)() || (0, _env.isNodeJs)()) && 'OKP':
      if (jwk.alg !== 'EdDSA') {
        throw new _errors.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }

      switch (jwk.crv) {
        case 'Ed25519':
          algorithm = {
            name: 'NODE-ED25519',
            namedCurve: 'NODE-ED25519'
          };
          keyUsages = jwk.d ? ['sign'] : ['verify'];
          break;

        case (0, _env.isNodeJs)() && 'Ed448':
          algorithm = {
            name: 'NODE-ED448',
            namedCurve: 'NODE-ED448'
          };
          keyUsages = jwk.d ? ['sign'] : ['verify'];
          break;

        default:
          throw new _errors.JOSENotSupported('Invalid or unsupported JWK "crv" (Subtype of Key Pair) Parameter value');
      }

      break;

    default:
      throw new _errors.JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }

  return {
    algorithm,
    keyUsages
  };
}

const parse = async jwk => {
  var _a, _b;

  const {
    algorithm,
    keyUsages
  } = subtleMapping(jwk);
  const rest = [algorithm, (_a = jwk.ext) !== null && _a !== void 0 ? _a : false, (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages];

  if (algorithm.name === 'PBKDF2') {
    return _webcrypto.default.subtle.importKey('raw', (0, _base64url.decode)(jwk.k), ...rest);
  }

  const keyData = { ...jwk
  };
  delete keyData.alg;
  return _webcrypto.default.subtle.importKey('jwk', keyData, ...rest);
};

var _default = parse;
exports.default = _default;
},{"./env.js":"node_modules/jose/dist/browser/runtime/env.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js"}],"node_modules/jose/dist/browser/key/import.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importJWK = importJWK;
exports.importPKCS8 = importPKCS8;
exports.importSPKI = importSPKI;
exports.importX509 = importX509;

var _base64url = require("../runtime/base64url.js");

var _asn = require("../runtime/asn1.js");

var _jwk_to_key = _interopRequireDefault(require("../runtime/jwk_to_key.js"));

var _errors = require("../util/errors.js");

var _format_pem = _interopRequireDefault(require("../lib/format_pem.js"));

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getElement(seq) {
  let result = [];
  let next = 0;

  while (next < seq.length) {
    let nextPart = parseElement(seq.subarray(next));
    result.push(nextPart);
    next += nextPart.byteLength;
  }

  return result;
}

function parseElement(bytes) {
  let position = 0;
  let tag = bytes[0] & 0x1f;
  position++;

  if (tag === 0x1f) {
    tag = 0;

    while (bytes[position] >= 0x80) {
      tag = tag * 128 + bytes[position] - 0x80;
      position++;
    }

    tag = tag * 128 + bytes[position] - 0x80;
    position++;
  }

  let length = 0;

  if (bytes[position] < 0x80) {
    length = bytes[position];
    position++;
  } else {
    let numberOfDigits = bytes[position] & 0x7f;
    position++;
    length = 0;

    for (let i = 0; i < numberOfDigits; i++) {
      length = length * 256 + bytes[position];
      position++;
    }
  }

  if (length === 0x80) {
    length = 0;

    while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {
      length++;
    }

    const byteLength = position + length + 2;
    return {
      byteLength,
      contents: bytes.subarray(position, position + length),
      raw: bytes.subarray(0, byteLength)
    };
  }

  const byteLength = position + length;
  return {
    byteLength,
    contents: bytes.subarray(position, byteLength),
    raw: bytes.subarray(0, byteLength)
  };
}

function spkiFromX509(buf) {
  const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
  return (0, _base64url.encodeBase64)(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);
}

function getSPKI(x509) {
  const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, '');
  const raw = (0, _base64url.decodeBase64)(pem);
  return (0, _format_pem.default)(spkiFromX509(raw), 'PUBLIC KEY');
}

async function importSPKI(spki, alg, options) {
  if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {
    throw new TypeError('"spki" must be SPKI formatted string');
  }

  return (0, _asn.fromSPKI)(spki, alg, options);
}

async function importX509(x509, alg, options) {
  if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {
    throw new TypeError('"x509" must be X.509 formatted string');
  }

  const spki = getSPKI(x509);
  return (0, _asn.fromSPKI)(spki, alg, options);
}

async function importPKCS8(pkcs8, alg, options) {
  if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {
    throw new TypeError('"pkcs8" must be PCKS8 formatted string');
  }

  return (0, _asn.fromPKCS8)(pkcs8, alg, options);
}

async function importJWK(jwk, alg, octAsKeyObject) {
  if (!(0, _is_object.default)(jwk)) {
    throw new TypeError('JWK must be an object');
  }

  alg || (alg = jwk.alg);

  if (typeof alg !== 'string' || !alg) {
    throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
  }

  switch (jwk.kty) {
    case 'oct':
      if (typeof jwk.k !== 'string' || !jwk.k) {
        throw new TypeError('missing "k" (Key Value) Parameter value');
      }

      octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : octAsKeyObject = jwk.ext !== true;

      if (octAsKeyObject) {
        return (0, _jwk_to_key.default)({ ...jwk,
          alg,
          ext: false
        });
      }

      return (0, _base64url.decode)(jwk.k);

    case 'RSA':
      if (jwk.oth !== undefined) {
        throw new _errors.JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
      }

    case 'EC':
    case 'OKP':
      return (0, _jwk_to_key.default)({ ...jwk,
        alg
      });

    default:
      throw new _errors.JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
  }
}
},{"../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../runtime/asn1.js":"node_modules/jose/dist/browser/runtime/asn1.js","../runtime/jwk_to_key.js":"node_modules/jose/dist/browser/runtime/jwk_to_key.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../lib/format_pem.js":"node_modules/jose/dist/browser/lib/format_pem.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/lib/check_key_type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _invalid_key_input = _interopRequireDefault(require("./invalid_key_input.js"));

var _is_key_like = _interopRequireWildcard(require("../runtime/is_key_like.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const symmetricTypeCheck = key => {
  if (key instanceof Uint8Array) return;

  if (!(0, _is_key_like.default)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types, 'Uint8Array'));
  }

  if (key.type !== 'secret') {
    throw new TypeError(`${_is_key_like.types.join(' or ')} instances for symmetric algorithms must be of type "secret"`);
  }
};

const asymmetricTypeCheck = (key, usage) => {
  if (!(0, _is_key_like.default)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
  }

  if (key.type === 'secret') {
    throw new TypeError(`${_is_key_like.types.join(' or ')} instances for asymmetric algorithms must not be of type "secret"`);
  }

  if (usage === 'sign' && key.type === 'public') {
    throw new TypeError(`${_is_key_like.types.join(' or ')} instances for asymmetric algorithm signing must be of type "private"`);
  }

  if (usage === 'decrypt' && key.type === 'public') {
    throw new TypeError(`${_is_key_like.types.join(' or ')} instances for asymmetric algorithm decryption must be of type "private"`);
  }

  if (key.algorithm && usage === 'verify' && key.type === 'private') {
    throw new TypeError(`${_is_key_like.types.join(' or ')} instances for asymmetric algorithm verifying must be of type "public"`);
  }

  if (key.algorithm && usage === 'encrypt' && key.type === 'private') {
    throw new TypeError(`${_is_key_like.types.join(' or ')} instances for asymmetric algorithm encryption must be of type "public"`);
  }
};

const checkKeyType = (alg, key, usage) => {
  const symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\d{3}(?:GCM)?KW$/.test(alg);

  if (symmetric) {
    symmetricTypeCheck(key);
  } else {
    asymmetricTypeCheck(key, usage);
  }
};

var _default = checkKeyType;
exports.default = _default;
},{"./invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","../runtime/is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/runtime/encrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buffer_utils = require("../lib/buffer_utils.js");

var _check_iv_length = _interopRequireDefault(require("../lib/check_iv_length.js"));

var _check_cek_length = _interopRequireDefault(require("./check_cek_length.js"));

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _errors = require("../util/errors.js");

var _is_key_like = require("./is_key_like.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
  if (!(cek instanceof Uint8Array)) {
    throw new TypeError((0, _invalid_key_input.default)(cek, 'Uint8Array'));
  }

  const keySize = parseInt(enc.slice(1, 4), 10);
  const encKey = await _webcrypto.default.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['encrypt']);
  const macKey = await _webcrypto.default.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
    hash: `SHA-${keySize << 1}`,
    name: 'HMAC'
  }, false, ['sign']);
  const ciphertext = new Uint8Array(await _webcrypto.default.subtle.encrypt({
    iv,
    name: 'AES-CBC'
  }, encKey, plaintext));
  const macData = (0, _buffer_utils.concat)(aad, iv, ciphertext, (0, _buffer_utils.uint64be)(aad.length << 3));
  const tag = new Uint8Array((await _webcrypto.default.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
  return {
    ciphertext,
    tag
  };
}

async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
  let encKey;

  if (cek instanceof Uint8Array) {
    encKey = await _webcrypto.default.subtle.importKey('raw', cek, 'AES-GCM', false, ['encrypt']);
  } else {
    (0, _crypto_key.checkEncCryptoKey)(cek, enc, 'encrypt');
    encKey = cek;
  }

  const encrypted = new Uint8Array(await _webcrypto.default.subtle.encrypt({
    additionalData: aad,
    iv,
    name: 'AES-GCM',
    tagLength: 128
  }, encKey, plaintext));
  const tag = encrypted.slice(-16);
  const ciphertext = encrypted.slice(0, -16);
  return {
    ciphertext,
    tag
  };
}

const encrypt = async (enc, plaintext, cek, iv, aad) => {
  if (!(0, _webcrypto.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) {
    throw new TypeError((0, _invalid_key_input.default)(cek, ..._is_key_like.types, 'Uint8Array'));
  }

  (0, _check_iv_length.default)(enc, iv);

  switch (enc) {
    case 'A128CBC-HS256':
    case 'A192CBC-HS384':
    case 'A256CBC-HS512':
      if (cek instanceof Uint8Array) (0, _check_cek_length.default)(cek, parseInt(enc.slice(-3), 10));
      return cbcEncrypt(enc, plaintext, cek, iv, aad);

    case 'A128GCM':
    case 'A192GCM':
    case 'A256GCM':
      if (cek instanceof Uint8Array) (0, _check_cek_length.default)(cek, parseInt(enc.slice(1, 4), 10));
      return gcmEncrypt(enc, plaintext, cek, iv, aad);

    default:
      throw new _errors.JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
  }
};

var _default = encrypt;
exports.default = _default;
},{"../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../lib/check_iv_length.js":"node_modules/jose/dist/browser/lib/check_iv_length.js","./check_cek_length.js":"node_modules/jose/dist/browser/runtime/check_cek_length.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/lib/aesgcmkw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unwrap = unwrap;
exports.wrap = wrap;

var _encrypt = _interopRequireDefault(require("../runtime/encrypt.js"));

var _decrypt = _interopRequireDefault(require("../runtime/decrypt.js"));

var _iv = _interopRequireDefault(require("./iv.js"));

var _base64url = require("../runtime/base64url.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function wrap(alg, key, cek, iv) {
  const jweAlgorithm = alg.slice(0, 7);
  iv || (iv = (0, _iv.default)(jweAlgorithm));
  const {
    ciphertext: encryptedKey,
    tag
  } = await (0, _encrypt.default)(jweAlgorithm, cek, key, iv, new Uint8Array(0));
  return {
    encryptedKey,
    iv: (0, _base64url.encode)(iv),
    tag: (0, _base64url.encode)(tag)
  };
}

async function unwrap(alg, key, encryptedKey, iv, tag) {
  const jweAlgorithm = alg.slice(0, 7);
  return (0, _decrypt.default)(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
}
},{"../runtime/encrypt.js":"node_modules/jose/dist/browser/runtime/encrypt.js","../runtime/decrypt.js":"node_modules/jose/dist/browser/runtime/decrypt.js","./iv.js":"node_modules/jose/dist/browser/lib/iv.js","../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js"}],"node_modules/jose/dist/browser/lib/decrypt_key_management.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _aeskw = require("../runtime/aeskw.js");

var ECDH = _interopRequireWildcard(require("../runtime/ecdhes.js"));

var _pbes2kw = require("../runtime/pbes2kw.js");

var _rsaes = require("../runtime/rsaes.js");

var _base64url = require("../runtime/base64url.js");

var _errors = require("../util/errors.js");

var _cek = require("../lib/cek.js");

var _import = require("../key/import.js");

var _check_key_type = _interopRequireDefault(require("./check_key_type.js"));

var _is_object = _interopRequireDefault(require("./is_object.js"));

var _aesgcmkw = require("./aesgcmkw.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function decryptKeyManagement(alg, key, encryptedKey, joseHeader) {
  (0, _check_key_type.default)(alg, key, 'decrypt');

  switch (alg) {
    case 'dir':
      {
        if (encryptedKey !== undefined) throw new _errors.JWEInvalid('Encountered unexpected JWE Encrypted Key');
        return key;
      }

    case 'ECDH-ES':
      if (encryptedKey !== undefined) throw new _errors.JWEInvalid('Encountered unexpected JWE Encrypted Key');

    case 'ECDH-ES+A128KW':
    case 'ECDH-ES+A192KW':
    case 'ECDH-ES+A256KW':
      {
        if (!(0, _is_object.default)(joseHeader.epk)) throw new _errors.JWEInvalid(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
        if (!ECDH.ecdhAllowed(key)) throw new _errors.JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');
        const epk = await (0, _import.importJWK)(joseHeader.epk, alg);
        let partyUInfo;
        let partyVInfo;

        if (joseHeader.apu !== undefined) {
          if (typeof joseHeader.apu !== 'string') throw new _errors.JWEInvalid(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
          partyUInfo = (0, _base64url.decode)(joseHeader.apu);
        }

        if (joseHeader.apv !== undefined) {
          if (typeof joseHeader.apv !== 'string') throw new _errors.JWEInvalid(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
          partyVInfo = (0, _base64url.decode)(joseHeader.apv);
        }

        const sharedSecret = await ECDH.deriveKey(epk, key, alg === 'ECDH-ES' ? joseHeader.enc : alg, alg === 'ECDH-ES' ? (0, _cek.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
        if (alg === 'ECDH-ES') return sharedSecret;
        if (encryptedKey === undefined) throw new _errors.JWEInvalid('JWE Encrypted Key missing');
        return (0, _aeskw.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);
      }

    case 'RSA1_5':
    case 'RSA-OAEP':
    case 'RSA-OAEP-256':
    case 'RSA-OAEP-384':
    case 'RSA-OAEP-512':
      {
        if (encryptedKey === undefined) throw new _errors.JWEInvalid('JWE Encrypted Key missing');
        return (0, _rsaes.decrypt)(alg, key, encryptedKey);
      }

    case 'PBES2-HS256+A128KW':
    case 'PBES2-HS384+A192KW':
    case 'PBES2-HS512+A256KW':
      {
        if (encryptedKey === undefined) throw new _errors.JWEInvalid('JWE Encrypted Key missing');
        if (typeof joseHeader.p2c !== 'number') throw new _errors.JWEInvalid(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
        if (typeof joseHeader.p2s !== 'string') throw new _errors.JWEInvalid(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
        return (0, _pbes2kw.decrypt)(alg, key, encryptedKey, joseHeader.p2c, (0, _base64url.decode)(joseHeader.p2s));
      }

    case 'A128KW':
    case 'A192KW':
    case 'A256KW':
      {
        if (encryptedKey === undefined) throw new _errors.JWEInvalid('JWE Encrypted Key missing');
        return (0, _aeskw.unwrap)(alg, key, encryptedKey);
      }

    case 'A128GCMKW':
    case 'A192GCMKW':
    case 'A256GCMKW':
      {
        if (encryptedKey === undefined) throw new _errors.JWEInvalid('JWE Encrypted Key missing');
        if (typeof joseHeader.iv !== 'string') throw new _errors.JWEInvalid(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
        if (typeof joseHeader.tag !== 'string') throw new _errors.JWEInvalid(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
        const iv = (0, _base64url.decode)(joseHeader.iv);
        const tag = (0, _base64url.decode)(joseHeader.tag);
        return (0, _aesgcmkw.unwrap)(alg, key, encryptedKey, iv, tag);
      }

    default:
      {
        throw new _errors.JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
      }
  }
}

var _default = decryptKeyManagement;
exports.default = _default;
},{"../runtime/aeskw.js":"node_modules/jose/dist/browser/runtime/aeskw.js","../runtime/ecdhes.js":"node_modules/jose/dist/browser/runtime/ecdhes.js","../runtime/pbes2kw.js":"node_modules/jose/dist/browser/runtime/pbes2kw.js","../runtime/rsaes.js":"node_modules/jose/dist/browser/runtime/rsaes.js","../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../lib/cek.js":"node_modules/jose/dist/browser/lib/cek.js","../key/import.js":"node_modules/jose/dist/browser/key/import.js","./check_key_type.js":"node_modules/jose/dist/browser/lib/check_key_type.js","./is_object.js":"node_modules/jose/dist/browser/lib/is_object.js","./aesgcmkw.js":"node_modules/jose/dist/browser/lib/aesgcmkw.js"}],"node_modules/jose/dist/browser/lib/validate_crit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errors = require("../util/errors.js");

function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
  if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {
    throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  }

  if (!protectedHeader || protectedHeader.crit === undefined) {
    return new Set();
  }

  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some(input => typeof input !== 'string' || input.length === 0)) {
    throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  }

  let recognized;

  if (recognizedOption !== undefined) {
    recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
  } else {
    recognized = recognizedDefault;
  }

  for (const parameter of protectedHeader.crit) {
    if (!recognized.has(parameter)) {
      throw new _errors.JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
    }

    if (joseHeader[parameter] === undefined) {
      throw new Err(`Extension Header Parameter "${parameter}" is missing`);
    } else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
      throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
  }

  return new Set(protectedHeader.crit);
}

var _default = validateCrit;
exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/lib/validate_algorithms.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const validateAlgorithms = (option, algorithms) => {
  if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some(s => typeof s !== 'string'))) {
    throw new TypeError(`"${option}" option must be an array of strings`);
  }

  if (!algorithms) {
    return undefined;
  }

  return new Set(algorithms);
};

var _default = validateAlgorithms;
exports.default = _default;
},{}],"node_modules/jose/dist/browser/jwe/flattened/decrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenedDecrypt = flattenedDecrypt;

var _base64url = require("../../runtime/base64url.js");

var _decrypt = _interopRequireDefault(require("../../runtime/decrypt.js"));

var _zlib = require("../../runtime/zlib.js");

var _errors = require("../../util/errors.js");

var _is_disjoint = _interopRequireDefault(require("../../lib/is_disjoint.js"));

var _is_object = _interopRequireDefault(require("../../lib/is_object.js"));

var _decrypt_key_management = _interopRequireDefault(require("../../lib/decrypt_key_management.js"));

var _buffer_utils = require("../../lib/buffer_utils.js");

var _cek = _interopRequireDefault(require("../../lib/cek.js"));

var _validate_crit = _interopRequireDefault(require("../../lib/validate_crit.js"));

var _validate_algorithms = _interopRequireDefault(require("../../lib/validate_algorithms.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function flattenedDecrypt(jwe, key, options) {
  var _a;

  if (!(0, _is_object.default)(jwe)) {
    throw new _errors.JWEInvalid('Flattened JWE must be an object');
  }

  if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {
    throw new _errors.JWEInvalid('JOSE Header missing');
  }

  if (typeof jwe.iv !== 'string') {
    throw new _errors.JWEInvalid('JWE Initialization Vector missing or incorrect type');
  }

  if (typeof jwe.ciphertext !== 'string') {
    throw new _errors.JWEInvalid('JWE Ciphertext missing or incorrect type');
  }

  if (typeof jwe.tag !== 'string') {
    throw new _errors.JWEInvalid('JWE Authentication Tag missing or incorrect type');
  }

  if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {
    throw new _errors.JWEInvalid('JWE Protected Header incorrect type');
  }

  if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {
    throw new _errors.JWEInvalid('JWE Encrypted Key incorrect type');
  }

  if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {
    throw new _errors.JWEInvalid('JWE AAD incorrect type');
  }

  if (jwe.header !== undefined && !(0, _is_object.default)(jwe.header)) {
    throw new _errors.JWEInvalid('JWE Shared Unprotected Header incorrect type');
  }

  if (jwe.unprotected !== undefined && !(0, _is_object.default)(jwe.unprotected)) {
    throw new _errors.JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');
  }

  let parsedProt;

  if (jwe.protected) {
    const protectedHeader = (0, _base64url.decode)(jwe.protected);

    try {
      parsedProt = JSON.parse(_buffer_utils.decoder.decode(protectedHeader));
    } catch (_b) {
      throw new _errors.JWEInvalid('JWE Protected Header is invalid');
    }
  }

  if (!(0, _is_disjoint.default)(parsedProt, jwe.header, jwe.unprotected)) {
    throw new _errors.JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');
  }

  const joseHeader = { ...parsedProt,
    ...jwe.header,
    ...jwe.unprotected
  };
  (0, _validate_crit.default)(_errors.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);

  if (joseHeader.zip !== undefined) {
    if (!parsedProt || !parsedProt.zip) {
      throw new _errors.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
    }

    if (joseHeader.zip !== 'DEF') {
      throw new _errors.JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
    }
  }

  const {
    alg,
    enc
  } = joseHeader;

  if (typeof alg !== 'string' || !alg) {
    throw new _errors.JWEInvalid('missing JWE Algorithm (alg) in JWE Header');
  }

  if (typeof enc !== 'string' || !enc) {
    throw new _errors.JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');
  }

  const keyManagementAlgorithms = options && (0, _validate_algorithms.default)('keyManagementAlgorithms', options.keyManagementAlgorithms);
  const contentEncryptionAlgorithms = options && (0, _validate_algorithms.default)('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);

  if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) {
    throw new _errors.JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  }

  if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
    throw new _errors.JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter not allowed');
  }

  let encryptedKey;

  if (jwe.encrypted_key !== undefined) {
    encryptedKey = (0, _base64url.decode)(jwe.encrypted_key);
  }

  let resolvedKey = false;

  if (typeof key === 'function') {
    key = await key(parsedProt, jwe);
    resolvedKey = true;
  }

  let cek;

  try {
    cek = await (0, _decrypt_key_management.default)(alg, key, encryptedKey, joseHeader);
  } catch (err) {
    if (err instanceof TypeError) {
      throw err;
    }

    cek = (0, _cek.default)(enc);
  }

  const iv = (0, _base64url.decode)(jwe.iv);
  const tag = (0, _base64url.decode)(jwe.tag);

  const protectedHeader = _buffer_utils.encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : '');

  let additionalData;

  if (jwe.aad !== undefined) {
    additionalData = (0, _buffer_utils.concat)(protectedHeader, _buffer_utils.encoder.encode('.'), _buffer_utils.encoder.encode(jwe.aad));
  } else {
    additionalData = protectedHeader;
  }

  let plaintext = await (0, _decrypt.default)(enc, cek, (0, _base64url.decode)(jwe.ciphertext), iv, tag, additionalData);

  if (joseHeader.zip === 'DEF') {
    plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || _zlib.inflate)(plaintext);
  }

  const result = {
    plaintext
  };

  if (jwe.protected !== undefined) {
    result.protectedHeader = parsedProt;
  }

  if (jwe.aad !== undefined) {
    result.additionalAuthenticatedData = (0, _base64url.decode)(jwe.aad);
  }

  if (jwe.unprotected !== undefined) {
    result.sharedUnprotectedHeader = jwe.unprotected;
  }

  if (jwe.header !== undefined) {
    result.unprotectedHeader = jwe.header;
  }

  if (resolvedKey) {
    return { ...result,
      key
    };
  }

  return result;
}
},{"../../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../../runtime/decrypt.js":"node_modules/jose/dist/browser/runtime/decrypt.js","../../runtime/zlib.js":"node_modules/jose/dist/browser/runtime/zlib.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/is_disjoint.js":"node_modules/jose/dist/browser/lib/is_disjoint.js","../../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js","../../lib/decrypt_key_management.js":"node_modules/jose/dist/browser/lib/decrypt_key_management.js","../../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../../lib/cek.js":"node_modules/jose/dist/browser/lib/cek.js","../../lib/validate_crit.js":"node_modules/jose/dist/browser/lib/validate_crit.js","../../lib/validate_algorithms.js":"node_modules/jose/dist/browser/lib/validate_algorithms.js"}],"node_modules/jose/dist/browser/jwe/compact/decrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactDecrypt = compactDecrypt;

var _decrypt = require("../flattened/decrypt.js");

var _errors = require("../../util/errors.js");

var _buffer_utils = require("../../lib/buffer_utils.js");

async function compactDecrypt(jwe, key, options) {
  if (jwe instanceof Uint8Array) {
    jwe = _buffer_utils.decoder.decode(jwe);
  }

  if (typeof jwe !== 'string') {
    throw new _errors.JWEInvalid('Compact JWE must be a string or Uint8Array');
  }

  const {
    0: protectedHeader,
    1: encryptedKey,
    2: iv,
    3: ciphertext,
    4: tag,
    length
  } = jwe.split('.');

  if (length !== 5) {
    throw new _errors.JWEInvalid('Invalid Compact JWE');
  }

  const decrypted = await (0, _decrypt.flattenedDecrypt)({
    ciphertext,
    iv: iv || undefined,
    protected: protectedHeader || undefined,
    tag: tag || undefined,
    encrypted_key: encryptedKey || undefined
  }, key, options);
  const result = {
    plaintext: decrypted.plaintext,
    protectedHeader: decrypted.protectedHeader
  };

  if (typeof key === 'function') {
    return { ...result,
      key: decrypted.key
    };
  }

  return result;
}
},{"../flattened/decrypt.js":"node_modules/jose/dist/browser/jwe/flattened/decrypt.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js"}],"node_modules/jose/dist/browser/jwe/general/decrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generalDecrypt = generalDecrypt;

var _decrypt = require("../flattened/decrypt.js");

var _errors = require("../../util/errors.js");

var _is_object = _interopRequireDefault(require("../../lib/is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function generalDecrypt(jwe, key, options) {
  if (!(0, _is_object.default)(jwe)) {
    throw new _errors.JWEInvalid('General JWE must be an object');
  }

  if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(_is_object.default)) {
    throw new _errors.JWEInvalid('JWE Recipients missing or incorrect type');
  }

  if (!jwe.recipients.length) {
    throw new _errors.JWEInvalid('JWE Recipients has no members');
  }

  for (const recipient of jwe.recipients) {
    try {
      return await (0, _decrypt.flattenedDecrypt)({
        aad: jwe.aad,
        ciphertext: jwe.ciphertext,
        encrypted_key: recipient.encrypted_key,
        header: recipient.header,
        iv: jwe.iv,
        protected: jwe.protected,
        tag: jwe.tag,
        unprotected: jwe.unprotected
      }, key, options);
    } catch (_a) {}
  }

  throw new _errors.JWEDecryptionFailed();
}
},{"../flattened/decrypt.js":"node_modules/jose/dist/browser/jwe/flattened/decrypt.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/runtime/key_to_jwk.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _base64url = require("./base64url.js");

var _is_key_like = require("./is_key_like.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const keyToJWK = async key => {
  if (key instanceof Uint8Array) {
    return {
      kty: 'oct',
      k: (0, _base64url.encode)(key)
    };
  }

  if (!(0, _webcrypto.isCryptoKey)(key)) {
    throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types, 'Uint8Array'));
  }

  if (!key.extractable) {
    throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');
  }

  const {
    ext,
    key_ops,
    alg,
    use,
    ...jwk
  } = await _webcrypto.default.subtle.exportKey('jwk', key);
  return jwk;
};

var _default = keyToJWK;
exports.default = _default;
},{"./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/key/export.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportJWK = exportJWK;
exports.exportPKCS8 = exportPKCS8;
exports.exportSPKI = exportSPKI;

var _asn = require("../runtime/asn1.js");

var _key_to_jwk = _interopRequireDefault(require("../runtime/key_to_jwk.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function exportSPKI(key) {
  return (0, _asn.toSPKI)(key);
}

async function exportPKCS8(key) {
  return (0, _asn.toPKCS8)(key);
}

async function exportJWK(key) {
  return (0, _key_to_jwk.default)(key);
}
},{"../runtime/asn1.js":"node_modules/jose/dist/browser/runtime/asn1.js","../runtime/key_to_jwk.js":"node_modules/jose/dist/browser/runtime/key_to_jwk.js"}],"node_modules/jose/dist/browser/lib/encrypt_key_management.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _aeskw = require("../runtime/aeskw.js");

var ECDH = _interopRequireWildcard(require("../runtime/ecdhes.js"));

var _pbes2kw = require("../runtime/pbes2kw.js");

var _rsaes = require("../runtime/rsaes.js");

var _base64url = require("../runtime/base64url.js");

var _cek = _interopRequireWildcard(require("../lib/cek.js"));

var _errors = require("../util/errors.js");

var _export = require("../key/export.js");

var _check_key_type = _interopRequireDefault(require("./check_key_type.js"));

var _aesgcmkw = require("./aesgcmkw.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
  let encryptedKey;
  let parameters;
  let cek;
  (0, _check_key_type.default)(alg, key, 'encrypt');

  switch (alg) {
    case 'dir':
      {
        cek = key;
        break;
      }

    case 'ECDH-ES':
    case 'ECDH-ES+A128KW':
    case 'ECDH-ES+A192KW':
    case 'ECDH-ES+A256KW':
      {
        if (!ECDH.ecdhAllowed(key)) {
          throw new _errors.JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');
        }

        const {
          apu,
          apv
        } = providedParameters;
        let {
          epk: ephemeralKey
        } = providedParameters;
        ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);
        const {
          x,
          y,
          crv,
          kty
        } = await (0, _export.exportJWK)(ephemeralKey);
        const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? (0, _cek.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
        parameters = {
          epk: {
            x,
            crv,
            kty
          }
        };
        if (kty === 'EC') parameters.epk.y = y;
        if (apu) parameters.apu = (0, _base64url.encode)(apu);
        if (apv) parameters.apv = (0, _base64url.encode)(apv);

        if (alg === 'ECDH-ES') {
          cek = sharedSecret;
          break;
        }

        cek = providedCek || (0, _cek.default)(enc);
        const kwAlg = alg.slice(-6);
        encryptedKey = await (0, _aeskw.wrap)(kwAlg, sharedSecret, cek);
        break;
      }

    case 'RSA1_5':
    case 'RSA-OAEP':
    case 'RSA-OAEP-256':
    case 'RSA-OAEP-384':
    case 'RSA-OAEP-512':
      {
        cek = providedCek || (0, _cek.default)(enc);
        encryptedKey = await (0, _rsaes.encrypt)(alg, key, cek);
        break;
      }

    case 'PBES2-HS256+A128KW':
    case 'PBES2-HS384+A192KW':
    case 'PBES2-HS512+A256KW':
      {
        cek = providedCek || (0, _cek.default)(enc);
        const {
          p2c,
          p2s
        } = providedParameters;
        ({
          encryptedKey,
          ...parameters
        } = await (0, _pbes2kw.encrypt)(alg, key, cek, p2c, p2s));
        break;
      }

    case 'A128KW':
    case 'A192KW':
    case 'A256KW':
      {
        cek = providedCek || (0, _cek.default)(enc);
        encryptedKey = await (0, _aeskw.wrap)(alg, key, cek);
        break;
      }

    case 'A128GCMKW':
    case 'A192GCMKW':
    case 'A256GCMKW':
      {
        cek = providedCek || (0, _cek.default)(enc);
        const {
          iv
        } = providedParameters;
        ({
          encryptedKey,
          ...parameters
        } = await (0, _aesgcmkw.wrap)(alg, key, cek, iv));
        break;
      }

    default:
      {
        throw new _errors.JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
      }
  }

  return {
    cek,
    encryptedKey,
    parameters
  };
}

var _default = encryptKeyManagement;
exports.default = _default;
},{"../runtime/aeskw.js":"node_modules/jose/dist/browser/runtime/aeskw.js","../runtime/ecdhes.js":"node_modules/jose/dist/browser/runtime/ecdhes.js","../runtime/pbes2kw.js":"node_modules/jose/dist/browser/runtime/pbes2kw.js","../runtime/rsaes.js":"node_modules/jose/dist/browser/runtime/rsaes.js","../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../lib/cek.js":"node_modules/jose/dist/browser/lib/cek.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../key/export.js":"node_modules/jose/dist/browser/key/export.js","./check_key_type.js":"node_modules/jose/dist/browser/lib/check_key_type.js","./aesgcmkw.js":"node_modules/jose/dist/browser/lib/aesgcmkw.js"}],"node_modules/jose/dist/browser/jwe/flattened/encrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unprotected = exports.FlattenedEncrypt = void 0;

var _base64url = require("../../runtime/base64url.js");

var _encrypt = _interopRequireDefault(require("../../runtime/encrypt.js"));

var _zlib = require("../../runtime/zlib.js");

var _iv = _interopRequireDefault(require("../../lib/iv.js"));

var _encrypt_key_management = _interopRequireDefault(require("../../lib/encrypt_key_management.js"));

var _errors = require("../../util/errors.js");

var _is_disjoint = _interopRequireDefault(require("../../lib/is_disjoint.js"));

var _buffer_utils = require("../../lib/buffer_utils.js");

var _validate_crit = _interopRequireDefault(require("../../lib/validate_crit.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const unprotected = Symbol();
exports.unprotected = unprotected;

class FlattenedEncrypt {
  constructor(plaintext) {
    if (!(plaintext instanceof Uint8Array)) {
      throw new TypeError('plaintext must be an instance of Uint8Array');
    }

    this._plaintext = plaintext;
  }

  setKeyManagementParameters(parameters) {
    if (this._keyManagementParameters) {
      throw new TypeError('setKeyManagementParameters can only be called once');
    }

    this._keyManagementParameters = parameters;
    return this;
  }

  setProtectedHeader(protectedHeader) {
    if (this._protectedHeader) {
      throw new TypeError('setProtectedHeader can only be called once');
    }

    this._protectedHeader = protectedHeader;
    return this;
  }

  setSharedUnprotectedHeader(sharedUnprotectedHeader) {
    if (this._sharedUnprotectedHeader) {
      throw new TypeError('setSharedUnprotectedHeader can only be called once');
    }

    this._sharedUnprotectedHeader = sharedUnprotectedHeader;
    return this;
  }

  setUnprotectedHeader(unprotectedHeader) {
    if (this._unprotectedHeader) {
      throw new TypeError('setUnprotectedHeader can only be called once');
    }

    this._unprotectedHeader = unprotectedHeader;
    return this;
  }

  setAdditionalAuthenticatedData(aad) {
    this._aad = aad;
    return this;
  }

  setContentEncryptionKey(cek) {
    if (this._cek) {
      throw new TypeError('setContentEncryptionKey can only be called once');
    }

    this._cek = cek;
    return this;
  }

  setInitializationVector(iv) {
    if (this._iv) {
      throw new TypeError('setInitializationVector can only be called once');
    }

    this._iv = iv;
    return this;
  }

  async encrypt(key, options) {
    if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
      throw new _errors.JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');
    }

    if (!(0, _is_disjoint.default)(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
      throw new _errors.JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
    }

    const joseHeader = { ...this._protectedHeader,
      ...this._unprotectedHeader,
      ...this._sharedUnprotectedHeader
    };
    (0, _validate_crit.default)(_errors.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);

    if (joseHeader.zip !== undefined) {
      if (!this._protectedHeader || !this._protectedHeader.zip) {
        throw new _errors.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
      }

      if (joseHeader.zip !== 'DEF') {
        throw new _errors.JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
      }
    }

    const {
      alg,
      enc
    } = joseHeader;

    if (typeof alg !== 'string' || !alg) {
      throw new _errors.JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
    }

    if (typeof enc !== 'string' || !enc) {
      throw new _errors.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
    }

    let encryptedKey;

    if (alg === 'dir') {
      if (this._cek) {
        throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');
      }
    } else if (alg === 'ECDH-ES') {
      if (this._cek) {
        throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');
      }
    }

    let cek;
    {
      let parameters;
      ({
        cek,
        encryptedKey,
        parameters
      } = await (0, _encrypt_key_management.default)(alg, enc, key, this._cek, this._keyManagementParameters));

      if (parameters) {
        if (options && unprotected in options) {
          if (!this._unprotectedHeader) {
            this.setUnprotectedHeader(parameters);
          } else {
            this._unprotectedHeader = { ...this._unprotectedHeader,
              ...parameters
            };
          }
        } else {
          if (!this._protectedHeader) {
            this.setProtectedHeader(parameters);
          } else {
            this._protectedHeader = { ...this._protectedHeader,
              ...parameters
            };
          }
        }
      }
    }
    this._iv || (this._iv = (0, _iv.default)(enc));
    let additionalData;
    let protectedHeader;
    let aadMember;

    if (this._protectedHeader) {
      protectedHeader = _buffer_utils.encoder.encode((0, _base64url.encode)(JSON.stringify(this._protectedHeader)));
    } else {
      protectedHeader = _buffer_utils.encoder.encode('');
    }

    if (this._aad) {
      aadMember = (0, _base64url.encode)(this._aad);
      additionalData = (0, _buffer_utils.concat)(protectedHeader, _buffer_utils.encoder.encode('.'), _buffer_utils.encoder.encode(aadMember));
    } else {
      additionalData = protectedHeader;
    }

    let ciphertext;
    let tag;

    if (joseHeader.zip === 'DEF') {
      const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || _zlib.deflate)(this._plaintext);
      ({
        ciphertext,
        tag
      } = await (0, _encrypt.default)(enc, deflated, cek, this._iv, additionalData));
    } else {
      ;
      ({
        ciphertext,
        tag
      } = await (0, _encrypt.default)(enc, this._plaintext, cek, this._iv, additionalData));
    }

    const jwe = {
      ciphertext: (0, _base64url.encode)(ciphertext),
      iv: (0, _base64url.encode)(this._iv),
      tag: (0, _base64url.encode)(tag)
    };

    if (encryptedKey) {
      jwe.encrypted_key = (0, _base64url.encode)(encryptedKey);
    }

    if (aadMember) {
      jwe.aad = aadMember;
    }

    if (this._protectedHeader) {
      jwe.protected = _buffer_utils.decoder.decode(protectedHeader);
    }

    if (this._sharedUnprotectedHeader) {
      jwe.unprotected = this._sharedUnprotectedHeader;
    }

    if (this._unprotectedHeader) {
      jwe.header = this._unprotectedHeader;
    }

    return jwe;
  }

}

exports.FlattenedEncrypt = FlattenedEncrypt;
},{"../../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../../runtime/encrypt.js":"node_modules/jose/dist/browser/runtime/encrypt.js","../../runtime/zlib.js":"node_modules/jose/dist/browser/runtime/zlib.js","../../lib/iv.js":"node_modules/jose/dist/browser/lib/iv.js","../../lib/encrypt_key_management.js":"node_modules/jose/dist/browser/lib/encrypt_key_management.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/is_disjoint.js":"node_modules/jose/dist/browser/lib/is_disjoint.js","../../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../../lib/validate_crit.js":"node_modules/jose/dist/browser/lib/validate_crit.js"}],"node_modules/jose/dist/browser/jwe/general/encrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeneralEncrypt = void 0;

var _encrypt = require("../flattened/encrypt.js");

var _errors = require("../../util/errors.js");

var _cek = _interopRequireDefault(require("../../lib/cek.js"));

var _is_disjoint = _interopRequireDefault(require("../../lib/is_disjoint.js"));

var _encrypt_key_management = _interopRequireDefault(require("../../lib/encrypt_key_management.js"));

var _base64url = require("../../runtime/base64url.js");

var _validate_crit = _interopRequireDefault(require("../../lib/validate_crit.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class IndividualRecipient {
  constructor(enc, key, options) {
    this.parent = enc;
    this.key = key;
    this.options = options;
  }

  setUnprotectedHeader(unprotectedHeader) {
    if (this.unprotectedHeader) {
      throw new TypeError('setUnprotectedHeader can only be called once');
    }

    this.unprotectedHeader = unprotectedHeader;
    return this;
  }

  addRecipient(...args) {
    return this.parent.addRecipient(...args);
  }

  encrypt(...args) {
    return this.parent.encrypt(...args);
  }

  done() {
    return this.parent;
  }

}

class GeneralEncrypt {
  constructor(plaintext) {
    this._recipients = [];
    this._plaintext = plaintext;
  }

  addRecipient(key, options) {
    const recipient = new IndividualRecipient(this, key, {
      crit: options === null || options === void 0 ? void 0 : options.crit
    });

    this._recipients.push(recipient);

    return recipient;
  }

  setProtectedHeader(protectedHeader) {
    if (this._protectedHeader) {
      throw new TypeError('setProtectedHeader can only be called once');
    }

    this._protectedHeader = protectedHeader;
    return this;
  }

  setSharedUnprotectedHeader(sharedUnprotectedHeader) {
    if (this._unprotectedHeader) {
      throw new TypeError('setSharedUnprotectedHeader can only be called once');
    }

    this._unprotectedHeader = sharedUnprotectedHeader;
    return this;
  }

  setAdditionalAuthenticatedData(aad) {
    this._aad = aad;
    return this;
  }

  async encrypt(options) {
    var _a, _b, _c;

    if (!this._recipients.length) {
      throw new _errors.JWEInvalid('at least one recipient must be added');
    }

    options = {
      deflateRaw: options === null || options === void 0 ? void 0 : options.deflateRaw
    };

    if (this._recipients.length === 1) {
      const [recipient] = this._recipients;
      const flattened = await new _encrypt.FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, { ...recipient.options,
        ...options
      });
      let jwe = {
        ciphertext: flattened.ciphertext,
        iv: flattened.iv,
        recipients: [{}],
        tag: flattened.tag
      };
      if (flattened.aad) jwe.aad = flattened.aad;
      if (flattened.protected) jwe.protected = flattened.protected;
      if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
      if (flattened.encrypted_key) jwe.recipients[0].encrypted_key = flattened.encrypted_key;
      if (flattened.header) jwe.recipients[0].header = flattened.header;
      return jwe;
    }

    let enc;

    for (let i = 0; i < this._recipients.length; i++) {
      const recipient = this._recipients[i];

      if (!(0, _is_disjoint.default)(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {
        throw new _errors.JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
      }

      const joseHeader = { ...this._protectedHeader,
        ...this._unprotectedHeader,
        ...recipient.unprotectedHeader
      };
      const {
        alg
      } = joseHeader;

      if (typeof alg !== 'string' || !alg) {
        throw new _errors.JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
      }

      if (alg === 'dir' || alg === 'ECDH-ES') {
        throw new _errors.JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
      }

      if (typeof joseHeader.enc !== 'string' || !joseHeader.enc) {
        throw new _errors.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
      }

      if (!enc) {
        enc = joseHeader.enc;
      } else if (enc !== joseHeader.enc) {
        throw new _errors.JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
      }

      (0, _validate_crit.default)(_errors.JWEInvalid, new Map(), recipient.options.crit, this._protectedHeader, joseHeader);

      if (joseHeader.zip !== undefined) {
        if (!this._protectedHeader || !this._protectedHeader.zip) {
          throw new _errors.JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
        }
      }
    }

    const cek = (0, _cek.default)(enc);
    let jwe = {
      ciphertext: '',
      iv: '',
      recipients: [],
      tag: ''
    };

    for (let i = 0; i < this._recipients.length; i++) {
      const recipient = this._recipients[i];
      const target = {};
      jwe.recipients.push(target);
      const joseHeader = { ...this._protectedHeader,
        ...this._unprotectedHeader,
        ...recipient.unprotectedHeader
      };
      const p2c = joseHeader.alg.startsWith('PBES2') ? 2048 + i : undefined;

      if (i === 0) {
        const flattened = await new _encrypt.FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({
          p2c
        }).encrypt(recipient.key, { ...recipient.options,
          ...options,
          [_encrypt.unprotected]: true
        });
        jwe.ciphertext = flattened.ciphertext;
        jwe.iv = flattened.iv;
        jwe.tag = flattened.tag;
        if (flattened.aad) jwe.aad = flattened.aad;
        if (flattened.protected) jwe.protected = flattened.protected;
        if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
        target.encrypted_key = flattened.encrypted_key;
        if (flattened.header) target.header = flattened.header;
        continue;
      }

      const {
        encryptedKey,
        parameters
      } = await (0, _encrypt_key_management.default)(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) || ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) || ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, {
        p2c
      });
      target.encrypted_key = (0, _base64url.encode)(encryptedKey);
      if (recipient.unprotectedHeader || parameters) target.header = { ...recipient.unprotectedHeader,
        ...parameters
      };
    }

    return jwe;
  }

}

exports.GeneralEncrypt = GeneralEncrypt;
},{"../flattened/encrypt.js":"node_modules/jose/dist/browser/jwe/flattened/encrypt.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/cek.js":"node_modules/jose/dist/browser/lib/cek.js","../../lib/is_disjoint.js":"node_modules/jose/dist/browser/lib/is_disjoint.js","../../lib/encrypt_key_management.js":"node_modules/jose/dist/browser/lib/encrypt_key_management.js","../../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../../lib/validate_crit.js":"node_modules/jose/dist/browser/lib/validate_crit.js"}],"node_modules/jose/dist/browser/runtime/subtle_dsa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = subtleDsa;

var _env = require("./env.js");

var _errors = require("../util/errors.js");

function subtleDsa(alg, algorithm) {
  const hash = `SHA-${alg.slice(-3)}`;

  switch (alg) {
    case 'HS256':
    case 'HS384':
    case 'HS512':
      return {
        hash,
        name: 'HMAC'
      };

    case 'PS256':
    case 'PS384':
    case 'PS512':
      return {
        hash,
        name: 'RSA-PSS',
        saltLength: alg.slice(-3) >> 3
      };

    case 'RS256':
    case 'RS384':
    case 'RS512':
      return {
        hash,
        name: 'RSASSA-PKCS1-v1_5'
      };

    case 'ES256':
    case 'ES384':
    case 'ES512':
      return {
        hash,
        name: 'ECDSA',
        namedCurve: algorithm.namedCurve
      };

    case ((0, _env.isCloudflareWorkers)() || (0, _env.isNodeJs)()) && 'EdDSA':
      const {
        namedCurve
      } = algorithm;
      return {
        name: namedCurve,
        namedCurve
      };

    default:
      throw new _errors.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
},{"./env.js":"node_modules/jose/dist/browser/runtime/env.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/runtime/get_sign_verify_key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCryptoKey;

var _webcrypto = _interopRequireWildcard(require("./webcrypto.js"));

var _crypto_key = require("../lib/crypto_key.js");

var _invalid_key_input = _interopRequireDefault(require("../lib/invalid_key_input.js"));

var _is_key_like = require("./is_key_like.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getCryptoKey(alg, key, usage) {
  if ((0, _webcrypto.isCryptoKey)(key)) {
    (0, _crypto_key.checkSigCryptoKey)(key, alg, usage);
    return key;
  }

  if (key instanceof Uint8Array) {
    if (!alg.startsWith('HS')) {
      throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types));
    }

    return _webcrypto.default.subtle.importKey('raw', key, {
      hash: `SHA-${alg.slice(-3)}`,
      name: 'HMAC'
    }, false, [usage]);
  }

  throw new TypeError((0, _invalid_key_input.default)(key, ..._is_key_like.types, 'Uint8Array'));
}
},{"./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../lib/crypto_key.js":"node_modules/jose/dist/browser/lib/crypto_key.js","../lib/invalid_key_input.js":"node_modules/jose/dist/browser/lib/invalid_key_input.js","./is_key_like.js":"node_modules/jose/dist/browser/runtime/is_key_like.js"}],"node_modules/jose/dist/browser/runtime/verify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _subtle_dsa = _interopRequireDefault(require("./subtle_dsa.js"));

var _webcrypto = _interopRequireDefault(require("./webcrypto.js"));

var _check_key_length = _interopRequireDefault(require("./check_key_length.js"));

var _get_sign_verify_key = _interopRequireDefault(require("./get_sign_verify_key.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const verify = async (alg, key, signature, data) => {
  const cryptoKey = await (0, _get_sign_verify_key.default)(alg, key, 'verify');
  (0, _check_key_length.default)(alg, cryptoKey);
  const algorithm = (0, _subtle_dsa.default)(alg, cryptoKey.algorithm);

  try {
    return await _webcrypto.default.subtle.verify(algorithm, cryptoKey, signature, data);
  } catch (_a) {
    return false;
  }
};

var _default = verify;
exports.default = _default;
},{"./subtle_dsa.js":"node_modules/jose/dist/browser/runtime/subtle_dsa.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","./check_key_length.js":"node_modules/jose/dist/browser/runtime/check_key_length.js","./get_sign_verify_key.js":"node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"}],"node_modules/jose/dist/browser/jws/flattened/verify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenedVerify = flattenedVerify;

var _base64url = require("../../runtime/base64url.js");

var _verify = _interopRequireDefault(require("../../runtime/verify.js"));

var _errors = require("../../util/errors.js");

var _buffer_utils = require("../../lib/buffer_utils.js");

var _is_disjoint = _interopRequireDefault(require("../../lib/is_disjoint.js"));

var _is_object = _interopRequireDefault(require("../../lib/is_object.js"));

var _check_key_type = _interopRequireDefault(require("../../lib/check_key_type.js"));

var _validate_crit = _interopRequireDefault(require("../../lib/validate_crit.js"));

var _validate_algorithms = _interopRequireDefault(require("../../lib/validate_algorithms.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function flattenedVerify(jws, key, options) {
  var _a;

  if (!(0, _is_object.default)(jws)) {
    throw new _errors.JWSInvalid('Flattened JWS must be an object');
  }

  if (jws.protected === undefined && jws.header === undefined) {
    throw new _errors.JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  }

  if (jws.protected !== undefined && typeof jws.protected !== 'string') {
    throw new _errors.JWSInvalid('JWS Protected Header incorrect type');
  }

  if (jws.payload === undefined) {
    throw new _errors.JWSInvalid('JWS Payload missing');
  }

  if (typeof jws.signature !== 'string') {
    throw new _errors.JWSInvalid('JWS Signature missing or incorrect type');
  }

  if (jws.header !== undefined && !(0, _is_object.default)(jws.header)) {
    throw new _errors.JWSInvalid('JWS Unprotected Header incorrect type');
  }

  let parsedProt = {};

  if (jws.protected) {
    const protectedHeader = (0, _base64url.decode)(jws.protected);

    try {
      parsedProt = JSON.parse(_buffer_utils.decoder.decode(protectedHeader));
    } catch (_b) {
      throw new _errors.JWSInvalid('JWS Protected Header is invalid');
    }
  }

  if (!(0, _is_disjoint.default)(parsedProt, jws.header)) {
    throw new _errors.JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
  }

  const joseHeader = { ...parsedProt,
    ...jws.header
  };
  const extensions = (0, _validate_crit.default)(_errors.JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
  let b64 = true;

  if (extensions.has('b64')) {
    b64 = parsedProt.b64;

    if (typeof b64 !== 'boolean') {
      throw new _errors.JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
  }

  const {
    alg
  } = joseHeader;

  if (typeof alg !== 'string' || !alg) {
    throw new _errors.JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  }

  const algorithms = options && (0, _validate_algorithms.default)('algorithms', options.algorithms);

  if (algorithms && !algorithms.has(alg)) {
    throw new _errors.JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  }

  if (b64) {
    if (typeof jws.payload !== 'string') {
      throw new _errors.JWSInvalid('JWS Payload must be a string');
    }
  } else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {
    throw new _errors.JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
  }

  let resolvedKey = false;

  if (typeof key === 'function') {
    key = await key(parsedProt, jws);
    resolvedKey = true;
  }

  (0, _check_key_type.default)(alg, key, 'verify');
  const data = (0, _buffer_utils.concat)(_buffer_utils.encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), _buffer_utils.encoder.encode('.'), typeof jws.payload === 'string' ? _buffer_utils.encoder.encode(jws.payload) : jws.payload);
  const signature = (0, _base64url.decode)(jws.signature);
  const verified = await (0, _verify.default)(alg, key, signature, data);

  if (!verified) {
    throw new _errors.JWSSignatureVerificationFailed();
  }

  let payload;

  if (b64) {
    payload = (0, _base64url.decode)(jws.payload);
  } else if (typeof jws.payload === 'string') {
    payload = _buffer_utils.encoder.encode(jws.payload);
  } else {
    payload = jws.payload;
  }

  const result = {
    payload
  };

  if (jws.protected !== undefined) {
    result.protectedHeader = parsedProt;
  }

  if (jws.header !== undefined) {
    result.unprotectedHeader = jws.header;
  }

  if (resolvedKey) {
    return { ...result,
      key
    };
  }

  return result;
}
},{"../../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../../runtime/verify.js":"node_modules/jose/dist/browser/runtime/verify.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../../lib/is_disjoint.js":"node_modules/jose/dist/browser/lib/is_disjoint.js","../../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js","../../lib/check_key_type.js":"node_modules/jose/dist/browser/lib/check_key_type.js","../../lib/validate_crit.js":"node_modules/jose/dist/browser/lib/validate_crit.js","../../lib/validate_algorithms.js":"node_modules/jose/dist/browser/lib/validate_algorithms.js"}],"node_modules/jose/dist/browser/jws/compact/verify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactVerify = compactVerify;

var _verify = require("../flattened/verify.js");

var _errors = require("../../util/errors.js");

var _buffer_utils = require("../../lib/buffer_utils.js");

async function compactVerify(jws, key, options) {
  if (jws instanceof Uint8Array) {
    jws = _buffer_utils.decoder.decode(jws);
  }

  if (typeof jws !== 'string') {
    throw new _errors.JWSInvalid('Compact JWS must be a string or Uint8Array');
  }

  const {
    0: protectedHeader,
    1: payload,
    2: signature,
    length
  } = jws.split('.');

  if (length !== 3) {
    throw new _errors.JWSInvalid('Invalid Compact JWS');
  }

  const verified = await (0, _verify.flattenedVerify)({
    payload,
    protected: protectedHeader,
    signature
  }, key, options);
  const result = {
    payload: verified.payload,
    protectedHeader: verified.protectedHeader
  };

  if (typeof key === 'function') {
    return { ...result,
      key: verified.key
    };
  }

  return result;
}
},{"../flattened/verify.js":"node_modules/jose/dist/browser/jws/flattened/verify.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js"}],"node_modules/jose/dist/browser/jws/general/verify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generalVerify = generalVerify;

var _verify = require("../flattened/verify.js");

var _errors = require("../../util/errors.js");

var _is_object = _interopRequireDefault(require("../../lib/is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function generalVerify(jws, key, options) {
  if (!(0, _is_object.default)(jws)) {
    throw new _errors.JWSInvalid('General JWS must be an object');
  }

  if (!Array.isArray(jws.signatures) || !jws.signatures.every(_is_object.default)) {
    throw new _errors.JWSInvalid('JWS Signatures missing or incorrect type');
  }

  for (const signature of jws.signatures) {
    try {
      return await (0, _verify.flattenedVerify)({
        header: signature.header,
        payload: jws.payload,
        protected: signature.protected,
        signature: signature.signature
      }, key, options);
    } catch (_a) {}
  }

  throw new _errors.JWSSignatureVerificationFailed();
}
},{"../flattened/verify.js":"node_modules/jose/dist/browser/jws/flattened/verify.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/lib/epoch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = date => Math.floor(date.getTime() / 1000);

exports.default = _default;
},{}],"node_modules/jose/dist/browser/lib/secs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;

var _default = str => {
  const matched = REGEX.exec(str);

  if (!matched) {
    throw new TypeError('Invalid time period format');
  }

  const value = parseFloat(matched[1]);
  const unit = matched[2].toLowerCase();

  switch (unit) {
    case 'sec':
    case 'secs':
    case 'second':
    case 'seconds':
    case 's':
      return Math.round(value);

    case 'minute':
    case 'minutes':
    case 'min':
    case 'mins':
    case 'm':
      return Math.round(value * minute);

    case 'hour':
    case 'hours':
    case 'hr':
    case 'hrs':
    case 'h':
      return Math.round(value * hour);

    case 'day':
    case 'days':
    case 'd':
      return Math.round(value * day);

    case 'week':
    case 'weeks':
    case 'w':
      return Math.round(value * week);

    default:
      return Math.round(value * year);
  }
};

exports.default = _default;
},{}],"node_modules/jose/dist/browser/lib/jwt_claims_set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errors = require("../util/errors.js");

var _buffer_utils = require("./buffer_utils.js");

var _epoch = _interopRequireDefault(require("./epoch.js"));

var _secs = _interopRequireDefault(require("./secs.js"));

var _is_object = _interopRequireDefault(require("./is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const normalizeTyp = value => value.toLowerCase().replace(/^application\//, '');

const checkAudiencePresence = (audPayload, audOption) => {
  if (typeof audPayload === 'string') {
    return audOption.includes(audPayload);
  }

  if (Array.isArray(audPayload)) {
    return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
  }

  return false;
};

var _default = (protectedHeader, encodedPayload, options = {}) => {
  const {
    typ
  } = options;

  if (typ && (typeof protectedHeader.typ !== 'string' || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
    throw new _errors.JWTClaimValidationFailed('unexpected "typ" JWT header value', 'typ', 'check_failed');
  }

  let payload;

  try {
    payload = JSON.parse(_buffer_utils.decoder.decode(encodedPayload));
  } catch (_a) {}

  if (!(0, _is_object.default)(payload)) {
    throw new _errors.JWTInvalid('JWT Claims Set must be a top-level JSON object');
  }

  const {
    issuer
  } = options;

  if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
    throw new _errors.JWTClaimValidationFailed('unexpected "iss" claim value', 'iss', 'check_failed');
  }

  const {
    subject
  } = options;

  if (subject && payload.sub !== subject) {
    throw new _errors.JWTClaimValidationFailed('unexpected "sub" claim value', 'sub', 'check_failed');
  }

  const {
    audience
  } = options;

  if (audience && !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {
    throw new _errors.JWTClaimValidationFailed('unexpected "aud" claim value', 'aud', 'check_failed');
  }

  let tolerance;

  switch (typeof options.clockTolerance) {
    case 'string':
      tolerance = (0, _secs.default)(options.clockTolerance);
      break;

    case 'number':
      tolerance = options.clockTolerance;
      break;

    case 'undefined':
      tolerance = 0;
      break;

    default:
      throw new TypeError('Invalid clockTolerance option type');
  }

  const {
    currentDate
  } = options;
  const now = (0, _epoch.default)(currentDate || new Date());

  if ((payload.iat !== undefined || options.maxTokenAge) && typeof payload.iat !== 'number') {
    throw new _errors.JWTClaimValidationFailed('"iat" claim must be a number', 'iat', 'invalid');
  }

  if (payload.nbf !== undefined) {
    if (typeof payload.nbf !== 'number') {
      throw new _errors.JWTClaimValidationFailed('"nbf" claim must be a number', 'nbf', 'invalid');
    }

    if (payload.nbf > now + tolerance) {
      throw new _errors.JWTClaimValidationFailed('"nbf" claim timestamp check failed', 'nbf', 'check_failed');
    }
  }

  if (payload.exp !== undefined) {
    if (typeof payload.exp !== 'number') {
      throw new _errors.JWTClaimValidationFailed('"exp" claim must be a number', 'exp', 'invalid');
    }

    if (payload.exp <= now - tolerance) {
      throw new _errors.JWTExpired('"exp" claim timestamp check failed', 'exp', 'check_failed');
    }
  }

  if (options.maxTokenAge) {
    const age = now - payload.iat;
    const max = typeof options.maxTokenAge === 'number' ? options.maxTokenAge : (0, _secs.default)(options.maxTokenAge);

    if (age - tolerance > max) {
      throw new _errors.JWTExpired('"iat" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');
    }

    if (age < 0 - tolerance) {
      throw new _errors.JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
    }
  }

  return payload;
};

exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","./epoch.js":"node_modules/jose/dist/browser/lib/epoch.js","./secs.js":"node_modules/jose/dist/browser/lib/secs.js","./is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/jwt/verify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jwtVerify = jwtVerify;

var _verify = require("../jws/compact/verify.js");

var _jwt_claims_set = _interopRequireDefault(require("../lib/jwt_claims_set.js"));

var _errors = require("../util/errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function jwtVerify(jwt, key, options) {
  var _a;

  const verified = await (0, _verify.compactVerify)(jwt, key, options);

  if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {
    throw new _errors.JWTInvalid('JWTs MUST NOT use unencoded payload');
  }

  const payload = (0, _jwt_claims_set.default)(verified.protectedHeader, verified.payload, options);
  const result = {
    payload,
    protectedHeader: verified.protectedHeader
  };

  if (typeof key === 'function') {
    return { ...result,
      key: verified.key
    };
  }

  return result;
}
},{"../jws/compact/verify.js":"node_modules/jose/dist/browser/jws/compact/verify.js","../lib/jwt_claims_set.js":"node_modules/jose/dist/browser/lib/jwt_claims_set.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/jwt/decrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jwtDecrypt = jwtDecrypt;

var _decrypt = require("../jwe/compact/decrypt.js");

var _jwt_claims_set = _interopRequireDefault(require("../lib/jwt_claims_set.js"));

var _errors = require("../util/errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function jwtDecrypt(jwt, key, options) {
  const decrypted = await (0, _decrypt.compactDecrypt)(jwt, key, options);
  const payload = (0, _jwt_claims_set.default)(decrypted.protectedHeader, decrypted.plaintext, options);
  const {
    protectedHeader
  } = decrypted;

  if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {
    throw new _errors.JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', 'iss', 'mismatch');
  }

  if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {
    throw new _errors.JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', 'sub', 'mismatch');
  }

  if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {
    throw new _errors.JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', 'aud', 'mismatch');
  }

  const result = {
    payload,
    protectedHeader
  };

  if (typeof key === 'function') {
    return { ...result,
      key: decrypted.key
    };
  }

  return result;
}
},{"../jwe/compact/decrypt.js":"node_modules/jose/dist/browser/jwe/compact/decrypt.js","../lib/jwt_claims_set.js":"node_modules/jose/dist/browser/lib/jwt_claims_set.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/jwe/compact/encrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompactEncrypt = void 0;

var _encrypt = require("../flattened/encrypt.js");

class CompactEncrypt {
  constructor(plaintext) {
    this._flattened = new _encrypt.FlattenedEncrypt(plaintext);
  }

  setContentEncryptionKey(cek) {
    this._flattened.setContentEncryptionKey(cek);

    return this;
  }

  setInitializationVector(iv) {
    this._flattened.setInitializationVector(iv);

    return this;
  }

  setProtectedHeader(protectedHeader) {
    this._flattened.setProtectedHeader(protectedHeader);

    return this;
  }

  setKeyManagementParameters(parameters) {
    this._flattened.setKeyManagementParameters(parameters);

    return this;
  }

  async encrypt(key, options) {
    const jwe = await this._flattened.encrypt(key, options);
    return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');
  }

}

exports.CompactEncrypt = CompactEncrypt;
},{"../flattened/encrypt.js":"node_modules/jose/dist/browser/jwe/flattened/encrypt.js"}],"node_modules/jose/dist/browser/runtime/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _subtle_dsa = _interopRequireDefault(require("./subtle_dsa.js"));

var _webcrypto = _interopRequireDefault(require("./webcrypto.js"));

var _check_key_length = _interopRequireDefault(require("./check_key_length.js"));

var _get_sign_verify_key = _interopRequireDefault(require("./get_sign_verify_key.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const sign = async (alg, key, data) => {
  const cryptoKey = await (0, _get_sign_verify_key.default)(alg, key, 'sign');
  (0, _check_key_length.default)(alg, cryptoKey);
  const signature = await _webcrypto.default.subtle.sign((0, _subtle_dsa.default)(alg, cryptoKey.algorithm), cryptoKey, data);
  return new Uint8Array(signature);
};

var _default = sign;
exports.default = _default;
},{"./subtle_dsa.js":"node_modules/jose/dist/browser/runtime/subtle_dsa.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","./check_key_length.js":"node_modules/jose/dist/browser/runtime/check_key_length.js","./get_sign_verify_key.js":"node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"}],"node_modules/jose/dist/browser/jws/flattened/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlattenedSign = void 0;

var _base64url = require("../../runtime/base64url.js");

var _sign = _interopRequireDefault(require("../../runtime/sign.js"));

var _is_disjoint = _interopRequireDefault(require("../../lib/is_disjoint.js"));

var _errors = require("../../util/errors.js");

var _buffer_utils = require("../../lib/buffer_utils.js");

var _check_key_type = _interopRequireDefault(require("../../lib/check_key_type.js"));

var _validate_crit = _interopRequireDefault(require("../../lib/validate_crit.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FlattenedSign {
  constructor(payload) {
    if (!(payload instanceof Uint8Array)) {
      throw new TypeError('payload must be an instance of Uint8Array');
    }

    this._payload = payload;
  }

  setProtectedHeader(protectedHeader) {
    if (this._protectedHeader) {
      throw new TypeError('setProtectedHeader can only be called once');
    }

    this._protectedHeader = protectedHeader;
    return this;
  }

  setUnprotectedHeader(unprotectedHeader) {
    if (this._unprotectedHeader) {
      throw new TypeError('setUnprotectedHeader can only be called once');
    }

    this._unprotectedHeader = unprotectedHeader;
    return this;
  }

  async sign(key, options) {
    if (!this._protectedHeader && !this._unprotectedHeader) {
      throw new _errors.JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');
    }

    if (!(0, _is_disjoint.default)(this._protectedHeader, this._unprotectedHeader)) {
      throw new _errors.JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
    }

    const joseHeader = { ...this._protectedHeader,
      ...this._unprotectedHeader
    };
    const extensions = (0, _validate_crit.default)(_errors.JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
    let b64 = true;

    if (extensions.has('b64')) {
      b64 = this._protectedHeader.b64;

      if (typeof b64 !== 'boolean') {
        throw new _errors.JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
      }
    }

    const {
      alg
    } = joseHeader;

    if (typeof alg !== 'string' || !alg) {
      throw new _errors.JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    }

    (0, _check_key_type.default)(alg, key, 'sign');
    let payload = this._payload;

    if (b64) {
      payload = _buffer_utils.encoder.encode((0, _base64url.encode)(payload));
    }

    let protectedHeader;

    if (this._protectedHeader) {
      protectedHeader = _buffer_utils.encoder.encode((0, _base64url.encode)(JSON.stringify(this._protectedHeader)));
    } else {
      protectedHeader = _buffer_utils.encoder.encode('');
    }

    const data = (0, _buffer_utils.concat)(protectedHeader, _buffer_utils.encoder.encode('.'), payload);
    const signature = await (0, _sign.default)(alg, key, data);
    const jws = {
      signature: (0, _base64url.encode)(signature),
      payload: ''
    };

    if (b64) {
      jws.payload = _buffer_utils.decoder.decode(payload);
    }

    if (this._unprotectedHeader) {
      jws.header = this._unprotectedHeader;
    }

    if (this._protectedHeader) {
      jws.protected = _buffer_utils.decoder.decode(protectedHeader);
    }

    return jws;
  }

}

exports.FlattenedSign = FlattenedSign;
},{"../../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../../runtime/sign.js":"node_modules/jose/dist/browser/runtime/sign.js","../../lib/is_disjoint.js":"node_modules/jose/dist/browser/lib/is_disjoint.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../../lib/check_key_type.js":"node_modules/jose/dist/browser/lib/check_key_type.js","../../lib/validate_crit.js":"node_modules/jose/dist/browser/lib/validate_crit.js"}],"node_modules/jose/dist/browser/jws/compact/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompactSign = void 0;

var _sign = require("../flattened/sign.js");

class CompactSign {
  constructor(payload) {
    this._flattened = new _sign.FlattenedSign(payload);
  }

  setProtectedHeader(protectedHeader) {
    this._flattened.setProtectedHeader(protectedHeader);

    return this;
  }

  async sign(key, options) {
    const jws = await this._flattened.sign(key, options);

    if (jws.payload === undefined) {
      throw new TypeError('use the flattened module for creating JWS with b64: false');
    }

    return `${jws.protected}.${jws.payload}.${jws.signature}`;
  }

}

exports.CompactSign = CompactSign;
},{"../flattened/sign.js":"node_modules/jose/dist/browser/jws/flattened/sign.js"}],"node_modules/jose/dist/browser/jws/general/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeneralSign = void 0;

var _sign = require("../flattened/sign.js");

var _errors = require("../../util/errors.js");

class IndividualSignature {
  constructor(sig, key, options) {
    this.parent = sig;
    this.key = key;
    this.options = options;
  }

  setProtectedHeader(protectedHeader) {
    if (this.protectedHeader) {
      throw new TypeError('setProtectedHeader can only be called once');
    }

    this.protectedHeader = protectedHeader;
    return this;
  }

  setUnprotectedHeader(unprotectedHeader) {
    if (this.unprotectedHeader) {
      throw new TypeError('setUnprotectedHeader can only be called once');
    }

    this.unprotectedHeader = unprotectedHeader;
    return this;
  }

  addSignature(...args) {
    return this.parent.addSignature(...args);
  }

  sign(...args) {
    return this.parent.sign(...args);
  }

  done() {
    return this.parent;
  }

}

class GeneralSign {
  constructor(payload) {
    this._signatures = [];
    this._payload = payload;
  }

  addSignature(key, options) {
    const signature = new IndividualSignature(this, key, options);

    this._signatures.push(signature);

    return signature;
  }

  async sign() {
    if (!this._signatures.length) {
      throw new _errors.JWSInvalid('at least one signature must be added');
    }

    const jws = {
      signatures: [],
      payload: ''
    };

    for (let i = 0; i < this._signatures.length; i++) {
      const signature = this._signatures[i];
      const flattened = new _sign.FlattenedSign(this._payload);
      flattened.setProtectedHeader(signature.protectedHeader);
      flattened.setUnprotectedHeader(signature.unprotectedHeader);
      const {
        payload,
        ...rest
      } = await flattened.sign(signature.key, signature.options);

      if (i === 0) {
        jws.payload = payload;
      } else if (jws.payload !== payload) {
        throw new _errors.JWSInvalid('inconsistent use of JWS Unencoded Payload Option (RFC7797)');
      }

      jws.signatures.push(rest);
    }

    return jws;
  }

}

exports.GeneralSign = GeneralSign;
},{"../flattened/sign.js":"node_modules/jose/dist/browser/jws/flattened/sign.js","../../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/jwt/produce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProduceJWT = void 0;

var _epoch = _interopRequireDefault(require("../lib/epoch.js"));

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

var _secs = _interopRequireDefault(require("../lib/secs.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ProduceJWT {
  constructor(payload) {
    if (!(0, _is_object.default)(payload)) {
      throw new TypeError('JWT Claims Set MUST be an object');
    }

    this._payload = payload;
  }

  setIssuer(issuer) {
    this._payload = { ...this._payload,
      iss: issuer
    };
    return this;
  }

  setSubject(subject) {
    this._payload = { ...this._payload,
      sub: subject
    };
    return this;
  }

  setAudience(audience) {
    this._payload = { ...this._payload,
      aud: audience
    };
    return this;
  }

  setJti(jwtId) {
    this._payload = { ...this._payload,
      jti: jwtId
    };
    return this;
  }

  setNotBefore(input) {
    if (typeof input === 'number') {
      this._payload = { ...this._payload,
        nbf: input
      };
    } else {
      this._payload = { ...this._payload,
        nbf: (0, _epoch.default)(new Date()) + (0, _secs.default)(input)
      };
    }

    return this;
  }

  setExpirationTime(input) {
    if (typeof input === 'number') {
      this._payload = { ...this._payload,
        exp: input
      };
    } else {
      this._payload = { ...this._payload,
        exp: (0, _epoch.default)(new Date()) + (0, _secs.default)(input)
      };
    }

    return this;
  }

  setIssuedAt(input) {
    if (typeof input === 'undefined') {
      this._payload = { ...this._payload,
        iat: (0, _epoch.default)(new Date())
      };
    } else {
      this._payload = { ...this._payload,
        iat: input
      };
    }

    return this;
  }

}

exports.ProduceJWT = ProduceJWT;
},{"../lib/epoch.js":"node_modules/jose/dist/browser/lib/epoch.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js","../lib/secs.js":"node_modules/jose/dist/browser/lib/secs.js"}],"node_modules/jose/dist/browser/jwt/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignJWT = void 0;

var _sign = require("../jws/compact/sign.js");

var _errors = require("../util/errors.js");

var _buffer_utils = require("../lib/buffer_utils.js");

var _produce = require("./produce.js");

class SignJWT extends _produce.ProduceJWT {
  setProtectedHeader(protectedHeader) {
    this._protectedHeader = protectedHeader;
    return this;
  }

  async sign(key, options) {
    var _a;

    const sig = new _sign.CompactSign(_buffer_utils.encoder.encode(JSON.stringify(this._payload)));
    sig.setProtectedHeader(this._protectedHeader);

    if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes('b64') && this._protectedHeader.b64 === false) {
      throw new _errors.JWTInvalid('JWTs MUST NOT use unencoded payload');
    }

    return sig.sign(key, options);
  }

}

exports.SignJWT = SignJWT;
},{"../jws/compact/sign.js":"node_modules/jose/dist/browser/jws/compact/sign.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","./produce.js":"node_modules/jose/dist/browser/jwt/produce.js"}],"node_modules/jose/dist/browser/jwt/encrypt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncryptJWT = void 0;

var _encrypt = require("../jwe/compact/encrypt.js");

var _buffer_utils = require("../lib/buffer_utils.js");

var _produce = require("./produce.js");

class EncryptJWT extends _produce.ProduceJWT {
  setProtectedHeader(protectedHeader) {
    if (this._protectedHeader) {
      throw new TypeError('setProtectedHeader can only be called once');
    }

    this._protectedHeader = protectedHeader;
    return this;
  }

  setKeyManagementParameters(parameters) {
    if (this._keyManagementParameters) {
      throw new TypeError('setKeyManagementParameters can only be called once');
    }

    this._keyManagementParameters = parameters;
    return this;
  }

  setContentEncryptionKey(cek) {
    if (this._cek) {
      throw new TypeError('setContentEncryptionKey can only be called once');
    }

    this._cek = cek;
    return this;
  }

  setInitializationVector(iv) {
    if (this._iv) {
      throw new TypeError('setInitializationVector can only be called once');
    }

    this._iv = iv;
    return this;
  }

  replicateIssuerAsHeader() {
    this._replicateIssuerAsHeader = true;
    return this;
  }

  replicateSubjectAsHeader() {
    this._replicateSubjectAsHeader = true;
    return this;
  }

  replicateAudienceAsHeader() {
    this._replicateAudienceAsHeader = true;
    return this;
  }

  async encrypt(key, options) {
    const enc = new _encrypt.CompactEncrypt(_buffer_utils.encoder.encode(JSON.stringify(this._payload)));

    if (this._replicateIssuerAsHeader) {
      this._protectedHeader = { ...this._protectedHeader,
        iss: this._payload.iss
      };
    }

    if (this._replicateSubjectAsHeader) {
      this._protectedHeader = { ...this._protectedHeader,
        sub: this._payload.sub
      };
    }

    if (this._replicateAudienceAsHeader) {
      this._protectedHeader = { ...this._protectedHeader,
        aud: this._payload.aud
      };
    }

    enc.setProtectedHeader(this._protectedHeader);

    if (this._iv) {
      enc.setInitializationVector(this._iv);
    }

    if (this._cek) {
      enc.setContentEncryptionKey(this._cek);
    }

    if (this._keyManagementParameters) {
      enc.setKeyManagementParameters(this._keyManagementParameters);
    }

    return enc.encrypt(key, options);
  }

}

exports.EncryptJWT = EncryptJWT;
},{"../jwe/compact/encrypt.js":"node_modules/jose/dist/browser/jwe/compact/encrypt.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","./produce.js":"node_modules/jose/dist/browser/jwt/produce.js"}],"node_modules/jose/dist/browser/jwk/thumbprint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateJwkThumbprint = calculateJwkThumbprint;

var _digest = _interopRequireDefault(require("../runtime/digest.js"));

var _base64url = require("../runtime/base64url.js");

var _errors = require("../util/errors.js");

var _buffer_utils = require("../lib/buffer_utils.js");

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const check = (value, description) => {
  if (typeof value !== 'string' || !value) {
    throw new _errors.JWKInvalid(`${description} missing or invalid`);
  }
};

async function calculateJwkThumbprint(jwk, digestAlgorithm = 'sha256') {
  if (!(0, _is_object.default)(jwk)) {
    throw new TypeError('JWK must be an object');
  }

  if (digestAlgorithm !== 'sha256' && digestAlgorithm !== 'sha384' && digestAlgorithm !== 'sha512') {
    throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
  }

  let components;

  switch (jwk.kty) {
    case 'EC':
      check(jwk.crv, '"crv" (Curve) Parameter');
      check(jwk.x, '"x" (X Coordinate) Parameter');
      check(jwk.y, '"y" (Y Coordinate) Parameter');
      components = {
        crv: jwk.crv,
        kty: jwk.kty,
        x: jwk.x,
        y: jwk.y
      };
      break;

    case 'OKP':
      check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
      check(jwk.x, '"x" (Public Key) Parameter');
      components = {
        crv: jwk.crv,
        kty: jwk.kty,
        x: jwk.x
      };
      break;

    case 'RSA':
      check(jwk.e, '"e" (Exponent) Parameter');
      check(jwk.n, '"n" (Modulus) Parameter');
      components = {
        e: jwk.e,
        kty: jwk.kty,
        n: jwk.n
      };
      break;

    case 'oct':
      check(jwk.k, '"k" (Key Value) Parameter');
      components = {
        k: jwk.k,
        kty: jwk.kty
      };
      break;

    default:
      throw new _errors.JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
  }

  const data = _buffer_utils.encoder.encode(JSON.stringify(components));

  return (0, _base64url.encode)(await (0, _digest.default)(digestAlgorithm, data));
}
},{"../runtime/digest.js":"node_modules/jose/dist/browser/runtime/digest.js","../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/jwk/embedded.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmbeddedJWK = EmbeddedJWK;

var _import = require("../key/import.js");

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

var _errors = require("../util/errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function EmbeddedJWK(protectedHeader, token) {
  const joseHeader = { ...protectedHeader,
    ...token.header
  };

  if (!(0, _is_object.default)(joseHeader.jwk)) {
    throw new _errors.JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
  }

  const key = await (0, _import.importJWK)({ ...joseHeader.jwk,
    ext: true
  }, joseHeader.alg, true);

  if (key instanceof Uint8Array || key.type !== 'public') {
    throw new _errors.JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
  }

  return key;
}
},{"../key/import.js":"node_modules/jose/dist/browser/key/import.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/jwks/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalJWKSet = void 0;
exports.createLocalJWKSet = createLocalJWKSet;
exports.isJWKSLike = isJWKSLike;

var _import = require("../key/import.js");

var _errors = require("../util/errors.js");

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getKtyFromAlg(alg) {
  switch (typeof alg === 'string' && alg.slice(0, 2)) {
    case 'RS':
    case 'PS':
      return 'RSA';

    case 'ES':
      return 'EC';

    case 'Ed':
      return 'OKP';

    default:
      throw new _errors.JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
  }
}

function isJWKSLike(jwks) {
  return jwks && typeof jwks === 'object' && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
}

function isJWKLike(key) {
  return (0, _is_object.default)(key);
}

function clone(obj) {
  if (typeof structuredClone === 'function') {
    return structuredClone(obj);
  }

  return JSON.parse(JSON.stringify(obj));
}

class LocalJWKSet {
  constructor(jwks) {
    this._cached = new WeakMap();

    if (!isJWKSLike(jwks)) {
      throw new _errors.JWKSInvalid('JSON Web Key Set malformed');
    }

    this._jwks = clone(jwks);
  }

  async getKey(protectedHeader, token) {
    const {
      alg,
      kid
    } = { ...protectedHeader,
      ...token.header
    };
    const kty = getKtyFromAlg(alg);

    const candidates = this._jwks.keys.filter(jwk => {
      let candidate = kty === jwk.kty;

      if (candidate && typeof kid === 'string') {
        candidate = kid === jwk.kid;
      }

      if (candidate && typeof jwk.alg === 'string') {
        candidate = alg === jwk.alg;
      }

      if (candidate && typeof jwk.use === 'string') {
        candidate = jwk.use === 'sig';
      }

      if (candidate && Array.isArray(jwk.key_ops)) {
        candidate = jwk.key_ops.includes('verify');
      }

      if (candidate && alg === 'EdDSA') {
        candidate = jwk.crv === 'Ed25519' || jwk.crv === 'Ed448';
      }

      if (candidate) {
        switch (alg) {
          case 'ES256':
            candidate = jwk.crv === 'P-256';
            break;

          case 'ES256K':
            candidate = jwk.crv === 'secp256k1';
            break;

          case 'ES384':
            candidate = jwk.crv === 'P-384';
            break;

          case 'ES512':
            candidate = jwk.crv === 'P-521';
            break;
        }
      }

      return candidate;
    });

    const {
      0: jwk,
      length
    } = candidates;

    if (length === 0) {
      throw new _errors.JWKSNoMatchingKey();
    } else if (length !== 1) {
      throw new _errors.JWKSMultipleMatchingKeys();
    }

    const cached = this._cached.get(jwk) || this._cached.set(jwk, {}).get(jwk);

    if (cached[alg] === undefined) {
      const keyObject = await (0, _import.importJWK)({ ...jwk,
        ext: true
      }, alg);

      if (keyObject instanceof Uint8Array || keyObject.type !== 'public') {
        throw new _errors.JWKSInvalid('JSON Web Key Set members must be public keys');
      }

      cached[alg] = keyObject;
    }

    return cached[alg];
  }

}

exports.LocalJWKSet = LocalJWKSet;

function createLocalJWKSet(jwks) {
  return LocalJWKSet.prototype.getKey.bind(new LocalJWKSet(jwks));
}
},{"../key/import.js":"node_modules/jose/dist/browser/key/import.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/runtime/fetch_jwks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errors = require("../util/errors.js");

const fetchJwks = async (url, timeout, options) => {
  let controller;
  let id;
  let timedOut = false;

  if (typeof AbortController === 'function') {
    controller = new AbortController();
    id = setTimeout(() => {
      timedOut = true;
      controller.abort();
    }, timeout);
  }

  const response = await fetch(url.href, {
    signal: controller ? controller.signal : undefined,
    redirect: 'manual',
    headers: options.headers
  }).catch(err => {
    if (timedOut) throw new _errors.JWKSTimeout();
    throw err;
  });
  if (id !== undefined) clearTimeout(id);

  if (response.status !== 200) {
    throw new _errors.JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');
  }

  try {
    return await response.json();
  } catch (_a) {
    throw new _errors.JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');
  }
};

var _default = fetchJwks;
exports.default = _default;
},{"../util/errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/jwks/remote.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRemoteJWKSet = createRemoteJWKSet;

var _fetch_jwks = _interopRequireDefault(require("../runtime/fetch_jwks.js"));

var _env = require("../runtime/env.js");

var _errors = require("../util/errors.js");

var _local = require("./local.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RemoteJWKSet extends _local.LocalJWKSet {
  constructor(url, options) {
    super({
      keys: []
    });
    this._jwks = undefined;

    if (!(url instanceof URL)) {
      throw new TypeError('url must be an instance of URL');
    }

    this._url = new URL(url.href);
    this._options = {
      agent: options === null || options === void 0 ? void 0 : options.agent,
      headers: options === null || options === void 0 ? void 0 : options.headers
    };
    this._timeoutDuration = typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;
    this._cooldownDuration = typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;
    this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === 'number' ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;
  }

  coolingDown() {
    return typeof this._jwksTimestamp === 'number' ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
  }

  fresh() {
    return typeof this._jwksTimestamp === 'number' ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
  }

  async getKey(protectedHeader, token) {
    if (!this._jwks || !this.fresh()) {
      await this.reload();
    }

    try {
      return await super.getKey(protectedHeader, token);
    } catch (err) {
      if (err instanceof _errors.JWKSNoMatchingKey) {
        if (this.coolingDown() === false) {
          await this.reload();
          return super.getKey(protectedHeader, token);
        }
      }

      throw err;
    }
  }

  async reload() {
    if (this._pendingFetch && (0, _env.isCloudflareWorkers)()) {
      return new Promise(resolve => {
        const isDone = () => {
          if (this._pendingFetch === undefined) {
            resolve();
          } else {
            setTimeout(isDone, 5);
          }
        };

        isDone();
      });
    }

    if (!this._pendingFetch) {
      this._pendingFetch = (0, _fetch_jwks.default)(this._url, this._timeoutDuration, this._options).then(json => {
        if (!(0, _local.isJWKSLike)(json)) {
          throw new _errors.JWKSInvalid('JSON Web Key Set malformed');
        }

        this._jwks = {
          keys: json.keys
        };
        this._jwksTimestamp = Date.now();
        this._pendingFetch = undefined;
      }).catch(err => {
        this._pendingFetch = undefined;
        throw err;
      });
    }

    await this._pendingFetch;
  }

}

function createRemoteJWKSet(url, options) {
  return RemoteJWKSet.prototype.getKey.bind(new RemoteJWKSet(url, options));
}
},{"../runtime/fetch_jwks.js":"node_modules/jose/dist/browser/runtime/fetch_jwks.js","../runtime/env.js":"node_modules/jose/dist/browser/runtime/env.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./local.js":"node_modules/jose/dist/browser/jwks/local.js"}],"node_modules/jose/dist/browser/jwt/unsecured.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnsecuredJWT = void 0;

var base64url = _interopRequireWildcard(require("../runtime/base64url.js"));

var _buffer_utils = require("../lib/buffer_utils.js");

var _errors = require("../util/errors.js");

var _jwt_claims_set = _interopRequireDefault(require("../lib/jwt_claims_set.js"));

var _produce = require("./produce.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class UnsecuredJWT extends _produce.ProduceJWT {
  encode() {
    const header = base64url.encode(JSON.stringify({
      alg: 'none'
    }));
    const payload = base64url.encode(JSON.stringify(this._payload));
    return `${header}.${payload}.`;
  }

  static decode(jwt, options) {
    if (typeof jwt !== 'string') {
      throw new _errors.JWTInvalid('Unsecured JWT must be a string');
    }

    const {
      0: encodedHeader,
      1: encodedPayload,
      2: signature,
      length
    } = jwt.split('.');

    if (length !== 3 || signature !== '') {
      throw new _errors.JWTInvalid('Invalid Unsecured JWT');
    }

    let header;

    try {
      header = JSON.parse(_buffer_utils.decoder.decode(base64url.decode(encodedHeader)));
      if (header.alg !== 'none') throw new Error();
    } catch (_a) {
      throw new _errors.JWTInvalid('Invalid Unsecured JWT');
    }

    const payload = (0, _jwt_claims_set.default)(header, base64url.decode(encodedPayload), options);
    return {
      payload,
      header
    };
  }

}

exports.UnsecuredJWT = UnsecuredJWT;
},{"../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","../lib/jwt_claims_set.js":"node_modules/jose/dist/browser/lib/jwt_claims_set.js","./produce.js":"node_modules/jose/dist/browser/jwt/produce.js"}],"node_modules/jose/dist/browser/util/base64url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encode = exports.decode = void 0;

var base64url = _interopRequireWildcard(require("../runtime/base64url.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const encode = base64url.encode;
exports.encode = encode;
const decode = base64url.decode;
exports.decode = decode;
},{"../runtime/base64url.js":"node_modules/jose/dist/browser/runtime/base64url.js"}],"node_modules/jose/dist/browser/util/decode_protected_header.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeProtectedHeader = decodeProtectedHeader;

var _base64url = require("./base64url.js");

var _buffer_utils = require("../lib/buffer_utils.js");

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function decodeProtectedHeader(token) {
  let protectedB64u;

  if (typeof token === 'string') {
    const parts = token.split('.');

    if (parts.length === 3 || parts.length === 5) {
      ;
      [protectedB64u] = parts;
    }
  } else if (typeof token === 'object' && token) {
    if ('protected' in token) {
      protectedB64u = token.protected;
    } else {
      throw new TypeError('Token does not contain a Protected Header');
    }
  }

  try {
    if (typeof protectedB64u !== 'string' || !protectedB64u) {
      throw new Error();
    }

    const result = JSON.parse(_buffer_utils.decoder.decode((0, _base64url.decode)(protectedB64u)));

    if (!(0, _is_object.default)(result)) {
      throw new Error();
    }

    return result;
  } catch (_a) {
    throw new TypeError('Invalid Token or Protected Header formatting');
  }
}
},{"./base64url.js":"node_modules/jose/dist/browser/util/base64url.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js"}],"node_modules/jose/dist/browser/util/decode_jwt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeJwt = decodeJwt;

var _base64url = require("./base64url.js");

var _buffer_utils = require("../lib/buffer_utils.js");

var _is_object = _interopRequireDefault(require("../lib/is_object.js"));

var _errors = require("./errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function decodeJwt(jwt) {
  if (typeof jwt !== 'string') throw new _errors.JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');
  const {
    1: payload,
    length
  } = jwt.split('.');
  if (length === 5) throw new _errors.JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');
  if (length !== 3) throw new _errors.JWTInvalid('Invalid JWT');
  if (!payload) throw new _errors.JWTInvalid('JWTs must contain a payload');
  let decoded;

  try {
    decoded = (0, _base64url.decode)(payload);
  } catch (_a) {
    throw new _errors.JWTInvalid('Failed to parse the base64url encoded payload');
  }

  let result;

  try {
    result = JSON.parse(_buffer_utils.decoder.decode(decoded));
  } catch (_b) {
    throw new _errors.JWTInvalid('Failed to parse the decoded payload as JSON');
  }

  if (!(0, _is_object.default)(result)) throw new _errors.JWTInvalid('Invalid JWT Claims Set');
  return result;
}
},{"./base64url.js":"node_modules/jose/dist/browser/util/base64url.js","../lib/buffer_utils.js":"node_modules/jose/dist/browser/lib/buffer_utils.js","../lib/is_object.js":"node_modules/jose/dist/browser/lib/is_object.js","./errors.js":"node_modules/jose/dist/browser/util/errors.js"}],"node_modules/jose/dist/browser/runtime/generate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateKeyPair = generateKeyPair;
exports.generateSecret = generateSecret;

var _env = require("./env.js");

var _webcrypto = _interopRequireDefault(require("./webcrypto.js"));

var _errors = require("../util/errors.js");

var _random = _interopRequireDefault(require("./random.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function generateSecret(alg, options) {
  var _a;

  let length;
  let algorithm;
  let keyUsages;

  switch (alg) {
    case 'HS256':
    case 'HS384':
    case 'HS512':
      length = parseInt(alg.slice(-3), 10);
      algorithm = {
        name: 'HMAC',
        hash: `SHA-${length}`,
        length
      };
      keyUsages = ['sign', 'verify'];
      break;

    case 'A128CBC-HS256':
    case 'A192CBC-HS384':
    case 'A256CBC-HS512':
      length = parseInt(alg.slice(-3), 10);
      return (0, _random.default)(new Uint8Array(length >> 3));

    case 'A128KW':
    case 'A192KW':
    case 'A256KW':
      length = parseInt(alg.slice(1, 4), 10);
      algorithm = {
        name: 'AES-KW',
        length
      };
      keyUsages = ['wrapKey', 'unwrapKey'];
      break;

    case 'A128GCMKW':
    case 'A192GCMKW':
    case 'A256GCMKW':
    case 'A128GCM':
    case 'A192GCM':
    case 'A256GCM':
      length = parseInt(alg.slice(1, 4), 10);
      algorithm = {
        name: 'AES-GCM',
        length
      };
      keyUsages = ['encrypt', 'decrypt'];
      break;

    default:
      throw new _errors.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }

  return _webcrypto.default.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
}

function getModulusLengthOption(options) {
  var _a;

  const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;

  if (typeof modulusLength !== 'number' || modulusLength < 2048) {
    throw new _errors.JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');
  }

  return modulusLength;
}

async function generateKeyPair(alg, options) {
  var _a, _b;

  let algorithm;
  let keyUsages;

  switch (alg) {
    case 'PS256':
    case 'PS384':
    case 'PS512':
      algorithm = {
        name: 'RSA-PSS',
        hash: `SHA-${alg.slice(-3)}`,
        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        modulusLength: getModulusLengthOption(options)
      };
      keyUsages = ['sign', 'verify'];
      break;

    case 'RS256':
    case 'RS384':
    case 'RS512':
      algorithm = {
        name: 'RSASSA-PKCS1-v1_5',
        hash: `SHA-${alg.slice(-3)}`,
        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        modulusLength: getModulusLengthOption(options)
      };
      keyUsages = ['sign', 'verify'];
      break;

    case 'RSA-OAEP':
    case 'RSA-OAEP-256':
    case 'RSA-OAEP-384':
    case 'RSA-OAEP-512':
      algorithm = {
        name: 'RSA-OAEP',
        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        modulusLength: getModulusLengthOption(options)
      };
      keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];
      break;

    case 'ES256':
      algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-256'
      };
      keyUsages = ['sign', 'verify'];
      break;

    case 'ES384':
      algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-384'
      };
      keyUsages = ['sign', 'verify'];
      break;

    case 'ES512':
      algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-521'
      };
      keyUsages = ['sign', 'verify'];
      break;

    case ((0, _env.isCloudflareWorkers)() || (0, _env.isNodeJs)()) && 'EdDSA':
      switch (options === null || options === void 0 ? void 0 : options.crv) {
        case undefined:
        case 'Ed25519':
          algorithm = {
            name: 'NODE-ED25519',
            namedCurve: 'NODE-ED25519'
          };
          keyUsages = ['sign', 'verify'];
          break;

        case (0, _env.isNodeJs)() && 'Ed448':
          algorithm = {
            name: 'NODE-ED448',
            namedCurve: 'NODE-ED448'
          };
          keyUsages = ['sign', 'verify'];
          break;

        default:
          throw new _errors.JOSENotSupported('Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448');
      }

      break;

    case 'ECDH-ES':
    case 'ECDH-ES+A128KW':
    case 'ECDH-ES+A192KW':
    case 'ECDH-ES+A256KW':
      algorithm = {
        name: 'ECDH',
        namedCurve: (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'P-256'
      };
      keyUsages = ['deriveKey', 'deriveBits'];
      break;

    default:
      throw new _errors.JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }

  return _webcrypto.default.subtle.generateKey(algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages);
}
},{"./env.js":"node_modules/jose/dist/browser/runtime/env.js","./webcrypto.js":"node_modules/jose/dist/browser/runtime/webcrypto.js","../util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./random.js":"node_modules/jose/dist/browser/runtime/random.js"}],"node_modules/jose/dist/browser/key/generate_key_pair.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateKeyPair = generateKeyPair;

var _generate = require("../runtime/generate.js");

async function generateKeyPair(alg, options) {
  return (0, _generate.generateKeyPair)(alg, options);
}
},{"../runtime/generate.js":"node_modules/jose/dist/browser/runtime/generate.js"}],"node_modules/jose/dist/browser/key/generate_secret.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateSecret = generateSecret;

var _generate = require("../runtime/generate.js");

async function generateSecret(alg, options) {
  return (0, _generate.generateSecret)(alg, options);
}
},{"../runtime/generate.js":"node_modules/jose/dist/browser/runtime/generate.js"}],"node_modules/jose/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CompactEncrypt", {
  enumerable: true,
  get: function () {
    return _encrypt2.CompactEncrypt;
  }
});
Object.defineProperty(exports, "CompactSign", {
  enumerable: true,
  get: function () {
    return _sign.CompactSign;
  }
});
Object.defineProperty(exports, "EmbeddedJWK", {
  enumerable: true,
  get: function () {
    return _embedded.EmbeddedJWK;
  }
});
Object.defineProperty(exports, "EncryptJWT", {
  enumerable: true,
  get: function () {
    return _encrypt4.EncryptJWT;
  }
});
Object.defineProperty(exports, "FlattenedEncrypt", {
  enumerable: true,
  get: function () {
    return _encrypt3.FlattenedEncrypt;
  }
});
Object.defineProperty(exports, "FlattenedSign", {
  enumerable: true,
  get: function () {
    return _sign2.FlattenedSign;
  }
});
Object.defineProperty(exports, "GeneralEncrypt", {
  enumerable: true,
  get: function () {
    return _encrypt.GeneralEncrypt;
  }
});
Object.defineProperty(exports, "GeneralSign", {
  enumerable: true,
  get: function () {
    return _sign3.GeneralSign;
  }
});
Object.defineProperty(exports, "SignJWT", {
  enumerable: true,
  get: function () {
    return _sign4.SignJWT;
  }
});
Object.defineProperty(exports, "UnsecuredJWT", {
  enumerable: true,
  get: function () {
    return _unsecured.UnsecuredJWT;
  }
});
exports.base64url = void 0;
Object.defineProperty(exports, "calculateJwkThumbprint", {
  enumerable: true,
  get: function () {
    return _thumbprint.calculateJwkThumbprint;
  }
});
Object.defineProperty(exports, "compactDecrypt", {
  enumerable: true,
  get: function () {
    return _decrypt.compactDecrypt;
  }
});
Object.defineProperty(exports, "compactVerify", {
  enumerable: true,
  get: function () {
    return _verify.compactVerify;
  }
});
Object.defineProperty(exports, "createLocalJWKSet", {
  enumerable: true,
  get: function () {
    return _local.createLocalJWKSet;
  }
});
Object.defineProperty(exports, "createRemoteJWKSet", {
  enumerable: true,
  get: function () {
    return _remote.createRemoteJWKSet;
  }
});
Object.defineProperty(exports, "decodeJwt", {
  enumerable: true,
  get: function () {
    return _decode_jwt.decodeJwt;
  }
});
Object.defineProperty(exports, "decodeProtectedHeader", {
  enumerable: true,
  get: function () {
    return _decode_protected_header.decodeProtectedHeader;
  }
});
exports.errors = void 0;
Object.defineProperty(exports, "exportJWK", {
  enumerable: true,
  get: function () {
    return _export.exportJWK;
  }
});
Object.defineProperty(exports, "exportPKCS8", {
  enumerable: true,
  get: function () {
    return _export.exportPKCS8;
  }
});
Object.defineProperty(exports, "exportSPKI", {
  enumerable: true,
  get: function () {
    return _export.exportSPKI;
  }
});
Object.defineProperty(exports, "flattenedDecrypt", {
  enumerable: true,
  get: function () {
    return _decrypt2.flattenedDecrypt;
  }
});
Object.defineProperty(exports, "flattenedVerify", {
  enumerable: true,
  get: function () {
    return _verify2.flattenedVerify;
  }
});
Object.defineProperty(exports, "generalDecrypt", {
  enumerable: true,
  get: function () {
    return _decrypt3.generalDecrypt;
  }
});
Object.defineProperty(exports, "generalVerify", {
  enumerable: true,
  get: function () {
    return _verify3.generalVerify;
  }
});
Object.defineProperty(exports, "generateKeyPair", {
  enumerable: true,
  get: function () {
    return _generate_key_pair.generateKeyPair;
  }
});
Object.defineProperty(exports, "generateSecret", {
  enumerable: true,
  get: function () {
    return _generate_secret.generateSecret;
  }
});
Object.defineProperty(exports, "importJWK", {
  enumerable: true,
  get: function () {
    return _import.importJWK;
  }
});
Object.defineProperty(exports, "importPKCS8", {
  enumerable: true,
  get: function () {
    return _import.importPKCS8;
  }
});
Object.defineProperty(exports, "importSPKI", {
  enumerable: true,
  get: function () {
    return _import.importSPKI;
  }
});
Object.defineProperty(exports, "importX509", {
  enumerable: true,
  get: function () {
    return _import.importX509;
  }
});
Object.defineProperty(exports, "jwtDecrypt", {
  enumerable: true,
  get: function () {
    return _decrypt4.jwtDecrypt;
  }
});
Object.defineProperty(exports, "jwtVerify", {
  enumerable: true,
  get: function () {
    return _verify4.jwtVerify;
  }
});

var _decrypt = require("./jwe/compact/decrypt.js");

var _decrypt2 = require("./jwe/flattened/decrypt.js");

var _decrypt3 = require("./jwe/general/decrypt.js");

var _encrypt = require("./jwe/general/encrypt.js");

var _verify = require("./jws/compact/verify.js");

var _verify2 = require("./jws/flattened/verify.js");

var _verify3 = require("./jws/general/verify.js");

var _verify4 = require("./jwt/verify.js");

var _decrypt4 = require("./jwt/decrypt.js");

var _encrypt2 = require("./jwe/compact/encrypt.js");

var _encrypt3 = require("./jwe/flattened/encrypt.js");

var _sign = require("./jws/compact/sign.js");

var _sign2 = require("./jws/flattened/sign.js");

var _sign3 = require("./jws/general/sign.js");

var _sign4 = require("./jwt/sign.js");

var _encrypt4 = require("./jwt/encrypt.js");

var _thumbprint = require("./jwk/thumbprint.js");

var _embedded = require("./jwk/embedded.js");

var _local = require("./jwks/local.js");

var _remote = require("./jwks/remote.js");

var _unsecured = require("./jwt/unsecured.js");

var _export = require("./key/export.js");

var _import = require("./key/import.js");

var _decode_protected_header = require("./util/decode_protected_header.js");

var _decode_jwt = require("./util/decode_jwt.js");

var errors_1 = _interopRequireWildcard(require("./util/errors.js"));

exports.errors = errors_1;

var _generate_key_pair = require("./key/generate_key_pair.js");

var _generate_secret = require("./key/generate_secret.js");

var base64url_1 = _interopRequireWildcard(require("./util/base64url.js"));

exports.base64url = base64url_1;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./jwe/compact/decrypt.js":"node_modules/jose/dist/browser/jwe/compact/decrypt.js","./jwe/flattened/decrypt.js":"node_modules/jose/dist/browser/jwe/flattened/decrypt.js","./jwe/general/decrypt.js":"node_modules/jose/dist/browser/jwe/general/decrypt.js","./jwe/general/encrypt.js":"node_modules/jose/dist/browser/jwe/general/encrypt.js","./jws/compact/verify.js":"node_modules/jose/dist/browser/jws/compact/verify.js","./jws/flattened/verify.js":"node_modules/jose/dist/browser/jws/flattened/verify.js","./jws/general/verify.js":"node_modules/jose/dist/browser/jws/general/verify.js","./jwt/verify.js":"node_modules/jose/dist/browser/jwt/verify.js","./jwt/decrypt.js":"node_modules/jose/dist/browser/jwt/decrypt.js","./jwe/compact/encrypt.js":"node_modules/jose/dist/browser/jwe/compact/encrypt.js","./jwe/flattened/encrypt.js":"node_modules/jose/dist/browser/jwe/flattened/encrypt.js","./jws/compact/sign.js":"node_modules/jose/dist/browser/jws/compact/sign.js","./jws/flattened/sign.js":"node_modules/jose/dist/browser/jws/flattened/sign.js","./jws/general/sign.js":"node_modules/jose/dist/browser/jws/general/sign.js","./jwt/sign.js":"node_modules/jose/dist/browser/jwt/sign.js","./jwt/encrypt.js":"node_modules/jose/dist/browser/jwt/encrypt.js","./jwk/thumbprint.js":"node_modules/jose/dist/browser/jwk/thumbprint.js","./jwk/embedded.js":"node_modules/jose/dist/browser/jwk/embedded.js","./jwks/local.js":"node_modules/jose/dist/browser/jwks/local.js","./jwks/remote.js":"node_modules/jose/dist/browser/jwks/remote.js","./jwt/unsecured.js":"node_modules/jose/dist/browser/jwt/unsecured.js","./key/export.js":"node_modules/jose/dist/browser/key/export.js","./key/import.js":"node_modules/jose/dist/browser/key/import.js","./util/decode_protected_header.js":"node_modules/jose/dist/browser/util/decode_protected_header.js","./util/decode_jwt.js":"node_modules/jose/dist/browser/util/decode_jwt.js","./util/errors.js":"node_modules/jose/dist/browser/util/errors.js","./key/generate_key_pair.js":"node_modules/jose/dist/browser/key/generate_key_pair.js","./key/generate_secret.js":"node_modules/jose/dist/browser/key/generate_secret.js","./util/base64url.js":"node_modules/jose/dist/browser/util/base64url.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/redirectHandler/IRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebidFromTokenPayload = exports.fetchJwks = void 0;
const cross_fetch_1 = require("cross-fetch");
const jose_1 = require("jose");
async function fetchJwks(jwksIri, issuerIri) {
    const jwksResponse = await (0, cross_fetch_1.fetch)(jwksIri);
    if (jwksResponse.status !== 200) {
        throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);
    }
    let jwk;
    try {
        jwk = (await jwksResponse.json()).keys[0];
    }
    catch (e) {
        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);
    }
    return jwk;
}
exports.fetchJwks = fetchJwks;
async function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {
    const jwk = await fetchJwks(jwksIri, issuerIri);
    let payload;
    try {
        const { payload: verifiedPayload } = await (0, jose_1.jwtVerify)(idToken, await (0, jose_1.importJWK)(jwk), {
            issuer: issuerIri,
            audience: clientId,
        });
        payload = verifiedPayload;
    }
    catch (e) {
        throw new Error(`ID token verification failed: ${e.stack}`);
    }
    if (typeof payload.webid === "string") {
        return payload.webid;
    }
    if (typeof payload.sub !== "string") {
        throw new Error(`The ID token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);
    }
    try {
        new URL(payload.sub);
        return payload.sub;
    }
    catch (e) {
        throw new Error(`The ID token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);
    }
}
exports.getWebidFromTokenPayload = getWebidFromTokenPayload;

},{"cross-fetch":"node_modules/cross-fetch/dist/browser-ponyfill.js","jose":"node_modules/jose/dist/browser/index.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfo.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSupportedTokenType = void 0;
function isSupportedTokenType(token) {
    return typeof token === "string" && ["DPoP", "Bearer"].includes(token);
}
exports.isSupportedTokenType = isSupportedTokenType;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfoManager.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.USER_SESSION_PREFIX = void 0;
exports.USER_SESSION_PREFIX = "solidClientAuthenticationUser";

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRegistration = exports.determineSigningAlg = void 0;
function isValidUrl(url) {
    try {
        new URL(url);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function determineSigningAlg(supported, preferred) {
    var _a;
    return ((_a = preferred.find((signingAlg) => {
        return supported.includes(signingAlg);
    })) !== null && _a !== void 0 ? _a : null);
}
exports.determineSigningAlg = determineSigningAlg;
function determineClientType(options, issuerConfig) {
    if (options.clientId !== undefined && !isValidUrl(options.clientId)) {
        return "static";
    }
    if (issuerConfig.scopesSupported.includes("webid") &&
        options.clientId !== undefined &&
        isValidUrl(options.clientId)) {
        return "solid-oidc";
    }
    return "dynamic";
}
async function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {
    const clientType = determineClientType(options, issuerConfig);
    if (clientType === "dynamic") {
        return clientRegistrar.getClient({
            sessionId: options.sessionId,
            clientName: options.clientName,
            redirectUrl: options.redirectUrl,
        }, issuerConfig);
    }
    await storageUtility.setForUser(options.sessionId, {
        clientId: options.clientId,
    });
    if (options.clientSecret) {
        await storageUtility.setForUser(options.sessionId, {
            clientSecret: options.clientSecret,
        });
    }
    if (options.clientName) {
        await storageUtility.setForUser(options.sessionId, {
            clientName: options.clientName,
        });
    }
    return {
        clientId: options.clientId,
        clientSecret: options.clientSecret,
        clientName: options.clientName,
        clientType,
    };
}
exports.handleRegistration = handleRegistration;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveSessionInfoToStorage = exports.loadOidcContextFromStorage = exports.getSessionIdFromOauthState = void 0;
const jose_1 = require("jose");
const InruptError_1 = __importDefault(require("../errors/InruptError"));
async function getSessionIdFromOauthState(storageUtility, oauthState) {
    return storageUtility.getForUser(oauthState, "sessionId");
}
exports.getSessionIdFromOauthState = getSessionIdFromOauthState;
async function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {
    try {
        const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([
            storageUtility.getForUser(sessionId, "issuer", {
                errorIfNull: true,
            }),
            storageUtility.getForUser(sessionId, "codeVerifier"),
            storageUtility.getForUser(sessionId, "redirectUrl"),
            storageUtility.getForUser(sessionId, "dpop", { errorIfNull: true }),
        ]);
        await storageUtility.deleteForUser(sessionId, "codeVerifier");
        const issuerConfig = await configFetcher.fetchConfig(issuerIri);
        return {
            codeVerifier,
            redirectUrl: storedRedirectIri,
            issuerConfig,
            dpop: dpop === "true",
        };
    }
    catch (e) {
        throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`);
    }
}
exports.loadOidcContextFromStorage = loadOidcContextFromStorage;
async function saveSessionInfoToStorage(storageUtility, sessionId, webId, isLoggedIn, refreshToken, secure, dpopKey) {
    if (refreshToken !== undefined) {
        await storageUtility.setForUser(sessionId, { refreshToken }, { secure });
    }
    if (webId !== undefined) {
        await storageUtility.setForUser(sessionId, { webId }, { secure });
    }
    if (isLoggedIn !== undefined) {
        await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });
    }
    if (dpopKey !== undefined) {
        await storageUtility.setForUser(sessionId, {
            publicKey: JSON.stringify(dpopKey.publicKey),
            privateKey: JSON.stringify(await (0, jose_1.exportJWK)(dpopKey.privateKey)),
        }, { secure });
    }
}
exports.saveSessionInfoToStorage = saveSessionInfoToStorage;
class StorageUtility {
    constructor(secureStorage, insecureStorage) {
        this.secureStorage = secureStorage;
        this.insecureStorage = insecureStorage;
        this.RESOURCE_SERVER_SESSION_INFORMATION_KEY = "tmp-resource-server-session-info";
    }
    getKey(userId) {
        return `solidClientAuthenticationUser:${userId}`;
    }
    async getUserData(userId, secure) {
        const stored = await (secure
            ? this.secureStorage
            : this.insecureStorage).get(this.getKey(userId));
        if (stored === undefined) {
            return {};
        }
        try {
            return JSON.parse(stored);
        }
        catch (err) {
            throw new InruptError_1.default(`Data for user [${userId}] in [${secure ? "secure" : "unsecure"}] storage is corrupted - expected valid JSON, but got: ${stored}`);
        }
    }
    async setUserData(userId, data, secure) {
        await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));
    }
    async get(key, options) {
        const value = await ((options === null || options === void 0 ? void 0 : options.secure)
            ? this.secureStorage
            : this.insecureStorage).get(key);
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new InruptError_1.default(`[${key}] is not stored`);
        }
        return value;
    }
    async set(key, value, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);
    }
    async delete(key, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);
    }
    async getForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        let value;
        if (!userData || !userData[key]) {
            value = undefined;
        }
        value = userData[key];
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new InruptError_1.default(`Field [${key}] for user [${userId}] is not stored`);
        }
        return value || undefined;
    }
    async setForUser(userId, values, options) {
        let userData;
        try {
            userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        }
        catch (_a) {
            userData = {};
        }
        await this.setUserData(userId, { ...userData, ...values }, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        delete userData[key];
        await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteAllUserData(userId, options) {
        await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));
    }
    async storeResourceServerSessionInfo(webId, resourceServerIri, expiration) {
        var _a;
        const sessions = JSON.parse((_a = (await this.insecureStorage.get(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY))) !== null && _a !== void 0 ? _a : "{}");
        if (sessions.webId !== webId) {
            sessions.sessions = {};
        }
        sessions.webId = webId;
        sessions.sessions[resourceServerIri] = {
            expiration,
        };
        await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, JSON.stringify(sessions));
    }
    async clearResourceServerSessionInfo(resourceServerIri) {
        var _a;
        const sessions = JSON.parse((_a = (await this.insecureStorage.get(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY))) !== null && _a !== void 0 ? _a : "{}");
        if (sessions.sessions !== undefined) {
            delete sessions.sessions[resourceServerIri];
            if (Object.keys(sessions.sessions).length === 0) {
                await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, "{}");
            }
            else {
                await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, JSON.stringify(sessions));
            }
        }
    }
}
exports.default = StorageUtility;

},{"jose":"node_modules/jose/dist/browser/index.js","../errors/InruptError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/storage/InMemoryStorage.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class InMemoryStorage {
    constructor() {
        this.map = {};
    }
    async get(key) {
        return this.map[key] || undefined;
    }
    async set(key, value) {
        this.map[key] = value;
    }
    async delete(key) {
        delete this.map[key];
    }
}
exports.default = InMemoryStorage;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/ConfigurationError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ConfigurationError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.default = ConfigurationError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/NotImplementedError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class NotImplementedError extends Error {
    constructor(methodName) {
        super(`[${methodName}] is not implemented`);
    }
}
exports.default = NotImplementedError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/InvalidResponseError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidResponseError = void 0;
class InvalidResponseError extends Error {
    constructor(missingFields) {
        super(`Invalid response from OIDC provider: missing fields ${missingFields}`);
        this.missingFields = missingFields;
    }
}
exports.InvalidResponseError = InvalidResponseError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/OidcProviderError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OidcProviderError = void 0;
class OidcProviderError extends Error {
    constructor(message, error, errorDescription) {
        super(message);
        this.error = error;
        this.errorDescription = errorDescription;
    }
}
exports.OidcProviderError = OidcProviderError;

},{}],"node_modules/uuid/dist/esm-browser/rng.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
},{}],"node_modules/uuid/dist/esm-browser/regex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/validate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
},{"./regex.js":"node_modules/uuid/dist/esm-browser/regex.js"}],"node_modules/uuid/dist/esm-browser/stringify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/v1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;
},{"./rng.js":"node_modules/uuid/dist/esm-browser/rng.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js"}],"node_modules/uuid/dist/esm-browser/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/v35.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports.default = _default;

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js","./parse.js":"node_modules/uuid/dist/esm-browser/parse.js"}],"node_modules/uuid/dist/esm-browser/md5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/v3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./v35.js":"node_modules/uuid/dist/esm-browser/v35.js","./md5.js":"node_modules/uuid/dist/esm-browser/md5.js"}],"node_modules/uuid/dist/esm-browser/v4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  var rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./rng.js":"node_modules/uuid/dist/esm-browser/rng.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js"}],"node_modules/uuid/dist/esm-browser/sha1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/v5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./v35.js":"node_modules/uuid/dist/esm-browser/v35.js","./sha1.js":"node_modules/uuid/dist/esm-browser/sha1.js"}],"node_modules/uuid/dist/esm-browser/nil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./v1.js":"node_modules/uuid/dist/esm-browser/v1.js","./v3.js":"node_modules/uuid/dist/esm-browser/v3.js","./v4.js":"node_modules/uuid/dist/esm-browser/v4.js","./v5.js":"node_modules/uuid/dist/esm-browser/v5.js","./nil.js":"node_modules/uuid/dist/esm-browser/nil.js","./version.js":"node_modules/uuid/dist/esm-browser/version.js","./validate.js":"node_modules/uuid/dist/esm-browser/validate.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js","./parse.js":"node_modules/uuid/dist/esm-browser/parse.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/dpopUtils.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDpopKeyPair = exports.createDpopHeader = void 0;
const jose_1 = require("jose");
const uuid_1 = require("uuid");
const constant_1 = require("../constant");
function normalizeHTU(audience) {
    const audienceUrl = new URL(audience);
    return new URL(audienceUrl.pathname, audienceUrl.origin).toString();
}
async function createDpopHeader(audience, method, dpopKey) {
    return new jose_1.SignJWT({
        htu: normalizeHTU(audience),
        htm: method.toUpperCase(),
        jti: (0, uuid_1.v4)(),
    })
        .setProtectedHeader({
        alg: constant_1.PREFERRED_SIGNING_ALG[0],
        jwk: dpopKey.publicKey,
        typ: "dpop+jwt",
    })
        .setIssuedAt()
        .sign(dpopKey.privateKey, {});
}
exports.createDpopHeader = createDpopHeader;
async function generateDpopKeyPair() {
    const { privateKey, publicKey } = await (0, jose_1.generateKeyPair)(constant_1.PREFERRED_SIGNING_ALG[0]);
    const dpopKeyPair = {
        privateKey,
        publicKey: await (0, jose_1.exportJWK)(publicKey),
    };
    [dpopKeyPair.publicKey.alg] = constant_1.PREFERRED_SIGNING_ALG;
    return dpopKeyPair;
}
exports.generateDpopKeyPair = generateDpopKeyPair;

},{"jose":"node_modules/jose/dist/browser/index.js","uuid":"node_modules/uuid/dist/esm-browser/index.js","../constant":"node_modules/@inrupt/solid-client-authn-core/dist/constant.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/fetchFactory.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAuthenticatedFetch = exports.DEFAULT_EXPIRATION_TIME_SECONDS = void 0;
const cross_fetch_1 = require("cross-fetch");
const constant_1 = require("../constant");
const dpopUtils_1 = require("./dpopUtils");
const OidcProviderError_1 = require("../errors/OidcProviderError");
const InvalidResponseError_1 = require("../errors/InvalidResponseError");
exports.DEFAULT_EXPIRATION_TIME_SECONDS = 600;
function isExpectedAuthError(statusCode) {
    return [401, 403].includes(statusCode);
}
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
    var _a;
    const headers = new cross_fetch_1.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    headers.set("Authorization", `DPoP ${authToken}`);
    headers.set("DPoP", await (0, dpopUtils_1.createDpopHeader)(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey));
    return {
        ...defaultOptions,
        headers,
    };
}
async function buildAuthenticatedHeaders(targetUrl, authToken, dpopKey, defaultOptions) {
    if (dpopKey !== undefined) {
        return buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions);
    }
    const headers = new cross_fetch_1.Headers(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    headers.set("Authorization", `Bearer ${authToken}`);
    return {
        ...defaultOptions,
        headers,
    };
}
async function makeAuthenticatedRequest(unauthFetch, accessToken, url, defaultRequestInit, dpopKey) {
    return unauthFetch(url, await buildAuthenticatedHeaders(url.toString(), accessToken, dpopKey, defaultRequestInit));
}
async function refreshAccessToken(refreshOptions, dpopKey, eventEmitter) {
    var _a;
    const tokenSet = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
    eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(constant_1.EVENTS.SESSION_EXTENDED, (_a = tokenSet.expiresIn) !== null && _a !== void 0 ? _a : exports.DEFAULT_EXPIRATION_TIME_SECONDS);
    if (typeof tokenSet.refreshToken === "string") {
        eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(constant_1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
    }
    return {
        accessToken: tokenSet.accessToken,
        refreshToken: tokenSet.refreshToken,
        expiresIn: tokenSet.expiresIn,
    };
}
const computeRefreshDelay = (expiresIn) => {
    if (expiresIn !== undefined) {
        return expiresIn - constant_1.REFRESH_BEFORE_EXPIRATION_SECONDS > 0
            ?
                expiresIn - constant_1.REFRESH_BEFORE_EXPIRATION_SECONDS
            : expiresIn;
    }
    return exports.DEFAULT_EXPIRATION_TIME_SECONDS;
};
async function buildAuthenticatedFetch(unauthFetch, accessToken, options) {
    var _a;
    let currentAccessToken = accessToken;
    let latestTimeout;
    const currentRefreshOptions = options === null || options === void 0 ? void 0 : options.refreshOptions;
    if (currentRefreshOptions !== undefined) {
        const proactivelyRefreshToken = async () => {
            var _a, _b, _c, _d;
            try {
                const { accessToken: refreshedAccessToken, refreshToken, expiresIn, } = await refreshAccessToken(currentRefreshOptions, options.dpopKey, options.eventEmitter);
                currentAccessToken = refreshedAccessToken;
                if (refreshToken !== undefined) {
                    currentRefreshOptions.refreshToken = refreshToken;
                }
                clearTimeout(latestTimeout);
                latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(expiresIn) * 1000);
                (_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(constant_1.EVENTS.TIMEOUT_SET, latestTimeout);
            }
            catch (e) {
                if (e instanceof OidcProviderError_1.OidcProviderError) {
                    (_b = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _b === void 0 ? void 0 : _b.emit(constant_1.EVENTS.ERROR, e.error, e.errorDescription);
                    (_c = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _c === void 0 ? void 0 : _c.emit(constant_1.EVENTS.SESSION_EXPIRED);
                }
                if (e instanceof InvalidResponseError_1.InvalidResponseError &&
                    e.missingFields.includes("access_token")) {
                    (_d = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _d === void 0 ? void 0 : _d.emit(constant_1.EVENTS.SESSION_EXPIRED);
                }
            }
        };
        latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(options.expiresIn) * 1000);
        (_a = options.eventEmitter) === null || _a === void 0 ? void 0 : _a.emit(constant_1.EVENTS.TIMEOUT_SET, latestTimeout);
    }
    else if (options !== undefined && options.eventEmitter !== undefined) {
        const expirationTimeout = setTimeout(() => {
            options.eventEmitter.emit(constant_1.EVENTS.SESSION_EXPIRED);
        }, computeRefreshDelay(options.expiresIn) * 1000);
        options.eventEmitter.emit(constant_1.EVENTS.TIMEOUT_SET, expirationTimeout);
    }
    return async (url, requestInit) => {
        let response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, url, requestInit, options === null || options === void 0 ? void 0 : options.dpopKey);
        const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
        if (response.ok || failedButNotExpectedAuthError) {
            return response;
        }
        const hasBeenRedirected = response.url !== url;
        if (hasBeenRedirected && (options === null || options === void 0 ? void 0 : options.dpopKey) !== undefined) {
            response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, response.url, requestInit, options.dpopKey);
        }
        return response;
    };
}
exports.buildAuthenticatedFetch = buildAuthenticatedFetch;

},{"cross-fetch":"node_modules/cross-fetch/dist/browser-ponyfill.js","../constant":"node_modules/@inrupt/solid-client-authn-core/dist/constant.js","./dpopUtils":"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/dpopUtils.js","../errors/OidcProviderError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/OidcProviderError.js","../errors/InvalidResponseError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/InvalidResponseError.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/storage/__mocks__/StorageUtility.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockStorageUtility = exports.mockStorage = exports.StorageUtilityMock = exports.StorageUtilityGetResponse = void 0;
const __1 = require("../..");
exports.StorageUtilityGetResponse = "getResponse";
exports.StorageUtilityMock = {
    get: async (key, options) => exports.StorageUtilityGetResponse,
    set: async (key, value) => {
    },
    delete: async (key) => {
    },
    getForUser: async (userId, key, options) => exports.StorageUtilityGetResponse,
    setForUser: async (userId, values, options) => {
    },
    deleteForUser: async (userId, key, options) => {
    },
    deleteAllUserData: async (userId, options) => {
    },
    storeResourceServerSessionInfo: async (_webId, _resourceServerIri, _sessionExpires) => {
    },
    clearResourceServerSessionInfo: async (_resourceServerIri) => {
    },
};
const mockStorage = (stored) => {
    const store = stored;
    return {
        get: async (key) => {
            if (store[key] === undefined) {
                return undefined;
            }
            if (typeof store[key] === "string") {
                return store[key];
            }
            return JSON.stringify(store[key]);
        },
        set: async (key, value) => {
            store[key] = value;
        },
        delete: async (key) => {
            delete store[key];
        },
    };
};
exports.mockStorage = mockStorage;
const mockStorageUtility = (stored, isSecure = false) => {
    if (isSecure) {
        return new __1.StorageUtility((0, exports.mockStorage)(stored), (0, exports.mockStorage)({}));
    }
    return new __1.StorageUtility((0, exports.mockStorage)({}), (0, exports.mockStorage)(stored));
};
exports.mockStorageUtility = mockStorageUtility;

},{"../..":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/index.js":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageUtilityGetResponse = exports.StorageUtilityMock = exports.mockStorageUtility = exports.mockStorage = exports.buildAuthenticatedFetch = exports.generateDpopKeyPair = exports.createDpopHeader = exports.OidcProviderError = exports.InvalidResponseError = exports.NotImplementedError = exports.ConfigurationError = exports.InMemoryStorage = exports.getSessionIdFromOauthState = exports.saveSessionInfoToStorage = exports.loadOidcContextFromStorage = exports.StorageUtility = exports.determineSigningAlg = exports.handleRegistration = exports.USER_SESSION_PREFIX = exports.isSupportedTokenType = exports.fetchJwks = exports.getWebidFromTokenPayload = exports.AggregateHandler = void 0;
__exportStar(require("./constant"), exports);
var AggregateHandler_1 = require("./util/handlerPattern/AggregateHandler");
Object.defineProperty(exports, "AggregateHandler", { enumerable: true, get: function () { return __importDefault(AggregateHandler_1).default; } });
var IRedirectHandler_1 = require("./login/oidc/redirectHandler/IRedirectHandler");
Object.defineProperty(exports, "getWebidFromTokenPayload", { enumerable: true, get: function () { return IRedirectHandler_1.getWebidFromTokenPayload; } });
Object.defineProperty(exports, "fetchJwks", { enumerable: true, get: function () { return IRedirectHandler_1.fetchJwks; } });
var ISessionInfo_1 = require("./sessionInfo/ISessionInfo");
Object.defineProperty(exports, "isSupportedTokenType", { enumerable: true, get: function () { return ISessionInfo_1.isSupportedTokenType; } });
var ISessionInfoManager_1 = require("./sessionInfo/ISessionInfoManager");
Object.defineProperty(exports, "USER_SESSION_PREFIX", { enumerable: true, get: function () { return ISessionInfoManager_1.USER_SESSION_PREFIX; } });
var IClientRegistrar_1 = require("./login/oidc/IClientRegistrar");
Object.defineProperty(exports, "handleRegistration", { enumerable: true, get: function () { return IClientRegistrar_1.handleRegistration; } });
Object.defineProperty(exports, "determineSigningAlg", { enumerable: true, get: function () { return IClientRegistrar_1.determineSigningAlg; } });
var StorageUtility_1 = require("./storage/StorageUtility");
Object.defineProperty(exports, "StorageUtility", { enumerable: true, get: function () { return __importDefault(StorageUtility_1).default; } });
Object.defineProperty(exports, "loadOidcContextFromStorage", { enumerable: true, get: function () { return StorageUtility_1.loadOidcContextFromStorage; } });
Object.defineProperty(exports, "saveSessionInfoToStorage", { enumerable: true, get: function () { return StorageUtility_1.saveSessionInfoToStorage; } });
Object.defineProperty(exports, "getSessionIdFromOauthState", { enumerable: true, get: function () { return StorageUtility_1.getSessionIdFromOauthState; } });
var InMemoryStorage_1 = require("./storage/InMemoryStorage");
Object.defineProperty(exports, "InMemoryStorage", { enumerable: true, get: function () { return __importDefault(InMemoryStorage_1).default; } });
var ConfigurationError_1 = require("./errors/ConfigurationError");
Object.defineProperty(exports, "ConfigurationError", { enumerable: true, get: function () { return __importDefault(ConfigurationError_1).default; } });
var NotImplementedError_1 = require("./errors/NotImplementedError");
Object.defineProperty(exports, "NotImplementedError", { enumerable: true, get: function () { return __importDefault(NotImplementedError_1).default; } });
var InvalidResponseError_1 = require("./errors/InvalidResponseError");
Object.defineProperty(exports, "InvalidResponseError", { enumerable: true, get: function () { return InvalidResponseError_1.InvalidResponseError; } });
var OidcProviderError_1 = require("./errors/OidcProviderError");
Object.defineProperty(exports, "OidcProviderError", { enumerable: true, get: function () { return OidcProviderError_1.OidcProviderError; } });
var dpopUtils_1 = require("./authenticatedFetch/dpopUtils");
Object.defineProperty(exports, "createDpopHeader", { enumerable: true, get: function () { return dpopUtils_1.createDpopHeader; } });
Object.defineProperty(exports, "generateDpopKeyPair", { enumerable: true, get: function () { return dpopUtils_1.generateDpopKeyPair; } });
var fetchFactory_1 = require("./authenticatedFetch/fetchFactory");
Object.defineProperty(exports, "buildAuthenticatedFetch", { enumerable: true, get: function () { return fetchFactory_1.buildAuthenticatedFetch; } });
var StorageUtility_2 = require("./storage/__mocks__/StorageUtility");
Object.defineProperty(exports, "mockStorage", { enumerable: true, get: function () { return StorageUtility_2.mockStorage; } });
Object.defineProperty(exports, "mockStorageUtility", { enumerable: true, get: function () { return StorageUtility_2.mockStorageUtility; } });
Object.defineProperty(exports, "StorageUtilityMock", { enumerable: true, get: function () { return StorageUtility_2.StorageUtilityMock; } });
Object.defineProperty(exports, "StorageUtilityGetResponse", { enumerable: true, get: function () { return StorageUtility_2.StorageUtilityGetResponse; } });

},{"./constant":"node_modules/@inrupt/solid-client-authn-core/dist/constant.js","./util/handlerPattern/AggregateHandler":"node_modules/@inrupt/solid-client-authn-core/dist/util/handlerPattern/AggregateHandler.js","./login/oidc/redirectHandler/IRedirectHandler":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/redirectHandler/IRedirectHandler.js","./sessionInfo/ISessionInfo":"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfo.js","./sessionInfo/ISessionInfoManager":"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfoManager.js","./login/oidc/IClientRegistrar":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js","./storage/StorageUtility":"node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js","./storage/InMemoryStorage":"node_modules/@inrupt/solid-client-authn-core/dist/storage/InMemoryStorage.js","./errors/ConfigurationError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/ConfigurationError.js","./errors/NotImplementedError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/NotImplementedError.js","./errors/InvalidResponseError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/InvalidResponseError.js","./errors/OidcProviderError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/OidcProviderError.js","./authenticatedFetch/dpopUtils":"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/dpopUtils.js","./authenticatedFetch/fetchFactory":"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/fetchFactory.js","./storage/__mocks__/StorageUtility":"node_modules/@inrupt/solid-client-authn-core/dist/storage/__mocks__/StorageUtility.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/storage/StorageUtility.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
class StorageUtilityBrowser extends solid_client_authn_core_1.StorageUtility {
    constructor(secureStorage, insecureStorage) {
        super(secureStorage, insecureStorage);
    }
}
exports.default = StorageUtilityBrowser;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/oidc-client/lib/oidc-client.min.js":[function(require,module,exports) {
var define;
!function t(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var n=r();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(this,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function e(){return t.default}:function e(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=22)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var i={debug:function t(){},info:function t(){},warn:function t(){},error:function t(){}},o=void 0,s=void 0;(e.Log=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.reset=function t(){s=3,o=i},t.debug=function t(){if(s>=4){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.debug.apply(o,Array.from(r))}},t.info=function t(){if(s>=3){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.info.apply(o,Array.from(r))}},t.warn=function t(){if(s>=2){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.warn.apply(o,Array.from(r))}},t.error=function t(){if(s>=1){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.error.apply(o,Array.from(r))}},n(t,null,[{key:"NONE",get:function t(){return 0}},{key:"ERROR",get:function t(){return 1}},{key:"WARN",get:function t(){return 2}},{key:"INFO",get:function t(){return 3}},{key:"DEBUG",get:function t(){return 4}},{key:"level",get:function t(){return s},set:function t(e){if(!(0<=e&&e<=4))throw new Error("Invalid log level");s=e}},{key:"logger",get:function t(){return o},set:function t(e){if(!e.debug&&e.info&&(e.debug=e.info),!(e.debug&&e.info&&e.warn&&e.error))throw new Error("Invalid logger");o=e}}]),t}()).reset()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var i={setInterval:function(t){function e(e,r){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return setInterval(t,e)})),clearInterval:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return clearInterval(t)}))},o=!1,s=null;e.Global=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t._testing=function t(){o=!0},t.setXMLHttpRequest=function t(e){s=e},n(t,null,[{key:"location",get:function t(){if(!o)return location}},{key:"localStorage",get:function t(){if(!o&&"undefined"!=typeof window)return localStorage}},{key:"sessionStorage",get:function t(){if(!o&&"undefined"!=typeof window)return sessionStorage}},{key:"XMLHttpRequest",get:function t(){if(!o&&"undefined"!=typeof window)return s||XMLHttpRequest}},{key:"timer",get:function t(){if(!o)return i}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MetadataService=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(7);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=".well-known/openid-configuration";e.MetadataService=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.JsonService;if(s(this,t),!e)throw i.Log.error("MetadataService: No settings passed to MetadataService"),new Error("settings");this._settings=e,this._jsonService=new r(["application/jwk-set+json"])}return t.prototype.resetSigningKeys=function t(){this._settings=this._settings||{},this._settings.signingKeys=void 0},t.prototype.getMetadata=function t(){var e=this;return this._settings.metadata?(i.Log.debug("MetadataService.getMetadata: Returning metadata from settings"),Promise.resolve(this._settings.metadata)):this.metadataUrl?(i.Log.debug("MetadataService.getMetadata: getting metadata from",this.metadataUrl),this._jsonService.getJson(this.metadataUrl).then((function(t){i.Log.debug("MetadataService.getMetadata: json received");var r=e._settings.metadataSeed||{};return e._settings.metadata=Object.assign({},r,t),e._settings.metadata}))):(i.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings"),Promise.reject(new Error("No authority or metadataUrl configured on settings")))},t.prototype.getIssuer=function t(){return this._getMetadataProperty("issuer")},t.prototype.getAuthorizationEndpoint=function t(){return this._getMetadataProperty("authorization_endpoint")},t.prototype.getUserInfoEndpoint=function t(){return this._getMetadataProperty("userinfo_endpoint")},t.prototype.getTokenEndpoint=function t(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._getMetadataProperty("token_endpoint",e)},t.prototype.getCheckSessionIframe=function t(){return this._getMetadataProperty("check_session_iframe",!0)},t.prototype.getEndSessionEndpoint=function t(){return this._getMetadataProperty("end_session_endpoint",!0)},t.prototype.getRevocationEndpoint=function t(){return this._getMetadataProperty("revocation_endpoint",!0)},t.prototype.getKeysEndpoint=function t(){return this._getMetadataProperty("jwks_uri",!0)},t.prototype._getMetadataProperty=function t(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return i.Log.debug("MetadataService.getMetadataProperty for: "+e),this.getMetadata().then((function(t){if(i.Log.debug("MetadataService.getMetadataProperty: metadata recieved"),void 0===t[e]){if(!0===r)return void i.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property "+e);throw i.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property "+e),new Error("Metadata does not contain property "+e)}return t[e]}))},t.prototype.getSigningKeys=function t(){var e=this;return this._settings.signingKeys?(i.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings"),Promise.resolve(this._settings.signingKeys)):this._getMetadataProperty("jwks_uri").then((function(t){return i.Log.debug("MetadataService.getSigningKeys: jwks_uri received",t),e._jsonService.getJson(t).then((function(t){if(i.Log.debug("MetadataService.getSigningKeys: key set received",t),!t.keys)throw i.Log.error("MetadataService.getSigningKeys: Missing keys on keyset"),new Error("Missing keys on keyset");return e._settings.signingKeys=t.keys,e._settings.signingKeys}))}))},n(t,[{key:"metadataUrl",get:function t(){return this._metadataUrl||(this._settings.metadataUrl?this._metadataUrl=this._settings.metadataUrl:(this._metadataUrl=this._settings.authority,this._metadataUrl&&this._metadataUrl.indexOf(a)<0&&("/"!==this._metadataUrl[this._metadataUrl.length-1]&&(this._metadataUrl+="/"),this._metadataUrl+=a))),this._metadataUrl}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UrlUtility=void 0;var n=r(0),i=r(1);e.UrlUtility=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.addQueryParam=function t(e,r,n){return e.indexOf("?")<0&&(e+="?"),"?"!==e[e.length-1]&&(e+="&"),e+=encodeURIComponent(r),e+="=",e+=encodeURIComponent(n)},t.parseUrlFragment=function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.Global;"string"!=typeof e&&(e=o.location.href);var s=e.lastIndexOf(r);s>=0&&(e=e.substr(s+1)),"?"===r&&(s=e.indexOf("#"))>=0&&(e=e.substr(0,s));for(var a,u={},c=/([^&=]+)=([^&]*)/g,h=0;a=c.exec(e);)if(u[decodeURIComponent(a[1])]=decodeURIComponent(a[2].replace(/\+/g," ")),h++>50)return n.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters",e),{error:"Response exceeded expected number of parameters"};for(var l in u)return u;return{}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JoseUtil=void 0;var n=r(26),i=function o(t){return t&&t.__esModule?t:{default:t}}(r(33));e.JoseUtil=(0,i.default)({jws:n.jws,KeyUtil:n.KeyUtil,X509:n.X509,crypto:n.crypto,hextob64u:n.hextob64u,b64tohex:n.b64tohex,AllowedSigningAlgs:n.AllowedSigningAlgs})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OidcClientSettings=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=r(0),s=r(23),a=r(6),u=r(24),c=r(2);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var l=".well-known/openid-configuration",f="id_token",g="openid",d="client_secret_post";e.OidcClientSettings=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.authority,i=e.metadataUrl,o=e.metadata,l=e.signingKeys,p=e.metadataSeed,v=e.client_id,y=e.client_secret,m=e.response_type,_=void 0===m?f:m,S=e.scope,b=void 0===S?g:S,w=e.redirect_uri,F=e.post_logout_redirect_uri,E=e.client_authentication,x=void 0===E?d:E,A=e.prompt,k=e.display,P=e.max_age,C=e.ui_locales,T=e.acr_values,R=e.resource,I=e.response_mode,D=e.filterProtocolClaims,L=void 0===D||D,N=e.loadUserInfo,U=void 0===N||N,B=e.staleStateAge,O=void 0===B?900:B,j=e.clockSkew,M=void 0===j?300:j,H=e.clockService,V=void 0===H?new s.ClockService:H,K=e.userInfoJwtIssuer,q=void 0===K?"OP":K,J=e.mergeClaims,W=void 0!==J&&J,z=e.stateStore,Y=void 0===z?new a.WebStorageStateStore:z,G=e.ResponseValidatorCtor,X=void 0===G?u.ResponseValidator:G,$=e.MetadataServiceCtor,Q=void 0===$?c.MetadataService:$,Z=e.extraQueryParams,tt=void 0===Z?{}:Z,et=e.extraTokenParams,rt=void 0===et?{}:et;h(this,t),this._authority=r,this._metadataUrl=i,this._metadata=o,this._metadataSeed=p,this._signingKeys=l,this._client_id=v,this._client_secret=y,this._response_type=_,this._scope=b,this._redirect_uri=w,this._post_logout_redirect_uri=F,this._client_authentication=x,this._prompt=A,this._display=k,this._max_age=P,this._ui_locales=C,this._acr_values=T,this._resource=R,this._response_mode=I,this._filterProtocolClaims=!!L,this._loadUserInfo=!!U,this._staleStateAge=O,this._clockSkew=M,this._clockService=V,this._userInfoJwtIssuer=q,this._mergeClaims=!!W,this._stateStore=Y,this._validator=new X(this),this._metadataService=new Q(this),this._extraQueryParams="object"===(void 0===tt?"undefined":n(tt))?tt:{},this._extraTokenParams="object"===(void 0===rt?"undefined":n(rt))?rt:{}}return t.prototype.getEpochTime=function t(){return this._clockService.getEpochTime()},i(t,[{key:"client_id",get:function t(){return this._client_id},set:function t(e){if(this._client_id)throw o.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned."),new Error("client_id has already been assigned.");this._client_id=e}},{key:"client_secret",get:function t(){return this._client_secret}},{key:"response_type",get:function t(){return this._response_type}},{key:"scope",get:function t(){return this._scope}},{key:"redirect_uri",get:function t(){return this._redirect_uri}},{key:"post_logout_redirect_uri",get:function t(){return this._post_logout_redirect_uri}},{key:"client_authentication",get:function t(){return this._client_authentication}},{key:"prompt",get:function t(){return this._prompt}},{key:"display",get:function t(){return this._display}},{key:"max_age",get:function t(){return this._max_age}},{key:"ui_locales",get:function t(){return this._ui_locales}},{key:"acr_values",get:function t(){return this._acr_values}},{key:"resource",get:function t(){return this._resource}},{key:"response_mode",get:function t(){return this._response_mode}},{key:"authority",get:function t(){return this._authority},set:function t(e){if(this._authority)throw o.Log.error("OidcClientSettings.set_authority: authority has already been assigned."),new Error("authority has already been assigned.");this._authority=e}},{key:"metadataUrl",get:function t(){return this._metadataUrl||(this._metadataUrl=this.authority,this._metadataUrl&&this._metadataUrl.indexOf(l)<0&&("/"!==this._metadataUrl[this._metadataUrl.length-1]&&(this._metadataUrl+="/"),this._metadataUrl+=l)),this._metadataUrl}},{key:"metadata",get:function t(){return this._metadata},set:function t(e){this._metadata=e}},{key:"metadataSeed",get:function t(){return this._metadataSeed},set:function t(e){this._metadataSeed=e}},{key:"signingKeys",get:function t(){return this._signingKeys},set:function t(e){this._signingKeys=e}},{key:"filterProtocolClaims",get:function t(){return this._filterProtocolClaims}},{key:"loadUserInfo",get:function t(){return this._loadUserInfo}},{key:"staleStateAge",get:function t(){return this._staleStateAge}},{key:"clockSkew",get:function t(){return this._clockSkew}},{key:"userInfoJwtIssuer",get:function t(){return this._userInfoJwtIssuer}},{key:"mergeClaims",get:function t(){return this._mergeClaims}},{key:"stateStore",get:function t(){return this._stateStore}},{key:"validator",get:function t(){return this._validator}},{key:"metadataService",get:function t(){return this._metadataService}},{key:"extraQueryParams",get:function t(){return this._extraQueryParams},set:function t(e){"object"===(void 0===e?"undefined":n(e))?this._extraQueryParams=e:this._extraQueryParams={}}},{key:"extraTokenParams",get:function t(){return this._extraTokenParams},set:function t(e){"object"===(void 0===e?"undefined":n(e))?this._extraTokenParams=e:this._extraTokenParams={}}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WebStorageStateStore=void 0;var n=r(0),i=r(1);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.WebStorageStateStore=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.prefix,n=void 0===r?"oidc.":r,s=e.store,a=void 0===s?i.Global.localStorage:s;o(this,t),this._store=a,this._prefix=n}return t.prototype.set=function t(e,r){return n.Log.debug("WebStorageStateStore.set",e),e=this._prefix+e,this._store.setItem(e,r),Promise.resolve()},t.prototype.get=function t(e){n.Log.debug("WebStorageStateStore.get",e),e=this._prefix+e;var r=this._store.getItem(e);return Promise.resolve(r)},t.prototype.remove=function t(e){n.Log.debug("WebStorageStateStore.remove",e),e=this._prefix+e;var r=this._store.getItem(e);return this._store.removeItem(e),Promise.resolve(r)},t.prototype.getAllKeys=function t(){n.Log.debug("WebStorageStateStore.getAllKeys");for(var e=[],r=0;r<this._store.length;r++){var i=this._store.key(r);0===i.indexOf(this._prefix)&&e.push(i.substr(this._prefix.length))}return Promise.resolve(e)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JsonService=void 0;var n=r(0),i=r(1);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.JsonService=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.Global.XMLHttpRequest,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;o(this,t),e&&Array.isArray(e)?this._contentTypes=e.slice():this._contentTypes=[],this._contentTypes.push("application/json"),n&&this._contentTypes.push("application/jwt"),this._XMLHttpRequest=r,this._jwtHandler=n}return t.prototype.getJson=function t(e,r){var i=this;if(!e)throw n.Log.error("JsonService.getJson: No url passed"),new Error("url");return n.Log.debug("JsonService.getJson, url: ",e),new Promise((function(t,o){var s=new i._XMLHttpRequest;s.open("GET",e);var a=i._contentTypes,u=i._jwtHandler;s.onload=function(){if(n.Log.debug("JsonService.getJson: HTTP response received, status",s.status),200===s.status){var r=s.getResponseHeader("Content-Type");if(r){var i=a.find((function(t){if(r.startsWith(t))return!0}));if("application/jwt"==i)return void u(s).then(t,o);if(i)try{return void t(JSON.parse(s.responseText))}catch(t){return n.Log.error("JsonService.getJson: Error parsing JSON response",t.message),void o(t)}}o(Error("Invalid response Content-Type: "+r+", from URL: "+e))}else o(Error(s.statusText+" ("+s.status+")"))},s.onerror=function(){n.Log.error("JsonService.getJson: network error"),o(Error("Network Error"))},r&&(n.Log.debug("JsonService.getJson: token passed, setting Authorization header"),s.setRequestHeader("Authorization","Bearer "+r)),s.send()}))},t.prototype.postForm=function t(e,r,i){var o=this;if(!e)throw n.Log.error("JsonService.postForm: No url passed"),new Error("url");return n.Log.debug("JsonService.postForm, url: ",e),new Promise((function(t,s){var a=new o._XMLHttpRequest;a.open("POST",e);var u=o._contentTypes;a.onload=function(){if(n.Log.debug("JsonService.postForm: HTTP response received, status",a.status),200!==a.status){if(400===a.status)if(i=a.getResponseHeader("Content-Type"))if(u.find((function(t){if(i.startsWith(t))return!0})))try{var r=JSON.parse(a.responseText);if(r&&r.error)return n.Log.error("JsonService.postForm: Error from server: ",r.error),void s(new Error(r.error))}catch(t){return n.Log.error("JsonService.postForm: Error parsing JSON response",t.message),void s(t)}s(Error(a.statusText+" ("+a.status+")"))}else{var i;if((i=a.getResponseHeader("Content-Type"))&&u.find((function(t){if(i.startsWith(t))return!0})))try{return void t(JSON.parse(a.responseText))}catch(t){return n.Log.error("JsonService.postForm: Error parsing JSON response",t.message),void s(t)}s(Error("Invalid response Content-Type: "+i+", from URL: "+e))}},a.onerror=function(){n.Log.error("JsonService.postForm: network error"),s(Error("Network Error"))};var c="";for(var h in r){var l=r[h];l&&(c.length>0&&(c+="&"),c+=encodeURIComponent(h),c+="=",c+=encodeURIComponent(l))}a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),void 0!==i&&a.setRequestHeader("Authorization","Basic "+btoa(i)),a.send(c)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninRequest=void 0;var n=r(0),i=r(3),o=r(13);e.SigninRequest=function(){function t(e){var r=e.url,s=e.client_id,a=e.redirect_uri,u=e.response_type,c=e.scope,h=e.authority,l=e.data,f=e.prompt,g=e.display,d=e.max_age,p=e.ui_locales,v=e.id_token_hint,y=e.login_hint,m=e.acr_values,_=e.resource,S=e.response_mode,b=e.request,w=e.request_uri,F=e.extraQueryParams,E=e.request_type,x=e.client_secret,A=e.extraTokenParams,k=e.skipUserInfo;if(function P(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!r)throw n.Log.error("SigninRequest.ctor: No url passed"),new Error("url");if(!s)throw n.Log.error("SigninRequest.ctor: No client_id passed"),new Error("client_id");if(!a)throw n.Log.error("SigninRequest.ctor: No redirect_uri passed"),new Error("redirect_uri");if(!u)throw n.Log.error("SigninRequest.ctor: No response_type passed"),new Error("response_type");if(!c)throw n.Log.error("SigninRequest.ctor: No scope passed"),new Error("scope");if(!h)throw n.Log.error("SigninRequest.ctor: No authority passed"),new Error("authority");var C=t.isOidc(u),T=t.isCode(u);S||(S=t.isCode(u)?"query":null),this.state=new o.SigninState({nonce:C,data:l,client_id:s,authority:h,redirect_uri:a,code_verifier:T,request_type:E,response_mode:S,client_secret:x,scope:c,extraTokenParams:A,skipUserInfo:k}),r=i.UrlUtility.addQueryParam(r,"client_id",s),r=i.UrlUtility.addQueryParam(r,"redirect_uri",a),r=i.UrlUtility.addQueryParam(r,"response_type",u),r=i.UrlUtility.addQueryParam(r,"scope",c),r=i.UrlUtility.addQueryParam(r,"state",this.state.id),C&&(r=i.UrlUtility.addQueryParam(r,"nonce",this.state.nonce)),T&&(r=i.UrlUtility.addQueryParam(r,"code_challenge",this.state.code_challenge),r=i.UrlUtility.addQueryParam(r,"code_challenge_method","S256"));var R={prompt:f,display:g,max_age:d,ui_locales:p,id_token_hint:v,login_hint:y,acr_values:m,resource:_,request:b,request_uri:w,response_mode:S};for(var I in R)R[I]&&(r=i.UrlUtility.addQueryParam(r,I,R[I]));for(var D in F)r=i.UrlUtility.addQueryParam(r,D,F[D]);this.url=r}return t.isOidc=function t(e){return!!e.split(/\s+/g).filter((function(t){return"id_token"===t}))[0]},t.isOAuth=function t(e){return!!e.split(/\s+/g).filter((function(t){return"token"===t}))[0]},t.isCode=function t(e){return!!e.split(/\s+/g).filter((function(t){return"code"===t}))[0]},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.State=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=function s(t){return t&&t.__esModule?t:{default:t}}(r(14));function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.State=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.id,n=e.data,i=e.created,s=e.request_type;a(this,t),this._id=r||(0,o.default)(),this._data=n,this._created="number"==typeof i&&i>0?i:parseInt(Date.now()/1e3),this._request_type=s}return t.prototype.toStorageString=function t(){return i.Log.debug("State.toStorageString"),JSON.stringify({id:this.id,data:this.data,created:this.created,request_type:this.request_type})},t.fromStorageString=function e(r){return i.Log.debug("State.fromStorageString"),new t(JSON.parse(r))},t.clearStaleState=function e(r,n){var o=Date.now()/1e3-n;return r.getAllKeys().then((function(e){i.Log.debug("State.clearStaleState: got keys",e);for(var n=[],s=function s(a){var c=e[a];u=r.get(c).then((function(e){var n=!1;if(e)try{var s=t.fromStorageString(e);i.Log.debug("State.clearStaleState: got item from key: ",c,s.created),s.created<=o&&(n=!0)}catch(t){i.Log.error("State.clearStaleState: Error parsing state for key",c,t.message),n=!0}else i.Log.debug("State.clearStaleState: no item in storage for key: ",c),n=!0;if(n)return i.Log.debug("State.clearStaleState: removed item for key: ",c),r.remove(c)})),n.push(u)},a=0;a<e.length;a++){var u;s(a)}return i.Log.debug("State.clearStaleState: waiting on promise count:",n.length),Promise.all(n)}))},n(t,[{key:"id",get:function t(){return this._id}},{key:"data",get:function t(){return this._data}},{key:"created",get:function t(){return this._created}},{key:"request_type",get:function t(){return this._request_type}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OidcClient=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(5),s=r(12),a=r(8),u=r(34),c=r(35),h=r(36),l=r(13),f=r(9);function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.OidcClient=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g(this,t),e instanceof o.OidcClientSettings?this._settings=e:this._settings=new o.OidcClientSettings(e)}return t.prototype.createSigninRequest=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.response_type,o=r.scope,s=r.redirect_uri,u=r.data,c=r.state,h=r.prompt,l=r.display,f=r.max_age,g=r.ui_locales,d=r.id_token_hint,p=r.login_hint,v=r.acr_values,y=r.resource,m=r.request,_=r.request_uri,S=r.response_mode,b=r.extraQueryParams,w=r.extraTokenParams,F=r.request_type,E=r.skipUserInfo,x=arguments[1];i.Log.debug("OidcClient.createSigninRequest");var A=this._settings.client_id;n=n||this._settings.response_type,o=o||this._settings.scope,s=s||this._settings.redirect_uri,h=h||this._settings.prompt,l=l||this._settings.display,f=f||this._settings.max_age,g=g||this._settings.ui_locales,v=v||this._settings.acr_values,y=y||this._settings.resource,S=S||this._settings.response_mode,b=b||this._settings.extraQueryParams,w=w||this._settings.extraTokenParams;var k=this._settings.authority;return a.SigninRequest.isCode(n)&&"code"!==n?Promise.reject(new Error("OpenID Connect hybrid flow is not supported")):this._metadataService.getAuthorizationEndpoint().then((function(t){i.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint",t);var r=new a.SigninRequest({url:t,client_id:A,redirect_uri:s,response_type:n,scope:o,data:u||c,authority:k,prompt:h,display:l,max_age:f,ui_locales:g,id_token_hint:d,login_hint:p,acr_values:v,resource:y,request:m,request_uri:_,extraQueryParams:b,extraTokenParams:w,request_type:F,response_mode:S,client_secret:e._settings.client_secret,skipUserInfo:E}),P=r.state;return(x=x||e._stateStore).set(P.id,P.toStorageString()).then((function(){return r}))}))},t.prototype.readSigninResponseState=function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];i.Log.debug("OidcClient.readSigninResponseState");var o="query"===this._settings.response_mode||!this._settings.response_mode&&a.SigninRequest.isCode(this._settings.response_type),s=o?"?":"#",c=new u.SigninResponse(e,s);if(!c.state)return i.Log.error("OidcClient.readSigninResponseState: No state in response"),Promise.reject(new Error("No state in response"));r=r||this._stateStore;var h=n?r.remove.bind(r):r.get.bind(r);return h(c.state).then((function(t){if(!t)throw i.Log.error("OidcClient.readSigninResponseState: No matching state found in storage"),new Error("No matching state found in storage");return{state:l.SigninState.fromStorageString(t),response:c}}))},t.prototype.processSigninResponse=function t(e,r){var n=this;return i.Log.debug("OidcClient.processSigninResponse"),this.readSigninResponseState(e,r,!0).then((function(t){var e=t.state,r=t.response;return i.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response"),n._validator.validateSigninResponse(e,r)}))},t.prototype.createSignoutRequest=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.id_token_hint,o=r.data,s=r.state,a=r.post_logout_redirect_uri,u=r.extraQueryParams,h=r.request_type,l=arguments[1];return i.Log.debug("OidcClient.createSignoutRequest"),a=a||this._settings.post_logout_redirect_uri,u=u||this._settings.extraQueryParams,this._metadataService.getEndSessionEndpoint().then((function(t){if(!t)throw i.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned"),new Error("no end session endpoint");i.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint",t);var r=new c.SignoutRequest({url:t,id_token_hint:n,post_logout_redirect_uri:a,data:o||s,extraQueryParams:u,request_type:h}),f=r.state;return f&&(i.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist"),(l=l||e._stateStore).set(f.id,f.toStorageString())),r}))},t.prototype.readSignoutResponseState=function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];i.Log.debug("OidcClient.readSignoutResponseState");var o=new h.SignoutResponse(e);if(!o.state)return i.Log.debug("OidcClient.readSignoutResponseState: No state in response"),o.error?(i.Log.warn("OidcClient.readSignoutResponseState: Response was error: ",o.error),Promise.reject(new s.ErrorResponse(o))):Promise.resolve({state:void 0,response:o});var a=o.state;r=r||this._stateStore;var u=n?r.remove.bind(r):r.get.bind(r);return u(a).then((function(t){if(!t)throw i.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage"),new Error("No matching state found in storage");return{state:f.State.fromStorageString(t),response:o}}))},t.prototype.processSignoutResponse=function t(e,r){var n=this;return i.Log.debug("OidcClient.processSignoutResponse"),this.readSignoutResponseState(e,r,!0).then((function(t){var e=t.state,r=t.response;return e?(i.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response"),n._validator.validateSignoutResponse(e,r)):(i.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response"),r)}))},t.prototype.clearStaleState=function t(e){return i.Log.debug("OidcClient.clearStaleState"),e=e||this._stateStore,f.State.clearStaleState(e,this.settings.staleStateAge)},n(t,[{key:"_stateStore",get:function t(){return this.settings.stateStore}},{key:"_validator",get:function t(){return this.settings.validator}},{key:"_metadataService",get:function t(){return this.settings.metadataService}},{key:"settings",get:function t(){return this._settings}},{key:"metadataService",get:function t(){return this._metadataService}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenClient=void 0;var n=r(7),i=r(2),o=r(0);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.TokenClient=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.JsonService,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService;if(s(this,t),!e)throw o.Log.error("TokenClient.ctor: No settings passed"),new Error("settings");this._settings=e,this._jsonService=new r,this._metadataService=new a(this._settings)}return t.prototype.exchangeCode=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).grant_type=r.grant_type||"authorization_code",r.client_id=r.client_id||this._settings.client_id,r.client_secret=r.client_secret||this._settings.client_secret,r.redirect_uri=r.redirect_uri||this._settings.redirect_uri;var n=void 0,i=r._client_authentication||this._settings._client_authentication;return delete r._client_authentication,r.code?r.redirect_uri?r.code_verifier?r.client_id?r.client_secret||"client_secret_basic"!=i?("client_secret_basic"==i&&(n=r.client_id+":"+r.client_secret,delete r.client_id,delete r.client_secret),this._metadataService.getTokenEndpoint(!1).then((function(t){return o.Log.debug("TokenClient.exchangeCode: Received token endpoint"),e._jsonService.postForm(t,r,n).then((function(t){return o.Log.debug("TokenClient.exchangeCode: response received"),t}))}))):(o.Log.error("TokenClient.exchangeCode: No client_secret passed"),Promise.reject(new Error("A client_secret is required"))):(o.Log.error("TokenClient.exchangeCode: No client_id passed"),Promise.reject(new Error("A client_id is required"))):(o.Log.error("TokenClient.exchangeCode: No code_verifier passed"),Promise.reject(new Error("A code_verifier is required"))):(o.Log.error("TokenClient.exchangeCode: No redirect_uri passed"),Promise.reject(new Error("A redirect_uri is required"))):(o.Log.error("TokenClient.exchangeCode: No code passed"),Promise.reject(new Error("A code is required")))},t.prototype.exchangeRefreshToken=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).grant_type=r.grant_type||"refresh_token",r.client_id=r.client_id||this._settings.client_id,r.client_secret=r.client_secret||this._settings.client_secret;var n=void 0,i=r._client_authentication||this._settings._client_authentication;return delete r._client_authentication,r.refresh_token?r.client_id?("client_secret_basic"==i&&(n=r.client_id+":"+r.client_secret,delete r.client_id,delete r.client_secret),this._metadataService.getTokenEndpoint(!1).then((function(t){return o.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint"),e._jsonService.postForm(t,r,n).then((function(t){return o.Log.debug("TokenClient.exchangeRefreshToken: response received"),t}))}))):(o.Log.error("TokenClient.exchangeRefreshToken: No client_id passed"),Promise.reject(new Error("A client_id is required"))):(o.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed"),Promise.reject(new Error("A refresh_token is required")))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorResponse=void 0;var n=r(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.ErrorResponse=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=r.error,a=r.error_description,u=r.error_uri,c=r.state,h=r.session_state;if(i(this,e),!s)throw n.Log.error("No error passed to ErrorResponse"),new Error("error");var l=o(this,t.call(this,a||s));return l.name="ErrorResponse",l.error=s,l.error_description=a,l.error_uri=u,l.state=c,l.session_state=h,l}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(Error)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninState=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(9),s=r(4),a=function u(t){return t&&t.__esModule?t:{default:t}}(r(14));function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.SigninState=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.nonce,i=r.authority,o=r.client_id,u=r.redirect_uri,l=r.code_verifier,f=r.response_mode,g=r.client_secret,d=r.scope,p=r.extraTokenParams,v=r.skipUserInfo;c(this,e);var y=h(this,t.call(this,arguments[0]));if(!0===n?y._nonce=(0,a.default)():n&&(y._nonce=n),!0===l?y._code_verifier=(0,a.default)()+(0,a.default)()+(0,a.default)():l&&(y._code_verifier=l),y.code_verifier){var m=s.JoseUtil.hashString(y.code_verifier,"SHA256");y._code_challenge=s.JoseUtil.hexToBase64Url(m)}return y._redirect_uri=u,y._authority=i,y._client_id=o,y._response_mode=f,y._client_secret=g,y._scope=d,y._extraTokenParams=p,y._skipUserInfo=v,y}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.toStorageString=function t(){return i.Log.debug("SigninState.toStorageString"),JSON.stringify({id:this.id,data:this.data,created:this.created,request_type:this.request_type,nonce:this.nonce,code_verifier:this.code_verifier,redirect_uri:this.redirect_uri,authority:this.authority,client_id:this.client_id,response_mode:this.response_mode,client_secret:this.client_secret,scope:this.scope,extraTokenParams:this.extraTokenParams,skipUserInfo:this.skipUserInfo})},e.fromStorageString=function t(r){return i.Log.debug("SigninState.fromStorageString"),new e(JSON.parse(r))},n(e,[{key:"nonce",get:function t(){return this._nonce}},{key:"authority",get:function t(){return this._authority}},{key:"client_id",get:function t(){return this._client_id}},{key:"redirect_uri",get:function t(){return this._redirect_uri}},{key:"code_verifier",get:function t(){return this._code_verifier}},{key:"code_challenge",get:function t(){return this._code_challenge}},{key:"response_mode",get:function t(){return this._response_mode}},{key:"client_secret",get:function t(){return this._client_secret}},{key:"scope",get:function t(){return this._scope}},{key:"extraTokenParams",get:function t(){return this._extraTokenParams}},{key:"skipUserInfo",get:function t(){return this._skipUserInfo}}]),e}(o.State)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function n(){return("undefined"!=i&&null!==i&&void 0!==i.getRandomValues?o:s)().replace(/-/g,"")};var i="undefined"!=typeof window?window.crypto||window.msCrypto:null;function o(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^i.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)}))}function s(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^16*Math.random()>>t/4).toString(16)}))}t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.User=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.User=function(){function t(e){var r=e.id_token,n=e.session_state,i=e.access_token,o=e.refresh_token,s=e.token_type,a=e.scope,u=e.profile,c=e.expires_at,h=e.state;!function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id_token=r,this.session_state=n,this.access_token=i,this.refresh_token=o,this.token_type=s,this.scope=a,this.profile=u,this.expires_at=c,this.state=h}return t.prototype.toStorageString=function t(){return i.Log.debug("User.toStorageString"),JSON.stringify({id_token:this.id_token,session_state:this.session_state,access_token:this.access_token,refresh_token:this.refresh_token,token_type:this.token_type,scope:this.scope,profile:this.profile,expires_at:this.expires_at})},t.fromStorageString=function e(r){return i.Log.debug("User.fromStorageString"),new t(JSON.parse(r))},n(t,[{key:"expires_in",get:function t(){if(this.expires_at){var e=parseInt(Date.now()/1e3);return this.expires_at-e}},set:function t(e){var r=parseInt(e);if("number"==typeof r&&r>0){var n=parseInt(Date.now()/1e3);this.expires_at=n+r}}},{key:"expired",get:function t(){var e=this.expires_in;if(void 0!==e)return e<=0}},{key:"scopes",get:function t(){return(this.scope||"").split(" ")}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AccessTokenEvents=void 0;var n=r(0),i=r(46);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.AccessTokenEvents=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.accessTokenExpiringNotificationTime,n=void 0===r?60:r,s=e.accessTokenExpiringTimer,a=void 0===s?new i.Timer("Access token expiring"):s,u=e.accessTokenExpiredTimer,c=void 0===u?new i.Timer("Access token expired"):u;o(this,t),this._accessTokenExpiringNotificationTime=n,this._accessTokenExpiring=a,this._accessTokenExpired=c}return t.prototype.load=function t(e){if(e.access_token&&void 0!==e.expires_in){var r=e.expires_in;if(n.Log.debug("AccessTokenEvents.load: access token present, remaining duration:",r),r>0){var i=r-this._accessTokenExpiringNotificationTime;i<=0&&(i=1),n.Log.debug("AccessTokenEvents.load: registering expiring timer in:",i),this._accessTokenExpiring.init(i)}else n.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration."),this._accessTokenExpiring.cancel();var o=r+1;n.Log.debug("AccessTokenEvents.load: registering expired timer in:",o),this._accessTokenExpired.init(o)}else this._accessTokenExpiring.cancel(),this._accessTokenExpired.cancel()},t.prototype.unload=function t(){n.Log.debug("AccessTokenEvents.unload: canceling existing access token timers"),this._accessTokenExpiring.cancel(),this._accessTokenExpired.cancel()},t.prototype.addAccessTokenExpiring=function t(e){this._accessTokenExpiring.addHandler(e)},t.prototype.removeAccessTokenExpiring=function t(e){this._accessTokenExpiring.removeHandler(e)},t.prototype.addAccessTokenExpired=function t(e){this._accessTokenExpired.addHandler(e)},t.prototype.removeAccessTokenExpired=function t(e){this._accessTokenExpired.removeHandler(e)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Event=void 0;var n=r(0);e.Event=function(){function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e,this._callbacks=[]}return t.prototype.addHandler=function t(e){this._callbacks.push(e)},t.prototype.removeHandler=function t(e){var r=this._callbacks.findIndex((function(t){return t===e}));r>=0&&this._callbacks.splice(r,1)},t.prototype.raise=function t(){n.Log.debug("Event: Raising event: "+this._name);for(var e=0;e<this._callbacks.length;e++){var r;(r=this._callbacks)[e].apply(r,arguments)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SessionMonitor=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(19),s=r(1);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SessionMonitor=function(){function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.CheckSessionIFrame,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.Global.timer;if(a(this,t),!e)throw i.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor"),new Error("userManager");this._userManager=e,this._CheckSessionIFrameCtor=n,this._timer=u,this._userManager.events.addUserLoaded(this._start.bind(this)),this._userManager.events.addUserUnloaded(this._stop.bind(this)),Promise.resolve(this._userManager.getUser().then((function(t){t?r._start(t):r._settings.monitorAnonymousSession&&r._userManager.querySessionStatus().then((function(t){var e={session_state:t.session_state};t.sub&&t.sid&&(e.profile={sub:t.sub,sid:t.sid}),r._start(e)})).catch((function(t){i.Log.error("SessionMonitor ctor: error from querySessionStatus:",t.message)}))})).catch((function(t){i.Log.error("SessionMonitor ctor: error from getUser:",t.message)})))}return t.prototype._start=function t(e){var r=this,n=e.session_state;n&&(e.profile?(this._sub=e.profile.sub,this._sid=e.profile.sid,i.Log.debug("SessionMonitor._start: session_state:",n,", sub:",this._sub)):(this._sub=void 0,this._sid=void 0,i.Log.debug("SessionMonitor._start: session_state:",n,", anonymous user")),this._checkSessionIFrame?this._checkSessionIFrame.start(n):this._metadataService.getCheckSessionIframe().then((function(t){if(t){i.Log.debug("SessionMonitor._start: Initializing check session iframe");var e=r._client_id,o=r._checkSessionInterval,s=r._stopCheckSessionOnError;r._checkSessionIFrame=new r._CheckSessionIFrameCtor(r._callback.bind(r),e,t,o,s),r._checkSessionIFrame.load().then((function(){r._checkSessionIFrame.start(n)}))}else i.Log.warn("SessionMonitor._start: No check session iframe found in the metadata")})).catch((function(t){i.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:",t.message)})))},t.prototype._stop=function t(){var e=this;if(this._sub=void 0,this._sid=void 0,this._checkSessionIFrame&&(i.Log.debug("SessionMonitor._stop"),this._checkSessionIFrame.stop()),this._settings.monitorAnonymousSession)var r=this._timer.setInterval((function(){e._timer.clearInterval(r),e._userManager.querySessionStatus().then((function(t){var r={session_state:t.session_state};t.sub&&t.sid&&(r.profile={sub:t.sub,sid:t.sid}),e._start(r)})).catch((function(t){i.Log.error("SessionMonitor: error from querySessionStatus:",t.message)}))}),1e3)},t.prototype._callback=function t(){var e=this;this._userManager.querySessionStatus().then((function(t){var r=!0;t?t.sub===e._sub?(r=!1,e._checkSessionIFrame.start(t.session_state),t.sid===e._sid?i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:",t.session_state):(i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:",t.session_state),e._userManager.events._raiseUserSessionChanged())):i.Log.debug("SessionMonitor._callback: Different subject signed into OP:",t.sub):i.Log.debug("SessionMonitor._callback: Subject no longer signed into OP"),r&&(e._sub?(i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event"),e._userManager.events._raiseUserSignedOut()):(i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event"),e._userManager.events._raiseUserSignedIn()))})).catch((function(t){e._sub&&(i.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event",t.message),e._userManager.events._raiseUserSignedOut())}))},n(t,[{key:"_settings",get:function t(){return this._userManager.settings}},{key:"_metadataService",get:function t(){return this._userManager.metadataService}},{key:"_client_id",get:function t(){return this._settings.client_id}},{key:"_checkSessionInterval",get:function t(){return this._settings.checkSessionInterval}},{key:"_stopCheckSessionOnError",get:function t(){return this._settings.stopCheckSessionOnError}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CheckSessionIFrame=void 0;var n=r(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.CheckSessionIFrame=function(){function t(e,r,n,o){var s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];i(this,t),this._callback=e,this._client_id=r,this._url=n,this._interval=o||2e3,this._stopOnError=s;var a=n.indexOf("/",n.indexOf("//")+2);this._frame_origin=n.substr(0,a),this._frame=window.document.createElement("iframe"),this._frame.style.visibility="hidden",this._frame.style.position="absolute",this._frame.style.display="none",this._frame.width=0,this._frame.height=0,this._frame.src=n}return t.prototype.load=function t(){var e=this;return new Promise((function(t){e._frame.onload=function(){t()},window.document.body.appendChild(e._frame),e._boundMessageEvent=e._message.bind(e),window.addEventListener("message",e._boundMessageEvent,!1)}))},t.prototype._message=function t(e){e.origin===this._frame_origin&&e.source===this._frame.contentWindow&&("error"===e.data?(n.Log.error("CheckSessionIFrame: error message from check session op iframe"),this._stopOnError&&this.stop()):"changed"===e.data?(n.Log.debug("CheckSessionIFrame: changed message from check session op iframe"),this.stop(),this._callback()):n.Log.debug("CheckSessionIFrame: "+e.data+" message from check session op iframe"))},t.prototype.start=function t(e){var r=this;if(this._session_state!==e){n.Log.debug("CheckSessionIFrame.start"),this.stop(),this._session_state=e;var i=function t(){r._frame.contentWindow.postMessage(r._client_id+" "+r._session_state,r._frame_origin)};i(),this._timer=window.setInterval(i,this._interval)}},t.prototype.stop=function t(){this._session_state=null,this._timer&&(n.Log.debug("CheckSessionIFrame.stop"),window.clearInterval(this._timer),this._timer=null)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenRevocationClient=void 0;var n=r(0),i=r(2),o=r(1);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a="access_token",u="refresh_token";e.TokenRevocationClient=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Global.XMLHttpRequest,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService;if(s(this,t),!e)throw n.Log.error("TokenRevocationClient.ctor: No settings provided"),new Error("No settings provided.");this._settings=e,this._XMLHttpRequestCtor=r,this._metadataService=new a(this._settings)}return t.prototype.revoke=function t(e,r){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"access_token";if(!e)throw n.Log.error("TokenRevocationClient.revoke: No token provided"),new Error("No token provided.");if(o!==a&&o!=u)throw n.Log.error("TokenRevocationClient.revoke: Invalid token type"),new Error("Invalid token type.");return this._metadataService.getRevocationEndpoint().then((function(t){if(t){n.Log.debug("TokenRevocationClient.revoke: Revoking "+o);var s=i._settings.client_id,a=i._settings.client_secret;return i._revoke(t,s,a,e,o)}if(r)throw n.Log.error("TokenRevocationClient.revoke: Revocation not supported"),new Error("Revocation not supported")}))},t.prototype._revoke=function t(e,r,i,o,s){var a=this;return new Promise((function(t,u){var c=new a._XMLHttpRequestCtor;c.open("POST",e),c.onload=function(){n.Log.debug("TokenRevocationClient.revoke: HTTP response received, status",c.status),200===c.status?t():u(Error(c.statusText+" ("+c.status+")"))},c.onerror=function(){n.Log.debug("TokenRevocationClient.revoke: Network Error."),u("Network Error")};var h="client_id="+encodeURIComponent(r);i&&(h+="&client_secret="+encodeURIComponent(i)),h+="&token_type_hint="+encodeURIComponent(s),h+="&token="+encodeURIComponent(o),c.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),c.send(h)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaPopupWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.CordovaPopupWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e})),this.features=e.popupWindowFeatures||"location=no,toolbar=no,zoom=no",this.target=e.popupWindowTarget||"_blank",this.redirect_uri=e.startUrl,i.Log.debug("CordovaPopupWindow.ctor: redirect_uri: "+this.redirect_uri)}return t.prototype._isInAppBrowserInstalled=function t(e){return["cordova-plugin-inappbrowser","cordova-plugin-inappbrowser.inappbrowser","org.apache.cordova.inappbrowser"].some((function(t){return e.hasOwnProperty(t)}))},t.prototype.navigate=function t(e){if(e&&e.url){if(!window.cordova)return this._error("cordova is undefined");var r=window.cordova.require("cordova/plugin_list").metadata;if(!1===this._isInAppBrowserInstalled(r))return this._error("InAppBrowser plugin not found");this._popup=cordova.InAppBrowser.open(e.url,this.target,this.features),this._popup?(i.Log.debug("CordovaPopupWindow.navigate: popup successfully created"),this._exitCallbackEvent=this._exitCallback.bind(this),this._loadStartCallbackEvent=this._loadStartCallback.bind(this),this._popup.addEventListener("exit",this._exitCallbackEvent,!1),this._popup.addEventListener("loadstart",this._loadStartCallbackEvent,!1)):this._error("Error opening popup window")}else this._error("No url provided");return this.promise},t.prototype._loadStartCallback=function t(e){0===e.url.indexOf(this.redirect_uri)&&this._success({url:e.url})},t.prototype._exitCallback=function t(e){this._error(e)},t.prototype._success=function t(e){this._cleanup(),i.Log.debug("CordovaPopupWindow: Successful response from cordova popup window"),this._resolve(e)},t.prototype._error=function t(e){this._cleanup(),i.Log.error(e),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup()},t.prototype._cleanup=function t(){this._popup&&(i.Log.debug("CordovaPopupWindow: cleaning up popup"),this._popup.removeEventListener("exit",this._exitCallbackEvent,!1),this._popup.removeEventListener("loadstart",this._loadStartCallbackEvent,!1),this._popup.close()),this._popup=null},n(t,[{key:"promise",get:function t(){return this._promise}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),i=r(10),o=r(5),s=r(6),a=r(37),u=r(38),c=r(16),h=r(2),l=r(48),f=r(49),g=r(19),d=r(20),p=r(18),v=r(1),y=r(15),m=r(50);e.default={Version:m.Version,Log:n.Log,OidcClient:i.OidcClient,OidcClientSettings:o.OidcClientSettings,WebStorageStateStore:s.WebStorageStateStore,InMemoryWebStorage:a.InMemoryWebStorage,UserManager:u.UserManager,AccessTokenEvents:c.AccessTokenEvents,MetadataService:h.MetadataService,CordovaPopupNavigator:l.CordovaPopupNavigator,CordovaIFrameNavigator:f.CordovaIFrameNavigator,CheckSessionIFrame:g.CheckSessionIFrame,TokenRevocationClient:d.TokenRevocationClient,SessionMonitor:p.SessionMonitor,Global:v.Global,User:y.User},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ClockService=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.getEpochTime=function t(){return Promise.resolve(Date.now()/1e3|0)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ResponseValidator=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(0),o=r(2),s=r(25),a=r(11),u=r(12),c=r(4);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var l=["nonce","at_hash","iat","nbf","exp","aud","iss","c_hash"];e.ResponseValidator=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.MetadataService,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.UserInfoService,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c.JoseUtil,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:a.TokenClient;if(h(this,t),!e)throw i.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator"),new Error("settings");this._settings=e,this._metadataService=new r(this._settings),this._userInfoService=new n(this._settings),this._joseUtil=u,this._tokenClient=new l(this._settings)}return t.prototype.validateSigninResponse=function t(e,r){var n=this;return i.Log.debug("ResponseValidator.validateSigninResponse"),this._processSigninParams(e,r).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: state processed"),n._validateTokens(e,t).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: tokens validated"),n._processClaims(e,t).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: claims processed"),t}))}))}))},t.prototype.validateSignoutResponse=function t(e,r){return e.id!==r.state?(i.Log.error("ResponseValidator.validateSignoutResponse: State does not match"),Promise.reject(new Error("State does not match"))):(i.Log.debug("ResponseValidator.validateSignoutResponse: state validated"),r.state=e.data,r.error?(i.Log.warn("ResponseValidator.validateSignoutResponse: Response was error",r.error),Promise.reject(new u.ErrorResponse(r))):Promise.resolve(r))},t.prototype._processSigninParams=function t(e,r){if(e.id!==r.state)return i.Log.error("ResponseValidator._processSigninParams: State does not match"),Promise.reject(new Error("State does not match"));if(!e.client_id)return i.Log.error("ResponseValidator._processSigninParams: No client_id on state"),Promise.reject(new Error("No client_id on state"));if(!e.authority)return i.Log.error("ResponseValidator._processSigninParams: No authority on state"),Promise.reject(new Error("No authority on state"));if(this._settings.authority){if(this._settings.authority&&this._settings.authority!==e.authority)return i.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state"),Promise.reject(new Error("authority mismatch on settings vs. signin state"))}else this._settings.authority=e.authority;if(this._settings.client_id){if(this._settings.client_id&&this._settings.client_id!==e.client_id)return i.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state"),Promise.reject(new Error("client_id mismatch on settings vs. signin state"))}else this._settings.client_id=e.client_id;return i.Log.debug("ResponseValidator._processSigninParams: state validated"),r.state=e.data,r.error?(i.Log.warn("ResponseValidator._processSigninParams: Response was error",r.error),Promise.reject(new u.ErrorResponse(r))):e.nonce&&!r.id_token?(i.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response"),Promise.reject(new Error("No id_token in response"))):!e.nonce&&r.id_token?(i.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response"),Promise.reject(new Error("Unexpected id_token in response"))):e.code_verifier&&!r.code?(i.Log.error("ResponseValidator._processSigninParams: Expecting code in response"),Promise.reject(new Error("No code in response"))):!e.code_verifier&&r.code?(i.Log.error("ResponseValidator._processSigninParams: Not expecting code in response"),Promise.reject(new Error("Unexpected code in response"))):(r.scope||(r.scope=e.scope),Promise.resolve(r))},t.prototype._processClaims=function t(e,r){var n=this;if(r.isOpenIdConnect){if(i.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims"),r.profile=this._filterProtocolClaims(r.profile),!0!==e.skipUserInfo&&this._settings.loadUserInfo&&r.access_token)return i.Log.debug("ResponseValidator._processClaims: loading user info"),this._userInfoService.getClaims(r.access_token).then((function(t){return i.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint"),t.sub!==r.profile.sub?(i.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token"),Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"))):(r.profile=n._mergeClaims(r.profile,t),i.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:",r.profile),r)}));i.Log.debug("ResponseValidator._processClaims: not loading user info")}else i.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");return Promise.resolve(r)},t.prototype._mergeClaims=function t(e,r){var i=Object.assign({},e);for(var o in r){var s=r[o];Array.isArray(s)||(s=[s]);for(var a=0;a<s.length;a++){var u=s[a];i[o]?Array.isArray(i[o])?i[o].indexOf(u)<0&&i[o].push(u):i[o]!==u&&("object"===(void 0===u?"undefined":n(u))&&this._settings.mergeClaims?i[o]=this._mergeClaims(i[o],u):i[o]=[i[o],u]):i[o]=u}}return i},t.prototype._filterProtocolClaims=function t(e){i.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:",e);var r=Object.assign({},e);return this._settings._filterProtocolClaims?(l.forEach((function(t){delete r[t]})),i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered",r)):i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered"),r},t.prototype._validateTokens=function t(e,r){return r.code?(i.Log.debug("ResponseValidator._validateTokens: Validating code"),this._processCode(e,r)):r.id_token?r.access_token?(i.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token"),this._validateIdTokenAndAccessToken(e,r)):(i.Log.debug("ResponseValidator._validateTokens: Validating id_token"),this._validateIdToken(e,r)):(i.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate"),Promise.resolve(r))},t.prototype._processCode=function t(e,r){var o=this,s={client_id:e.client_id,client_secret:e.client_secret,code:r.code,redirect_uri:e.redirect_uri,code_verifier:e.code_verifier};return e.extraTokenParams&&"object"===n(e.extraTokenParams)&&Object.assign(s,e.extraTokenParams),this._tokenClient.exchangeCode(s).then((function(t){for(var n in t)r[n]=t[n];return r.id_token?(i.Log.debug("ResponseValidator._processCode: token response successful, processing id_token"),o._validateIdTokenAttributes(e,r)):(i.Log.debug("ResponseValidator._processCode: token response successful, returning response"),r)}))},t.prototype._validateIdTokenAttributes=function t(e,r){var n=this;return this._metadataService.getIssuer().then((function(t){var o=e.client_id,s=n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ",s),n._settings.getEpochTime().then((function(a){return n._joseUtil.validateJwtAttributes(r.id_token,t,o,s,a).then((function(t){return e.nonce&&e.nonce!==t.nonce?(i.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token"),Promise.reject(new Error("Invalid nonce in id_token"))):t.sub?(r.profile=t,r):(i.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token"),Promise.reject(new Error("No sub present in id_token")))}))}))}))},t.prototype._validateIdTokenAndAccessToken=function t(e,r){var n=this;return this._validateIdToken(e,r).then((function(t){return n._validateAccessToken(t)}))},t.prototype._getSigningKeyForJwt=function t(e){var r=this;return this._metadataService.getSigningKeys().then((function(t){var n=e.header.kid;if(!t)return i.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata"),Promise.reject(new Error("No signing keys from metadata"));i.Log.debug("ResponseValidator._validateIdToken: Received signing keys");var o=void 0;if(n)o=t.filter((function(t){return t.kid===n}))[0];else{if((t=r._filterByAlg(t,e.header.alg)).length>1)return i.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata"),Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));o=t[0]}return Promise.resolve(o)}))},t.prototype._getSigningKeyForJwtWithSingleRetry=function t(e){var r=this;return this._getSigningKeyForJwt(e).then((function(t){return t?Promise.resolve(t):(r._metadataService.resetSigningKeys(),r._getSigningKeyForJwt(e))}))},t.prototype._validateIdToken=function t(e,r){var n=this;if(!e.nonce)return i.Log.error("ResponseValidator._validateIdToken: No nonce on state"),Promise.reject(new Error("No nonce on state"));var o=this._joseUtil.parseJwt(r.id_token);return o&&o.header&&o.payload?e.nonce!==o.payload.nonce?(i.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token"),Promise.reject(new Error("Invalid nonce in id_token"))):this._metadataService.getIssuer().then((function(t){return i.Log.debug("ResponseValidator._validateIdToken: Received issuer"),n._getSigningKeyForJwtWithSingleRetry(o).then((function(s){if(!s)return i.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys"),Promise.reject(new Error("No key matching kid or alg found in signing keys"));var a=e.client_id,u=n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ",u),n._joseUtil.validateJwt(r.id_token,s,t,a,u).then((function(){return i.Log.debug("ResponseValidator._validateIdToken: JWT validation successful"),o.payload.sub?(r.profile=o.payload,r):(i.Log.error("ResponseValidator._validateIdToken: No sub present in id_token"),Promise.reject(new Error("No sub present in id_token")))}))}))})):(i.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token",o),Promise.reject(new Error("Failed to parse id_token")))},t.prototype._filterByAlg=function t(e,r){var n=null;if(r.startsWith("RS"))n="RSA";else if(r.startsWith("PS"))n="PS";else{if(!r.startsWith("ES"))return i.Log.debug("ResponseValidator._filterByAlg: alg not supported: ",r),[];n="EC"}return i.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ",n),e=e.filter((function(t){return t.kty===n})),i.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ",n,e.length),e},t.prototype._validateAccessToken=function t(e){if(!e.profile)return i.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token"),Promise.reject(new Error("No profile loaded from id_token"));if(!e.profile.at_hash)return i.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token"),Promise.reject(new Error("No at_hash in id_token"));if(!e.id_token)return i.Log.error("ResponseValidator._validateAccessToken: No id_token"),Promise.reject(new Error("No id_token"));var r=this._joseUtil.parseJwt(e.id_token);if(!r||!r.header)return i.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token",r),Promise.reject(new Error("Failed to parse id_token"));var n=r.header.alg;if(!n||5!==n.length)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n),Promise.reject(new Error("Unsupported alg: "+n));var o=n.substr(2,3);if(!o)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n,o),Promise.reject(new Error("Unsupported alg: "+n));if(256!==(o=parseInt(o))&&384!==o&&512!==o)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n,o),Promise.reject(new Error("Unsupported alg: "+n));var s="sha"+o,a=this._joseUtil.hashString(e.access_token,s);if(!a)return i.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:",s),Promise.reject(new Error("Failed to validate at_hash"));var u=a.substr(0,a.length/2),c=this._joseUtil.hexToBase64Url(u);return c!==e.profile.at_hash?(i.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash",c,e.profile.at_hash),Promise.reject(new Error("Failed to validate at_hash"))):(i.Log.debug("ResponseValidator._validateAccessToken: success"),Promise.resolve(e))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserInfoService=void 0;var n=r(7),i=r(2),o=r(0),s=r(4);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.UserInfoService=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.JsonService,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:s.JoseUtil;if(a(this,t),!e)throw o.Log.error("UserInfoService.ctor: No settings passed"),new Error("settings");this._settings=e,this._jsonService=new r(void 0,void 0,this._getClaimsFromJwt.bind(this)),this._metadataService=new u(this._settings),this._joseUtil=c}return t.prototype.getClaims=function t(e){var r=this;return e?this._metadataService.getUserInfoEndpoint().then((function(t){return o.Log.debug("UserInfoService.getClaims: received userinfo url",t),r._jsonService.getJson(t,e).then((function(t){return o.Log.debug("UserInfoService.getClaims: claims received",t),t}))})):(o.Log.error("UserInfoService.getClaims: No token passed"),Promise.reject(new Error("A token is required")))},t.prototype._getClaimsFromJwt=function t(e){var r=this;try{var n=this._joseUtil.parseJwt(e.responseText);if(!n||!n.header||!n.payload)return o.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT",n),Promise.reject(new Error("Failed to parse id_token"));var i=n.header.kid,s=void 0;switch(this._settings.userInfoJwtIssuer){case"OP":s=this._metadataService.getIssuer();break;case"ANY":s=Promise.resolve(n.payload.iss);break;default:s=Promise.resolve(this._settings.userInfoJwtIssuer)}return s.then((function(t){return o.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:"+t),r._metadataService.getSigningKeys().then((function(s){if(!s)return o.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata"),Promise.reject(new Error("No signing keys from metadata"));o.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");var a=void 0;if(i)a=s.filter((function(t){return t.kid===i}))[0];else{if((s=r._filterByAlg(s,n.header.alg)).length>1)return o.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata"),Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));a=s[0]}if(!a)return o.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys"),Promise.reject(new Error("No key matching kid or alg found in signing keys"));var u=r._settings.client_id,c=r._settings.clockSkew;return o.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ",c),r._joseUtil.validateJwt(e.responseText,a,t,u,c,void 0,!0).then((function(){return o.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful"),n.payload}))}))}))}catch(t){return o.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response",t.message),void reject(t)}},t.prototype._filterByAlg=function t(e,r){var n=null;if(r.startsWith("RS"))n="RSA";else if(r.startsWith("PS"))n="PS";else{if(!r.startsWith("ES"))return o.Log.debug("UserInfoService._filterByAlg: alg not supported: ",r),[];n="EC"}return o.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ",n),e=e.filter((function(t){return t.kty===n})),o.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ",n,e.length),e},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AllowedSigningAlgs=e.b64tohex=e.hextob64u=e.crypto=e.X509=e.KeyUtil=e.jws=void 0;var n=r(27);e.jws=n.jws,e.KeyUtil=n.KEYUTIL,e.X509=n.X509,e.crypto=n.crypto,e.hextob64u=n.hextob64u,e.b64tohex=n.b64tohex,e.AllowedSigningAlgs=["RS256","RS384","RS512","PS256","PS384","PS512","ES256","ES384","ES512"]},function(t,e,r){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r,n,i,o,s,a,u,c,h,l,f,g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d={userAgent:!1},p={},v=v||(r=Math,i=(n={}).lib={},o=i.Base=function(){function t(){}return{extend:function e(r){t.prototype=this;var n=new t;return r&&n.mixIn(r),n.hasOwnProperty("init")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function t(){var e=this.extend();return e.init.apply(e,arguments),e},init:function t(){},mixIn:function t(e){for(var r in e)e.hasOwnProperty(r)&&(this[r]=e[r]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function t(){return this.init.prototype.extend(this)}}}(),s=i.WordArray=o.extend({init:function t(e,r){e=this.words=e||[],this.sigBytes=null!=r?r:4*e.length},toString:function t(e){return(e||u).stringify(this)},concat:function t(e){var r=this.words,n=e.words,i=this.sigBytes,o=e.sigBytes;if(this.clamp(),i%4)for(var s=0;s<o;s++){var a=n[s>>>2]>>>24-s%4*8&255;r[i+s>>>2]|=a<<24-(i+s)%4*8}else for(s=0;s<o;s+=4)r[i+s>>>2]=n[s>>>2];return this.sigBytes+=o,this},clamp:function t(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=r.ceil(n/4)},clone:function t(){var e=o.clone.call(this);return e.words=this.words.slice(0),e},random:function t(e){for(var n=[],i=0;i<e;i+=4)n.push(4294967296*r.random()|0);return new s.init(n,e)}}),a=n.enc={},u=a.Hex={stringify:function t(e){for(var r=e.words,n=e.sigBytes,i=[],o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;i.push((s>>>4).toString(16)),i.push((15&s).toString(16))}return i.join("")},parse:function t(e){for(var r=e.length,n=[],i=0;i<r;i+=2)n[i>>>3]|=parseInt(e.substr(i,2),16)<<24-i%8*4;return new s.init(n,r/2)}},c=a.Latin1={stringify:function t(e){for(var r=e.words,n=e.sigBytes,i=[],o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;i.push(String.fromCharCode(s))}return i.join("")},parse:function t(e){for(var r=e.length,n=[],i=0;i<r;i++)n[i>>>2]|=(255&e.charCodeAt(i))<<24-i%4*8;return new s.init(n,r)}},h=a.Utf8={stringify:function t(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function t(e){return c.parse(unescape(encodeURIComponent(e)))}},l=i.BufferedBlockAlgorithm=o.extend({reset:function t(){this._data=new s.init,this._nDataBytes=0},_append:function t(e){"string"==typeof e&&(e=h.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function t(e){var n=this._data,i=n.words,o=n.sigBytes,a=this.blockSize,u=o/(4*a),c=(u=e?r.ceil(u):r.max((0|u)-this._minBufferSize,0))*a,h=r.min(4*c,o);if(c){for(var l=0;l<c;l+=a)this._doProcessBlock(i,l);var f=i.splice(0,c);n.sigBytes-=h}return new s.init(f,h)},clone:function t(){var e=o.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),i.Hasher=l.extend({cfg:o.extend(),init:function t(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function t(){l.reset.call(this),this._doReset()},update:function t(e){return this._append(e),this._process(),this},finalize:function t(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function t(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function t(e){return function(t,r){return new f.HMAC.init(e,r).finalize(t)}}}),f=n.algo={},n);!function(t){var e,r=(e=v).lib,n=r.Base,i=r.WordArray;(e=e.x64={}).Word=n.extend({init:function t(e,r){this.high=e,this.low=r}}),e.WordArray=n.extend({init:function t(e,r){e=this.words=e||[],this.sigBytes=null!=r?r:8*e.length},toX32:function t(){for(var e=this.words,r=e.length,n=[],o=0;o<r;o++){var s=e[o];n.push(s.high),n.push(s.low)}return i.create(n,this.sigBytes)},clone:function t(){for(var e=n.clone.call(this),r=e.words=this.words.slice(0),i=r.length,o=0;o<i;o++)r[o]=r[o].clone();return e}})}(),function(){var t=v,e=t.lib.WordArray;t.enc.Base64={stringify:function t(e){var r=e.words,n=e.sigBytes,i=this._map;e.clamp(),e=[];for(var o=0;o<n;o+=3)for(var s=(r[o>>>2]>>>24-o%4*8&255)<<16|(r[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|r[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;4>a&&o+.75*a<n;a++)e.push(i.charAt(s>>>6*(3-a)&63));if(r=i.charAt(64))for(;e.length%4;)e.push(r);return e.join("")},parse:function t(r){var n=r.length,i=this._map;(o=i.charAt(64))&&(-1!=(o=r.indexOf(o))&&(n=o));for(var o=[],s=0,a=0;a<n;a++)if(a%4){var u=i.indexOf(r.charAt(a-1))<<a%4*2,c=i.indexOf(r.charAt(a))>>>6-a%4*2;o[s>>>2]|=(u|c)<<24-s%4*8,s++}return e.create(o,s)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),function(t){for(var e=v,r=(i=e.lib).WordArray,n=i.Hasher,i=e.algo,o=[],s=[],a=function t(e){return 4294967296*(e-(0|e))|0},u=2,c=0;64>c;){var h;t:{h=u;for(var l=t.sqrt(h),f=2;f<=l;f++)if(!(h%f)){h=!1;break t}h=!0}h&&(8>c&&(o[c]=a(t.pow(u,.5))),s[c]=a(t.pow(u,1/3)),c++),u++}var g=[];i=i.SHA256=n.extend({_doReset:function t(){this._hash=new r.init(o.slice(0))},_doProcessBlock:function t(e,r){for(var n=this._hash.words,i=n[0],o=n[1],a=n[2],u=n[3],c=n[4],h=n[5],l=n[6],f=n[7],d=0;64>d;d++){if(16>d)g[d]=0|e[r+d];else{var p=g[d-15],v=g[d-2];g[d]=((p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3)+g[d-7]+((v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10)+g[d-16]}p=f+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&h^~c&l)+s[d]+g[d],v=((i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22))+(i&o^i&a^o&a),f=l,l=h,h=c,c=u+p|0,u=a,a=o,o=i,i=p+v|0}n[0]=n[0]+i|0,n[1]=n[1]+o|0,n[2]=n[2]+a|0,n[3]=n[3]+u|0,n[4]=n[4]+c|0,n[5]=n[5]+h|0,n[6]=n[6]+l|0,n[7]=n[7]+f|0},_doFinalize:function e(){var r=this._data,n=r.words,i=8*this._nDataBytes,o=8*r.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=t.floor(i/4294967296),n[15+(o+64>>>9<<4)]=i,r.sigBytes=4*n.length,this._process(),this._hash},clone:function t(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA256=n._createHelper(i),e.HmacSHA256=n._createHmacHelper(i)}(Math),function(){function t(){return n.create.apply(n,arguments)}for(var e=v,r=e.lib.Hasher,n=(o=e.x64).Word,i=o.WordArray,o=e.algo,s=[t(1116352408,3609767458),t(1899447441,602891725),t(3049323471,3964484399),t(3921009573,2173295548),t(961987163,4081628472),t(1508970993,3053834265),t(2453635748,2937671579),t(2870763221,3664609560),t(3624381080,2734883394),t(310598401,1164996542),t(607225278,1323610764),t(1426881987,3590304994),t(1925078388,4068182383),t(2162078206,991336113),t(2614888103,633803317),t(3248222580,3479774868),t(3835390401,2666613458),t(4022224774,944711139),t(264347078,2341262773),t(604807628,2007800933),t(770255983,1495990901),t(1249150122,1856431235),t(1555081692,3175218132),t(1996064986,2198950837),t(2554220882,3999719339),t(2821834349,766784016),t(2952996808,2566594879),t(3210313671,3203337956),t(3336571891,1034457026),t(3584528711,2466948901),t(113926993,3758326383),t(338241895,168717936),t(666307205,1188179964),t(773529912,1546045734),t(1294757372,1522805485),t(1396182291,2643833823),t(1695183700,2343527390),t(1986661051,1014477480),t(2177026350,1206759142),t(2456956037,344077627),t(2730485921,1290863460),t(2820302411,3158454273),t(3259730800,3505952657),t(3345764771,106217008),t(3516065817,3606008344),t(3600352804,1432725776),t(4094571909,1467031594),t(275423344,851169720),t(430227734,3100823752),t(506948616,1363258195),t(659060556,3750685593),t(883997877,3785050280),t(958139571,3318307427),t(1322822218,3812723403),t(1537002063,2003034995),t(1747873779,3602036899),t(1955562222,1575990012),t(2024104815,1125592928),t(2227730452,2716904306),t(2361852424,442776044),t(2428436474,593698344),t(2756734187,3733110249),t(3204031479,2999351573),t(3329325298,3815920427),t(3391569614,3928383900),t(3515267271,566280711),t(3940187606,3454069534),t(4118630271,4000239992),t(116418474,1914138554),t(174292421,2731055270),t(289380356,3203993006),t(460393269,320620315),t(685471733,587496836),t(852142971,1086792851),t(1017036298,365543100),t(1126000580,2618297676),t(1288033470,3409855158),t(1501505948,4234509866),t(1607167915,987167468),t(1816402316,1246189591)],a=[],u=0;80>u;u++)a[u]=t();o=o.SHA512=r.extend({_doReset:function t(){this._hash=new i.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function t(e,r){for(var n=(f=this._hash.words)[0],i=f[1],o=f[2],u=f[3],c=f[4],h=f[5],l=f[6],f=f[7],g=n.high,d=n.low,p=i.high,v=i.low,y=o.high,m=o.low,_=u.high,S=u.low,b=c.high,w=c.low,F=h.high,E=h.low,x=l.high,A=l.low,k=f.high,P=f.low,C=g,T=d,R=p,I=v,D=y,L=m,N=_,U=S,B=b,O=w,j=F,M=E,H=x,V=A,K=k,q=P,J=0;80>J;J++){var W=a[J];if(16>J)var z=W.high=0|e[r+2*J],Y=W.low=0|e[r+2*J+1];else{z=((Y=(z=a[J-15]).high)>>>1|(G=z.low)<<31)^(Y>>>8|G<<24)^Y>>>7;var G=(G>>>1|Y<<31)^(G>>>8|Y<<24)^(G>>>7|Y<<25),X=((Y=(X=a[J-2]).high)>>>19|($=X.low)<<13)^(Y<<3|$>>>29)^Y>>>6,$=($>>>19|Y<<13)^($<<3|Y>>>29)^($>>>6|Y<<26),Q=(Y=a[J-7]).high,Z=(tt=a[J-16]).high,tt=tt.low;z=(z=(z=z+Q+((Y=G+Y.low)>>>0<G>>>0?1:0))+X+((Y=Y+$)>>>0<$>>>0?1:0))+Z+((Y=Y+tt)>>>0<tt>>>0?1:0);W.high=z,W.low=Y}Q=B&j^~B&H,tt=O&M^~O&V,W=C&R^C&D^R&D;var et=T&I^T&L^I&L,rt=(G=(C>>>28|T<<4)^(C<<30|T>>>2)^(C<<25|T>>>7),X=(T>>>28|C<<4)^(T<<30|C>>>2)^(T<<25|C>>>7),($=s[J]).high),nt=$.low;Z=K+((B>>>14|O<<18)^(B>>>18|O<<14)^(B<<23|O>>>9))+(($=q+((O>>>14|B<<18)^(O>>>18|B<<14)^(O<<23|B>>>9)))>>>0<q>>>0?1:0),K=H,q=V,H=j,V=M,j=B,M=O,B=N+(Z=(Z=(Z=Z+Q+(($=$+tt)>>>0<tt>>>0?1:0))+rt+(($=$+nt)>>>0<nt>>>0?1:0))+z+(($=$+Y)>>>0<Y>>>0?1:0))+((O=U+$|0)>>>0<U>>>0?1:0)|0,N=D,U=L,D=R,L=I,R=C,I=T,C=Z+(W=G+W+((Y=X+et)>>>0<X>>>0?1:0))+((T=$+Y|0)>>>0<$>>>0?1:0)|0}d=n.low=d+T,n.high=g+C+(d>>>0<T>>>0?1:0),v=i.low=v+I,i.high=p+R+(v>>>0<I>>>0?1:0),m=o.low=m+L,o.high=y+D+(m>>>0<L>>>0?1:0),S=u.low=S+U,u.high=_+N+(S>>>0<U>>>0?1:0),w=c.low=w+O,c.high=b+B+(w>>>0<O>>>0?1:0),E=h.low=E+M,h.high=F+j+(E>>>0<M>>>0?1:0),A=l.low=A+V,l.high=x+H+(A>>>0<V>>>0?1:0),P=f.low=P+q,f.high=k+K+(P>>>0<q>>>0?1:0)},_doFinalize:function t(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;return r[i>>>5]|=128<<24-i%32,r[30+(i+128>>>10<<5)]=Math.floor(n/4294967296),r[31+(i+128>>>10<<5)]=n,e.sigBytes=4*r.length,this._process(),this._hash.toX32()},clone:function t(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32}),e.SHA512=r._createHelper(o),e.HmacSHA512=r._createHmacHelper(o)}(),function(){var t=v,e=(i=t.x64).Word,r=i.WordArray,n=(i=t.algo).SHA512,i=i.SHA384=n.extend({_doReset:function t(){this._hash=new r.init([new e.init(3418070365,3238371032),new e.init(1654270250,914150663),new e.init(2438529370,812702999),new e.init(355462360,4144912697),new e.init(1731405415,4290775857),new e.init(2394180231,1750603025),new e.init(3675008525,1694076839),new e.init(1203062813,3204075428)])},_doFinalize:function t(){var e=n._doFinalize.call(this);return e.sigBytes-=16,e}});t.SHA384=n._createHelper(i),t.HmacSHA384=n._createHmacHelper(i)}();
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var y,m="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function _(t){var e,r,n="";for(e=0;e+3<=t.length;e+=3)r=parseInt(t.substring(e,e+3),16),n+=m.charAt(r>>6)+m.charAt(63&r);for(e+1==t.length?(r=parseInt(t.substring(e,e+1),16),n+=m.charAt(r<<2)):e+2==t.length&&(r=parseInt(t.substring(e,e+2),16),n+=m.charAt(r>>2)+m.charAt((3&r)<<4)),"=";(3&n.length)>0;)n+="=";return n}function S(t){var e,r,n,i="",o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e)(n=m.indexOf(t.charAt(e)))<0||(0==o?(i+=T(n>>2),r=3&n,o=1):1==o?(i+=T(r<<2|n>>4),r=15&n,o=2):2==o?(i+=T(r),i+=T(n>>2),r=3&n,o=3):(i+=T(r<<2|n>>4),i+=T(15&n),o=0));return 1==o&&(i+=T(r<<2)),i}function b(t){var e,r=S(t),n=new Array;for(e=0;2*e<r.length;++e)n[e]=parseInt(r.substring(2*e,2*e+2),16);return n}function w(t,e,r){null!=t&&("number"==typeof t?this.fromNumber(t,e,r):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}function F(){return new w(null)}"Microsoft Internet Explorer"==d.appName?(w.prototype.am=function E(t,e,r,n,i,o){for(var s=32767&e,a=e>>15;--o>=0;){var u=32767&this[t],c=this[t++]>>15,h=a*u+c*s;i=((u=s*u+((32767&h)<<15)+r[n]+(1073741823&i))>>>30)+(h>>>15)+a*c+(i>>>30),r[n++]=1073741823&u}return i},y=30):"Netscape"!=d.appName?(w.prototype.am=function x(t,e,r,n,i,o){for(;--o>=0;){var s=e*this[t++]+r[n]+i;i=Math.floor(s/67108864),r[n++]=67108863&s}return i},y=26):(w.prototype.am=function A(t,e,r,n,i,o){for(var s=16383&e,a=e>>14;--o>=0;){var u=16383&this[t],c=this[t++]>>14,h=a*u+c*s;i=((u=s*u+((16383&h)<<14)+r[n]+i)>>28)+(h>>14)+a*c,r[n++]=268435455&u}return i},y=28),w.prototype.DB=y,w.prototype.DM=(1<<y)-1,w.prototype.DV=1<<y;w.prototype.FV=Math.pow(2,52),w.prototype.F1=52-y,w.prototype.F2=2*y-52;var k,P,C=new Array;for(k="0".charCodeAt(0),P=0;P<=9;++P)C[k++]=P;for(k="a".charCodeAt(0),P=10;P<36;++P)C[k++]=P;for(k="A".charCodeAt(0),P=10;P<36;++P)C[k++]=P;function T(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function R(t,e){var r=C[t.charCodeAt(e)];return null==r?-1:r}function I(t){var e=F();return e.fromInt(t),e}function D(t){var e,r=1;return 0!=(e=t>>>16)&&(t=e,r+=16),0!=(e=t>>8)&&(t=e,r+=8),0!=(e=t>>4)&&(t=e,r+=4),0!=(e=t>>2)&&(t=e,r+=2),0!=(e=t>>1)&&(t=e,r+=1),r}function L(t){this.m=t}function N(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function U(t,e){return t&e}function B(t,e){return t|e}function O(t,e){return t^e}function j(t,e){return t&~e}function M(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function H(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function V(){}function K(t){return t}function q(t){this.r2=F(),this.q3=F(),w.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}L.prototype.convert=function J(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},L.prototype.revert=function W(t){return t},L.prototype.reduce=function z(t){t.divRemTo(this.m,null,t)},L.prototype.mulTo=function Y(t,e,r){t.multiplyTo(e,r),this.reduce(r)},L.prototype.sqrTo=function G(t,e){t.squareTo(e),this.reduce(e)},N.prototype.convert=function X(t){var e=F();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(w.ZERO)>0&&this.m.subTo(e,e),e},N.prototype.revert=function $(t){var e=F();return t.copyTo(e),this.reduce(e),e},N.prototype.reduce=function Q(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=32767&t[e],n=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[r=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},N.prototype.mulTo=function Z(t,e,r){t.multiplyTo(e,r),this.reduce(r)},N.prototype.sqrTo=function tt(t,e){t.squareTo(e),this.reduce(e)},w.prototype.copyTo=function et(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},w.prototype.fromInt=function rt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},w.prototype.fromString=function nt(t,e){var r;if(16==e)r=4;else if(8==e)r=3;else if(256==e)r=8;else if(2==e)r=1;else if(32==e)r=5;else{if(4!=e)return void this.fromRadix(t,e);r=2}this.t=0,this.s=0;for(var n=t.length,i=!1,o=0;--n>=0;){var s=8==r?255&t[n]:R(t,n);s<0?"-"==t.charAt(n)&&(i=!0):(i=!1,0==o?this[this.t++]=s:o+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),i&&w.ZERO.subTo(this,this)},w.prototype.clamp=function it(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},w.prototype.dlShiftTo=function ot(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s},w.prototype.drShiftTo=function st(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s},w.prototype.lShiftTo=function at(t,e){var r,n=t%this.DB,i=this.DB-n,o=(1<<i)-1,s=Math.floor(t/this.DB),a=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)e[r+s+1]=this[r]>>i|a,a=(this[r]&o)<<n;for(r=s-1;r>=0;--r)e[r]=0;e[s]=a,e.t=this.t+s+1,e.s=this.s,e.clamp()},w.prototype.rShiftTo=function ut(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t)e.t=0;else{var n=t%this.DB,i=this.DB-n,o=(1<<n)-1;e[0]=this[r]>>n;for(var s=r+1;s<this.t;++s)e[s-r-1]|=(this[s]&o)<<i,e[s-r]=this[s]>>n;n>0&&(e[this.t-r-1]|=(this.s&o)<<i),e.t=this.t-r,e.clamp()}},w.prototype.subTo=function ct(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]-t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n-=t[r],e[r++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[r++]=this.DV+n:n>0&&(e[r++]=n),e.t=r,e.clamp()},w.prototype.multiplyTo=function ht(t,e){var r=this.abs(),n=t.abs(),i=r.t;for(e.t=i+n.t;--i>=0;)e[i]=0;for(i=0;i<n.t;++i)e[i+r.t]=r.am(0,n[i],e,i,0,r.t);e.s=0,e.clamp(),this.s!=t.s&&w.ZERO.subTo(e,e)},w.prototype.squareTo=function lt(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var n=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,n,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp()},w.prototype.divRemTo=function ft(t,e,r){var n=t.abs();if(!(n.t<=0)){var i=this.abs();if(i.t<n.t)return null!=e&&e.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=F());var o=F(),s=this.s,a=t.s,u=this.DB-D(n[n.t-1]);u>0?(n.lShiftTo(u,o),i.lShiftTo(u,r)):(n.copyTo(o),i.copyTo(r));var c=o.t,h=o[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),f=this.FV/l,g=(1<<this.F1)/l,d=1<<this.F2,p=r.t,v=p-c,y=null==e?F():e;for(o.dlShiftTo(v,y),r.compareTo(y)>=0&&(r[r.t++]=1,r.subTo(y,r)),w.ONE.dlShiftTo(c,y),y.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var m=r[--p]==h?this.DM:Math.floor(r[p]*f+(r[p-1]+d)*g);if((r[p]+=o.am(0,m,r,v,0,c))<m)for(o.dlShiftTo(v,y),r.subTo(y,r);r[p]<--m;)r.subTo(y,r)}null!=e&&(r.drShiftTo(c,e),s!=a&&w.ZERO.subTo(e,e)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),s<0&&w.ZERO.subTo(r,r)}}},w.prototype.invDigit=function gt(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},w.prototype.isEven=function dt(){return 0==(this.t>0?1&this[0]:this.s)},w.prototype.exp=function pt(t,e){if(t>4294967295||t<1)return w.ONE;var r=F(),n=F(),i=e.convert(this),o=D(t)-1;for(i.copyTo(r);--o>=0;)if(e.sqrTo(r,n),(t&1<<o)>0)e.mulTo(n,i,r);else{var s=r;r=n,n=s}return e.revert(r)},w.prototype.toString=function vt(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var r,n=(1<<e)-1,i=!1,o="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(r=this[s]>>a)>0&&(i=!0,o=T(r));s>=0;)a<e?(r=(this[s]&(1<<a)-1)<<e-a,r|=this[--s]>>(a+=this.DB-e)):(r=this[s]>>(a-=e)&n,a<=0&&(a+=this.DB,--s)),r>0&&(i=!0),i&&(o+=T(r));return i?o:"0"},w.prototype.negate=function yt(){var t=F();return w.ZERO.subTo(this,t),t},w.prototype.abs=function mt(){return this.s<0?this.negate():this},w.prototype.compareTo=function _t(t){var e=this.s-t.s;if(0!=e)return e;var r=this.t;if(0!=(e=r-t.t))return this.s<0?-e:e;for(;--r>=0;)if(0!=(e=this[r]-t[r]))return e;return 0},w.prototype.bitLength=function St(){return this.t<=0?0:this.DB*(this.t-1)+D(this[this.t-1]^this.s&this.DM)},w.prototype.mod=function bt(t){var e=F();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(w.ZERO)>0&&t.subTo(e,e),e},w.prototype.modPowInt=function wt(t,e){var r;return r=t<256||e.isEven()?new L(e):new N(e),this.exp(t,r)},w.ZERO=I(0),w.ONE=I(1),V.prototype.convert=K,V.prototype.revert=K,V.prototype.mulTo=function Ft(t,e,r){t.multiplyTo(e,r)},V.prototype.sqrTo=function Et(t,e){t.squareTo(e)},q.prototype.convert=function xt(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=F();return t.copyTo(e),this.reduce(e),e},q.prototype.revert=function At(t){return t},q.prototype.reduce=function kt(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},q.prototype.mulTo=function Pt(t,e,r){t.multiplyTo(e,r),this.reduce(r)},q.prototype.sqrTo=function Ct(t,e){t.squareTo(e),this.reduce(e)};var Tt=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],Rt=(1<<26)/Tt[Tt.length-1];
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function It(){this.i=0,this.j=0,this.S=new Array}w.prototype.chunkSize=function Dt(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},w.prototype.toRadix=function Lt(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),r=Math.pow(t,e),n=I(r),i=F(),o=F(),s="";for(this.divRemTo(n,i,o);i.signum()>0;)s=(r+o.intValue()).toString(t).substr(1)+s,i.divRemTo(n,i,o);return o.intValue().toString(t)+s},w.prototype.fromRadix=function Nt(t,e){this.fromInt(0),null==e&&(e=10);for(var r=this.chunkSize(e),n=Math.pow(e,r),i=!1,o=0,s=0,a=0;a<t.length;++a){var u=R(t,a);u<0?"-"==t.charAt(a)&&0==this.signum()&&(i=!0):(s=e*s+u,++o>=r&&(this.dMultiply(n),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),i&&w.ZERO.subTo(this,this)},w.prototype.fromNumber=function Ut(t,e,r){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(w.ONE.shiftLeft(t-1),B,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(w.ONE.shiftLeft(t-1),this);else{var n=new Array,i=7&t;n.length=1+(t>>3),e.nextBytes(n),i>0?n[0]&=(1<<i)-1:n[0]=0,this.fromString(n,256)}},w.prototype.bitwiseTo=function Bt(t,e,r){var n,i,o=Math.min(t.t,this.t);for(n=0;n<o;++n)r[n]=e(this[n],t[n]);if(t.t<this.t){for(i=t.s&this.DM,n=o;n<this.t;++n)r[n]=e(this[n],i);r.t=this.t}else{for(i=this.s&this.DM,n=o;n<t.t;++n)r[n]=e(i,t[n]);r.t=t.t}r.s=e(this.s,t.s),r.clamp()},w.prototype.changeBit=function Ot(t,e){var r=w.ONE.shiftLeft(t);return this.bitwiseTo(r,e,r),r},w.prototype.addTo=function jt(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]+t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n+=t[r],e[r++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[r++]=n:n<-1&&(e[r++]=this.DV+n),e.t=r,e.clamp()},w.prototype.dMultiply=function Mt(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},w.prototype.dAddOffset=function Ht(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},w.prototype.multiplyLowerTo=function Vt(t,e,r){var n,i=Math.min(this.t+t.t,e);for(r.s=0,r.t=i;i>0;)r[--i]=0;for(n=r.t-this.t;i<n;++i)r[i+this.t]=this.am(0,t[i],r,i,0,this.t);for(n=Math.min(t.t,e);i<n;++i)this.am(0,t[i],r,i,0,e-i);r.clamp()},w.prototype.multiplyUpperTo=function Kt(t,e,r){--e;var n=r.t=this.t+t.t-e;for(r.s=0;--n>=0;)r[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)r[this.t+n-e]=this.am(e-n,t[n],r,0,0,this.t+n-e);r.clamp(),r.drShiftTo(1,r)},w.prototype.modInt=function qt(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(0==e)r=this[0]%t;else for(var n=this.t-1;n>=0;--n)r=(e*r+this[n])%t;return r},w.prototype.millerRabin=function Jt(t){var e=this.subtract(w.ONE),r=e.getLowestSetBit();if(r<=0)return!1;var n=e.shiftRight(r);(t=t+1>>1)>Tt.length&&(t=Tt.length);for(var i=F(),o=0;o<t;++o){i.fromInt(Tt[Math.floor(Math.random()*Tt.length)]);var s=i.modPow(n,this);if(0!=s.compareTo(w.ONE)&&0!=s.compareTo(e)){for(var a=1;a++<r&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(w.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},w.prototype.clone=
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Wt(){var t=F();return this.copyTo(t),t},w.prototype.intValue=function zt(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},w.prototype.byteValue=function Yt(){return 0==this.t?this.s:this[0]<<24>>24},w.prototype.shortValue=function Gt(){return 0==this.t?this.s:this[0]<<16>>16},w.prototype.signum=function Xt(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},w.prototype.toByteArray=function $t(){var t=this.t,e=new Array;e[0]=this.s;var r,n=this.DB-t*this.DB%8,i=0;if(t-- >0)for(n<this.DB&&(r=this[t]>>n)!=(this.s&this.DM)>>n&&(e[i++]=r|this.s<<this.DB-n);t>=0;)n<8?(r=(this[t]&(1<<n)-1)<<8-n,r|=this[--t]>>(n+=this.DB-8)):(r=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&r)&&(r|=-256),0==i&&(128&this.s)!=(128&r)&&++i,(i>0||r!=this.s)&&(e[i++]=r);return e},w.prototype.equals=function Qt(t){return 0==this.compareTo(t)},w.prototype.min=function Zt(t){return this.compareTo(t)<0?this:t},w.prototype.max=function te(t){return this.compareTo(t)>0?this:t},w.prototype.and=function ee(t){var e=F();return this.bitwiseTo(t,U,e),e},w.prototype.or=function re(t){var e=F();return this.bitwiseTo(t,B,e),e},w.prototype.xor=function ne(t){var e=F();return this.bitwiseTo(t,O,e),e},w.prototype.andNot=function ie(t){var e=F();return this.bitwiseTo(t,j,e),e},w.prototype.not=function oe(){for(var t=F(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},w.prototype.shiftLeft=function se(t){var e=F();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},w.prototype.shiftRight=function ae(t){var e=F();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},w.prototype.getLowestSetBit=function ue(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+M(this[t]);return this.s<0?this.t*this.DB:-1},w.prototype.bitCount=function ce(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=H(this[r]^e);return t},w.prototype.testBit=function he(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},w.prototype.setBit=function le(t){return this.changeBit(t,B)},w.prototype.clearBit=function fe(t){return this.changeBit(t,j)},w.prototype.flipBit=function ge(t){return this.changeBit(t,O)},w.prototype.add=function de(t){var e=F();return this.addTo(t,e),e},w.prototype.subtract=function pe(t){var e=F();return this.subTo(t,e),e},w.prototype.multiply=function ve(t){var e=F();return this.multiplyTo(t,e),e},w.prototype.divide=function ye(t){var e=F();return this.divRemTo(t,e,null),e},w.prototype.remainder=function me(t){var e=F();return this.divRemTo(t,null,e),e},w.prototype.divideAndRemainder=function _e(t){var e=F(),r=F();return this.divRemTo(t,e,r),new Array(e,r)},w.prototype.modPow=function Se(t,e){var r,n,i=t.bitLength(),o=I(1);if(i<=0)return o;r=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new L(e):e.isEven()?new q(e):new N(e);var s=new Array,a=3,u=r-1,c=(1<<r)-1;if(s[1]=n.convert(this),r>1){var h=F();for(n.sqrTo(s[1],h);a<=c;)s[a]=F(),n.mulTo(h,s[a-2],s[a]),a+=2}var l,f,g=t.t-1,d=!0,p=F();for(i=D(t[g])-1;g>=0;){for(i>=u?l=t[g]>>i-u&c:(l=(t[g]&(1<<i+1)-1)<<u-i,g>0&&(l|=t[g-1]>>this.DB+i-u)),a=r;0==(1&l);)l>>=1,--a;if((i-=a)<0&&(i+=this.DB,--g),d)s[l].copyTo(o),d=!1;else{for(;a>1;)n.sqrTo(o,p),n.sqrTo(p,o),a-=2;a>0?n.sqrTo(o,p):(f=o,o=p,p=f),n.mulTo(p,s[l],o)}for(;g>=0&&0==(t[g]&1<<i);)n.sqrTo(o,p),f=o,o=p,p=f,--i<0&&(i=this.DB-1,--g)}return n.revert(o)},w.prototype.modInverse=function be(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return w.ZERO;for(var r=t.clone(),n=this.clone(),i=I(1),o=I(0),s=I(0),a=I(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),e?(i.isEven()&&o.isEven()||(i.addTo(this,i),o.subTo(t,o)),i.rShiftTo(1,i)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);r.compareTo(n)>=0?(r.subTo(n,r),e&&i.subTo(s,i),o.subTo(a,o)):(n.subTo(r,n),e&&s.subTo(i,s),a.subTo(o,a))}return 0!=n.compareTo(w.ONE)?w.ZERO:a.compareTo(t)>=0?a.subtract(t):a.signum()<0?(a.addTo(t,a),a.signum()<0?a.add(t):a):a},w.prototype.pow=function we(t){return this.exp(t,new V)},w.prototype.gcd=function Fe(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var n=e;e=r,r=n}var i=e.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),r.rShiftTo(o,r));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return o>0&&r.lShiftTo(o,r),r},w.prototype.isProbablePrime=function Ee(t){var e,r=this.abs();if(1==r.t&&r[0]<=Tt[Tt.length-1]){for(e=0;e<Tt.length;++e)if(r[0]==Tt[e])return!0;return!1}if(r.isEven())return!1;for(e=1;e<Tt.length;){for(var n=Tt[e],i=e+1;i<Tt.length&&n<Rt;)n*=Tt[i++];for(n=r.modInt(n);e<i;)if(n%Tt[e++]==0)return!1}return r.millerRabin(t)},w.prototype.square=function xe(){var t=F();return this.squareTo(t),t},It.prototype.init=function Ae(t){var e,r,n;for(e=0;e<256;++e)this.S[e]=e;for(r=0,e=0;e<256;++e)r=r+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[r],this.S[r]=n;this.i=0,this.j=0},It.prototype.next=function ke(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]};var Pe,Ce,Te;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */function Re(){!function t(e){Ce[Te++]^=255&e,Ce[Te++]^=e>>8&255,Ce[Te++]^=e>>16&255,Ce[Te++]^=e>>24&255,Te>=256&&(Te-=256)}((new Date).getTime())}if(null==Ce){var Ie;if(Ce=new Array,Te=0,void 0!==p&&(void 0!==p.crypto||void 0!==p.msCrypto)){var De=p.crypto||p.msCrypto;if(De.getRandomValues){var Le=new Uint8Array(32);for(De.getRandomValues(Le),Ie=0;Ie<32;++Ie)Ce[Te++]=Le[Ie]}else if("Netscape"==d.appName&&d.appVersion<"5"){var Ne=p.crypto.random(32);for(Ie=0;Ie<Ne.length;++Ie)Ce[Te++]=255&Ne.charCodeAt(Ie)}}for(;Te<256;)Ie=Math.floor(65536*Math.random()),Ce[Te++]=Ie>>>8,Ce[Te++]=255&Ie;Te=0,Re()}function Ue(){if(null==Pe){for(Re(),(Pe=function t(){return new It}()).init(Ce),Te=0;Te<Ce.length;++Te)Ce[Te]=0;Te=0}return Pe.next()}function Be(){}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Oe(t,e){return new w(t,e)}function je(t,e,r){for(var n="",i=0;n.length<e;)n+=r(String.fromCharCode.apply(String,t.concat([(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i]))),i+=1;return n}function Me(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function He(t,e){this.x=e,this.q=t}function Ve(t,e,r,n){this.curve=t,this.x=e,this.y=r,this.z=null==n?w.ONE:n,this.zinv=null}function Ke(t,e,r){this.q=t,this.a=this.fromBigInteger(e),this.b=this.fromBigInteger(r),this.infinity=new Ve(this,null,null)}Be.prototype.nextBytes=function qe(t){var e;for(e=0;e<t.length;++e)t[e]=Ue()},Me.prototype.doPublic=function Je(t){return t.modPowInt(this.e,this.n)},Me.prototype.setPublic=function We(t,e){if(this.isPublic=!0,this.isPrivate=!1,"string"!=typeof t)this.n=t,this.e=e;else{if(!(null!=t&&null!=e&&t.length>0&&e.length>0))throw"Invalid RSA public key";this.n=Oe(t,16),this.e=parseInt(e,16)}},Me.prototype.encrypt=function ze(t){var e=function r(t,e){if(e<t.length+11)throw"Message too long for RSA";for(var r=new Array,n=t.length-1;n>=0&&e>0;){var i=t.charCodeAt(n--);i<128?r[--e]=i:i>127&&i<2048?(r[--e]=63&i|128,r[--e]=i>>6|192):(r[--e]=63&i|128,r[--e]=i>>6&63|128,r[--e]=i>>12|224)}r[--e]=0;for(var o=new Be,s=new Array;e>2;){for(s[0]=0;0==s[0];)o.nextBytes(s);r[--e]=s[0]}return r[--e]=2,r[--e]=0,new w(r)}(t,this.n.bitLength()+7>>3);if(null==e)return null;var n=this.doPublic(e);if(null==n)return null;var i=n.toString(16);return 0==(1&i.length)?i:"0"+i},Me.prototype.encryptOAEP=function Ye(t,e,r){var n=function i(t,e,r,n){var i=Sr.crypto.MessageDigest,o=Sr.crypto.Util,s=null;if(r||(r="sha1"),"string"==typeof r&&(s=i.getCanonicalAlgName(r),n=i.getHashLength(s),r=function t(e){return Lr(o.hashHex(Nr(e),s))}),t.length+2*n+2>e)throw"Message too long for RSA";var a,u="";for(a=0;a<e-t.length-2*n-2;a+=1)u+="\0";var c=r("")+u+""+t,h=new Array(n);(new Be).nextBytes(h);var l=je(h,c.length,r),f=[];for(a=0;a<c.length;a+=1)f[a]=c.charCodeAt(a)^l.charCodeAt(a);var g=je(f,h.length,r),d=[0];for(a=0;a<h.length;a+=1)d[a+1]=h[a]^g.charCodeAt(a);return new w(d.concat(f))}(t,this.n.bitLength()+7>>3,e,r);if(null==n)return null;var o=this.doPublic(n);if(null==o)return null;var s=o.toString(16);return 0==(1&s.length)?s:"0"+s},Me.prototype.type="RSA",He.prototype.equals=function Ge(t){return t==this||this.q.equals(t.q)&&this.x.equals(t.x)},He.prototype.toBigInteger=function Xe(){return this.x},He.prototype.negate=function $e(){return new He(this.q,this.x.negate().mod(this.q))},He.prototype.add=function Qe(t){return new He(this.q,this.x.add(t.toBigInteger()).mod(this.q))},He.prototype.subtract=function Ze(t){return new He(this.q,this.x.subtract(t.toBigInteger()).mod(this.q))},He.prototype.multiply=function tr(t){return new He(this.q,this.x.multiply(t.toBigInteger()).mod(this.q))},He.prototype.square=function er(){return new He(this.q,this.x.square().mod(this.q))},He.prototype.divide=function rr(t){return new He(this.q,this.x.multiply(t.toBigInteger().modInverse(this.q)).mod(this.q))},Ve.prototype.getX=function nr(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))},Ve.prototype.getY=function ir(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))},Ve.prototype.equals=function or(t){return t==this||(this.isInfinity()?t.isInfinity():t.isInfinity()?this.isInfinity():!!t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(w.ZERO)&&t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(w.ZERO))},Ve.prototype.isInfinity=function sr(){return null==this.x&&null==this.y||this.z.equals(w.ZERO)&&!this.y.toBigInteger().equals(w.ZERO)},Ve.prototype.negate=function ar(){return new Ve(this.curve,this.x,this.y.negate(),this.z)},Ve.prototype.add=function ur(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q),r=t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q);if(w.ZERO.equals(r))return w.ZERO.equals(e)?this.twice():this.curve.getInfinity();var n=new w("3"),i=this.x.toBigInteger(),o=this.y.toBigInteger(),s=(t.x.toBigInteger(),t.y.toBigInteger(),r.square()),a=s.multiply(r),u=i.multiply(s),c=e.square().multiply(this.z),h=c.subtract(u.shiftLeft(1)).multiply(t.z).subtract(a).multiply(r).mod(this.curve.q),l=u.multiply(n).multiply(e).subtract(o.multiply(a)).subtract(c.multiply(e)).multiply(t.z).add(e.multiply(a)).mod(this.curve.q),f=a.multiply(this.z).multiply(t.z).mod(this.curve.q);return new Ve(this.curve,this.curve.fromBigInteger(h),this.curve.fromBigInteger(l),f)},Ve.prototype.twice=function cr(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var t=new w("3"),e=this.x.toBigInteger(),r=this.y.toBigInteger(),n=r.multiply(this.z),i=n.multiply(r).mod(this.curve.q),o=this.curve.a.toBigInteger(),s=e.square().multiply(t);w.ZERO.equals(o)||(s=s.add(this.z.square().multiply(o)));var a=(s=s.mod(this.curve.q)).square().subtract(e.shiftLeft(3).multiply(i)).shiftLeft(1).multiply(n).mod(this.curve.q),u=s.multiply(t).multiply(e).subtract(i.shiftLeft(1)).shiftLeft(2).multiply(i).subtract(s.square().multiply(s)).mod(this.curve.q),c=n.square().multiply(n).shiftLeft(3).mod(this.curve.q);return new Ve(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(u),c)},Ve.prototype.multiply=function hr(t){if(this.isInfinity())return this;if(0==t.signum())return this.curve.getInfinity();var e,r=t,n=r.multiply(new w("3")),i=this.negate(),o=this,s=this.curve.q.subtract(t),a=s.multiply(new w("3")),u=new Ve(this.curve,this.x,this.y),c=u.negate();for(e=n.bitLength()-2;e>0;--e){o=o.twice();var h=n.testBit(e);h!=r.testBit(e)&&(o=o.add(h?this:i))}for(e=a.bitLength()-2;e>0;--e){u=u.twice();var l=a.testBit(e);l!=s.testBit(e)&&(u=u.add(l?u:c))}return o},Ve.prototype.multiplyTwo=function lr(t,e,r){var n;n=t.bitLength()>r.bitLength()?t.bitLength()-1:r.bitLength()-1;for(var i=this.curve.getInfinity(),o=this.add(e);n>=0;)i=i.twice(),t.testBit(n)?i=r.testBit(n)?i.add(o):i.add(this):r.testBit(n)&&(i=i.add(e)),--n;return i},Ke.prototype.getQ=function fr(){return this.q},Ke.prototype.getA=function gr(){return this.a},Ke.prototype.getB=function dr(){return this.b},Ke.prototype.equals=function pr(t){return t==this||this.q.equals(t.q)&&this.a.equals(t.a)&&this.b.equals(t.b)},Ke.prototype.getInfinity=function vr(){return this.infinity},Ke.prototype.fromBigInteger=function yr(t){return new He(this.q,t)},Ke.prototype.decodePointHex=function mr(t){switch(parseInt(t.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var e=(t.length-2)/2,r=t.substr(2,e),n=t.substr(e+2,e);return new Ve(this,this.fromBigInteger(new w(r,16)),this.fromBigInteger(new w(n,16)));default:return null}},
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
He.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)},Ve.prototype.getEncoded=function(t){var e=function t(e,r){var n=e.toByteArrayUnsigned();if(r<n.length)n=n.slice(n.length-r);else for(;r>n.length;)n.unshift(0);return n},r=this.getX().toBigInteger(),n=this.getY().toBigInteger(),i=e(r,32);return t?n.isEven()?i.unshift(2):i.unshift(3):(i.unshift(4),i=i.concat(e(n,32))),i},Ve.decodeFrom=function(t,e){e[0];var r=e.length-1,n=e.slice(1,1+r/2),i=e.slice(1+r/2,1+r);n.unshift(0),i.unshift(0);var o=new w(n),s=new w(i);return new Ve(t,t.fromBigInteger(o),t.fromBigInteger(s))},Ve.decodeFromHex=function(t,e){e.substr(0,2);var r=e.length-2,n=e.substr(2,r/2),i=e.substr(2+r/2,r/2),o=new w(n,16),s=new w(i,16);return new Ve(t,t.fromBigInteger(o),t.fromBigInteger(s))},Ve.prototype.add2D=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;if(this.x.equals(t.x))return this.y.equals(t.y)?this.twice():this.curve.getInfinity();var e=t.x.subtract(this.x),r=t.y.subtract(this.y).divide(e),n=r.square().subtract(this.x).subtract(t.x),i=r.multiply(this.x.subtract(n)).subtract(this.y);return new Ve(this.curve,n,i)},Ve.prototype.twice2D=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var t=this.curve.fromBigInteger(w.valueOf(2)),e=this.curve.fromBigInteger(w.valueOf(3)),r=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(t)),n=r.square().subtract(this.x.multiply(t)),i=r.multiply(this.x.subtract(n)).subtract(this.y);return new Ve(this.curve,n,i)},Ve.prototype.multiply2D=function(t){if(this.isInfinity())return this;if(0==t.signum())return this.curve.getInfinity();var e,r=t,n=r.multiply(new w("3")),i=this.negate(),o=this;for(e=n.bitLength()-2;e>0;--e){o=o.twice();var s=n.testBit(e);s!=r.testBit(e)&&(o=o.add2D(s?this:i))}return o},Ve.prototype.isOnCurve=function(){var t=this.getX().toBigInteger(),e=this.getY().toBigInteger(),r=this.curve.getA().toBigInteger(),n=this.curve.getB().toBigInteger(),i=this.curve.getQ(),o=e.multiply(e).mod(i),s=t.multiply(t).multiply(t).add(r.multiply(t)).add(n).mod(i);return o.equals(s)},Ve.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"},Ve.prototype.validate=function(){var t=this.curve.getQ();if(this.isInfinity())throw new Error("Point is at infinity.");var e=this.getX().toBigInteger(),r=this.getY().toBigInteger();if(e.compareTo(w.ONE)<0||e.compareTo(t.subtract(w.ONE))>0)throw new Error("x coordinate out of bounds");if(r.compareTo(w.ONE)<0||r.compareTo(t.subtract(w.ONE))>0)throw new Error("y coordinate out of bounds");if(!this.isOnCurve())throw new Error("Point is not on the curve.");if(this.multiply(t).isInfinity())throw new Error("Point is not a scalar multiple of G.");return!0};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var _r=function(){var t=new RegExp('(?:false|true|null|[\\{\\}\\[\\]]|(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)|(?:"(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))*"))',"g"),e=new RegExp("\\\\(?:([^u])|u(.{4}))","g"),r={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function n(t,e,n){return e?r[e]:String.fromCharCode(parseInt(n,16))}var i=new String(""),o=Object.hasOwnProperty;return function(r,s){var a,u,c=r.match(t),h=c[0],l=!1;"{"===h?a={}:"["===h?a=[]:(a=[],l=!0);for(var f=[a],d=1-l,p=c.length;d<p;++d){var v;switch((h=c[d]).charCodeAt(0)){default:(v=f[0])[u||v.length]=+h,u=void 0;break;case 34:if(-1!==(h=h.substring(1,h.length-1)).indexOf("\\")&&(h=h.replace(e,n)),v=f[0],!u){if(!(v instanceof Array)){u=h||i;break}u=v.length}v[u]=h,u=void 0;break;case 91:v=f[0],f.unshift(v[u||v.length]=[]),u=void 0;break;case 93:f.shift();break;case 102:(v=f[0])[u||v.length]=!1,u=void 0;break;case 110:(v=f[0])[u||v.length]=null,u=void 0;break;case 116:(v=f[0])[u||v.length]=!0,u=void 0;break;case 123:v=f[0],f.unshift(v[u||v.length]={}),u=void 0;break;case 125:f.shift()}}if(l){if(1!==f.length)throw new Error;a=a[0]}else if(f.length)throw new Error;if(s){a=function t(e,r){var n=e[r];if(n&&"object"===(void 0===n?"undefined":g(n))){var i=null;for(var a in n)if(o.call(n,a)&&n!==e){var u=t(n,a);void 0!==u?n[a]=u:(i||(i=[]),i.push(a))}if(i)for(var c=i.length;--c>=0;)delete n[i[c]]}return s.call(e,r,n)}({"":a},"")}return a}}();void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.asn1&&Sr.asn1||(Sr.asn1={}),Sr.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var r=e.substr(1).length;r%2==1?r+=1:e.match(/^[0-7]/)||(r+=2);for(var n="",i=0;i<r;i++)n+="f";e=new w(n,16).xor(t).add(w.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return jr(t,e)},this.newObject=function(t){var e=Sr.asn1,r=e.ASN1Object,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,s=e.DEROctetString,a=e.DERNull,u=e.DERObjectIdentifier,c=e.DEREnumerated,h=e.DERUTF8String,l=e.DERNumericString,f=e.DERPrintableString,g=e.DERTeletexString,d=e.DERIA5String,p=e.DERUTCTime,v=e.DERGeneralizedTime,y=e.DERVisibleString,m=e.DERBMPString,_=e.DERSequence,S=e.DERSet,b=e.DERTaggedObject,w=e.ASN1Util.newObject;if(t instanceof e.ASN1Object)return t;var F=Object.keys(t);if(1!=F.length)throw new Error("key of param shall be only one.");var E=F[0];if(-1==":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":"+E+":"))throw new Error("undefined key: "+E);if("bool"==E)return new n(t[E]);if("int"==E)return new i(t[E]);if("bitstr"==E)return new o(t[E]);if("octstr"==E)return new s(t[E]);if("null"==E)return new a(t[E]);if("oid"==E)return new u(t[E]);if("enum"==E)return new c(t[E]);if("utf8str"==E)return new h(t[E]);if("numstr"==E)return new l(t[E]);if("prnstr"==E)return new f(t[E]);if("telstr"==E)return new g(t[E]);if("ia5str"==E)return new d(t[E]);if("utctime"==E)return new p(t[E]);if("gentime"==E)return new v(t[E]);if("visstr"==E)return new y(t[E]);if("bmpstr"==E)return new m(t[E]);if("asn1"==E)return new r(t[E]);if("seq"==E){for(var x=t[E],A=[],k=0;k<x.length;k++){var P=w(x[k]);A.push(P)}return new _({array:A})}if("set"==E){for(x=t[E],A=[],k=0;k<x.length;k++){P=w(x[k]);A.push(P)}return new S({array:A})}if("tag"==E){var C=t[E];if("[object Array]"===Object.prototype.toString.call(C)&&3==C.length){var T=w(C[2]);return new b({tag:C[0],explicit:C[1],obj:T})}return new b(C)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},Sr.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",r=parseInt(t.substr(0,2),16),n=(e=Math.floor(r/40)+"."+r%40,""),i=2;i<t.length;i+=2){var o=("00000000"+parseInt(t.substr(i,2),16).toString(2)).slice(-8);if(n+=o.substr(1,7),"0"==o.substr(0,1))e=e+"."+new w(n,2).toString(10),n=""}return e},Sr.asn1.ASN1Util.oidIntToHex=function(t){var e=function t(e){var r=e.toString(16);return 1==r.length&&(r="0"+r),r},r=function t(r){var n="",i=new w(r,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var s="",a=0;a<o;a++)s+="0";i=s+i;for(a=0;a<i.length-1;a+=7){var u=i.substr(a,7);a!=i.length-7&&(u="1"+u),n+=e(parseInt(u,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",i=t.split("."),o=40*parseInt(i[0])+parseInt(i[1]);n+=e(o),i.splice(0,2);for(var s=0;s<i.length;s++)n+=r(i[s]);return n},Sr.asn1.ASN1Object=function(t){this.params=null,this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw new Error("this.hV is null or undefined");if(this.hV.length%2==1)throw new Error("value hex must be even length: n="+"".length+",v="+this.hV);var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var r=e.length/2;if(r>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+r).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""},this.setByParam=function(t){this.params=t},null!=t&&null!=t.tlv&&(this.hTLV=t.tlv,this.isModified=!1)},Sr.asn1.DERAbstractString=function(t){Sr.asn1.DERAbstractString.superclass.constructor.call(this);this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=Ir(this.s).toLowerCase()},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},Zr(Sr.asn1.DERAbstractString,Sr.asn1.ASN1Object),Sr.asn1.DERAbstractTime=function(t){Sr.asn1.DERAbstractTime.superclass.constructor.call(this);this.localDateToUTC=function(t){var e=t.getTime()+6e4*t.getTimezoneOffset();return new Date(e)},this.formatDate=function(t,e,r){var n=this.zeroPadding,i=this.localDateToUTC(t),o=String(i.getFullYear());"utc"==e&&(o=o.substr(2,2));var s=o+n(String(i.getMonth()+1),2)+n(String(i.getDate()),2)+n(String(i.getHours()),2)+n(String(i.getMinutes()),2)+n(String(i.getSeconds()),2);if(!0===r){var a=i.getMilliseconds();if(0!=a){var u=n(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=kr(t)},this.setByDateValue=function(t,e,r,n,i,o){var s=new Date(Date.UTC(t,e-1,r,n,i,o,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},Zr(Sr.asn1.DERAbstractTime,Sr.asn1.ASN1Object),Sr.asn1.DERAbstractStructured=function(t){Sr.asn1.DERAbstractString.superclass.constructor.call(this);this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},Zr(Sr.asn1.DERAbstractStructured,Sr.asn1.ASN1Object),Sr.asn1.DERBoolean=function(t){Sr.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV=0==t?"010100":"0101ff"},Zr(Sr.asn1.DERBoolean,Sr.asn1.ASN1Object),Sr.asn1.DERInteger=function(t){Sr.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Sr.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new w(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Zr(Sr.asn1.DERInteger,Sr.asn1.ASN1Object),Sr.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Sr.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}Sr.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var r="0"+t;this.hTLV=null,this.isModified=!0,this.hV=r+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var r=0;r<=e;r++)t+="0";var n="";for(r=0;r<t.length-1;r+=8){var i=t.substr(r,8),o=parseInt(i,2).toString(16);1==o.length&&(o="0"+o),n+=o}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",r=0;r<t.length;r++)1==t[r]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},Zr(Sr.asn1.DERBitString,Sr.asn1.ASN1Object),Sr.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=Sr.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}Sr.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},Zr(Sr.asn1.DEROctetString,Sr.asn1.DERAbstractString),Sr.asn1.DERNull=function(){Sr.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},Zr(Sr.asn1.DERNull,Sr.asn1.ASN1Object),Sr.asn1.DERObjectIdentifier=function(t){Sr.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){var e=function r(t){var e=function t(e){var r=e.toString(16);return 1==r.length&&(r="0"+r),r},r=function t(r){var n="",i=parseInt(r,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var s="",a=0;a<o;a++)s+="0";i=s+i;for(a=0;a<i.length-1;a+=7){var u=i.substr(a,7);a!=i.length-7&&(u="1"+u),n+=e(parseInt(u,2))}return n};try{if(!t.match(/^[0-9.]+$/))return null;var n="",i=t.split("."),o=40*parseInt(i[0],10)+parseInt(i[1],10);n+=e(o),i.splice(0,2);for(var s=0;s<i.length;s++)n+=r(i[s]);return n}catch(t){return null}}(t);if(null==e)throw new Error("malformed oid string: "+t);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.setValueName=function(t){var e=Sr.asn1.x509.OID.name2oid(t);if(""===e)throw new Error("DERObjectIdentifier oidName undefined: "+t);this.setValueOidString(e)},this.setValueNameOrOid=function(t){t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(t){"string"==typeof t?this.setValueNameOrOid(t):void 0!==t.oid?this.setValueNameOrOid(t.oid):void 0!==t.name?this.setValueNameOrOid(t.name):void 0!==t.hex&&this.setValueHex(t.hex)},void 0!==t&&this.setByParam(t)},Zr(Sr.asn1.DERObjectIdentifier,Sr.asn1.ASN1Object),Sr.asn1.DEREnumerated=function(t){Sr.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=Sr.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new w(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},Zr(Sr.asn1.DEREnumerated,Sr.asn1.ASN1Object),Sr.asn1.DERUTF8String=function(t){Sr.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},Zr(Sr.asn1.DERUTF8String,Sr.asn1.DERAbstractString),Sr.asn1.DERNumericString=function(t){Sr.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},Zr(Sr.asn1.DERNumericString,Sr.asn1.DERAbstractString),Sr.asn1.DERPrintableString=function(t){Sr.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},Zr(Sr.asn1.DERPrintableString,Sr.asn1.DERAbstractString),Sr.asn1.DERTeletexString=function(t){Sr.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},Zr(Sr.asn1.DERTeletexString,Sr.asn1.DERAbstractString),Sr.asn1.DERIA5String=function(t){Sr.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},Zr(Sr.asn1.DERIA5String,Sr.asn1.DERAbstractString),Sr.asn1.DERVisibleString=function(t){Sr.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="1a"},Zr(Sr.asn1.DERVisibleString,Sr.asn1.DERAbstractString),Sr.asn1.DERBMPString=function(t){Sr.asn1.DERBMPString.superclass.constructor.call(this,t),this.hT="1e"},Zr(Sr.asn1.DERBMPString,Sr.asn1.DERAbstractString),Sr.asn1.DERUTCTime=function(t){Sr.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=kr(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=kr(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},Zr(Sr.asn1.DERUTCTime,Sr.asn1.DERAbstractTime),Sr.asn1.DERGeneralizedTime=function(t){Sr.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=kr(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=kr(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},Zr(Sr.asn1.DERGeneralizedTime,Sr.asn1.DERAbstractTime),Sr.asn1.DERSequence=function(t){Sr.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},Zr(Sr.asn1.DERSequence,Sr.asn1.DERAbstractStructured),Sr.asn1.DERSet=function(t){Sr.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var r=this.asn1Array[e];t.push(r.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},Zr(Sr.asn1.DERSet,Sr.asn1.DERAbstractStructured),Sr.asn1.DERTaggedObject=function(t){Sr.asn1.DERTaggedObject.superclass.constructor.call(this);var e=Sr.asn1;this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,r){this.hT=e,this.isExplicit=t,this.asn1Object=r,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=r.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(t){null!=t.tag&&(this.hT=t.tag),null!=t.explicit&&(this.isExplicit=t.explicit),null!=t.tage&&(this.hT=t.tage,this.isExplicit=!0),null!=t.tagi&&(this.hT=t.tagi,this.isExplicit=!1),null!=t.obj&&(t.obj instanceof e.ASN1Object?(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)):"object"==g(t.obj)&&(this.asn1Object=e.ASN1Util.newObject(t.obj),this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},null!=t&&this.setByParam(t)},Zr(Sr.asn1.DERTaggedObject,Sr.asn1.ASN1Object);var Sr,br,wr,Fr=new function(){};function Er(t){for(var e=new Array,r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e}function xr(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}function Ar(t){for(var e="",r=0;r<t.length;r++){var n=t[r].toString(16);1==n.length&&(n="0"+n),e+=n}return e}function kr(t){return Ar(Er(t))}function Pr(t){return t=(t=(t=t.replace(/\=/g,"")).replace(/\+/g,"-")).replace(/\//g,"_")}function Cr(t){return t.length%4==2?t+="==":t.length%4==3&&(t+="="),t=(t=t.replace(/-/g,"+")).replace(/_/g,"/")}function Tr(t){return t.length%2==1&&(t="0"+t),Pr(_(t))}function Rr(t){return S(Cr(t))}function Ir(t){return Kr(Gr(t))}function Dr(t){return decodeURIComponent(qr(t))}function Lr(t){for(var e="",r=0;r<t.length-1;r+=2)e+=String.fromCharCode(parseInt(t.substr(r,2),16));return e}function Nr(t){for(var e="",r=0;r<t.length;r++)e+=("0"+t.charCodeAt(r).toString(16)).slice(-2);return e}function Ur(t){return _(t)}function Br(t){var e=Ur(t).replace(/(.{64})/g,"$1\r\n");return e=e.replace(/\r\n$/,"")}function Or(t){return S(t.replace(/[^0-9A-Za-z\/+=]*/g,""))}function jr(t,e){return"-----BEGIN "+e+"-----\r\n"+Br(t)+"\r\n-----END "+e+"-----\r\n"}function Mr(t,e){if(-1==t.indexOf("-----BEGIN "))throw"can't find PEM header: "+e;return Or(t=void 0!==e?(t=t.replace(new RegExp("^[^]*-----BEGIN "+e+"-----"),"")).replace(new RegExp("-----END "+e+"-----[^]*$"),""):(t=t.replace(/^[^]*-----BEGIN [^-]+-----/,"")).replace(/-----END [^-]+-----[^]*$/,""))}function Hr(t){var e,r,n,i,o,s,a,u,c,h,l;if(l=t.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/))return u=l[1],e=parseInt(u),2===u.length&&(50<=e&&e<100?e=1900+e:0<=e&&e<50&&(e=2e3+e)),r=parseInt(l[2])-1,n=parseInt(l[3]),i=parseInt(l[4]),o=parseInt(l[5]),s=parseInt(l[6]),a=0,""!==(c=l[7])&&(h=(c.substr(1)+"00").substr(0,3),a=parseInt(h)),Date.UTC(e,r,n,i,o,s,a);throw"unsupported zulu format: "+t}function Vr(t){return~~(Hr(t)/1e3)}function Kr(t){return t.replace(/%/g,"")}function qr(t){return t.replace(/(..)/g,"%$1")}function Jr(t){var e="malformed IPv6 address";if(!t.match(/^[0-9A-Fa-f:]+$/))throw e;var r=(t=t.toLowerCase()).split(":").length-1;if(r<2)throw e;var n=":".repeat(7-r+2),i=(t=t.replace("::",n)).split(":");if(8!=i.length)throw e;for(var o=0;o<8;o++)i[o]=("0000"+i[o]).slice(-4);return i.join("")}function Wr(t){if(!t.match(/^[0-9A-Fa-f]{32}$/))throw"malformed IPv6 address octet";for(var e=(t=t.toLowerCase()).match(/.{1,4}/g),r=0;r<8;r++)e[r]=e[r].replace(/^0+/,""),""==e[r]&&(e[r]="0");var n=(t=":"+e.join(":")+":").match(/:(0:){2,}/g);if(null===n)return t.slice(1,-1);var i="";for(r=0;r<n.length;r++)n[r].length>i.length&&(i=n[r]);return(t=t.replace(i,"::")).slice(1,-1)}function zr(t){var e="malformed hex value";if(!t.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/))throw e;if(8!=t.length)return 32==t.length?Wr(t):t;try{return parseInt(t.substr(0,2),16)+"."+parseInt(t.substr(2,2),16)+"."+parseInt(t.substr(4,2),16)+"."+parseInt(t.substr(6,2),16)}catch(t){throw e}}function Yr(t){return t.match(/.{4}/g).map((function e(t){var e=parseInt(t.substr(0,2),16),r=parseInt(t.substr(2),16);if(0==e&r<128)return String.fromCharCode(r);if(e<8){var n=128|63&r;return Dr((192|(7&e)<<3|(192&r)>>6).toString(16)+n.toString(16))}n=128|(15&e)<<2|(192&r)>>6;var i=128|63&r;return Dr((224|(240&e)>>4).toString(16)+n.toString(16)+i.toString(16))})).join("")}function Gr(t){for(var e=encodeURIComponent(t),r="",n=0;n<e.length;n++)"%"==e[n]?(r+=e.substr(n,3),n+=2):r=r+"%"+kr(e[n]);return r}function Xr(t){return!(t.length%2!=0||!t.match(/^[0-9a-f]+$/)&&!t.match(/^[0-9A-F]+$/))}function $r(t){return t.length%2==1?"0"+t:t.substr(0,1)>"7"?"00"+t:t}Fr.getLblen=function(t,e){if("8"!=t.substr(e+2,1))return 1;var r=parseInt(t.substr(e+3,1));return 0==r?-1:0<r&&r<10?r+1:-2},Fr.getL=function(t,e){var r=Fr.getLblen(t,e);return r<1?"":t.substr(e+2,2*r)},Fr.getVblen=function(t,e){var r;return""==(r=Fr.getL(t,e))?-1:("8"===r.substr(0,1)?new w(r.substr(2),16):new w(r,16)).intValue()},Fr.getVidx=function(t,e){var r=Fr.getLblen(t,e);return r<0?r:e+2*(r+1)},Fr.getV=function(t,e){var r=Fr.getVidx(t,e),n=Fr.getVblen(t,e);return t.substr(r,2*n)},Fr.getTLV=function(t,e){return t.substr(e,2)+Fr.getL(t,e)+Fr.getV(t,e)},Fr.getTLVblen=function(t,e){return 2+2*Fr.getLblen(t,e)+2*Fr.getVblen(t,e)},Fr.getNextSiblingIdx=function(t,e){return Fr.getVidx(t,e)+2*Fr.getVblen(t,e)},Fr.getChildIdx=function(t,e){var r,n,i,o=Fr,s=[];r=o.getVidx(t,e),n=2*o.getVblen(t,e),"03"==t.substr(e,2)&&(r+=2,n-=2),i=0;for(var a=r;i<=n;){var u=o.getTLVblen(t,a);if((i+=u)<=n&&s.push(a),a+=u,i>=n)break}return s},Fr.getNthChildIdx=function(t,e,r){return Fr.getChildIdx(t,e)[r]},Fr.getIdxbyList=function(t,e,r,n){var i,o,s=Fr;return 0==r.length?void 0!==n&&t.substr(e,2)!==n?-1:e:(i=r.shift())>=(o=s.getChildIdx(t,e)).length?-1:s.getIdxbyList(t,o[i],r,n)},Fr.getIdxbyListEx=function(t,e,r,n){var i,o,s=Fr;if(0==r.length)return void 0!==n&&t.substr(e,2)!==n?-1:e;i=r.shift(),o=s.getChildIdx(t,e);for(var a=0,u=0;u<o.length;u++){var c=t.substr(o[u],2);if("number"==typeof i&&!s.isContextTag(c)&&a==i||"string"==typeof i&&s.isContextTag(c,i))return s.getIdxbyListEx(t,o[u],r,n);s.isContextTag(c)||a++}return-1},Fr.getTLVbyList=function(t,e,r,n){var i=Fr,o=i.getIdxbyList(t,e,r,n);return-1==o||o>=t.length?null:i.getTLV(t,o)},Fr.getTLVbyListEx=function(t,e,r,n){var i=Fr,o=i.getIdxbyListEx(t,e,r,n);return-1==o?null:i.getTLV(t,o)},Fr.getVbyList=function(t,e,r,n,i){var o,s,a=Fr;return-1==(o=a.getIdxbyList(t,e,r,n))||o>=t.length?null:(s=a.getV(t,o),!0===i&&(s=s.substr(2)),s)},Fr.getVbyListEx=function(t,e,r,n,i){var o,s,a=Fr;return-1==(o=a.getIdxbyListEx(t,e,r,n))?null:(s=a.getV(t,o),"03"==t.substr(o,2)&&!1!==i&&(s=s.substr(2)),s)},Fr.getInt=function(t,e,r){null==r&&(r=-1);try{var n=t.substr(e,2);if("02"!=n&&"03"!=n)return r;var i=Fr.getV(t,e);return"02"==n?parseInt(i,16):function o(t){try{var e=t.substr(0,2);if("00"==e)return parseInt(t.substr(2),16);var r=parseInt(e,16),n=t.substr(2),i=parseInt(n,16).toString(2);return"0"==i&&(i="00000000"),i=i.slice(0,0-r),parseInt(i,2)}catch(t){return-1}}(i)}catch(t){return r}},Fr.getOID=function(t,e,r){null==r&&(r=null);try{return"06"!=t.substr(e,2)?r:function n(t){if(!Xr(t))return null;try{var e=[],r=t.substr(0,2),n=parseInt(r,16);e[0]=new String(Math.floor(n/40)),e[1]=new String(n%40);for(var i=t.substr(2),o=[],s=0;s<i.length/2;s++)o.push(parseInt(i.substr(2*s,2),16));var a=[],u="";for(s=0;s<o.length;s++)128&o[s]?u+=Qr((127&o[s]).toString(2),7):(u+=Qr((127&o[s]).toString(2),7),a.push(new String(parseInt(u,2))),u="");var c=e.join(".");return a.length>0&&(c=c+"."+a.join(".")),c}catch(t){return null}}(Fr.getV(t,e))}catch(t){return r}},Fr.getOIDName=function(t,e,r){null==r&&(r=null);try{var n=Fr.getOID(t,e,r);if(n==r)return r;var i=Sr.asn1.x509.OID.oid2name(n);return""==i?n:i}catch(t){return r}},Fr.getString=function(t,e,r){null==r&&(r=null);try{return Lr(Fr.getV(t,e))}catch(t){return r}},Fr.hextooidstr=function(t){var e=function t(e,r){return e.length>=r?e:new Array(r-e.length+1).join("0")+e},r=[],n=t.substr(0,2),i=parseInt(n,16);r[0]=new String(Math.floor(i/40)),r[1]=new String(i%40);for(var o=t.substr(2),s=[],a=0;a<o.length/2;a++)s.push(parseInt(o.substr(2*a,2),16));var u=[],c="";for(a=0;a<s.length;a++)128&s[a]?c+=e((127&s[a]).toString(2),7):(c+=e((127&s[a]).toString(2),7),u.push(new String(parseInt(c,2))),c="");var h=r.join(".");return u.length>0&&(h=h+"."+u.join(".")),h},Fr.dump=function(t,e,r,n){var i=Fr,o=i.getV,s=i.dump,a=i.getChildIdx,u=t;t instanceof Sr.asn1.ASN1Object&&(u=t.getEncodedHex());var c=function t(e,r){return e.length<=2*r?e:e.substr(0,r)+"..(total "+e.length/2+"bytes).."+e.substr(e.length-r,r)};void 0===e&&(e={ommit_long_octet:32}),void 0===r&&(r=0),void 0===n&&(n="");var h,l=e.ommit_long_octet;if("01"==(h=u.substr(r,2)))return"00"==(f=o(u,r))?n+"BOOLEAN FALSE\n":n+"BOOLEAN TRUE\n";if("02"==h)return n+"INTEGER "+c(f=o(u,r),l)+"\n";if("03"==h){var f=o(u,r);if(i.isASN1HEX(f.substr(2))){var g=n+"BITSTRING, encapsulates\n";return g+=s(f.substr(2),e,0,n+"  ")}return n+"BITSTRING "+c(f,l)+"\n"}if("04"==h){f=o(u,r);if(i.isASN1HEX(f)){g=n+"OCTETSTRING, encapsulates\n";return g+=s(f,e,0,n+"  ")}return n+"OCTETSTRING "+c(f,l)+"\n"}if("05"==h)return n+"NULL\n";if("06"==h){var d=o(u,r),p=Sr.asn1.ASN1Util.oidHexToInt(d),v=Sr.asn1.x509.OID.oid2name(p),y=p.replace(/\./g," ");return""!=v?n+"ObjectIdentifier "+v+" ("+y+")\n":n+"ObjectIdentifier ("+y+")\n"}if("0a"==h)return n+"ENUMERATED "+parseInt(o(u,r))+"\n";if("0c"==h)return n+"UTF8String '"+Dr(o(u,r))+"'\n";if("13"==h)return n+"PrintableString '"+Dr(o(u,r))+"'\n";if("14"==h)return n+"TeletexString '"+Dr(o(u,r))+"'\n";if("16"==h)return n+"IA5String '"+Dr(o(u,r))+"'\n";if("17"==h)return n+"UTCTime "+Dr(o(u,r))+"\n";if("18"==h)return n+"GeneralizedTime "+Dr(o(u,r))+"\n";if("1a"==h)return n+"VisualString '"+Dr(o(u,r))+"'\n";if("1e"==h)return n+"BMPString '"+Yr(o(u,r))+"'\n";if("30"==h){if("3000"==u.substr(r,4))return n+"SEQUENCE {}\n";g=n+"SEQUENCE\n";var m=e;if((2==(b=a(u,r)).length||3==b.length)&&"06"==u.substr(b[0],2)&&"04"==u.substr(b[b.length-1],2)){v=i.oidname(o(u,b[0]));var _=JSON.parse(JSON.stringify(e));_.x509ExtName=v,m=_}for(var S=0;S<b.length;S++)g+=s(u,m,b[S],n+"  ");return g}if("31"==h){g=n+"SET\n";var b=a(u,r);for(S=0;S<b.length;S++)g+=s(u,e,b[S],n+"  ");return g}if(0!=(128&(h=parseInt(h,16)))){var w=31&h;if(0!=(32&h)){for(g=n+"["+w+"]\n",b=a(u,r),S=0;S<b.length;S++)g+=s(u,e,b[S],n+"  ");return g}f=o(u,r);if(Fr.isASN1HEX(f)){var g=n+"["+w+"]\n";return g+=s(f,e,0,n+"  ")}return("68747470"==f.substr(0,8)||"subjectAltName"===e.x509ExtName&&2==w)&&(f=Dr(f)),g=n+"["+w+"] "+f+"\n"}return n+"UNKNOWN("+h+") "+o(u,r)+"\n"},Fr.isContextTag=function(t,e){var r,n;t=t.toLowerCase();try{r=parseInt(t,16)}catch(t){return-1}if(void 0===e)return 128==(192&r);try{return null!=e.match(/^\[[0-9]+\]$/)&&(!((n=parseInt(e.substr(1,e.length-1),10))>31)&&(128==(192&r)&&(31&r)==n))}catch(t){return!1}},Fr.isASN1HEX=function(t){var e=Fr;if(t.length%2==1)return!1;var r=e.getVblen(t,0),n=t.substr(0,2),i=e.getL(t,0);return t.length-n.length-i.length==2*r},Fr.checkStrictDER=function(t,e,r,n,i){var o=Fr;if(void 0===r){if("string"!=typeof t)throw new Error("not hex string");if(t=t.toLowerCase(),!Sr.lang.String.isHex(t))throw new Error("not hex string");r=t.length,i=(n=t.length/2)<128?1:Math.ceil(n.toString(16))+1}if(o.getL(t,e).length>2*i)throw new Error("L of TLV too long: idx="+e);var s=o.getVblen(t,e);if(s>n)throw new Error("value of L too long than hex: idx="+e);var a=o.getTLV(t,e),u=a.length-2-o.getL(t,e).length;if(u!==2*s)throw new Error("V string length and L's value not the same:"+u+"/"+2*s);if(0===e&&t.length!=a.length)throw new Error("total length and TLV length unmatch:"+t.length+"!="+a.length);var c=t.substr(e,2);if("02"===c){var h=o.getVidx(t,e);if("00"==t.substr(h,2)&&t.charCodeAt(h+2)<56)throw new Error("not least zeros for DER INTEGER")}if(32&parseInt(c,16)){for(var l=o.getVblen(t,e),f=0,g=o.getChildIdx(t,e),d=0;d<g.length;d++){f+=o.getTLV(t,g[d]).length,o.checkStrictDER(t,g[d],r,n,i)}if(2*l!=f)throw new Error("sum of children's TLV length and L unmatch: "+2*l+"!="+f)}},Fr.oidname=function(t){var e=Sr.asn1;Sr.lang.String.isHex(t)&&(t=e.ASN1Util.oidHexToInt(t));var r=e.x509.OID.oid2name(t);return""===r&&(r=t),r},void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.lang&&Sr.lang||(Sr.lang={}),Sr.lang.String=function(){},"function"==typeof t?(e.utf8tob64u=br=function e(r){return Pr(t.from(r,"utf8").toString("base64"))},e.b64utoutf8=wr=function e(r){return t.from(Cr(r),"base64").toString("utf8")}):(e.utf8tob64u=br=function t(e){return Tr(Kr(Gr(e)))},e.b64utoutf8=wr=function t(e){return decodeURIComponent(qr(Rr(e)))}),Sr.lang.String.isInteger=function(t){return!!t.match(/^[0-9]+$/)||!!t.match(/^-[0-9]+$/)},Sr.lang.String.isHex=function(t){return Xr(t)},Sr.lang.String.isBase64=function(t){return!(!(t=t.replace(/\s+/g,"")).match(/^[0-9A-Za-z+\/]+={0,3}$/)||t.length%4!=0)},Sr.lang.String.isBase64URL=function(t){return!t.match(/[+/=]/)&&(t=Cr(t),Sr.lang.String.isBase64(t))},Sr.lang.String.isIntegerArray=function(t){return!!(t=t.replace(/\s+/g,"")).match(/^\[[0-9,]+\]$/)},Sr.lang.String.isPrintable=function(t){return null!==t.match(/^[0-9A-Za-z '()+,-./:=?]*$/)},Sr.lang.String.isIA5=function(t){return null!==t.match(/^[\x20-\x21\x23-\x7f]*$/)},Sr.lang.String.isMail=function(t){return null!==t.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/)};var Qr=function t(e,r,n){return null==n&&(n="0"),e.length>=r?e:new Array(r-e.length+1).join(n)+e};function Zr(t,e){var r=function t(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t,t.superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e)}void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.crypto&&Sr.crypto||(Sr.crypto={}),Sr.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414"},this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHAwithRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa"},this.CRYPTOJSMESSAGEDIGESTNAME={md5:v.algo.MD5,sha1:v.algo.SHA1,sha224:v.algo.SHA224,sha256:v.algo.SHA256,sha384:v.algo.SHA384,sha512:v.algo.SHA512,ripemd160:v.algo.RIPEMD160},this.getDigestInfoHex=function(t,e){if(void 0===this.DIGESTINFOHEAD[e])throw"alg not supported in Util.DIGESTINFOHEAD: "+e;return this.DIGESTINFOHEAD[e]+t},this.getPaddedDigestInfoHex=function(t,e,r){var n=this.getDigestInfoHex(t,e),i=r/4;if(n.length+22>i)throw"key is too short for SigAlg: keylen="+r+","+e;for(var o="0001",s="00"+n,a="",u=i-o.length-s.length,c=0;c<u;c+=2)a+="ff";return o+a+s},this.hashString=function(t,e){return new Sr.crypto.MessageDigest({alg:e}).digestString(t)},this.hashHex=function(t,e){return new Sr.crypto.MessageDigest({alg:e}).digestHex(t)},this.sha1=function(t){return this.hashString(t,"sha1")},this.sha256=function(t){return this.hashString(t,"sha256")},this.sha256Hex=function(t){return this.hashHex(t,"sha256")},this.sha512=function(t){return this.hashString(t,"sha512")},this.sha512Hex=function(t){return this.hashHex(t,"sha512")},this.isKey=function(t){return t instanceof Me||t instanceof Sr.crypto.DSA||t instanceof Sr.crypto.ECDSA}},Sr.crypto.Util.md5=function(t){return new Sr.crypto.MessageDigest({alg:"md5",prov:"cryptojs"}).digestString(t)},Sr.crypto.Util.ripemd160=function(t){return new Sr.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"}).digestString(t)},Sr.crypto.Util.SECURERANDOMGEN=new Be,Sr.crypto.Util.getRandomHexOfNbytes=function(t){var e=new Array(t);return Sr.crypto.Util.SECURERANDOMGEN.nextBytes(e),Ar(e)},Sr.crypto.Util.getRandomBigIntegerOfNbytes=function(t){return new w(Sr.crypto.Util.getRandomHexOfNbytes(t),16)},Sr.crypto.Util.getRandomHexOfNbits=function(t){var e=t%8,r=new Array((t-e)/8+1);return Sr.crypto.Util.SECURERANDOMGEN.nextBytes(r),r[0]=(255<<e&255^255)&r[0],Ar(r)},Sr.crypto.Util.getRandomBigIntegerOfNbits=function(t){return new w(Sr.crypto.Util.getRandomHexOfNbits(t),16)},Sr.crypto.Util.getRandomBigIntegerZeroToMax=function(t){for(var e=t.bitLength();;){var r=Sr.crypto.Util.getRandomBigIntegerOfNbits(e);if(-1!=t.compareTo(r))return r}},Sr.crypto.Util.getRandomBigIntegerMinToMax=function(t,e){var r=t.compareTo(e);if(1==r)throw"biMin is greater than biMax";if(0==r)return t;var n=e.subtract(t);return Sr.crypto.Util.getRandomBigIntegerZeroToMax(n).add(t)},Sr.crypto.MessageDigest=function(t){this.setAlgAndProvider=function(t,e){if(null!==(t=Sr.crypto.MessageDigest.getCanonicalAlgName(t))&&void 0===e&&(e=Sr.crypto.Util.DEFAULTPROVIDER[t]),-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(t)&&"cryptojs"==e){try{this.md=Sr.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[t].create()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+t+"/"+e}this.updateString=function(t){this.md.update(t)},this.updateHex=function(t){var e=v.enc.Hex.parse(t);this.md.update(e)},this.digest=function(){return this.md.finalize().toString(v.enc.Hex)},this.digestString=function(t){return this.updateString(t),this.digest()},this.digestHex=function(t){return this.updateHex(t),this.digest()}}if(-1!=":sha256:".indexOf(t)&&"sjcl"==e){try{this.md=new sjcl.hash.sha256}catch(e){throw"setAlgAndProvider hash alg set fail alg="+t+"/"+e}this.updateString=function(t){this.md.update(t)},this.updateHex=function(t){var e=sjcl.codec.hex.toBits(t);this.md.update(e)},this.digest=function(){var t=this.md.finalize();return sjcl.codec.hex.fromBits(t)},this.digestString=function(t){return this.updateString(t),this.digest()},this.digestHex=function(t){return this.updateHex(t),this.digest()}}},this.updateString=function(t){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestString=function(t){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestHex=function(t){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},void 0!==t&&void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov&&(this.provName=Sr.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName))},Sr.crypto.MessageDigest.getCanonicalAlgName=function(t){return"string"==typeof t&&(t=(t=t.toLowerCase()).replace(/-/,"")),t},Sr.crypto.MessageDigest.getHashLength=function(t){var e=Sr.crypto.MessageDigest,r=e.getCanonicalAlgName(t);if(void 0===e.HASHLENGTH[r])throw"not supported algorithm: "+t;return e.HASHLENGTH[r]},Sr.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20},Sr.crypto.Mac=function(t){this.setAlgAndProvider=function(t,e){if(null==(t=t.toLowerCase())&&(t="hmacsha1"),"hmac"!=(t=t.toLowerCase()).substr(0,4))throw"setAlgAndProvider unsupported HMAC alg: "+t;void 0===e&&(e=Sr.crypto.Util.DEFAULTPROVIDER[t]),this.algProv=t+"/"+e;var r=t.substr(4);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(r)&&"cryptojs"==e){try{var n=Sr.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[r];this.mac=v.algo.HMAC.create(n,this.pass)}catch(t){throw"setAlgAndProvider hash alg set fail hashAlg="+r+"/"+t}this.updateString=function(t){this.mac.update(t)},this.updateHex=function(t){var e=v.enc.Hex.parse(t);this.mac.update(e)},this.doFinal=function(){return this.mac.finalize().toString(v.enc.Hex)},this.doFinalString=function(t){return this.updateString(t),this.doFinal()},this.doFinalHex=function(t){return this.updateHex(t),this.doFinal()}}},this.updateString=function(t){throw"updateString(str) not supported for this alg/prov: "+this.algProv},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv},this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv},this.doFinalString=function(t){throw"digestString(str) not supported for this alg/prov: "+this.algProv},this.doFinalHex=function(t){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv},this.setPassword=function(t){if("string"==typeof t){var e=t;return t.length%2!=1&&t.match(/^[0-9A-Fa-f]+$/)||(e=Nr(t)),void(this.pass=v.enc.Hex.parse(e))}if("object"!=(void 0===t?"undefined":g(t)))throw"KJUR.crypto.Mac unsupported password type: "+t;e=null;if(void 0!==t.hex){if(t.hex.length%2!=0||!t.hex.match(/^[0-9A-Fa-f]+$/))throw"Mac: wrong hex password: "+t.hex;e=t.hex}if(void 0!==t.utf8&&(e=Ir(t.utf8)),void 0!==t.rstr&&(e=Nr(t.rstr)),void 0!==t.b64&&(e=S(t.b64)),void 0!==t.b64u&&(e=Rr(t.b64u)),null==e)throw"KJUR.crypto.Mac unsupported password type: "+t;this.pass=v.enc.Hex.parse(e)},void 0!==t&&(void 0!==t.pass&&this.setPassword(t.pass),void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov&&(this.provName=Sr.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName)))},Sr.crypto.Signature=function(t){var e=null;if(this._setAlgNames=function(){var t=this.algName.match(/^(.+)with(.+)$/);t&&(this.mdAlgName=t[1].toLowerCase(),this.pubkeyAlgName=t[2].toLowerCase(),"rsaandmgf1"==this.pubkeyAlgName&&"sha"==this.mdAlgName&&(this.mdAlgName="sha1"))},this._zeroPaddingOfSignature=function(t,e){for(var r="",n=e/4-t.length,i=0;i<n;i++)r+="0";return r+t},this.setAlgAndProvider=function(t,e){if(this._setAlgNames(),"cryptojs/jsrsa"!=e)throw new Error("provider not supported: "+e);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)){try{this.md=new Sr.crypto.MessageDigest({alg:this.mdAlgName})}catch(t){throw new Error("setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+t)}this.init=function(t,e){var r=null;try{r=void 0===e?tn.getKey(t):tn.getKey(t,e)}catch(t){throw"init failed:"+t}if(!0===r.isPrivate)this.prvKey=r,this.state="SIGN";else{if(!0!==r.isPublic)throw"init failed.:"+r;this.pubKey=r,this.state="VERIFY"}},this.updateString=function(t){this.md.updateString(t)},this.updateHex=function(t){this.md.updateHex(t)},this.sign=function(){if(this.sHashHex=this.md.digest(),void 0===this.prvKey&&void 0!==this.ecprvhex&&void 0!==this.eccurvename&&void 0!==Sr.crypto.ECDSA&&(this.prvKey=new Sr.crypto.ECDSA({curve:this.eccurvename,prv:this.ecprvhex})),this.prvKey instanceof Me&&"rsaandmgf1"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen);else if(this.prvKey instanceof Me&&"rsa"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName);else if(this.prvKey instanceof Sr.crypto.ECDSA)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex);else{if(!(this.prvKey instanceof Sr.crypto.DSA))throw"Signature: unsupported private key alg: "+this.pubkeyAlgName;this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}return this.hSign},this.signString=function(t){return this.updateString(t),this.sign()},this.signHex=function(t){return this.updateHex(t),this.sign()},this.verify=function(t){if(this.sHashHex=this.md.digest(),void 0===this.pubKey&&void 0!==this.ecpubhex&&void 0!==this.eccurvename&&void 0!==Sr.crypto.ECDSA&&(this.pubKey=new Sr.crypto.ECDSA({curve:this.eccurvename,pub:this.ecpubhex})),this.pubKey instanceof Me&&"rsaandmgf1"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,t,this.mdAlgName,this.pssSaltLen);if(this.pubKey instanceof Me&&"rsa"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);if(void 0!==Sr.crypto.ECDSA&&this.pubKey instanceof Sr.crypto.ECDSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);if(void 0!==Sr.crypto.DSA&&this.pubKey instanceof Sr.crypto.DSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}},this.init=function(t,e){throw"init(key, pass) not supported for this alg:prov="+this.algProvName},this.updateString=function(t){throw"updateString(str) not supported for this alg:prov="+this.algProvName},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName},this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName},this.signString=function(t){throw"digestString(str) not supported for this alg:prov="+this.algProvName},this.signHex=function(t){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName},this.verify=function(t){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName},this.initParams=t,void 0!==t&&(void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov?this.provName=Sr.crypto.Util.DEFAULTPROVIDER[this.algName]:this.provName=t.prov,this.algProvName=this.algName+":"+this.provName,this.setAlgAndProvider(this.algName,this.provName),this._setAlgNames()),void 0!==t.psssaltlen&&(this.pssSaltLen=t.psssaltlen),void 0!==t.prvkeypem)){if(void 0!==t.prvkeypas)throw"both prvkeypem and prvkeypas parameters not supported";try{e=tn.getKey(t.prvkeypem);this.init(e)}catch(t){throw"fatal error to load pem private key: "+t}}},Sr.crypto.Cipher=function(t){},Sr.crypto.Cipher.encrypt=function(t,e,r){if(e instanceof Me&&e.isPublic){var n=Sr.crypto.Cipher.getAlgByKeyAndName(e,r);if("RSA"===n)return e.encrypt(t);if("RSAOAEP"===n)return e.encryptOAEP(t,"sha1");var i=n.match(/^RSAOAEP(\d+)$/);if(null!==i)return e.encryptOAEP(t,"sha"+i[1]);throw"Cipher.encrypt: unsupported algorithm for RSAKey: "+r}throw"Cipher.encrypt: unsupported key or algorithm"},Sr.crypto.Cipher.decrypt=function(t,e,r){if(e instanceof Me&&e.isPrivate){var n=Sr.crypto.Cipher.getAlgByKeyAndName(e,r);if("RSA"===n)return e.decrypt(t);if("RSAOAEP"===n)return e.decryptOAEP(t,"sha1");var i=n.match(/^RSAOAEP(\d+)$/);if(null!==i)return e.decryptOAEP(t,"sha"+i[1]);throw"Cipher.decrypt: unsupported algorithm for RSAKey: "+r}throw"Cipher.decrypt: unsupported key or algorithm"},Sr.crypto.Cipher.getAlgByKeyAndName=function(t,e){if(t instanceof Me){if(-1!=":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(e))return e;if(null==e)return"RSA";throw"getAlgByKeyAndName: not supported algorithm name for RSAKey: "+e}throw"getAlgByKeyAndName: not supported algorithm name: "+e},Sr.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040023":"secp521r1","2b81040022":"secp384r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA"}},void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.crypto&&Sr.crypto||(Sr.crypto={}),Sr.crypto.ECDSA=function(t){var e=Error,r=w,n=Ve,i=Sr.crypto.ECDSA,o=Sr.crypto.ECParameterDB,s=i.getName,a=Fr,u=a.getVbyListEx,c=a.isASN1HEX,h=new Be;this.type="EC",this.isPrivate=!1,this.isPublic=!1,this.getBigRandom=function(t){return new r(t.bitLength(),h).mod(t.subtract(r.ONE)).add(r.ONE)},this.setNamedCurve=function(t){this.ecparams=o.getByName(t),this.prvKeyHex=null,this.pubKeyHex=null,this.curveName=t},this.setPrivateKeyHex=function(t){this.isPrivate=!0,this.prvKeyHex=t},this.setPublicKeyHex=function(t){this.isPublic=!0,this.pubKeyHex=t},this.getPublicKeyXYHex=function(){var t=this.pubKeyHex;if("04"!==t.substr(0,2))throw"this method supports uncompressed format(04) only";var e=this.ecparams.keylen/4;if(t.length!==2+2*e)throw"malformed public key hex length";var r={};return r.x=t.substr(2,e),r.y=t.substr(2+e),r},this.getShortNISTPCurveName=function(){var t=this.curveName;return"secp256r1"===t||"NIST P-256"===t||"P-256"===t||"prime256v1"===t?"P-256":"secp384r1"===t||"NIST P-384"===t||"P-384"===t?"P-384":null},this.generateKeyPairHex=function(){var t=this.ecparams.n,e=this.getBigRandom(t),r=this.ecparams.G.multiply(e),n=r.getX().toBigInteger(),i=r.getY().toBigInteger(),o=this.ecparams.keylen/4,s=("0000000000"+e.toString(16)).slice(-o),a="04"+("0000000000"+n.toString(16)).slice(-o)+("0000000000"+i.toString(16)).slice(-o);return this.setPrivateKeyHex(s),this.setPublicKeyHex(a),{ecprvhex:s,ecpubhex:a}},this.signWithMessageHash=function(t){return this.signHex(t,this.prvKeyHex)},this.signHex=function(t,e){var n=new r(e,16),o=this.ecparams.n,s=new r(t.substring(0,this.ecparams.keylen/4),16);do{var a=this.getBigRandom(o),u=this.ecparams.G.multiply(a).getX().toBigInteger().mod(o)}while(u.compareTo(r.ZERO)<=0);var c=a.modInverse(o).multiply(s.add(n.multiply(u))).mod(o);return i.biRSSigToASN1Sig(u,c)},this.sign=function(t,e){var n=e,i=this.ecparams.n,o=r.fromByteArrayUnsigned(t);do{var s=this.getBigRandom(i),a=this.ecparams.G.multiply(s).getX().toBigInteger().mod(i)}while(a.compareTo(w.ZERO)<=0);var u=s.modInverse(i).multiply(o.add(n.multiply(a))).mod(i);return this.serializeSig(a,u)},this.verifyWithMessageHash=function(t,e){return this.verifyHex(t,e,this.pubKeyHex)},this.verifyHex=function(t,e,o){try{var s,a,u=i.parseSigHex(e);s=u.r,a=u.s;var c=n.decodeFromHex(this.ecparams.curve,o),h=new r(t.substring(0,this.ecparams.keylen/4),16);return this.verifyRaw(h,s,a,c)}catch(t){return!1}},this.verify=function(t,e,i){var o,s,a;if(Bitcoin.Util.isArray(e)){var u=this.parseSig(e);o=u.r,s=u.s}else{if("object"!==(void 0===e?"undefined":g(e))||!e.r||!e.s)throw"Invalid value for signature";o=e.r,s=e.s}if(i instanceof Ve)a=i;else{if(!Bitcoin.Util.isArray(i))throw"Invalid format for pubkey value, must be byte array or ECPointFp";a=n.decodeFrom(this.ecparams.curve,i)}var c=r.fromByteArrayUnsigned(t);return this.verifyRaw(c,o,s,a)},this.verifyRaw=function(t,e,n,i){var o=this.ecparams.n,s=this.ecparams.G;if(e.compareTo(r.ONE)<0||e.compareTo(o)>=0)return!1;if(n.compareTo(r.ONE)<0||n.compareTo(o)>=0)return!1;var a=n.modInverse(o),u=t.multiply(a).mod(o),c=e.multiply(a).mod(o);return s.multiply(u).add(i.multiply(c)).getX().toBigInteger().mod(o).equals(e)},this.serializeSig=function(t,e){var r=t.toByteArraySigned(),n=e.toByteArraySigned(),i=[];return i.push(2),i.push(r.length),(i=i.concat(r)).push(2),i.push(n.length),(i=i.concat(n)).unshift(i.length),i.unshift(48),i},this.parseSig=function(t){var e;if(48!=t[0])throw new Error("Signature not a valid DERSequence");if(2!=t[e=2])throw new Error("First element in signature must be a DERInteger");var n=t.slice(e+2,e+2+t[e+1]);if(2!=t[e+=2+t[e+1]])throw new Error("Second element in signature must be a DERInteger");var i=t.slice(e+2,e+2+t[e+1]);return e+=2+t[e+1],{r:r.fromByteArrayUnsigned(n),s:r.fromByteArrayUnsigned(i)}},this.parseSigCompact=function(t){if(65!==t.length)throw"Signature has the wrong length";var e=t[0]-27;if(e<0||e>7)throw"Invalid signature type";var n=this.ecparams.n;return{r:r.fromByteArrayUnsigned(t.slice(1,33)).mod(n),s:r.fromByteArrayUnsigned(t.slice(33,65)).mod(n),i:e}},this.readPKCS5PrvKeyHex=function(t){if(!1===c(t))throw new Error("not ASN.1 hex string");var e,r,n;try{e=u(t,0,["[0]",0],"06"),r=u(t,0,[1],"04");try{n=u(t,0,["[1]",0],"03")}catch(t){}}catch(t){throw new Error("malformed PKCS#1/5 plain ECC private key")}if(this.curveName=s(e),void 0===this.curveName)throw"unsupported curve name";this.setNamedCurve(this.curveName),this.setPublicKeyHex(n),this.setPrivateKeyHex(r),this.isPublic=!1},this.readPKCS8PrvKeyHex=function(t){if(!1===c(t))throw new e("not ASN.1 hex string");var r,n,i;try{u(t,0,[1,0],"06"),r=u(t,0,[1,1],"06"),n=u(t,0,[2,0,1],"04");try{i=u(t,0,[2,0,"[1]",0],"03")}catch(t){}}catch(t){throw new e("malformed PKCS#8 plain ECC private key")}if(this.curveName=s(r),void 0===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i),this.setPrivateKeyHex(n),this.isPublic=!1},this.readPKCS8PubKeyHex=function(t){if(!1===c(t))throw new e("not ASN.1 hex string");var r,n;try{u(t,0,[0,0],"06"),r=u(t,0,[0,1],"06"),n=u(t,0,[1],"03")}catch(t){throw new e("malformed PKCS#8 ECC public key")}if(this.curveName=s(r),null===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(n)},this.readCertPubKeyHex=function(t,r){if(!1===c(t))throw new e("not ASN.1 hex string");var n,i;try{n=u(t,0,[0,5,0,1],"06"),i=u(t,0,[0,5,1],"03")}catch(t){throw new e("malformed X.509 certificate ECC public key")}if(this.curveName=s(n),null===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i)},void 0!==t&&void 0!==t.curve&&(this.curveName=t.curve),void 0===this.curveName&&(this.curveName="secp256r1"),this.setNamedCurve(this.curveName),void 0!==t&&(void 0!==t.prv&&this.setPrivateKeyHex(t.prv),void 0!==t.pub&&this.setPublicKeyHex(t.pub))},Sr.crypto.ECDSA.parseSigHex=function(t){var e=Sr.crypto.ECDSA.parseSigHexInHexRS(t);return{r:new w(e.r,16),s:new w(e.s,16)}},Sr.crypto.ECDSA.parseSigHexInHexRS=function(t){var e=Fr,r=e.getChildIdx,n=e.getV;if(e.checkStrictDER(t,0),"30"!=t.substr(0,2))throw new Error("signature is not a ASN.1 sequence");var i=r(t,0);if(2!=i.length)throw new Error("signature shall have two elements");var o=i[0],s=i[1];if("02"!=t.substr(o,2))throw new Error("1st item not ASN.1 integer");if("02"!=t.substr(s,2))throw new Error("2nd item not ASN.1 integer");return{r:n(t,o),s:n(t,s)}},Sr.crypto.ECDSA.asn1SigToConcatSig=function(t){var e=Sr.crypto.ECDSA.parseSigHexInHexRS(t),r=e.r,n=e.s;if("00"==r.substr(0,2)&&r.length%32==2&&(r=r.substr(2)),"00"==n.substr(0,2)&&n.length%32==2&&(n=n.substr(2)),r.length%32==30&&(r="00"+r),n.length%32==30&&(n="00"+n),r.length%32!=0)throw"unknown ECDSA sig r length error";if(n.length%32!=0)throw"unknown ECDSA sig s length error";return r+n},Sr.crypto.ECDSA.concatSigToASN1Sig=function(t){if(t.length/2*8%128!=0)throw"unknown ECDSA concatinated r-s sig  length error";var e=t.substr(0,t.length/2),r=t.substr(t.length/2);return Sr.crypto.ECDSA.hexRSSigToASN1Sig(e,r)},Sr.crypto.ECDSA.hexRSSigToASN1Sig=function(t,e){var r=new w(t,16),n=new w(e,16);return Sr.crypto.ECDSA.biRSSigToASN1Sig(r,n)},Sr.crypto.ECDSA.biRSSigToASN1Sig=function(t,e){var r=Sr.asn1,n=new r.DERInteger({bigint:t}),i=new r.DERInteger({bigint:e});return new r.DERSequence({array:[n,i]}).getEncodedHex()},Sr.crypto.ECDSA.getName=function(t){return"2b8104001f"===t?"secp192k1":"2a8648ce3d030107"===t?"secp256r1":"2b8104000a"===t?"secp256k1":"2b81040021"===t?"secp224r1":"2b81040022"===t?"secp384r1":-1!=="|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(t)?"secp256r1":-1!=="|secp256k1|".indexOf(t)?"secp256k1":-1!=="|secp224r1|NIST P-224|P-224|".indexOf(t)?"secp224r1":-1!=="|secp384r1|NIST P-384|P-384|".indexOf(t)?"secp384r1":null},void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.crypto&&Sr.crypto||(Sr.crypto={}),Sr.crypto.ECParameterDB=new function(){var t={},e={};function r(t){return new w(t,16)}this.getByName=function(r){var n=r;if(void 0!==e[n]&&(n=e[r]),void 0!==t[n])return t[n];throw"unregistered EC curve name: "+n},this.regist=function(n,i,o,s,a,u,c,h,l,f,g,d){t[n]={};var p=r(o),v=r(s),y=r(a),m=r(u),_=r(c),S=new Ke(p,v,y),b=S.decodePointHex("04"+h+l);t[n].name=n,t[n].keylen=i,t[n].curve=S,t[n].G=b,t[n].n=m,t[n].h=_,t[n].oid=g,t[n].info=d;for(var w=0;w<f.length;w++)e[f[w]]=n}},Sr.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field"),Sr.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field"),Sr.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field"),Sr.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]),Sr.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]),Sr.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]),Sr.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]),Sr.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]),Sr.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]),Sr.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]);var tn=function(){var t=function t(r,n,i){return e(v.AES,r,n,i)},e=function t(e,r,n,i){var o=v.enc.Hex.parse(r),s=v.enc.Hex.parse(n),a=v.enc.Hex.parse(i),u={};u.key=s,u.iv=a,u.ciphertext=o;var c=e.decrypt(u,s,{iv:a});return v.enc.Hex.stringify(c)},r=function t(e,r,i){return n(v.AES,e,r,i)},n=function t(e,r,n,i){var o=v.enc.Hex.parse(r),s=v.enc.Hex.parse(n),a=v.enc.Hex.parse(i),u=e.encrypt(o,s,{iv:a}),c=v.enc.Hex.parse(u.toString());return v.enc.Base64.stringify(c)},i={"AES-256-CBC":{proc:t,eproc:r,keylen:32,ivlen:16},"AES-192-CBC":{proc:t,eproc:r,keylen:24,ivlen:16},"AES-128-CBC":{proc:t,eproc:r,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:function t(r,n,i){return e(v.TripleDES,r,n,i)},eproc:function t(e,r,i){return n(v.TripleDES,e,r,i)},keylen:24,ivlen:8},"DES-CBC":{proc:function t(r,n,i){return e(v.DES,r,n,i)},eproc:function t(e,r,i){return n(v.DES,e,r,i)},keylen:8,ivlen:8}},o=function t(e){var r={},n=e.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));n&&(r.cipher=n[1],r.ivsalt=n[2]);var i=e.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));i&&(r.type=i[1]);var o=-1,s=0;-1!=e.indexOf("\r\n\r\n")&&(o=e.indexOf("\r\n\r\n"),s=2),-1!=e.indexOf("\n\n")&&(o=e.indexOf("\n\n"),s=1);var a=e.indexOf("-----END");if(-1!=o&&-1!=a){var u=e.substring(o+2*s,a-s);u=u.replace(/\s+/g,""),r.data=u}return r},s=function t(e,r,n){for(var o=n.substring(0,16),s=v.enc.Hex.parse(o),a=v.enc.Utf8.parse(r),u=i[e].keylen+i[e].ivlen,c="",h=null;;){var l=v.algo.MD5.create();if(null!=h&&l.update(h),l.update(a),l.update(s),h=l.finalize(),(c+=v.enc.Hex.stringify(h)).length>=2*u)break}var f={};return f.keyhex=c.substr(0,2*i[e].keylen),f.ivhex=c.substr(2*i[e].keylen,2*i[e].ivlen),f},a=function t(e,r,n,o){var s=v.enc.Base64.parse(e),a=v.enc.Hex.stringify(s);return(0,i[r].proc)(a,n,o)};return{version:"1.0.0",parsePKCS5PEM:function t(e){return o(e)},getKeyAndUnusedIvByPasscodeAndIvsalt:function t(e,r,n){return s(e,r,n)},decryptKeyB64:function t(e,r,n,i){return a(e,r,n,i)},getDecryptedKeyHex:function t(e,r){var n=o(e),i=(n.type,n.cipher),u=n.ivsalt,c=n.data,h=s(i,r,u).keyhex;return a(c,i,h,u)},getEncryptedPKCS5PEMFromPrvKeyHex:function t(e,r,n,o,a){var u="";if(void 0!==o&&null!=o||(o="AES-256-CBC"),void 0===i[o])throw new Error("KEYUTIL unsupported algorithm: "+o);void 0!==a&&null!=a||(a=function t(e){var r=v.lib.WordArray.random(e);return v.enc.Hex.stringify(r)}(i[o].ivlen).toUpperCase());var c=function t(e,r,n,o){return(0,i[r].eproc)(e,n,o)}(r,o,s(o,n,a).keyhex,a);u="-----BEGIN "+e+" PRIVATE KEY-----\r\n";return u+="Proc-Type: 4,ENCRYPTED\r\n",u+="DEK-Info: "+o+","+a+"\r\n",u+="\r\n",u+=c.replace(/(.{64})/g,"$1\r\n"),u+="\r\n-----END "+e+" PRIVATE KEY-----\r\n"},parseHexOfEncryptedPKCS8:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={},s=n(e,0);if(2!=s.length)throw new Error("malformed format: SEQUENCE(0).items != 2: "+s.length);o.ciphertext=i(e,s[1]);var a=n(e,s[0]);if(2!=a.length)throw new Error("malformed format: SEQUENCE(0.0).items != 2: "+a.length);if("2a864886f70d01050d"!=i(e,a[0]))throw new Error("this only supports pkcs5PBES2");var u=n(e,a[1]);if(2!=a.length)throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: "+u.length);var c=n(e,u[1]);if(2!=c.length)throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: "+c.length);if("2a864886f70d0307"!=i(e,c[0]))throw"this only supports TripleDES";o.encryptionSchemeAlg="TripleDES",o.encryptionSchemeIV=i(e,c[1]);var h=n(e,u[0]);if(2!=h.length)throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: "+h.length);if("2a864886f70d01050c"!=i(e,h[0]))throw new Error("this only supports pkcs5PBKDF2");var l=n(e,h[1]);if(l.length<2)throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+l.length);o.pbkdf2Salt=i(e,l[0]);var f=i(e,l[1]);try{o.pbkdf2Iter=parseInt(f,16)}catch(t){throw new Error("malformed format pbkdf2Iter: "+f)}return o},getPBKDF2KeyHexFromParam:function t(e,r){var n=v.enc.Hex.parse(e.pbkdf2Salt),i=e.pbkdf2Iter,o=v.PBKDF2(r,n,{keySize:6,iterations:i});return v.enc.Hex.stringify(o)},_getPlainPKCS8HexFromEncryptedPKCS8PEM:function t(e,r){var n=Mr(e,"ENCRYPTED PRIVATE KEY"),i=this.parseHexOfEncryptedPKCS8(n),o=tn.getPBKDF2KeyHexFromParam(i,r),s={};s.ciphertext=v.enc.Hex.parse(i.ciphertext);var a=v.enc.Hex.parse(o),u=v.enc.Hex.parse(i.encryptionSchemeIV),c=v.TripleDES.decrypt(s,a,{iv:u});return v.enc.Hex.stringify(c)},getKeyFromEncryptedPKCS8PEM:function t(e,r){var n=this._getPlainPKCS8HexFromEncryptedPKCS8PEM(e,r);return this.getKeyFromPlainPrivatePKCS8Hex(n)},parsePlainPrivatePKCS8Hex:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={algparam:null};if("30"!=e.substr(0,2))throw new Error("malformed plain PKCS8 private key(code:001)");var s=n(e,0);if(s.length<3)throw new Error("malformed plain PKCS8 private key(code:002)");if("30"!=e.substr(s[1],2))throw new Error("malformed PKCS8 private key(code:003)");var a=n(e,s[1]);if(2!=a.length)throw new Error("malformed PKCS8 private key(code:004)");if("06"!=e.substr(a[0],2))throw new Error("malformed PKCS8 private key(code:005)");if(o.algoid=i(e,a[0]),"06"==e.substr(a[1],2)&&(o.algparam=i(e,a[1])),"04"!=e.substr(s[2],2))throw new Error("malformed PKCS8 private key(code:006)");return o.keyidx=r.getVidx(e,s[2]),o},getKeyFromPlainPrivatePKCS8PEM:function t(e){var r=Mr(e,"PRIVATE KEY");return this.getKeyFromPlainPrivatePKCS8Hex(r)},getKeyFromPlainPrivatePKCS8Hex:function t(e){var r,n=this.parsePlainPrivatePKCS8Hex(e);if("2a864886f70d010101"==n.algoid)r=new Me;else if("2a8648ce380401"==n.algoid)r=new Sr.crypto.DSA;else{if("2a8648ce3d0201"!=n.algoid)throw new Error("unsupported private key algorithm");r=new Sr.crypto.ECDSA}return r.readPKCS8PrvKeyHex(e),r},_getKeyFromPublicPKCS8Hex:function t(e){var r,n=Fr.getVbyList(e,0,[0,0],"06");if("2a864886f70d010101"===n)r=new Me;else if("2a8648ce380401"===n)r=new Sr.crypto.DSA;else{if("2a8648ce3d0201"!==n)throw new Error("unsupported PKCS#8 public key hex");r=new Sr.crypto.ECDSA}return r.readPKCS8PubKeyHex(e),r},parsePublicRawRSAKeyHex:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={};if("30"!=e.substr(0,2))throw new Error("malformed RSA key(code:001)");var s=n(e,0);if(2!=s.length)throw new Error("malformed RSA key(code:002)");if("02"!=e.substr(s[0],2))throw new Error("malformed RSA key(code:003)");if(o.n=i(e,s[0]),"02"!=e.substr(s[1],2))throw new Error("malformed RSA key(code:004)");return o.e=i(e,s[1]),o},parsePublicPKCS8Hex:function t(e){var r=Fr,n=r.getChildIdx,i=r.getV,o={algparam:null},s=n(e,0);if(2!=s.length)throw new Error("outer DERSequence shall have 2 elements: "+s.length);var a=s[0];if("30"!=e.substr(a,2))throw new Error("malformed PKCS8 public key(code:001)");var u=n(e,a);if(2!=u.length)throw new Error("malformed PKCS8 public key(code:002)");if("06"!=e.substr(u[0],2))throw new Error("malformed PKCS8 public key(code:003)");if(o.algoid=i(e,u[0]),"06"==e.substr(u[1],2)?o.algparam=i(e,u[1]):"30"==e.substr(u[1],2)&&(o.algparam={},o.algparam.p=r.getVbyList(e,u[1],[0],"02"),o.algparam.q=r.getVbyList(e,u[1],[1],"02"),o.algparam.g=r.getVbyList(e,u[1],[2],"02")),"03"!=e.substr(s[1],2))throw new Error("malformed PKCS8 public key(code:004)");return o.key=i(e,s[1]).substr(2),o}}}();tn.getKey=function(t,e,r){var n=(v=Fr).getChildIdx,i=(v.getV,v.getVbyList),o=Sr.crypto,s=o.ECDSA,a=o.DSA,u=Me,c=Mr,h=tn;if(void 0!==u&&t instanceof u)return t;if(void 0!==s&&t instanceof s)return t;if(void 0!==a&&t instanceof a)return t;if(void 0!==t.curve&&void 0!==t.xy&&void 0===t.d)return new s({pub:t.xy,curve:t.curve});if(void 0!==t.curve&&void 0!==t.d)return new s({prv:t.d,curve:t.curve});if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0===t.d)return(P=new u).setPublic(t.n,t.e),P;if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0!==t.p&&void 0!==t.q&&void 0!==t.dp&&void 0!==t.dq&&void 0!==t.co&&void 0===t.qi)return(P=new u).setPrivateEx(t.n,t.e,t.d,t.p,t.q,t.dp,t.dq,t.co),P;if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0===t.p)return(P=new u).setPrivate(t.n,t.e,t.d),P;if(void 0!==t.p&&void 0!==t.q&&void 0!==t.g&&void 0!==t.y&&void 0===t.x)return(P=new a).setPublic(t.p,t.q,t.g,t.y),P;if(void 0!==t.p&&void 0!==t.q&&void 0!==t.g&&void 0!==t.y&&void 0!==t.x)return(P=new a).setPrivate(t.p,t.q,t.g,t.y,t.x),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0===t.d)return(P=new u).setPublic(Rr(t.n),Rr(t.e)),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0!==t.p&&void 0!==t.q&&void 0!==t.dp&&void 0!==t.dq&&void 0!==t.qi)return(P=new u).setPrivateEx(Rr(t.n),Rr(t.e),Rr(t.d),Rr(t.p),Rr(t.q),Rr(t.dp),Rr(t.dq),Rr(t.qi)),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d)return(P=new u).setPrivate(Rr(t.n),Rr(t.e),Rr(t.d)),P;if("EC"===t.kty&&void 0!==t.crv&&void 0!==t.x&&void 0!==t.y&&void 0===t.d){var l=(k=new s({curve:t.crv})).ecparams.keylen/4,f="04"+("0000000000"+Rr(t.x)).slice(-l)+("0000000000"+Rr(t.y)).slice(-l);return k.setPublicKeyHex(f),k}if("EC"===t.kty&&void 0!==t.crv&&void 0!==t.x&&void 0!==t.y&&void 0!==t.d){l=(k=new s({curve:t.crv})).ecparams.keylen/4,f="04"+("0000000000"+Rr(t.x)).slice(-l)+("0000000000"+Rr(t.y)).slice(-l);var g=("0000000000"+Rr(t.d)).slice(-l);return k.setPublicKeyHex(f),k.setPrivateKeyHex(g),k}if("pkcs5prv"===r){var d,p=t,v=Fr;if(9===(d=n(p,0)).length)(P=new u).readPKCS5PrvKeyHex(p);else if(6===d.length)(P=new a).readPKCS5PrvKeyHex(p);else{if(!(d.length>2&&"04"===p.substr(d[1],2)))throw new Error("unsupported PKCS#1/5 hexadecimal key");(P=new s).readPKCS5PrvKeyHex(p)}return P}if("pkcs8prv"===r)return P=h.getKeyFromPlainPrivatePKCS8Hex(t);if("pkcs8pub"===r)return h._getKeyFromPublicPKCS8Hex(t);if("x509pub"===r)return on.getPublicKeyFromCertHex(t);if(-1!=t.indexOf("-END CERTIFICATE-",0)||-1!=t.indexOf("-END X509 CERTIFICATE-",0)||-1!=t.indexOf("-END TRUSTED CERTIFICATE-",0))return on.getPublicKeyFromCertPEM(t);if(-1!=t.indexOf("-END PUBLIC KEY-")){var y=Mr(t,"PUBLIC KEY");return h._getKeyFromPublicPKCS8Hex(y)}if(-1!=t.indexOf("-END RSA PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){var m=c(t,"RSA PRIVATE KEY");return h.getKey(m,null,"pkcs5prv")}if(-1!=t.indexOf("-END DSA PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){var _=i(R=c(t,"DSA PRIVATE KEY"),0,[1],"02"),S=i(R,0,[2],"02"),b=i(R,0,[3],"02"),F=i(R,0,[4],"02"),E=i(R,0,[5],"02");return(P=new a).setPrivate(new w(_,16),new w(S,16),new w(b,16),new w(F,16),new w(E,16)),P}if(-1!=t.indexOf("-END EC PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){m=c(t,"EC PRIVATE KEY");return h.getKey(m,null,"pkcs5prv")}if(-1!=t.indexOf("-END PRIVATE KEY-"))return h.getKeyFromPlainPrivatePKCS8PEM(t);if(-1!=t.indexOf("-END RSA PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var x=h.getDecryptedKeyHex(t,e),A=new Me;return A.readPKCS5PrvKeyHex(x),A}if(-1!=t.indexOf("-END EC PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var k,P=i(R=h.getDecryptedKeyHex(t,e),0,[1],"04"),C=i(R,0,[2,0],"06"),T=i(R,0,[3,0],"03").substr(2);if(void 0===Sr.crypto.OID.oidhex2name[C])throw new Error("undefined OID(hex) in KJUR.crypto.OID: "+C);return(k=new s({curve:Sr.crypto.OID.oidhex2name[C]})).setPublicKeyHex(T),k.setPrivateKeyHex(P),k.isPublic=!1,k}if(-1!=t.indexOf("-END DSA PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var R;_=i(R=h.getDecryptedKeyHex(t,e),0,[1],"02"),S=i(R,0,[2],"02"),b=i(R,0,[3],"02"),F=i(R,0,[4],"02"),E=i(R,0,[5],"02");return(P=new a).setPrivate(new w(_,16),new w(S,16),new w(b,16),new w(F,16),new w(E,16)),P}if(-1!=t.indexOf("-END ENCRYPTED PRIVATE KEY-"))return h.getKeyFromEncryptedPKCS8PEM(t,e);throw new Error("not supported argument")},tn.generateKeypair=function(t,e){if("RSA"==t){var r=e;(s=new Me).generate(r,"10001"),s.isPrivate=!0,s.isPublic=!0;var n=new Me,i=s.n.toString(16),o=s.e.toString(16);return n.setPublic(i,o),n.isPrivate=!1,n.isPublic=!0,(a={}).prvKeyObj=s,a.pubKeyObj=n,a}if("EC"==t){var s,a,u=e,c=new Sr.crypto.ECDSA({curve:u}).generateKeyPairHex();return(s=new Sr.crypto.ECDSA({curve:u})).setPublicKeyHex(c.ecpubhex),s.setPrivateKeyHex(c.ecprvhex),s.isPrivate=!0,s.isPublic=!1,(n=new Sr.crypto.ECDSA({curve:u})).setPublicKeyHex(c.ecpubhex),n.isPrivate=!1,n.isPublic=!0,(a={}).prvKeyObj=s,a.pubKeyObj=n,a}throw new Error("unknown algorithm: "+t)},tn.getPEM=function(t,e,r,n,i,o){var s=Sr,a=s.asn1,u=a.DERObjectIdentifier,c=a.DERInteger,h=a.ASN1Util.newObject,l=a.x509.SubjectPublicKeyInfo,f=s.crypto,g=f.DSA,d=f.ECDSA,p=Me;function y(t){return h({seq:[{int:0},{int:{bigint:t.n}},{int:t.e},{int:{bigint:t.d}},{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.dmp1}},{int:{bigint:t.dmq1}},{int:{bigint:t.coeff}}]})}function m(t){return h({seq:[{int:1},{octstr:{hex:t.prvKeyHex}},{tag:["a0",!0,{oid:{name:t.curveName}}]},{tag:["a1",!0,{bitstr:{hex:"00"+t.pubKeyHex}}]}]})}function _(t){return h({seq:[{int:0},{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.g}},{int:{bigint:t.y}},{int:{bigint:t.x}}]})}if((void 0!==p&&t instanceof p||void 0!==g&&t instanceof g||void 0!==d&&t instanceof d)&&1==t.isPublic&&(void 0===e||"PKCS8PUB"==e))return jr(F=new l(t).getEncodedHex(),"PUBLIC KEY");if("PKCS1PRV"==e&&void 0!==p&&t instanceof p&&(void 0===r||null==r)&&1==t.isPrivate)return jr(F=y(t).getEncodedHex(),"RSA PRIVATE KEY");if("PKCS1PRV"==e&&void 0!==d&&t instanceof d&&(void 0===r||null==r)&&1==t.isPrivate){var S=new u({name:t.curveName}).getEncodedHex(),b=m(t).getEncodedHex(),w="";return w+=jr(S,"EC PARAMETERS"),w+=jr(b,"EC PRIVATE KEY")}if("PKCS1PRV"==e&&void 0!==g&&t instanceof g&&(void 0===r||null==r)&&1==t.isPrivate)return jr(F=_(t).getEncodedHex(),"DSA PRIVATE KEY");if("PKCS5PRV"==e&&void 0!==p&&t instanceof p&&void 0!==r&&null!=r&&1==t.isPrivate){var F=y(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",F,r,n,o)}if("PKCS5PRV"==e&&void 0!==d&&t instanceof d&&void 0!==r&&null!=r&&1==t.isPrivate){F=m(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",F,r,n,o)}if("PKCS5PRV"==e&&void 0!==g&&t instanceof g&&void 0!==r&&null!=r&&1==t.isPrivate){F=_(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",F,r,n,o)}var E=function t(e,r){var n=x(e,r);return new h({seq:[{seq:[{oid:{name:"pkcs5PBES2"}},{seq:[{seq:[{oid:{name:"pkcs5PBKDF2"}},{seq:[{octstr:{hex:n.pbkdf2Salt}},{int:n.pbkdf2Iter}]}]},{seq:[{oid:{name:"des-EDE3-CBC"}},{octstr:{hex:n.encryptionSchemeIV}}]}]}]},{octstr:{hex:n.ciphertext}}]}).getEncodedHex()},x=function t(e,r){var n=v.lib.WordArray.random(8),i=v.lib.WordArray.random(8),o=v.PBKDF2(r,n,{keySize:6,iterations:100}),s=v.enc.Hex.parse(e),a=v.TripleDES.encrypt(s,o,{iv:i})+"",u={};return u.ciphertext=a,u.pbkdf2Salt=v.enc.Hex.stringify(n),u.pbkdf2Iter=100,u.encryptionSchemeAlg="DES-EDE3-CBC",u.encryptionSchemeIV=v.enc.Hex.stringify(i),u};if("PKCS8PRV"==e&&null!=p&&t instanceof p&&1==t.isPrivate){var A=y(t).getEncodedHex();F=h({seq:[{int:0},{seq:[{oid:{name:"rsaEncryption"}},{null:!0}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?jr(F,"PRIVATE KEY"):jr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==e&&void 0!==d&&t instanceof d&&1==t.isPrivate){A=new h({seq:[{int:1},{octstr:{hex:t.prvKeyHex}},{tag:["a1",!0,{bitstr:{hex:"00"+t.pubKeyHex}}]}]}).getEncodedHex(),F=h({seq:[{int:0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:t.curveName}}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?jr(F,"PRIVATE KEY"):jr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==e&&void 0!==g&&t instanceof g&&1==t.isPrivate){A=new c({bigint:t.x}).getEncodedHex(),F=h({seq:[{int:0},{seq:[{oid:{name:"dsa"}},{seq:[{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.g}}]}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?jr(F,"PRIVATE KEY"):jr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}throw new Error("unsupported object nor format")},tn.getKeyFromCSRPEM=function(t){var e=Mr(t,"CERTIFICATE REQUEST");return tn.getKeyFromCSRHex(e)},tn.getKeyFromCSRHex=function(t){var e=tn.parseCSRHex(t);return tn.getKey(e.p8pubkeyhex,null,"pkcs8pub")},tn.parseCSRHex=function(t){var e=Fr,r=e.getChildIdx,n=e.getTLV,i={},o=t;if("30"!=o.substr(0,2))throw new Error("malformed CSR(code:001)");var s=r(o,0);if(s.length<1)throw new Error("malformed CSR(code:002)");if("30"!=o.substr(s[0],2))throw new Error("malformed CSR(code:003)");var a=r(o,s[0]);if(a.length<3)throw new Error("malformed CSR(code:004)");return i.p8pubkeyhex=n(o,a[2]),i},tn.getKeyID=function(t){var e=tn,r=Fr;"string"==typeof t&&-1!=t.indexOf("BEGIN ")&&(t=e.getKey(t));var n=Mr(e.getPEM(t)),i=r.getIdxbyList(n,0,[1]),o=r.getV(n,i).substring(2);return Sr.crypto.Util.hashHex(o,"sha1")},tn.getJWKFromKey=function(t){var e={};if(t instanceof Me&&t.isPrivate)return e.kty="RSA",e.n=Tr(t.n.toString(16)),e.e=Tr(t.e.toString(16)),e.d=Tr(t.d.toString(16)),e.p=Tr(t.p.toString(16)),e.q=Tr(t.q.toString(16)),e.dp=Tr(t.dmp1.toString(16)),e.dq=Tr(t.dmq1.toString(16)),e.qi=Tr(t.coeff.toString(16)),e;if(t instanceof Me&&t.isPublic)return e.kty="RSA",e.n=Tr(t.n.toString(16)),e.e=Tr(t.e.toString(16)),e;if(t instanceof Sr.crypto.ECDSA&&t.isPrivate){if("P-256"!==(n=t.getShortNISTPCurveName())&&"P-384"!==n)throw new Error("unsupported curve name for JWT: "+n);var r=t.getPublicKeyXYHex();return e.kty="EC",e.crv=n,e.x=Tr(r.x),e.y=Tr(r.y),e.d=Tr(t.prvKeyHex),e}if(t instanceof Sr.crypto.ECDSA&&t.isPublic){var n;if("P-256"!==(n=t.getShortNISTPCurveName())&&"P-384"!==n)throw new Error("unsupported curve name for JWT: "+n);r=t.getPublicKeyXYHex();return e.kty="EC",e.crv=n,e.x=Tr(r.x),e.y=Tr(r.y),e}throw new Error("not supported key object")},Me.getPosArrayOfChildrenFromHex=function(t){return Fr.getChildIdx(t,0)},Me.getHexValueArrayOfChildrenFromHex=function(t){var e,r=Fr.getV,n=r(t,(e=Me.getPosArrayOfChildrenFromHex(t))[0]),i=r(t,e[1]),o=r(t,e[2]),s=r(t,e[3]),a=r(t,e[4]),u=r(t,e[5]),c=r(t,e[6]),h=r(t,e[7]),l=r(t,e[8]);return(e=new Array).push(n,i,o,s,a,u,c,h,l),e},Me.prototype.readPrivateKeyFromPEMString=function(t){var e=Mr(t),r=Me.getHexValueArrayOfChildrenFromHex(e);this.setPrivateEx(r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8])},Me.prototype.readPKCS5PrvKeyHex=function(t){var e=Me.getHexValueArrayOfChildrenFromHex(t);this.setPrivateEx(e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])},Me.prototype.readPKCS8PrvKeyHex=function(t){var e,r,n,i,o,s,a,u,c=Fr,h=c.getVbyListEx;if(!1===c.isASN1HEX(t))throw new Error("not ASN.1 hex string");try{e=h(t,0,[2,0,1],"02"),r=h(t,0,[2,0,2],"02"),n=h(t,0,[2,0,3],"02"),i=h(t,0,[2,0,4],"02"),o=h(t,0,[2,0,5],"02"),s=h(t,0,[2,0,6],"02"),a=h(t,0,[2,0,7],"02"),u=h(t,0,[2,0,8],"02")}catch(t){throw new Error("malformed PKCS#8 plain RSA private key")}this.setPrivateEx(e,r,n,i,o,s,a,u)},Me.prototype.readPKCS5PubKeyHex=function(t){var e=Fr,r=e.getV;if(!1===e.isASN1HEX(t))throw new Error("keyHex is not ASN.1 hex string");var n=e.getChildIdx(t,0);if(2!==n.length||"02"!==t.substr(n[0],2)||"02"!==t.substr(n[1],2))throw new Error("wrong hex for PKCS#5 public key");var i=r(t,n[0]),o=r(t,n[1]);this.setPublic(i,o)},Me.prototype.readPKCS8PubKeyHex=function(t){var e=Fr;if(!1===e.isASN1HEX(t))throw new Error("not ASN.1 hex string");if("06092a864886f70d010101"!==e.getTLVbyListEx(t,0,[0,0]))throw new Error("not PKCS8 RSA public key");var r=e.getTLVbyListEx(t,0,[1,0]);this.readPKCS5PubKeyHex(r)},Me.prototype.readCertPubKeyHex=function(t,e){var r,n;(r=new on).readCertHex(t),n=r.getPublicKeyHex(),this.readPKCS8PubKeyHex(n)};new RegExp("[^0-9a-f]","gi");function en(t,e){for(var r="",n=e/4-t.length,i=0;i<n;i++)r+="0";return r+t}function rn(t,e,r){for(var n="",i=0;n.length<e;)n+=Lr(r(Nr(t+String.fromCharCode.apply(String,[(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i])))),i+=1;return n}function nn(t){for(var e in Sr.crypto.Util.DIGESTINFOHEAD){var r=Sr.crypto.Util.DIGESTINFOHEAD[e],n=r.length;if(t.substring(0,n)==r)return[e,t.substring(n)]}return[]}function on(t){var e,r=Fr,n=r.getChildIdx,i=r.getV,o=r.getTLV,s=r.getVbyList,a=r.getVbyListEx,u=r.getTLVbyList,c=r.getTLVbyListEx,h=r.getIdxbyList,l=r.getIdxbyListEx,f=r.getVidx,g=r.getInt,d=r.oidname,p=r.hextooidstr,v=Mr;try{e=Sr.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV}catch(t){}this.HEX2STAG={"0c":"utf8",13:"prn",16:"ia5","1a":"vis","1e":"bmp"},this.hex=null,this.version=0,this.foffset=0,this.aExtInfo=null,this.getVersion=function(){if(null===this.hex||0!==this.version)return this.version;var t=u(this.hex,0,[0,0]);if("a0"==t.substr(0,2)){var e=u(t,0,[0]),r=g(e,0);if(r<0||2<r)throw new Error("malformed version field");return this.version=r+1,this.version}return this.version=1,this.foffset=-1,1},this.getSerialNumberHex=function(){return a(this.hex,0,[0,0],"02")},this.getSignatureAlgorithmField=function(){var t=c(this.hex,0,[0,1]);return this.getAlgorithmIdentifierName(t)},this.getAlgorithmIdentifierName=function(t){for(var r in e)if(t===e[r])return r;return d(a(t,0,[0],"06"))},this.getIssuer=function(){return this.getX500Name(this.getIssuerHex())},this.getIssuerHex=function(){return u(this.hex,0,[0,3+this.foffset],"30")},this.getIssuerString=function(){return this.getIssuer().str},this.getSubject=function(){return this.getX500Name(this.getSubjectHex())},this.getSubjectHex=function(){return u(this.hex,0,[0,5+this.foffset],"30")},this.getSubjectString=function(){return this.getSubject().str},this.getNotBefore=function(){var t=s(this.hex,0,[0,4+this.foffset,0]);return t=t.replace(/(..)/g,"%$1"),t=decodeURIComponent(t)},this.getNotAfter=function(){var t=s(this.hex,0,[0,4+this.foffset,1]);return t=t.replace(/(..)/g,"%$1"),t=decodeURIComponent(t)},this.getPublicKeyHex=function(){return r.getTLVbyList(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyIdx=function(){return h(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyContentIdx=function(){var t=this.getPublicKeyIdx();return h(this.hex,t,[1,0],"30")},this.getPublicKey=function(){return tn.getKey(this.getPublicKeyHex(),null,"pkcs8pub")},this.getSignatureAlgorithmName=function(){var t=u(this.hex,0,[1],"30");return this.getAlgorithmIdentifierName(t)},this.getSignatureValueHex=function(){return s(this.hex,0,[2],"03",!0)},this.verifySignature=function(t){var e=this.getSignatureAlgorithmField(),r=this.getSignatureValueHex(),n=u(this.hex,0,[0],"30"),i=new Sr.crypto.Signature({alg:e});return i.init(t),i.updateHex(n),i.verify(r)},this.parseExt=function(t){var e,o,a;if(void 0===t){if(a=this.hex,3!==this.version)return-1;e=h(a,0,[0,7,0],"30"),o=n(a,e)}else{a=Mr(t);var u=h(a,0,[0,3,0,0],"06");if("2a864886f70d01090e"!=i(a,u))return void(this.aExtInfo=new Array);e=h(a,0,[0,3,0,1,0],"30"),o=n(a,e),this.hex=a}this.aExtInfo=new Array;for(var c=0;c<o.length;c++){var l={critical:!1},g=0;3===n(a,o[c]).length&&(l.critical=!0,g=1),l.oid=r.hextooidstr(s(a,o[c],[0],"06"));var d=h(a,o[c],[1+g]);l.vidx=f(a,d),this.aExtInfo.push(l)}},this.getExtInfo=function(t){var e=this.aExtInfo,r=t;if(t.match(/^[0-9.]+$/)||(r=Sr.asn1.x509.OID.name2oid(t)),""!==r)for(var n=0;n<e.length;n++)if(e[n].oid===r)return e[n]},this.getExtBasicConstraints=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("basicConstraints");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"basicConstraints"};if(e&&(n.critical=!0),"3000"===t)return n;if("30030101ff"===t)return n.cA=!0,n;if("30060101ff02"===t.substr(0,12)){var s=i(t,10),a=parseInt(s,16);return n.cA=!0,n.pathLen=a,n}throw new Error("hExtV parse error: "+t)},this.getExtKeyUsage=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("keyUsage");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"keyUsage"};return e&&(n.critical=!0),n.names=this.getExtKeyUsageString(t).split(","),n},this.getExtKeyUsageBin=function(t){if(void 0===t){var e=this.getExtInfo("keyUsage");if(void 0===e)return"";t=o(this.hex,e.vidx)}if(8!=t.length&&10!=t.length)throw new Error("malformed key usage value: "+t);var r="000000000000000"+parseInt(t.substr(6),16).toString(2);return 8==t.length&&(r=r.slice(-8)),10==t.length&&(r=r.slice(-16)),""==(r=r.replace(/0+$/,""))&&(r="0"),r},this.getExtKeyUsageString=function(t){for(var e=this.getExtKeyUsageBin(t),r=new Array,n=0;n<e.length;n++)"1"==e.substr(n,1)&&r.push(on.KEYUSAGE_NAME[n]);return r.join(",")},this.getExtSubjectKeyIdentifier=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("subjectKeyIdentifier");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"subjectKeyIdentifier"};e&&(n.critical=!0);var s=i(t,0);return n.kid={hex:s},n},this.getExtAuthorityKeyIdentifier=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("authorityKeyIdentifier");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var s={extname:"authorityKeyIdentifier"};e&&(s.critical=!0);for(var a=n(t,0),u=0;u<a.length;u++){var c=t.substr(a[u],2);if("80"===c&&(s.kid={hex:i(t,a[u])}),"a1"===c){var h=o(t,a[u]),l=this.getGeneralNames(h);s.issuer=l[0].dn}"82"===c&&(s.sn={hex:i(t,a[u])})}return s},this.getExtExtKeyUsage=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("extKeyUsage");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var s={extname:"extKeyUsage",array:[]};e&&(s.critical=!0);for(var a=n(t,0),u=0;u<a.length;u++)s.array.push(d(i(t,a[u])));return s},this.getExtExtKeyUsageName=function(){var t=this.getExtInfo("extKeyUsage");if(void 0===t)return t;var e=new Array,r=o(this.hex,t.vidx);if(""===r)return e;for(var s=n(r,0),a=0;a<s.length;a++)e.push(d(i(r,s[a])));return e},this.getExtSubjectAltName=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("subjectAltName");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"subjectAltName",array:[]};return e&&(n.critical=!0),n.array=this.getGeneralNames(t),n},this.getExtIssuerAltName=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("issuerAltName");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"issuerAltName",array:[]};return e&&(n.critical=!0),n.array=this.getGeneralNames(t),n},this.getGeneralNames=function(t){for(var e=n(t,0),r=[],i=0;i<e.length;i++){var s=this.getGeneralName(o(t,e[i]));void 0!==s&&r.push(s)}return r},this.getGeneralName=function(t){var e=t.substr(0,2),r=i(t,0),n=Lr(r);return"81"==e?{rfc822:n}:"82"==e?{dns:n}:"86"==e?{uri:n}:"87"==e?{ip:zr(r)}:"a4"==e?{dn:this.getX500Name(r)}:void 0},this.getExtSubjectAltName2=function(){var t,e,r,s=this.getExtInfo("subjectAltName");if(void 0===s)return s;for(var a=new Array,u=o(this.hex,s.vidx),c=n(u,0),h=0;h<c.length;h++)r=u.substr(c[h],2),t=i(u,c[h]),"81"===r&&(e=Dr(t),a.push(["MAIL",e])),"82"===r&&(e=Dr(t),a.push(["DNS",e])),"84"===r&&(e=on.hex2dn(t,0),a.push(["DN",e])),"86"===r&&(e=Dr(t),a.push(["URI",e])),"87"===r&&(e=zr(t),a.push(["IP",e]));return a},this.getExtCRLDistributionPoints=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("cRLDistributionPoints");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"cRLDistributionPoints",array:[]};e&&(i.critical=!0);for(var s=n(t,0),a=0;a<s.length;a++){var u=o(t,s[a]);i.array.push(this.getDistributionPoint(u))}return i},this.getDistributionPoint=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=t.substr(r[i],2),a=o(t,r[i]);"a0"==s&&(e.dpname=this.getDistributionPointName(a))}return e},this.getDistributionPointName=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=t.substr(r[i],2),a=o(t,r[i]);"a0"==s&&(e.full=this.getGeneralNames(a))}return e},this.getExtCRLDistributionPointsURI=function(){var t=this.getExtInfo("cRLDistributionPoints");if(void 0===t)return t;for(var e=new Array,r=n(this.hex,t.vidx),i=0;i<r.length;i++)try{var o=Dr(s(this.hex,r[i],[0,0,0],"86"));e.push(o)}catch(t){}return e},this.getExtAIAInfo=function(){var t=this.getExtInfo("authorityInfoAccess");if(void 0===t)return t;for(var e={ocsp:[],caissuer:[]},r=n(this.hex,t.vidx),i=0;i<r.length;i++){var o=s(this.hex,r[i],[0],"06"),a=s(this.hex,r[i],[1],"86");"2b06010505073001"===o&&e.ocsp.push(Dr(a)),"2b06010505073002"===o&&e.caissuer.push(Dr(a))}return e},this.getExtAuthorityInfoAccess=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("authorityInfoAccess");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"authorityInfoAccess",array:[]};e&&(i.critical=!0);for(var u=n(t,0),c=0;c<u.length;c++){var h=a(t,u[c],[0],"06"),l=Dr(s(t,u[c],[1],"86"));if("2b06010505073001"==h)i.array.push({ocsp:l});else{if("2b06010505073002"!=h)throw new Error("unknown method: "+h);i.array.push({caissuer:l})}}return i},this.getExtCertificatePolicies=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("certificatePolicies");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"certificatePolicies",array:[]};e&&(i.critical=!0);for(var s=n(t,0),a=0;a<s.length;a++){var u=o(t,s[a]),c=this.getPolicyInformation(u);i.array.push(c)}return i},this.getPolicyInformation=function(t){var e={},r=s(t,0,[0],"06");e.policyoid=d(r);var i=l(t,0,[1],"30");if(-1!=i){e.array=[];for(var a=n(t,i),u=0;u<a.length;u++){var c=o(t,a[u]),h=this.getPolicyQualifierInfo(c);e.array.push(h)}}return e},this.getPolicyQualifierInfo=function(t){var e={},r=s(t,0,[0],"06");if("2b06010505070201"===r){var n=a(t,0,[1],"16");e.cps=Lr(n)}else if("2b06010505070202"===r){var i=u(t,0,[1],"30");e.unotice=this.getUserNotice(i)}return e},this.getUserNotice=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=o(t,r[i]);"30"!=s.substr(0,2)&&(e.exptext=this.getDisplayText(s))}return e},this.getDisplayText=function(t){var e={};return e.type={"0c":"utf8",16:"ia5","1a":"vis","1e":"bmp"}[t.substr(0,2)],e.str=Lr(i(t,0)),e},this.getExtCRLNumber=function(t,e){var r={extname:"cRLNumber"};if(e&&(r.critical=!0),"02"==t.substr(0,2))return r.num={hex:i(t,0)},r;throw new Error("hExtV parse error: "+t)},this.getExtCRLReason=function(t,e){var r={extname:"cRLReason"};if(e&&(r.critical=!0),"0a"==t.substr(0,2))return r.code=parseInt(i(t,0),16),r;throw new Error("hExtV parse error: "+t)},this.getExtOcspNonce=function(t,e){var r={extname:"ocspNonce"};e&&(r.critical=!0);var n=i(t,0);return r.hex=n,r},this.getExtOcspNoCheck=function(t,e){var r={extname:"ocspNoCheck"};return e&&(r.critical=!0),r},this.getExtAdobeTimeStamp=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("adobeTimeStamp");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"adobeTimeStamp"};e&&(i.critical=!0);var s=n(t,0);if(s.length>1){var a=o(t,s[1]),u=this.getGeneralName(a);null!=u.uri&&(i.uri=u.uri)}if(s.length>2){var c=o(t,s[2]);"0101ff"==c&&(i.reqauth=!0),"010100"==c&&(i.reqauth=!1)}return i},this.getX500NameRule=function(t){for(var e=null,r=[],n=0;n<t.length;n++)for(var i=t[n],o=0;o<i.length;o++)r.push(i[o]);for(n=0;n<r.length;n++){var s=r[n],a=s.ds,u=s.value,c=s.type;if(":"+a,"prn"!=a&&"utf8"!=a&&"ia5"!=a)return"mixed";if("ia5"==a){if("CN"!=c)return"mixed";if(Sr.lang.String.isMail(u))continue;return"mixed"}if("C"==c){if("prn"==a)continue;return"mixed"}if(":"+a,null==e)e=a;else if(e!==a)return"mixed"}return null==e?"prn":e},this.getX500Name=function(t){var e=this.getX500NameArray(t);return{array:e,str:this.dnarraytostr(e)}},this.getX500NameArray=function(t){for(var e=[],r=n(t,0),i=0;i<r.length;i++)e.push(this.getRDN(o(t,r[i])));return e},this.getRDN=function(t){for(var e=[],r=n(t,0),i=0;i<r.length;i++)e.push(this.getAttrTypeAndValue(o(t,r[i])));return e},this.getAttrTypeAndValue=function(t){var e={type:null,value:null,ds:null},r=n(t,0),i=s(t,r[0],[],"06"),o=s(t,r[1],[]),a=Sr.asn1.ASN1Util.oidHexToInt(i);return e.type=Sr.asn1.x509.OID.oid2atype(a),e.ds=this.HEX2STAG[t.substr(r[1],2)],"bmp"!=e.ds?e.value=Dr(o):e.value=Yr(o),e},this.readCertPEM=function(t){this.readCertHex(v(t))},this.readCertHex=function(t){this.hex=t,this.getVersion();try{h(this.hex,0,[0,7],"a3"),this.parseExt()}catch(t){}},this.getParam=function(){var t={};return t.version=this.getVersion(),t.serial={hex:this.getSerialNumberHex()},t.sigalg=this.getSignatureAlgorithmField(),t.issuer=this.getIssuer(),t.notbefore=this.getNotBefore(),t.notafter=this.getNotAfter(),t.subject=this.getSubject(),t.sbjpubkey=jr(this.getPublicKeyHex(),"PUBLIC KEY"),this.aExtInfo.length>0&&(t.ext=this.getExtParamArray()),t.sighex=this.getSignatureValueHex(),t},this.getExtParamArray=function(t){null==t&&(-1!=l(this.hex,0,[0,"[3]"])&&(t=c(this.hex,0,[0,"[3]",0],"30")));for(var e=[],r=n(t,0),i=0;i<r.length;i++){var s=o(t,r[i]),a=this.getExtParam(s);null!=a&&e.push(a)}return e},this.getExtParam=function(t){var e=n(t,0).length;if(2!=e&&3!=e)throw new Error("wrong number elements in Extension: "+e+" "+t);var r=p(s(t,0,[0],"06")),i=!1;3==e&&"0101ff"==u(t,0,[1])&&(i=!0);var o=u(t,0,[e-1,0]),a=void 0;if("2.5.29.14"==r?a=this.getExtSubjectKeyIdentifier(o,i):"2.5.29.15"==r?a=this.getExtKeyUsage(o,i):"2.5.29.17"==r?a=this.getExtSubjectAltName(o,i):"2.5.29.18"==r?a=this.getExtIssuerAltName(o,i):"2.5.29.19"==r?a=this.getExtBasicConstraints(o,i):"2.5.29.31"==r?a=this.getExtCRLDistributionPoints(o,i):"2.5.29.32"==r?a=this.getExtCertificatePolicies(o,i):"2.5.29.35"==r?a=this.getExtAuthorityKeyIdentifier(o,i):"2.5.29.37"==r?a=this.getExtExtKeyUsage(o,i):"1.3.6.1.5.5.7.1.1"==r?a=this.getExtAuthorityInfoAccess(o,i):"2.5.29.20"==r?a=this.getExtCRLNumber(o,i):"2.5.29.21"==r?a=this.getExtCRLReason(o,i):"1.3.6.1.5.5.7.48.1.2"==r?a=this.getExtOcspNonce(o,i):"1.3.6.1.5.5.7.48.1.5"==r?a=this.getExtOcspNoCheck(o,i):"1.2.840.113583.1.1.9.1"==r&&(a=this.getExtAdobeTimeStamp(o,i)),null!=a)return a;var c={extname:r,extn:o};return i&&(c.critical=!0),c},this.findExt=function(t,e){for(var r=0;r<t.length;r++)if(t[r].extname==e)return t[r];return null},this.updateExtCDPFullURI=function(t,e){var r=this.findExt(t,"cRLDistributionPoints");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)if(null!=n[i].dpname&&null!=n[i].dpname.full)for(var o=n[i].dpname.full,s=0;s<o.length;s++){var a=o[i];null!=a.uri&&(a.uri=e)}},this.updateExtAIAOCSP=function(t,e){var r=this.findExt(t,"authorityInfoAccess");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)null!=n[i].ocsp&&(n[i].ocsp=e)},this.updateExtAIACAIssuer=function(t,e){var r=this.findExt(t,"authorityInfoAccess");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)null!=n[i].caissuer&&(n[i].caissuer=e)},this.dnarraytostr=function(t){return"/"+t.map((function(t){return function e(t){return t.map((function(t){return function e(t){return t.type+"="+t.value}(t).replace(/\+/,"\\+")})).join("+")}(t).replace(/\//,"\\/")})).join("/")},this.getInfo=function(){var t,e,r,n=function t(e){return JSON.stringify(e.array).replace(/[\[\]\{\}\"]/g,"")},i=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];if(r+="    policy oid: "+o.policyoid+"\n",void 0!==o.array)for(var s=0;s<o.array.length;s++){var a=o.array[s];void 0!==a.cps&&(r+="    cps: "+a.cps+"\n")}}return r},o=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];try{void 0!==o.dpname.full[0].uri&&(r+="    "+o.dpname.full[0].uri+"\n")}catch(t){}try{void 0!==o.dname.full[0].dn.hex&&(r+="    "+on.hex2dn(o.dpname.full[0].dn.hex)+"\n")}catch(t){}}return r},s=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];void 0!==o.caissuer&&(r+="    caissuer: "+o.caissuer+"\n"),void 0!==o.ocsp&&(r+="    ocsp: "+o.ocsp+"\n")}return r};if(t="Basic Fields\n",t+="  serial number: "+this.getSerialNumberHex()+"\n",t+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n",t+="  issuer: "+this.getIssuerString()+"\n",t+="  notBefore: "+this.getNotBefore()+"\n",t+="  notAfter: "+this.getNotAfter()+"\n",t+="  subject: "+this.getSubjectString()+"\n",t+="  subject public key info: \n",t+="    key algorithm: "+(e=this.getPublicKey()).type+"\n","RSA"===e.type&&(t+="    n="+$r(e.n.toString(16)).substr(0,16)+"...\n",t+="    e="+$r(e.e.toString(16))+"\n"),null!=(r=this.aExtInfo)){t+="X509v3 Extensions:\n";for(var a=0;a<r.length;a++){var u=r[a],c=Sr.asn1.x509.OID.oid2name(u.oid);""===c&&(c=u.oid);var h="";if(!0===u.critical&&(h="CRITICAL"),t+="  "+c+" "+h+":\n","basicConstraints"===c){var l=this.getExtBasicConstraints();void 0===l.cA?t+="    {}\n":(t+="    cA=true",void 0!==l.pathLen&&(t+=", pathLen="+l.pathLen),t+="\n")}else if("keyUsage"===c)t+="    "+this.getExtKeyUsageString()+"\n";else if("subjectKeyIdentifier"===c)t+="    "+this.getExtSubjectKeyIdentifier().kid.hex+"\n";else if("authorityKeyIdentifier"===c){var f=this.getExtAuthorityKeyIdentifier();void 0!==f.kid&&(t+="    kid="+f.kid.hex+"\n")}else{if("extKeyUsage"===c)t+="    "+this.getExtExtKeyUsage().array.join(", ")+"\n";else if("subjectAltName"===c)t+="    "+n(this.getExtSubjectAltName())+"\n";else if("cRLDistributionPoints"===c)t+=o(this.getExtCRLDistributionPoints());else if("authorityInfoAccess"===c)t+=s(this.getExtAuthorityInfoAccess());else"certificatePolicies"===c&&(t+=i(this.getExtCertificatePolicies()))}}}return t+="signature algorithm: "+this.getSignatureAlgorithmName()+"\n",t+="signature: "+this.getSignatureValueHex().substr(0,16)+"...\n"},"string"==typeof t&&(-1!=t.indexOf("-----BEGIN")?this.readCertPEM(t):Sr.lang.String.isHex(t)&&this.readCertHex(t))}Me.prototype.sign=function(t,e){var r=function t(r){return Sr.crypto.Util.hashString(r,e)}(t);return this.signWithMessageHash(r,e)},Me.prototype.signWithMessageHash=function(t,e){var r=Oe(Sr.crypto.Util.getPaddedDigestInfoHex(t,e,this.n.bitLength()),16);return en(this.doPrivate(r).toString(16),this.n.bitLength())},Me.prototype.signPSS=function(t,e,r){var n=function t(r){return Sr.crypto.Util.hashHex(r,e)}(Nr(t));return void 0===r&&(r=-1),this.signWithMessageHashPSS(n,e,r)},Me.prototype.signWithMessageHashPSS=function(t,e,r){var n,i=Lr(t),o=i.length,s=this.n.bitLength()-1,a=Math.ceil(s/8),u=function t(r){return Sr.crypto.Util.hashHex(r,e)};if(-1===r||void 0===r)r=o;else if(-2===r)r=a-o-2;else if(r<-2)throw new Error("invalid salt length");if(a<o+r+2)throw new Error("data too long");var c="";r>0&&(c=new Array(r),(new Be).nextBytes(c),c=String.fromCharCode.apply(String,c));var h=Lr(u(Nr("\0\0\0\0\0\0\0\0"+i+c))),l=[];for(n=0;n<a-r-o-2;n+=1)l[n]=0;var f=String.fromCharCode.apply(String,l)+""+c,g=rn(h,f.length,u),d=[];for(n=0;n<f.length;n+=1)d[n]=f.charCodeAt(n)^g.charCodeAt(n);var p=65280>>8*a-s&255;for(d[0]&=~p,n=0;n<o;n++)d.push(h.charCodeAt(n));return d.push(188),en(this.doPrivate(new w(d)).toString(16),this.n.bitLength())},Me.prototype.verify=function(t,e){if(null==(e=e.toLowerCase()).match(/^[0-9a-f]+$/))return!1;var r=Oe(e,16),n=this.n.bitLength();if(r.bitLength()>n)return!1;var i=this.doPublic(r).toString(16);if(i.length+3!=n/4)return!1;var o=nn(i.replace(/^1f+00/,""));if(0==o.length)return!1;var s=o[0];return o[1]==function t(e){return Sr.crypto.Util.hashString(e,s)}(t)},Me.prototype.verifyWithMessageHash=function(t,e){if(e.length!=Math.ceil(this.n.bitLength()/4))return!1;var r=Oe(e,16);if(r.bitLength()>this.n.bitLength())return 0;var n=nn(this.doPublic(r).toString(16).replace(/^1f+00/,""));if(0==n.length)return!1;n[0];return n[1]==t},Me.prototype.verifyPSS=function(t,e,r,n){var i=function t(e){return Sr.crypto.Util.hashHex(e,r)}(Nr(t));return void 0===n&&(n=-1),this.verifyWithMessageHashPSS(i,e,r,n)},Me.prototype.verifyWithMessageHashPSS=function(t,e,r,n){if(e.length!=Math.ceil(this.n.bitLength()/4))return!1;var i,o=new w(e,16),s=function t(e){return Sr.crypto.Util.hashHex(e,r)},a=Lr(t),u=a.length,c=this.n.bitLength()-1,h=Math.ceil(c/8);if(-1===n||void 0===n)n=u;else if(-2===n)n=h-u-2;else if(n<-2)throw new Error("invalid salt length");if(h<u+n+2)throw new Error("data too long");var l=this.doPublic(o).toByteArray();for(i=0;i<l.length;i+=1)l[i]&=255;for(;l.length<h;)l.unshift(0);if(188!==l[h-1])throw new Error("encoded message does not end in 0xbc");var f=(l=String.fromCharCode.apply(String,l)).substr(0,h-u-1),g=l.substr(f.length,u),d=65280>>8*h-c&255;if(0!=(f.charCodeAt(0)&d))throw new Error("bits beyond keysize not zero");var p=rn(g,f.length,s),v=[];for(i=0;i<f.length;i+=1)v[i]=f.charCodeAt(i)^p.charCodeAt(i);v[0]&=~d;var y=h-u-n-2;for(i=0;i<y;i+=1)if(0!==v[i])throw new Error("leftmost octets not zero");if(1!==v[y])throw new Error("0x01 marker not found");return g===Lr(s(Nr("\0\0\0\0\0\0\0\0"+a+String.fromCharCode.apply(String,v.slice(-n)))))},Me.SALT_LEN_HLEN=-1,Me.SALT_LEN_MAX=-2,Me.SALT_LEN_RECOVER=-2,on.hex2dn=function(t,e){void 0===e&&(e=0);var r=new on;Fr.getTLV(t,e);return r.getX500Name(t).str},on.hex2rdn=function(t,e){if(void 0===e&&(e=0),"31"!==t.substr(e,2))throw new Error("malformed RDN");for(var r=new Array,n=Fr.getChildIdx(t,e),i=0;i<n.length;i++)r.push(on.hex2attrTypeValue(t,n[i]));return(r=r.map((function(t){return t.replace("+","\\+")}))).join("+")},on.hex2attrTypeValue=function(t,e){var r=Fr,n=r.getV;if(void 0===e&&(e=0),"30"!==t.substr(e,2))throw new Error("malformed attribute type and value");var i=r.getChildIdx(t,e);2!==i.length||t.substr(i[0],2);var o=n(t,i[0]),s=Sr.asn1.ASN1Util.oidHexToInt(o);return Sr.asn1.x509.OID.oid2atype(s)+"="+Lr(n(t,i[1]))},on.getPublicKeyFromCertHex=function(t){var e=new on;return e.readCertHex(t),e.getPublicKey()},on.getPublicKeyFromCertPEM=function(t){var e=new on;return e.readCertPEM(t),e.getPublicKey()},on.getPublicKeyInfoPropOfCertPEM=function(t){var e,r,n=Fr.getVbyList,i={};return i.algparam=null,(e=new on).readCertPEM(t),r=e.getPublicKeyHex(),i.keyhex=n(r,0,[1],"03").substr(2),i.algoid=n(r,0,[0,0],"06"),"2a8648ce3d0201"===i.algoid&&(i.algparam=n(r,0,[0,1],"06")),i},on.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"],void 0!==Sr&&Sr||(e.KJUR=Sr={}),void 0!==Sr.jws&&Sr.jws||(Sr.jws={}),Sr.jws.JWS=function(){var t=Sr.jws.JWS.isSafeJSONString;this.parseJWS=function(e,r){if(void 0===this.parsedJWS||!r&&void 0===this.parsedJWS.sigvalH){var n=e.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(null==n)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";var i=n[1],o=n[2],s=n[3],a=i+"."+o;if(this.parsedJWS={},this.parsedJWS.headB64U=i,this.parsedJWS.payloadB64U=o,this.parsedJWS.sigvalB64U=s,this.parsedJWS.si=a,!r){var u=Rr(s),c=Oe(u,16);this.parsedJWS.sigvalH=u,this.parsedJWS.sigvalBI=c}var h=wr(i),l=wr(o);if(this.parsedJWS.headS=h,this.parsedJWS.payloadS=l,!t(h,this.parsedJWS,"headP"))throw"malformed JSON string for JWS Head: "+h}}},Sr.jws.JWS.sign=function(t,e,r,n,i){var o,s,a,u=Sr,c=u.jws.JWS,h=c.readSafeJSONString,l=c.isSafeJSONString,f=u.crypto,d=(f.ECDSA,f.Mac),p=f.Signature,v=JSON;if("string"!=typeof e&&"object"!=(void 0===e?"undefined":g(e)))throw"spHeader must be JSON string or object: "+e;if("object"==(void 0===e?"undefined":g(e))&&(s=e,o=v.stringify(s)),"string"==typeof e){if(!l(o=e))throw"JWS Head is not safe JSON string: "+o;s=h(o)}if(a=r,"object"==(void 0===r?"undefined":g(r))&&(a=v.stringify(r)),""!=t&&null!=t||void 0===s.alg||(t=s.alg),""!=t&&null!=t&&void 0===s.alg&&(s.alg=t,o=v.stringify(s)),t!==s.alg)throw"alg and sHeader.alg doesn't match: "+t+"!="+s.alg;var y=null;if(void 0===c.jwsalg2sigalg[t])throw"unsupported alg name: "+t;y=c.jwsalg2sigalg[t];var m=br(o)+"."+br(a),_="";if("Hmac"==y.substr(0,4)){if(void 0===n)throw"mac key shall be specified for HS* alg";var S=new d({alg:y,prov:"cryptojs",pass:n});S.updateString(m),_=S.doFinal()}else if(-1!=y.indexOf("withECDSA")){(w=new p({alg:y})).init(n,i),w.updateString(m);var b=w.sign();_=Sr.crypto.ECDSA.asn1SigToConcatSig(b)}else{var w;if("none"!=y)(w=new p({alg:y})).init(n,i),w.updateString(m),_=w.sign()}return m+"."+Tr(_)},Sr.jws.JWS.verify=function(t,e,r){var n,i=Sr,o=i.jws.JWS,s=o.readSafeJSONString,a=i.crypto,u=a.ECDSA,c=a.Mac,h=a.Signature;void 0!==g(Me)&&(n=Me);var l=t.split(".");if(3!==l.length)return!1;var f=l[0]+"."+l[1],d=Rr(l[2]),p=s(wr(l[0])),v=null,y=null;if(void 0===p.alg)throw"algorithm not specified in header";if((y=(v=p.alg).substr(0,2),null!=r&&"[object Array]"===Object.prototype.toString.call(r)&&r.length>0)&&-1==(":"+r.join(":")+":").indexOf(":"+v+":"))throw"algorithm '"+v+"' not accepted in the list";if("none"!=v&&null===e)throw"key shall be specified to verify.";if("string"==typeof e&&-1!=e.indexOf("-----BEGIN ")&&(e=tn.getKey(e)),!("RS"!=y&&"PS"!=y||e instanceof n))throw"key shall be a RSAKey obj for RS* and PS* algs";if("ES"==y&&!(e instanceof u))throw"key shall be a ECDSA obj for ES* algs";var m=null;if(void 0===o.jwsalg2sigalg[p.alg])throw"unsupported alg name: "+v;if("none"==(m=o.jwsalg2sigalg[v]))throw"not supported";if("Hmac"==m.substr(0,4)){if(void 0===e)throw"hexadecimal key shall be specified for HMAC";var _=new c({alg:m,pass:e});return _.updateString(f),d==_.doFinal()}if(-1!=m.indexOf("withECDSA")){var S,b=null;try{b=u.concatSigToASN1Sig(d)}catch(t){return!1}return(S=new h({alg:m})).init(e),S.updateString(f),S.verify(b)}return(S=new h({alg:m})).init(e),S.updateString(f),S.verify(d)},Sr.jws.JWS.parse=function(t){var e,r,n,i=t.split("."),o={};if(2!=i.length&&3!=i.length)throw"malformed sJWS: wrong number of '.' splitted elements";return e=i[0],r=i[1],3==i.length&&(n=i[2]),o.headerObj=Sr.jws.JWS.readSafeJSONString(wr(e)),o.payloadObj=Sr.jws.JWS.readSafeJSONString(wr(r)),o.headerPP=JSON.stringify(o.headerObj,null,"  "),null==o.payloadObj?o.payloadPP=wr(r):o.payloadPP=JSON.stringify(o.payloadObj,null,"  "),void 0!==n&&(o.sigHex=Rr(n)),o},Sr.jws.JWS.verifyJWT=function(t,e,r){var n=Sr.jws,i=n.JWS,o=i.readSafeJSONString,s=i.inArray,a=i.includedArray,u=t.split("."),c=u[0],h=u[1],l=(Rr(u[2]),o(wr(c))),f=o(wr(h));if(void 0===l.alg)return!1;if(void 0===r.alg)throw"acceptField.alg shall be specified";if(!s(l.alg,r.alg))return!1;if(void 0!==f.iss&&"object"===g(r.iss)&&!s(f.iss,r.iss))return!1;if(void 0!==f.sub&&"object"===g(r.sub)&&!s(f.sub,r.sub))return!1;if(void 0!==f.aud&&"object"===g(r.aud))if("string"==typeof f.aud){if(!s(f.aud,r.aud))return!1}else if("object"==g(f.aud)&&!a(f.aud,r.aud))return!1;var d=n.IntDate.getNow();return void 0!==r.verifyAt&&"number"==typeof r.verifyAt&&(d=r.verifyAt),void 0!==r.gracePeriod&&"number"==typeof r.gracePeriod||(r.gracePeriod=0),!(void 0!==f.exp&&"number"==typeof f.exp&&f.exp+r.gracePeriod<d)&&(!(void 0!==f.nbf&&"number"==typeof f.nbf&&d<f.nbf-r.gracePeriod)&&(!(void 0!==f.iat&&"number"==typeof f.iat&&d<f.iat-r.gracePeriod)&&((void 0===f.jti||void 0===r.jti||f.jti===r.jti)&&!!i.verify(t,e,r.alg))))},Sr.jws.JWS.includedArray=function(t,e){var r=Sr.jws.JWS.inArray;if(null===t)return!1;if("object"!==(void 0===t?"undefined":g(t)))return!1;if("number"!=typeof t.length)return!1;for(var n=0;n<t.length;n++)if(!r(t[n],e))return!1;return!0},Sr.jws.JWS.inArray=function(t,e){if(null===e)return!1;if("object"!==(void 0===e?"undefined":g(e)))return!1;if("number"!=typeof e.length)return!1;for(var r=0;r<e.length;r++)if(e[r]==t)return!0;return!1},Sr.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none"},Sr.jws.JWS.isSafeJSONString=function(t,e,r){var n=null;try{return"object"!=(void 0===(n=_r(t))?"undefined":g(n))||n.constructor===Array?0:(e&&(e[r]=n),1)}catch(t){return 0}},Sr.jws.JWS.readSafeJSONString=function(t){var e=null;try{return"object"!=(void 0===(e=_r(t))?"undefined":g(e))||e.constructor===Array?null:e}catch(t){return null}},Sr.jws.JWS.getEncodedSignatureValueFromJWS=function(t){var e=t.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(null==e)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";return e[1]},Sr.jws.JWS.getJWKthumbprint=function(t){if("RSA"!==t.kty&&"EC"!==t.kty&&"oct"!==t.kty)throw"unsupported algorithm for JWK Thumprint";var e="{";if("RSA"===t.kty){if("string"!=typeof t.n||"string"!=typeof t.e)throw"wrong n and e value for RSA key";e+='"e":"'+t.e+'",',e+='"kty":"'+t.kty+'",',e+='"n":"'+t.n+'"}'}else if("EC"===t.kty){if("string"!=typeof t.crv||"string"!=typeof t.x||"string"!=typeof t.y)throw"wrong crv, x and y value for EC key";e+='"crv":"'+t.crv+'",',e+='"kty":"'+t.kty+'",',e+='"x":"'+t.x+'",',e+='"y":"'+t.y+'"}'}else if("oct"===t.kty){if("string"!=typeof t.k)throw"wrong k value for oct(symmetric) key";e+='"kty":"'+t.kty+'",',e+='"k":"'+t.k+'"}'}var r=Nr(e);return Tr(Sr.crypto.Util.hashHex(r,"sha256"))},Sr.jws.IntDate={},Sr.jws.IntDate.get=function(t){var e=Sr.jws.IntDate,r=e.getNow,n=e.getZulu;if("now"==t)return r();if("now + 1hour"==t)return r()+3600;if("now + 1day"==t)return r()+86400;if("now + 1month"==t)return r()+2592e3;if("now + 1year"==t)return r()+31536e3;if(t.match(/Z$/))return n(t);if(t.match(/^[0-9]+$/))return parseInt(t);throw"unsupported format: "+t},Sr.jws.IntDate.getZulu=function(t){return Vr(t)},Sr.jws.IntDate.getNow=function(){return~~(new Date/1e3)},Sr.jws.IntDate.intDate2UTCString=function(t){return new Date(1e3*t).toUTCString()},Sr.jws.IntDate.intDate2Zulu=function(t){var e=new Date(1e3*t);return("0000"+e.getUTCFullYear()).slice(-4)+("00"+(e.getUTCMonth()+1)).slice(-2)+("00"+e.getUTCDate()).slice(-2)+("00"+e.getUTCHours()).slice(-2)+("00"+e.getUTCMinutes()).slice(-2)+("00"+e.getUTCSeconds()).slice(-2)+"Z"},e.SecureRandom=Be,e.rng_seed_time=Re,e.BigInteger=w,e.RSAKey=Me;var sn=Sr.crypto.EDSA;e.EDSA=sn;var an=Sr.crypto.DSA;e.DSA=an;var un=Sr.crypto.Signature;e.Signature=un;var cn=Sr.crypto.MessageDigest;e.MessageDigest=cn;var hn=Sr.crypto.Mac;e.Mac=hn;var ln=Sr.crypto.Cipher;e.Cipher=ln,e.KEYUTIL=tn,e.ASN1HEX=Fr,e.X509=on,e.CryptoJS=v,e.b64tohex=S,e.b64toBA=b,e.stoBA=Er,e.BAtos=xr,e.BAtohex=Ar,e.stohex=kr,e.stob64=function fn(t){return _(kr(t))},e.stob64u=function gn(t){return Pr(_(kr(t)))},e.b64utos=function dn(t){return xr(b(Cr(t)))},e.b64tob64u=Pr,e.b64utob64=Cr,e.hex2b64=_,e.hextob64u=Tr,e.b64utohex=Rr,e.utf8tob64u=br,e.b64utoutf8=wr,e.utf8tob64=function pn(t){return _(Kr(Gr(t)))},e.b64toutf8=function vn(t){return decodeURIComponent(qr(S(t)))},e.utf8tohex=Ir,e.hextoutf8=Dr,e.hextorstr=Lr,e.rstrtohex=Nr,e.hextob64=Ur,e.hextob64nl=Br,e.b64nltohex=Or,e.hextopem=jr,e.pemtohex=Mr,e.hextoArrayBuffer=function yn(t){if(t.length%2!=0)throw"input is not even length";if(null==t.match(/^[0-9A-Fa-f]+$/))throw"input is not hexadecimal";for(var e=new ArrayBuffer(t.length/2),r=new DataView(e),n=0;n<t.length/2;n++)r.setUint8(n,parseInt(t.substr(2*n,2),16));return e},e.ArrayBuffertohex=function mn(t){for(var e="",r=new DataView(t),n=0;n<t.byteLength;n++)e+=("00"+r.getUint8(n).toString(16)).slice(-2);return e},e.zulutomsec=Hr,e.zulutosec=Vr,e.zulutodate=function _n(t){return new Date(Hr(t))},e.datetozulu=function Sn(t,e,r){var n,i=t.getUTCFullYear();if(e){if(i<1950||2049<i)throw"not proper year for UTCTime: "+i;n=(""+i).slice(-2)}else n=("000"+i).slice(-4);if(n+=("0"+(t.getUTCMonth()+1)).slice(-2),n+=("0"+t.getUTCDate()).slice(-2),n+=("0"+t.getUTCHours()).slice(-2),n+=("0"+t.getUTCMinutes()).slice(-2),n+=("0"+t.getUTCSeconds()).slice(-2),r){var o=t.getUTCMilliseconds();0!==o&&(n+="."+(o=(o=("00"+o).slice(-3)).replace(/0+$/g,"")))}return n+="Z"},e.uricmptohex=Kr,e.hextouricmp=qr,e.ipv6tohex=Jr,e.hextoipv6=Wr,e.hextoip=zr,e.iptohex=function bn(t){var e="malformed IP address";if(!(t=t.toLowerCase(t)).match(/^[0-9.]+$/)){if(t.match(/^[0-9a-f:]+$/)&&-1!==t.indexOf(":"))return Jr(t);throw e}var r=t.split(".");if(4!==r.length)throw e;var n="";try{for(var i=0;i<4;i++){n+=("0"+parseInt(r[i]).toString(16)).slice(-2)}return n}catch(t){throw e}},e.encodeURIComponentAll=Gr,e.newline_toUnix=function wn(t){return t=t.replace(/\r\n/gm,"\n")},e.newline_toDos=function Fn(t){return t=(t=t.replace(/\r\n/gm,"\n")).replace(/\n/gm,"\r\n")},e.hextoposhex=$r,e.intarystrtohex=function En(t){t=(t=(t=t.replace(/^\s*\[\s*/,"")).replace(/\s*\]\s*$/,"")).replace(/\s*/g,"");try{return t.split(/,/).map((function(t,e,r){var n=parseInt(t);if(n<0||255<n)throw"integer not in range 0-255";return("00"+n.toString(16)).slice(-2)})).join("")}catch(t){throw"malformed integer array string: "+t}},e.strdiffidx=function t(e,r){var n=e.length;e.length>r.length&&(n=r.length);for(var i=0;i<n;i++)if(e.charCodeAt(i)!=r.charCodeAt(i))return i;return e.length!=r.length?n:-1},e.KJUR=Sr;var xn=Sr.crypto;e.crypto=xn;var An=Sr.asn1;e.asn1=An;var kn=Sr.jws;e.jws=kn;var Pn=Sr.lang;e.lang=Pn}).call(this,r(28).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(30),i=r(31),o=r(32);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function i(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,r,n):"string"==typeof e?function s(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function c(t,e){if(u.isBuffer(e)){var r=0|g(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function n(t){return t!=t}(e.length)?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(h(e),t=a(t,e<0?0:0|g(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|g(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function g(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return K(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return K(t).length;e=(""+e).toLowerCase(),n=!0}}function p(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return I(this,e,r);case"utf8":case"utf-8":return A(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return R(this,e,r);case"base64":return x(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=r;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var l=!0,f=0;f<u;f++)if(c(t,o+f)!==c(e,f)){l=!1;break}if(l)return o}return-1}function _(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function S(t,e,r,n){return J(K(e,t.length-r),t,r,n)}function b(t,e,r,n){return J(function i(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return b(t,e,r,n)}function F(t,e,r,n){return J(q(e),t,r,n)}function E(t,e,r,n){return J(function i(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function x(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function A(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,c=t[i],h=null,l=c>239?4:c>223?3:c>191?2:1;if(i+l<=r)switch(l){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,l=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),i+=l}return function f(t){var e=t.length;if(e<=C)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=C));return r}(n)}e.Buffer=u,e.SlowBuffer=function k(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function P(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function n(t,e,r,i){return h(e),e<=0?a(t,e):void 0!==r?"string"==typeof i?a(t,e).fill(r,i):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function t(e){return!(null==e||!e._isBuffer)},u.compare=function t(e,r){if(!u.isBuffer(e)||!u.isBuffer(r))throw new TypeError("Arguments must be Buffers");if(e===r)return 0;for(var n=e.length,i=r.length,o=0,s=Math.min(n,i);o<s;++o)if(e[o]!==r[o]){n=e[o],i=r[o];break}return n<i?-1:i<n?1:0},u.isEncoding=function t(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function t(e,r){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===r)for(r=0,n=0;n<e.length;++n)r+=e[n].length;var i=u.allocUnsafe(r),s=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,s),s+=a.length}return i},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function t(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var r=0;r<e;r+=2)v(this,r,r+1);return this},u.prototype.swap32=function t(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var r=0;r<e;r+=4)v(this,r,r+3),v(this,r+1,r+2);return this},u.prototype.swap64=function t(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var r=0;r<e;r+=8)v(this,r,r+7),v(this,r+1,r+6),v(this,r+2,r+5),v(this,r+3,r+4);return this},u.prototype.toString=function t(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):p.apply(this,arguments)},u.prototype.equals=function t(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function t(){var r="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(r=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(r+=" ... ")),"<Buffer "+r+">"},u.prototype.compare=function t(e,r,n,i,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),r<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&r>=n)return 0;if(i>=o)return-1;if(r>=n)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(i>>>=0),a=(n>>>=0)-(r>>>=0),c=Math.min(s,a),h=this.slice(i,o),l=e.slice(r,n),f=0;f<c;++f)if(h[f]!==l[f]){s=h[f],a=l[f];break}return s<a?-1:a<s?1:0},u.prototype.includes=function t(e,r,n){return-1!==this.indexOf(e,r,n)},u.prototype.indexOf=function t(e,r,n){return y(this,e,r,n,!0)},u.prototype.lastIndexOf=function t(e,r,n){return y(this,e,r,n,!1)},u.prototype.write=function t(e,r,n,i){if(void 0===r)i="utf8",n=this.length,r=0;else if(void 0===n&&"string"==typeof r)i=r,n=this.length,r=0;else{if(!isFinite(r))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var o=this.length-r;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var s=!1;;)switch(i){case"hex":return _(this,e,r,n);case"utf8":case"utf-8":return S(this,e,r,n);case"ascii":return b(this,e,r,n);case"latin1":case"binary":return w(this,e,r,n);case"base64":return F(this,e,r,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,r,n);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},u.prototype.toJSON=function t(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function I(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=V(t[o]);return i}function D(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function L(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function N(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function B(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function O(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(t,e,r,n,o){return o||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function M(t,e,r,n,o){return o||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function t(e,r){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(r=void 0===r?i:~~r)<0?(r+=i)<0&&(r=0):r>i&&(r=i),r<e&&(r=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,r)).__proto__=u.prototype;else{var o=r-e;n=new u(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},u.prototype.readUIntLE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e],o=1,s=0;++s<r&&(o*=256);)i+=this[e+s]*o;return i},u.prototype.readUIntBE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e+--r],o=1;r>0&&(o*=256);)i+=this[e+--r]*o;return i},u.prototype.readUInt8=function t(e,r){return r||L(e,1,this.length),this[e]},u.prototype.readUInt16LE=function t(e,r){return r||L(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function t(e,r){return r||L(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function t(e,r){return r||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function t(e,r){return r||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e],o=1,s=0;++s<r&&(o*=256);)i+=this[e+s]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*r)),i},u.prototype.readIntBE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=r,o=1,s=this[e+--i];i>0&&(o*=256);)s+=this[e+--i]*o;return s>=(o*=128)&&(s-=Math.pow(2,8*r)),s},u.prototype.readInt8=function t(e,r){return r||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function t(e,r){r||L(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function t(e,r){r||L(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function t(e,r){return r||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function t(e,r){return r||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function t(e,r){return r||L(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function t(e,r){return r||L(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function t(e,r){return r||L(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function t(e,r){return r||L(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function t(e,r,n,i){(e=+e,r|=0,n|=0,i)||N(this,e,r,n,Math.pow(2,8*n)-1,0);var o=1,s=0;for(this[r]=255&e;++s<n&&(o*=256);)this[r+s]=e/o&255;return r+n},u.prototype.writeUIntBE=function t(e,r,n,i){(e=+e,r|=0,n|=0,i)||N(this,e,r,n,Math.pow(2,8*n)-1,0);var o=n-1,s=1;for(this[r+o]=255&e;--o>=0&&(s*=256);)this[r+o]=e/s&255;return r+n},u.prototype.writeUInt8=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[r]=255&e,r+1},u.prototype.writeUInt16LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8):U(this,e,r,!0),r+2},u.prototype.writeUInt16BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>8,this[r+1]=255&e):U(this,e,r,!1),r+2},u.prototype.writeUInt32LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[r+3]=e>>>24,this[r+2]=e>>>16,this[r+1]=e>>>8,this[r]=255&e):B(this,e,r,!0),r+4},u.prototype.writeUInt32BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e):B(this,e,r,!1),r+4},u.prototype.writeIntLE=function t(e,r,n,i){if(e=+e,r|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,r,n,o-1,-o)}var s=0,a=1,u=0;for(this[r]=255&e;++s<n&&(a*=256);)e<0&&0===u&&0!==this[r+s-1]&&(u=1),this[r+s]=(e/a>>0)-u&255;return r+n},u.prototype.writeIntBE=function t(e,r,n,i){if(e=+e,r|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,r,n,o-1,-o)}var s=n-1,a=1,u=0;for(this[r+s]=255&e;--s>=0&&(a*=256);)e<0&&0===u&&0!==this[r+s+1]&&(u=1),this[r+s]=(e/a>>0)-u&255;return r+n},u.prototype.writeInt8=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[r]=255&e,r+1},u.prototype.writeInt16LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8):U(this,e,r,!0),r+2},u.prototype.writeInt16BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>8,this[r+1]=255&e):U(this,e,r,!1),r+2},u.prototype.writeInt32LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8,this[r+2]=e>>>16,this[r+3]=e>>>24):B(this,e,r,!0),r+4},u.prototype.writeInt32BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e):B(this,e,r,!1),r+4},u.prototype.writeFloatLE=function t(e,r,n){return j(this,e,r,!0,n)},u.prototype.writeFloatBE=function t(e,r,n){return j(this,e,r,!1,n)},u.prototype.writeDoubleLE=function t(e,r,n){return M(this,e,r,!0,n)},u.prototype.writeDoubleBE=function t(e,r,n){return M(this,e,r,!1,n)},u.prototype.copy=function t(e,r,n,i){if(n||(n=0),i||0===i||(i=this.length),r>=e.length&&(r=e.length),r||(r=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-r<i-n&&(i=e.length-r+n);var o,s=i-n;if(this===e&&n<r&&r<i)for(o=s-1;o>=0;--o)e[o+r]=this[o+n];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+r]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),r);return s},u.prototype.fill=function t(e,r,n,i){if("string"==typeof e){if("string"==typeof r?(i=r,r=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!u.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;var s;if(r>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=r;s<n;++s)this[s]=e;else{var a=u.isBuffer(e)?e:K(new u(e,i).toString()),c=a.length;for(s=0;s<n-r;++s)this[s+r]=a[s%c]}return this};var H=/[^+\/0-9A-Za-z-_]/g;function V(t){return t<16?"0"+t.toString(16):t.toString(16)}function K(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function q(t){return n.toByteArray(function e(t){if((t=function e(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function J(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(29))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";e.byteLength=function n(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function i(t){var e,r,n=f(t),i=n[0],o=n[1],s=new u(function c(t,e,r){return 3*(e+r)/4-r}(0,i,o)),h=0,l=o>0?i-4:i;for(r=0;r<l;r+=4)e=a[t.charCodeAt(r)]<<18|a[t.charCodeAt(r+1)]<<12|a[t.charCodeAt(r+2)]<<6|a[t.charCodeAt(r+3)],s[h++]=e>>16&255,s[h++]=e>>8&255,s[h++]=255&e;2===o&&(e=a[t.charCodeAt(r)]<<2|a[t.charCodeAt(r+1)]>>4,s[h++]=255&e);1===o&&(e=a[t.charCodeAt(r)]<<10|a[t.charCodeAt(r+1)]<<4|a[t.charCodeAt(r+2)]>>2,s[h++]=e>>8&255,s[h++]=255&e);return s},e.fromByteArray=function o(t){for(var e,r=t.length,n=r%3,i=[],o=16383,a=0,u=r-n;a<u;a+=o)i.push(g(t,a,a+o>u?u:a+o));1===n?(e=t[r-1],i.push(s[e>>2]+s[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],i.push(s[e>>10]+s[e>>4&63]+s[e<<2&63]+"="));return i.join("")};for(var s=[],a=[],u="undefined"!=typeof Uint8Array?Uint8Array:Array,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",h=0,l=c.length;h<l;++h)s[h]=c[h],a[c.charCodeAt(h)]=h;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function g(t,e,r){for(var n,i,o=[],a=e;a<r;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(s[(i=n)>>18&63]+s[i>>12&63]+s[i>>6&63]+s[63&i]);return o.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},function(t,e){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,c=u>>1,h=-7,l=r?i-1:0,f=r?-1:1,g=t[e+l];for(l+=f,o=g&(1<<-h)-1,g>>=-h,h+=a;h>0;o=256*o+t[e+l],l+=f,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=n;h>0;s=256*s+t[e+l],l+=f,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(g?-1:1);s+=Math.pow(2,n),o-=c}return(g?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,l=h>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,g=n?0:o-1,d=n?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+l>=1?f/u:f*Math.pow(2,1-l))*u>=2&&(s++,u/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(e*u-1)*Math.pow(2,i),s+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),s=0));i>=8;t[r+g]=255&a,g+=d,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[r+g]=255&s,g+=d,s/=256,c-=8);t[r+g-d]|=128*p}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function n(t){var e=t.jws,r=t.KeyUtil,n=t.X509,o=t.crypto,s=t.hextob64u,a=t.b64tohex,u=t.AllowedSigningAlgs;return function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.parseJwt=function t(r){i.Log.debug("JoseUtil.parseJwt");try{var n=e.JWS.parse(r);return{header:n.headerObj,payload:n.payloadObj}}catch(t){i.Log.error(t)}},t.validateJwt=function e(o,s,u,c,h,l,f){i.Log.debug("JoseUtil.validateJwt");try{if("RSA"===s.kty)if(s.e&&s.n)s=r.getKey(s);else{if(!s.x5c||!s.x5c.length)return i.Log.error("JoseUtil.validateJwt: RSA key missing key material",s),Promise.reject(new Error("RSA key missing key material"));var g=a(s.x5c[0]);s=n.getPublicKeyFromCertHex(g)}else{if("EC"!==s.kty)return i.Log.error("JoseUtil.validateJwt: Unsupported key type",s&&s.kty),Promise.reject(new Error(s.kty));if(!(s.crv&&s.x&&s.y))return i.Log.error("JoseUtil.validateJwt: EC key missing key material",s),Promise.reject(new Error("EC key missing key material"));s=r.getKey(s)}return t._validateJwt(o,s,u,c,h,l,f)}catch(t){return i.Log.error(t&&t.message||t),Promise.reject("JWT validation failed")}},t.validateJwtAttributes=function e(r,n,o,s,a,u){s||(s=0),a||(a=parseInt(Date.now()/1e3));var c=t.parseJwt(r).payload;if(!c.iss)return i.Log.error("JoseUtil._validateJwt: issuer was not provided"),Promise.reject(new Error("issuer was not provided"));if(c.iss!==n)return i.Log.error("JoseUtil._validateJwt: Invalid issuer in token",c.iss),Promise.reject(new Error("Invalid issuer in token: "+c.iss));if(!c.aud)return i.Log.error("JoseUtil._validateJwt: aud was not provided"),Promise.reject(new Error("aud was not provided"));if(!(c.aud===o||Array.isArray(c.aud)&&c.aud.indexOf(o)>=0))return i.Log.error("JoseUtil._validateJwt: Invalid audience in token",c.aud),Promise.reject(new Error("Invalid audience in token: "+c.aud));if(c.azp&&c.azp!==o)return i.Log.error("JoseUtil._validateJwt: Invalid azp in token",c.azp),Promise.reject(new Error("Invalid azp in token: "+c.azp));if(!u){var h=a+s,l=a-s;if(!c.iat)return i.Log.error("JoseUtil._validateJwt: iat was not provided"),Promise.reject(new Error("iat was not provided"));if(h<c.iat)return i.Log.error("JoseUtil._validateJwt: iat is in the future",c.iat),Promise.reject(new Error("iat is in the future: "+c.iat));if(c.nbf&&h<c.nbf)return i.Log.error("JoseUtil._validateJwt: nbf is in the future",c.nbf),Promise.reject(new Error("nbf is in the future: "+c.nbf));if(!c.exp)return i.Log.error("JoseUtil._validateJwt: exp was not provided"),Promise.reject(new Error("exp was not provided"));if(c.exp<l)return i.Log.error("JoseUtil._validateJwt: exp is in the past",c.exp),Promise.reject(new Error("exp is in the past:"+c.exp))}return Promise.resolve(c)},t._validateJwt=function r(n,o,s,a,c,h,l){return t.validateJwtAttributes(n,s,a,c,h,l).then((function(t){try{return e.JWS.verify(n,o,u)?t:(i.Log.error("JoseUtil._validateJwt: signature validation failed"),Promise.reject(new Error("signature validation failed")))}catch(t){return i.Log.error(t&&t.message||t),Promise.reject(new Error("signature validation failed"))}}))},t.hashString=function t(e,r){try{return o.Util.hashString(e,r)}catch(t){i.Log.error(t)}},t.hexToBase64Url=function t(e){try{return s(e)}catch(t){i.Log.error(t)}},t}()};var i=r(0);t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninResponse=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(3);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SigninResponse=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#";o(this,t);var n=i.UrlUtility.parseUrlFragment(e,r);this.error=n.error,this.error_description=n.error_description,this.error_uri=n.error_uri,this.code=n.code,this.state=n.state,this.id_token=n.id_token,this.session_state=n.session_state,this.access_token=n.access_token,this.token_type=n.token_type,this.scope=n.scope,this.profile=void 0,this.expires_in=n.expires_in}return n(t,[{key:"expires_in",get:function t(){if(this.expires_at){var e=parseInt(Date.now()/1e3);return this.expires_at-e}},set:function t(e){var r=parseInt(e);if("number"==typeof r&&r>0){var n=parseInt(Date.now()/1e3);this.expires_at=n+r}}},{key:"expired",get:function t(){var e=this.expires_in;if(void 0!==e)return e<=0}},{key:"scopes",get:function t(){return(this.scope||"").split(" ")}},{key:"isOpenIdConnect",get:function t(){return this.scopes.indexOf("openid")>=0||!!this.id_token}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SignoutRequest=void 0;var n=r(0),i=r(3),o=r(9);e.SignoutRequest=function t(e){var r=e.url,s=e.id_token_hint,a=e.post_logout_redirect_uri,u=e.data,c=e.extraQueryParams,h=e.request_type;if(function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!r)throw n.Log.error("SignoutRequest.ctor: No url passed"),new Error("url");for(var f in s&&(r=i.UrlUtility.addQueryParam(r,"id_token_hint",s)),a&&(r=i.UrlUtility.addQueryParam(r,"post_logout_redirect_uri",a),u&&(this.state=new o.State({data:u,request_type:h}),r=i.UrlUtility.addQueryParam(r,"state",this.state.id))),c)r=i.UrlUtility.addQueryParam(r,f,c[f]);this.url=r}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SignoutResponse=void 0;var n=r(3);e.SignoutResponse=function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var i=n.UrlUtility.parseUrlFragment(e,"?");this.error=i.error,this.error_description=i.error_description,this.error_uri=i.error_uri,this.state=i.state}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InMemoryWebStorage=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.InMemoryWebStorage=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this._data={}}return t.prototype.getItem=function t(e){return i.Log.debug("InMemoryWebStorage.getItem",e),this._data[e]},t.prototype.setItem=function t(e,r){i.Log.debug("InMemoryWebStorage.setItem",e),this._data[e]=r},t.prototype.removeItem=function t(e){i.Log.debug("InMemoryWebStorage.removeItem",e),delete this._data[e]},t.prototype.key=function t(e){return Object.getOwnPropertyNames(this._data)[e]},n(t,[{key:"length",get:function t(){return Object.getOwnPropertyNames(this._data).length}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManager=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(10),s=r(39),a=r(15),u=r(45),c=r(47),h=r(18),l=r(8),f=r(20),g=r(11),d=r(4);function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.UserManager=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c.SilentRenewService,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:h.SessionMonitor,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f.TokenRevocationClient,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:g.TokenClient,y=arguments.length>5&&void 0!==arguments[5]?arguments[5]:d.JoseUtil;p(this,e),r instanceof s.UserManagerSettings||(r=new s.UserManagerSettings(r));var m=v(this,t.call(this,r));return m._events=new u.UserManagerEvents(r),m._silentRenewService=new n(m),m.settings.automaticSilentRenew&&(i.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew"),m.startSilentRenew()),m.settings.monitorSession&&(i.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor"),m._sessionMonitor=new o(m)),m._tokenRevocationClient=new a(m._settings),m._tokenClient=new l(m._settings),m._joseUtil=y,m}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getUser=function t(){var e=this;return this._loadUser().then((function(t){return t?(i.Log.info("UserManager.getUser: user loaded"),e._events.load(t,!1),t):(i.Log.info("UserManager.getUser: user not found in storage"),null)}))},e.prototype.removeUser=function t(){var e=this;return this.storeUser(null).then((function(){i.Log.info("UserManager.removeUser: user removed from storage"),e._events.unload()}))},e.prototype.signinRedirect=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="si:r";var r={useReplaceToNavigate:e.useReplaceToNavigate};return this._signinStart(e,this._redirectNavigator,r).then((function(){i.Log.info("UserManager.signinRedirect: successful")}))},e.prototype.signinRedirectCallback=function t(e){return this._signinEnd(e||this._redirectNavigator.url).then((function(t){return t.profile&&t.profile.sub?i.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinRedirectCallback: no sub"),t}))},e.prototype.signinPopup=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="si:p";var r=e.redirect_uri||this.settings.popup_redirect_uri||this.settings.redirect_uri;return r?(e.redirect_uri=r,e.display="popup",this._signin(e,this._popupNavigator,{startUrl:r,popupWindowFeatures:e.popupWindowFeatures||this.settings.popupWindowFeatures,popupWindowTarget:e.popupWindowTarget||this.settings.popupWindowTarget}).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinPopup: no sub")),t}))):(i.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured"),Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured")))},e.prototype.signinPopupCallback=function t(e){return this._signinCallback(e,this._popupNavigator).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinPopupCallback: no sub")),t})).catch((function(t){i.Log.error(t.message)}))},e.prototype.signinSilent=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return r=Object.assign({},r),this._loadUser().then((function(t){return t&&t.refresh_token?(r.refresh_token=t.refresh_token,e._useRefreshToken(r)):(r.request_type="si:s",r.id_token_hint=r.id_token_hint||e.settings.includeIdTokenInSilentRenew&&t&&t.id_token,t&&e._settings.validateSubOnSilentRenew&&(i.Log.debug("UserManager.signinSilent, subject prior to silent renew: ",t.profile.sub),r.current_sub=t.profile.sub),e._signinSilentIframe(r))}))},e.prototype._useRefreshToken=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._tokenClient.exchangeRefreshToken(r).then((function(t){return t?t.access_token?e._loadUser().then((function(r){if(r){var n=Promise.resolve();return t.id_token&&(n=e._validateIdTokenFromTokenRefreshToken(r.profile,t.id_token)),n.then((function(){return i.Log.debug("UserManager._useRefreshToken: refresh token response success"),r.id_token=t.id_token||r.id_token,r.access_token=t.access_token,r.refresh_token=t.refresh_token||r.refresh_token,r.expires_in=t.expires_in,e.storeUser(r).then((function(){return e._events.load(r),r}))}))}return null})):(i.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint"),Promise.reject("No access token returned from token endpoint")):(i.Log.error("UserManager._useRefreshToken: No response returned from token endpoint"),Promise.reject("No response returned from token endpoint"))}))},e.prototype._validateIdTokenFromTokenRefreshToken=function t(e,r){var n=this;return this._metadataService.getIssuer().then((function(t){return n.settings.getEpochTime().then((function(o){return n._joseUtil.validateJwtAttributes(r,t,n._settings.client_id,n._settings.clockSkew,o).then((function(t){return t?t.sub!==e.sub?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub"),Promise.reject(new Error("sub in id_token does not match current sub"))):t.auth_time&&t.auth_time!==e.auth_time?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time"),Promise.reject(new Error("auth_time in id_token does not match original auth_time"))):t.azp&&t.azp!==e.azp?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp"),Promise.reject(new Error("azp in id_token does not match original azp"))):!t.azp&&e.azp?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token"),Promise.reject(new Error("azp not in id_token, but present in original id_token"))):void 0:(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token"),Promise.reject(new Error("Failed to validate id_token")))}))}))}))},e.prototype._signinSilentIframe=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.redirect_uri||this.settings.silent_redirect_uri||this.settings.redirect_uri;return r?(e.redirect_uri=r,e.prompt=e.prompt||"none",this._signin(e,this._iframeNavigator,{startUrl:r,silentRequestTimeout:e.silentRequestTimeout||this.settings.silentRequestTimeout}).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinSilent: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinSilent: no sub")),t}))):(i.Log.error("UserManager.signinSilent: No silent_redirect_uri configured"),Promise.reject(new Error("No silent_redirect_uri configured")))},e.prototype.signinSilentCallback=function t(e){return this._signinCallback(e,this._iframeNavigator).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinSilentCallback: no sub")),t}))},e.prototype.signinCallback=function t(e){var r=this;return this.readSigninResponseState(e).then((function(t){var n=t.state;t.response;return"si:r"===n.request_type?r.signinRedirectCallback(e):"si:p"===n.request_type?r.signinPopupCallback(e):"si:s"===n.request_type?r.signinSilentCallback(e):Promise.reject(new Error("invalid response_type in state"))}))},e.prototype.signoutCallback=function t(e,r){var n=this;return this.readSignoutResponseState(e).then((function(t){var i=t.state,o=t.response;return i?"so:r"===i.request_type?n.signoutRedirectCallback(e):"so:p"===i.request_type?n.signoutPopupCallback(e,r):Promise.reject(new Error("invalid response_type in state")):o}))},e.prototype.querySessionStatus=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).request_type="si:s";var n=r.redirect_uri||this.settings.silent_redirect_uri||this.settings.redirect_uri;return n?(r.redirect_uri=n,r.prompt="none",r.response_type=r.response_type||this.settings.query_status_response_type,r.scope=r.scope||"openid",r.skipUserInfo=!0,this._signinStart(r,this._iframeNavigator,{startUrl:n,silentRequestTimeout:r.silentRequestTimeout||this.settings.silentRequestTimeout}).then((function(t){return e.processSigninResponse(t.url).then((function(t){if(i.Log.debug("UserManager.querySessionStatus: got signin response"),t.session_state&&t.profile.sub)return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ",t.profile.sub),{session_state:t.session_state,sub:t.profile.sub,sid:t.profile.sid};i.Log.info("querySessionStatus successful, user not authenticated")})).catch((function(t){if(t.session_state&&e.settings.monitorAnonymousSession&&("login_required"==t.message||"consent_required"==t.message||"interaction_required"==t.message||"account_selection_required"==t.message))return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user"),{session_state:t.session_state};throw t}))}))):(i.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured"),Promise.reject(new Error("No silent_redirect_uri configured")))},e.prototype._signin=function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._signinStart(e,r,i).then((function(t){return n._signinEnd(t.url,e)}))},e.prototype._signinStart=function t(e,r){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.prepare(o).then((function(t){return i.Log.debug("UserManager._signinStart: got navigator window handle"),n.createSigninRequest(e).then((function(e){return i.Log.debug("UserManager._signinStart: got signin request"),o.url=e.url,o.id=e.state.id,t.navigate(o)})).catch((function(e){throw t.close&&(i.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window"),t.close()),e}))}))},e.prototype._signinEnd=function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.processSigninResponse(e).then((function(t){i.Log.debug("UserManager._signinEnd: got signin response");var e=new a.User(t);if(n.current_sub){if(n.current_sub!==e.profile.sub)return i.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ",e.profile.sub),Promise.reject(new Error("login_required"));i.Log.debug("UserManager._signinEnd: current user matches user returned from signin")}return r.storeUser(e).then((function(){return i.Log.debug("UserManager._signinEnd: user stored"),r._events.load(e),e}))}))},e.prototype._signinCallback=function t(e,r){i.Log.debug("UserManager._signinCallback");var n="query"===this._settings.response_mode||!this._settings.response_mode&&l.SigninRequest.isCode(this._settings.response_type)?"?":"#";return r.callback(e,void 0,n)},e.prototype.signoutRedirect=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="so:r";var r=e.post_logout_redirect_uri||this.settings.post_logout_redirect_uri;r&&(e.post_logout_redirect_uri=r);var n={useReplaceToNavigate:e.useReplaceToNavigate};return this._signoutStart(e,this._redirectNavigator,n).then((function(){i.Log.info("UserManager.signoutRedirect: successful")}))},e.prototype.signoutRedirectCallback=function t(e){return this._signoutEnd(e||this._redirectNavigator.url).then((function(t){return i.Log.info("UserManager.signoutRedirectCallback: successful"),t}))},e.prototype.signoutPopup=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="so:p";var r=e.post_logout_redirect_uri||this.settings.popup_post_logout_redirect_uri||this.settings.post_logout_redirect_uri;return e.post_logout_redirect_uri=r,e.display="popup",e.post_logout_redirect_uri&&(e.state=e.state||{}),this._signout(e,this._popupNavigator,{startUrl:r,popupWindowFeatures:e.popupWindowFeatures||this.settings.popupWindowFeatures,popupWindowTarget:e.popupWindowTarget||this.settings.popupWindowTarget}).then((function(){i.Log.info("UserManager.signoutPopup: successful")}))},e.prototype.signoutPopupCallback=function t(e,r){void 0===r&&"boolean"==typeof e&&(r=e,e=null);return this._popupNavigator.callback(e,r,"?").then((function(){i.Log.info("UserManager.signoutPopupCallback: successful")}))},e.prototype._signout=function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._signoutStart(e,r,i).then((function(t){return n._signoutEnd(t.url)}))},e.prototype._signoutStart=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=this,n=arguments[1],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.prepare(o).then((function(t){return i.Log.debug("UserManager._signoutStart: got navigator window handle"),r._loadUser().then((function(n){return i.Log.debug("UserManager._signoutStart: loaded current user from storage"),(r._settings.revokeAccessTokenOnSignout?r._revokeInternal(n):Promise.resolve()).then((function(){var s=e.id_token_hint||n&&n.id_token;return s&&(i.Log.debug("UserManager._signoutStart: Setting id_token into signout request"),e.id_token_hint=s),r.removeUser().then((function(){return i.Log.debug("UserManager._signoutStart: user removed, creating signout request"),r.createSignoutRequest(e).then((function(e){return i.Log.debug("UserManager._signoutStart: got signout request"),o.url=e.url,e.state&&(o.id=e.state.id),t.navigate(o)}))}))}))})).catch((function(e){throw t.close&&(i.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window"),t.close()),e}))}))},e.prototype._signoutEnd=function t(e){return this.processSignoutResponse(e).then((function(t){return i.Log.debug("UserManager._signoutEnd: got signout response"),t}))},e.prototype.revokeAccessToken=function t(){var e=this;return this._loadUser().then((function(t){return e._revokeInternal(t,!0).then((function(r){if(r)return i.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing"),t.access_token=null,t.refresh_token=null,t.expires_at=null,t.token_type=null,e.storeUser(t).then((function(){i.Log.debug("UserManager.revokeAccessToken: user stored"),e._events.load(t)}))}))})).then((function(){i.Log.info("UserManager.revokeAccessToken: access token revoked successfully")}))},e.prototype._revokeInternal=function t(e,r){var n=this;if(e){var o=e.access_token,s=e.refresh_token;return this._revokeAccessTokenInternal(o,r).then((function(t){return n._revokeRefreshTokenInternal(s,r).then((function(e){return t||e||i.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format"),t||e}))}))}return Promise.resolve(!1)},e.prototype._revokeAccessTokenInternal=function t(e,r){return!e||e.indexOf(".")>=0?Promise.resolve(!1):this._tokenRevocationClient.revoke(e,r).then((function(){return!0}))},e.prototype._revokeRefreshTokenInternal=function t(e,r){return e?this._tokenRevocationClient.revoke(e,r,"refresh_token").then((function(){return!0})):Promise.resolve(!1)},e.prototype.startSilentRenew=function t(){this._silentRenewService.start()},e.prototype.stopSilentRenew=function t(){this._silentRenewService.stop()},e.prototype._loadUser=function t(){return this._userStore.get(this._userStoreKey).then((function(t){return t?(i.Log.debug("UserManager._loadUser: user storageString loaded"),a.User.fromStorageString(t)):(i.Log.debug("UserManager._loadUser: no user storageString"),null)}))},e.prototype.storeUser=function t(e){if(e){i.Log.debug("UserManager.storeUser: storing user");var r=e.toStorageString();return this._userStore.set(this._userStoreKey,r)}return i.Log.debug("storeUser.storeUser: removing user"),this._userStore.remove(this._userStoreKey)},n(e,[{key:"_redirectNavigator",get:function t(){return this.settings.redirectNavigator}},{key:"_popupNavigator",get:function t(){return this.settings.popupNavigator}},{key:"_iframeNavigator",get:function t(){return this.settings.iframeNavigator}},{key:"_userStore",get:function t(){return this.settings.userStore}},{key:"events",get:function t(){return this._events}},{key:"_userStoreKey",get:function t(){return"user:"+this.settings.authority+":"+this.settings.client_id}}]),e}(o.OidcClient)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManagerSettings=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=(r(0),r(5)),o=r(40),s=r(41),a=r(43),u=r(6),c=r(1),h=r(8);function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.UserManagerSettings=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.popup_redirect_uri,i=r.popup_post_logout_redirect_uri,g=r.popupWindowFeatures,d=r.popupWindowTarget,p=r.silent_redirect_uri,v=r.silentRequestTimeout,y=r.automaticSilentRenew,m=void 0!==y&&y,_=r.validateSubOnSilentRenew,S=void 0!==_&&_,b=r.includeIdTokenInSilentRenew,w=void 0===b||b,F=r.monitorSession,E=void 0===F||F,x=r.monitorAnonymousSession,A=void 0!==x&&x,k=r.checkSessionInterval,P=void 0===k?2e3:k,C=r.stopCheckSessionOnError,T=void 0===C||C,R=r.query_status_response_type,I=r.revokeAccessTokenOnSignout,D=void 0!==I&&I,L=r.accessTokenExpiringNotificationTime,N=void 0===L?60:L,U=r.redirectNavigator,B=void 0===U?new o.RedirectNavigator:U,O=r.popupNavigator,j=void 0===O?new s.PopupNavigator:O,M=r.iframeNavigator,H=void 0===M?new a.IFrameNavigator:M,V=r.userStore,K=void 0===V?new u.WebStorageStateStore({store:c.Global.sessionStorage}):V;l(this,e);var q=f(this,t.call(this,arguments[0]));return q._popup_redirect_uri=n,q._popup_post_logout_redirect_uri=i,q._popupWindowFeatures=g,q._popupWindowTarget=d,q._silent_redirect_uri=p,q._silentRequestTimeout=v,q._automaticSilentRenew=m,q._validateSubOnSilentRenew=S,q._includeIdTokenInSilentRenew=w,q._accessTokenExpiringNotificationTime=N,q._monitorSession=E,q._monitorAnonymousSession=A,q._checkSessionInterval=P,q._stopCheckSessionOnError=T,R?q._query_status_response_type=R:arguments[0]&&arguments[0].response_type?q._query_status_response_type=h.SigninRequest.isOidc(arguments[0].response_type)?"id_token":"code":q._query_status_response_type="id_token",q._revokeAccessTokenOnSignout=D,q._redirectNavigator=B,q._popupNavigator=j,q._iframeNavigator=H,q._userStore=K,q}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),n(e,[{key:"popup_redirect_uri",get:function t(){return this._popup_redirect_uri}},{key:"popup_post_logout_redirect_uri",get:function t(){return this._popup_post_logout_redirect_uri}},{key:"popupWindowFeatures",get:function t(){return this._popupWindowFeatures}},{key:"popupWindowTarget",get:function t(){return this._popupWindowTarget}},{key:"silent_redirect_uri",get:function t(){return this._silent_redirect_uri}},{key:"silentRequestTimeout",get:function t(){return this._silentRequestTimeout}},{key:"automaticSilentRenew",get:function t(){return this._automaticSilentRenew}},{key:"validateSubOnSilentRenew",get:function t(){return this._validateSubOnSilentRenew}},{key:"includeIdTokenInSilentRenew",get:function t(){return this._includeIdTokenInSilentRenew}},{key:"accessTokenExpiringNotificationTime",get:function t(){return this._accessTokenExpiringNotificationTime}},{key:"monitorSession",get:function t(){return this._monitorSession}},{key:"monitorAnonymousSession",get:function t(){return this._monitorAnonymousSession}},{key:"checkSessionInterval",get:function t(){return this._checkSessionInterval}},{key:"stopCheckSessionOnError",get:function t(){return this._stopCheckSessionOnError}},{key:"query_status_response_type",get:function t(){return this._query_status_response_type}},{key:"revokeAccessTokenOnSignout",get:function t(){return this._revokeAccessTokenOnSignout}},{key:"redirectNavigator",get:function t(){return this._redirectNavigator}},{key:"popupNavigator",get:function t(){return this._popupNavigator}},{key:"iframeNavigator",get:function t(){return this._iframeNavigator}},{key:"userStore",get:function t(){return this._userStore}}]),e}(i.OidcClientSettings)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RedirectNavigator=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.RedirectNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(){return Promise.resolve(this)},t.prototype.navigate=function t(e){return e&&e.url?(e.useReplaceToNavigate?window.location.replace(e.url):window.location=e.url,Promise.resolve()):(i.Log.error("RedirectNavigator.navigate: No url provided"),Promise.reject(new Error("No url provided")))},n(t,[{key:"url",get:function t(){return window.location.href}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopupNavigator=void 0;var n=r(0),i=r(42);e.PopupNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new i.PopupWindow(e);return Promise.resolve(r)},t.prototype.callback=function t(e,r,o){n.Log.debug("PopupNavigator.callback");try{return i.PopupWindow.notifyOpener(e,r,o),Promise.resolve()}catch(t){return Promise.reject(t)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopupWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(3);e.PopupWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e}));var o=e.popupWindowTarget||"_blank",s=e.popupWindowFeatures||"location=no,toolbar=no,width=500,height=500,left=100,top=100;";this._popup=window.open("",o,s),this._popup&&(i.Log.debug("PopupWindow.ctor: popup successfully created"),this._checkForPopupClosedTimer=window.setInterval(this._checkForPopupClosed.bind(this),500))}return t.prototype.navigate=function t(e){return this._popup?e&&e.url?(i.Log.debug("PopupWindow.navigate: Setting URL in popup"),this._id=e.id,this._id&&(window["popupCallback_"+e.id]=this._callback.bind(this)),this._popup.focus(),this._popup.window.location=e.url):(this._error("PopupWindow.navigate: no url provided"),this._error("No url provided")):this._error("PopupWindow.navigate: Error opening popup window"),this.promise},t.prototype._success=function t(e){i.Log.debug("PopupWindow.callback: Successful response from popup window"),this._cleanup(),this._resolve(e)},t.prototype._error=function t(e){i.Log.error("PopupWindow.error: ",e),this._cleanup(),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup(!1)},t.prototype._cleanup=function t(e){i.Log.debug("PopupWindow.cleanup"),window.clearInterval(this._checkForPopupClosedTimer),this._checkForPopupClosedTimer=null,delete window["popupCallback_"+this._id],this._popup&&!e&&this._popup.close(),this._popup=null},t.prototype._checkForPopupClosed=function t(){this._popup&&!this._popup.closed||this._error("Popup window closed")},t.prototype._callback=function t(e,r){this._cleanup(r),e?(i.Log.debug("PopupWindow.callback success"),this._success({url:e})):(i.Log.debug("PopupWindow.callback: Invalid response from popup"),this._error("Invalid response from popup"))},t.notifyOpener=function t(e,r,n){if(window.opener){if(e=e||window.location.href){var s=o.UrlUtility.parseUrlFragment(e,n);if(s.state){var a="popupCallback_"+s.state,u=window.opener[a];u?(i.Log.debug("PopupWindow.notifyOpener: passing url message to opener"),u(e,r)):i.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener")}else i.Log.warn("PopupWindow.notifyOpener: no state found in response url")}}else i.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.")},n(t,[{key:"promise",get:function t(){return this._promise}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IFrameNavigator=void 0;var n=r(0),i=r(44);e.IFrameNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new i.IFrameWindow(e);return Promise.resolve(r)},t.prototype.callback=function t(e){n.Log.debug("IFrameNavigator.callback");try{return i.IFrameWindow.notifyParent(e),Promise.resolve()}catch(t){return Promise.reject(t)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IFrameWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.IFrameWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e})),this._boundMessageEvent=this._message.bind(this),window.addEventListener("message",this._boundMessageEvent,!1),this._frame=window.document.createElement("iframe"),this._frame.style.visibility="hidden",this._frame.style.position="absolute",this._frame.width=0,this._frame.height=0,window.document.body.appendChild(this._frame)}return t.prototype.navigate=function t(e){if(e&&e.url){var r=e.silentRequestTimeout||1e4;i.Log.debug("IFrameWindow.navigate: Using timeout of:",r),this._timer=window.setTimeout(this._timeout.bind(this),r),this._frame.src=e.url}else this._error("No url provided");return this.promise},t.prototype._success=function t(e){this._cleanup(),i.Log.debug("IFrameWindow: Successful response from frame window"),this._resolve(e)},t.prototype._error=function t(e){this._cleanup(),i.Log.error(e),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup()},t.prototype._cleanup=function t(){this._frame&&(i.Log.debug("IFrameWindow: cleanup"),window.removeEventListener("message",this._boundMessageEvent,!1),window.clearTimeout(this._timer),window.document.body.removeChild(this._frame),this._timer=null,this._frame=null,this._boundMessageEvent=null)},t.prototype._timeout=function t(){i.Log.debug("IFrameWindow.timeout"),this._error("Frame window timed out")},t.prototype._message=function t(e){if(i.Log.debug("IFrameWindow.message"),this._timer&&e.origin===this._origin&&e.source===this._frame.contentWindow&&"string"==typeof e.data&&(e.data.startsWith("http://")||e.data.startsWith("https://"))){var r=e.data;r?this._success({url:r}):this._error("Invalid response from frame")}},t.notifyParent=function t(e){i.Log.debug("IFrameWindow.notifyParent"),(e=e||window.location.href)&&(i.Log.debug("IFrameWindow.notifyParent: posting url message to parent"),window.parent.postMessage(e,location.protocol+"//"+location.host))},n(t,[{key:"promise",get:function t(){return this._promise}},{key:"_origin",get:function t(){return location.protocol+"//"+location.host}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManagerEvents=void 0;var n=r(0),i=r(16),o=r(17);e.UserManagerEvents=function(t){function e(r){!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r));return i._userLoaded=new o.Event("User loaded"),i._userUnloaded=new o.Event("User unloaded"),i._silentRenewError=new o.Event("Silent renew error"),i._userSignedIn=new o.Event("User signed in"),i._userSignedOut=new o.Event("User signed out"),i._userSessionChanged=new o.Event("User session changed"),i}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.load=function e(r){var i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];n.Log.debug("UserManagerEvents.load"),t.prototype.load.call(this,r),i&&this._userLoaded.raise(r)},e.prototype.unload=function e(){n.Log.debug("UserManagerEvents.unload"),t.prototype.unload.call(this),this._userUnloaded.raise()},e.prototype.addUserLoaded=function t(e){this._userLoaded.addHandler(e)},e.prototype.removeUserLoaded=function t(e){this._userLoaded.removeHandler(e)},e.prototype.addUserUnloaded=function t(e){this._userUnloaded.addHandler(e)},e.prototype.removeUserUnloaded=function t(e){this._userUnloaded.removeHandler(e)},e.prototype.addSilentRenewError=function t(e){this._silentRenewError.addHandler(e)},e.prototype.removeSilentRenewError=function t(e){this._silentRenewError.removeHandler(e)},e.prototype._raiseSilentRenewError=function t(e){n.Log.debug("UserManagerEvents._raiseSilentRenewError",e.message),this._silentRenewError.raise(e)},e.prototype.addUserSignedIn=function t(e){this._userSignedIn.addHandler(e)},e.prototype.removeUserSignedIn=function t(e){this._userSignedIn.removeHandler(e)},e.prototype._raiseUserSignedIn=function t(){n.Log.debug("UserManagerEvents._raiseUserSignedIn"),this._userSignedIn.raise()},e.prototype.addUserSignedOut=function t(e){this._userSignedOut.addHandler(e)},e.prototype.removeUserSignedOut=function t(e){this._userSignedOut.removeHandler(e)},e.prototype._raiseUserSignedOut=function t(){n.Log.debug("UserManagerEvents._raiseUserSignedOut"),this._userSignedOut.raise()},e.prototype.addUserSessionChanged=function t(e){this._userSessionChanged.addHandler(e)},e.prototype.removeUserSessionChanged=function t(e){this._userSessionChanged.removeHandler(e)},e.prototype._raiseUserSessionChanged=function t(){n.Log.debug("UserManagerEvents._raiseUserSessionChanged"),this._userSessionChanged.raise()},e}(i.AccessTokenEvents)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Timer=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(1),s=r(17);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.Timer=function(t){function e(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Global.timer,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;a(this,e);var s=u(this,t.call(this,r));return s._timer=n,s._nowFunc=i||function(){return Date.now()/1e3},s}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.init=function t(e){e<=0&&(e=1),e=parseInt(e);var r=this.now+e;if(this.expiration===r&&this._timerHandle)i.Log.debug("Timer.init timer "+this._name+" skipping initialization since already initialized for expiration:",this.expiration);else{this.cancel(),i.Log.debug("Timer.init timer "+this._name+" for duration:",e),this._expiration=r;var n=5;e<n&&(n=e),this._timerHandle=this._timer.setInterval(this._callback.bind(this),1e3*n)}},e.prototype.cancel=function t(){this._timerHandle&&(i.Log.debug("Timer.cancel: ",this._name),this._timer.clearInterval(this._timerHandle),this._timerHandle=null)},e.prototype._callback=function e(){var r=this._expiration-this.now;i.Log.debug("Timer.callback; "+this._name+" timer expires in:",r),this._expiration<=this.now&&(this.cancel(),t.prototype.raise.call(this))},n(e,[{key:"now",get:function t(){return parseInt(this._nowFunc())}},{key:"expiration",get:function t(){return this._expiration}}]),e}(s.Event)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SilentRenewService=void 0;var n=r(0);e.SilentRenewService=function(){function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userManager=e}return t.prototype.start=function t(){this._callback||(this._callback=this._tokenExpiring.bind(this),this._userManager.events.addAccessTokenExpiring(this._callback),this._userManager.getUser().then((function(t){})).catch((function(t){n.Log.error("SilentRenewService.start: Error from getUser:",t.message)})))},t.prototype.stop=function t(){this._callback&&(this._userManager.events.removeAccessTokenExpiring(this._callback),delete this._callback)},t.prototype._tokenExpiring=function t(){var e=this;this._userManager.signinSilent().then((function(t){n.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful")}),(function(t){n.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:",t.message),e._userManager.events._raiseSilentRenewError(t)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaPopupNavigator=void 0;var n=r(21);e.CordovaPopupNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new n.CordovaPopupWindow(e);return Promise.resolve(r)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaIFrameNavigator=void 0;var n=r(21);e.CordovaIFrameNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){e.popupWindowFeatures="hidden=yes";var r=new n.CordovaPopupWindow(e);return Promise.resolve(r)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Version="1.11.6"}])}));
},{}],"node_modules/form-urlencoded/form-urlencoded.js":[function(require,module,exports) {
module.exports = (data, opts = {}) => {
  const {
    sorted, skipIndex, ignorenull, skipBracket, useDot, whitespace = '+'
  } = opts;

  const encode = value => String(value)
    .replace(/[^ !'()~*]/gu, encodeURIComponent)
    .replace(/ /g, whitespace)
    .replace(/[!'()~*]/g, ch =>
      `%${ch.charCodeAt().toString(16).slice(-2).toUpperCase()}`);

  const keys = (obj, keyarr = Object.keys(obj)) =>
    sorted ? keyarr.sort() : keyarr;

  const filterjoin = arr => arr.filter(e => e).join('&');

  const objnest = (name, obj) => filterjoin(keys(obj).map(key => useDot
    ? nest(`${name}.${key}`, obj[key])
    : nest(`${name}[${key}]`, obj[key])));

  const arrnest = (name, arr, brackets = skipBracket ? '' : '[]') => arr.length
    ? filterjoin(arr.map((elem, index) => skipIndex
      ? nest(name + brackets, elem)
      : nest(name + '[' + index + ']', elem)))
    : encode(name + brackets);

  const setnest = (name, set) => filterjoin(
    Array.from(set).map(elem => nest(name, elem)));

  const nest = (name, value, type = typeof value, f = null) => {
    if (value === f)
      f = ignorenull ? f : encode(name) + '=' + f;
    else if (/string|number|boolean/.test(type))
      f = encode(name) + '=' + encode(value);
    else if (Array.isArray(value))
      f = arrnest(name, value);
    else if (value instanceof Set)
      f = setnest(name, value);
    else if (type === 'object')
      f = objnest(name, value);

    return f;
  };

  return data && filterjoin(keys(data).map(key => nest(key, data[key])));
};

},{}],"node_modules/@inrupt/oidc-client-ext/dist/index.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CordovaIFrameNavigator", {
  enumerable: true,
  get: function () {
    return _oidcClient.CordovaIFrameNavigator;
  }
});
Object.defineProperty(exports, "CordovaPopupNavigator", {
  enumerable: true,
  get: function () {
    return _oidcClient.CordovaPopupNavigator;
  }
});
Object.defineProperty(exports, "InMemoryWebStorage", {
  enumerable: true,
  get: function () {
    return _oidcClient.InMemoryWebStorage;
  }
});
Object.defineProperty(exports, "Log", {
  enumerable: true,
  get: function () {
    return _oidcClient.Log;
  }
});
Object.defineProperty(exports, "OidcClient", {
  enumerable: true,
  get: function () {
    return _oidcClient.OidcClient;
  }
});
Object.defineProperty(exports, "SessionMonitor", {
  enumerable: true,
  get: function () {
    return _oidcClient.SessionMonitor;
  }
});
Object.defineProperty(exports, "User", {
  enumerable: true,
  get: function () {
    return _oidcClient.User;
  }
});
Object.defineProperty(exports, "UserManager", {
  enumerable: true,
  get: function () {
    return _oidcClient.UserManager;
  }
});
Object.defineProperty(exports, "Version", {
  enumerable: true,
  get: function () {
    return _oidcClient.Version;
  }
});
Object.defineProperty(exports, "WebStorageStateStore", {
  enumerable: true,
  get: function () {
    return _oidcClient.WebStorageStateStore;
  }
});
exports.clearOidcPersistentStorage = clearOidcPersistentStorage;
exports.getBearerToken = getBearerToken;
exports.getDpopToken = getDpopToken;
exports.refresh = refresh;
exports.registerClient = registerClient;
exports.removeOidcQueryParam = removeOidcQueryParam;

var _oidcClient = require("@inrupt/oidc-client");

var _solidClientAuthnCore = require("@inrupt/solid-client-authn-core");

var _formUrlencoded = _interopRequireDefault(require("form-urlencoded"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function processErrorResponse(responseBody, options) {
  var _a, _b, _c, _d;

  if (responseBody.error === "invalid_redirect_uri") {
    throw new Error(`Dynamic client registration failed: the provided redirect uri [${(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()}] is invalid - ${(_b = responseBody.error_description) !== null && _b !== void 0 ? _b : ""}`);
  }

  if (responseBody.error === "invalid_client_metadata") {
    throw new Error(`Dynamic client registration failed: the provided client metadata ${JSON.stringify(options)} is invalid - ${(_c = responseBody.error_description) !== null && _c !== void 0 ? _c : ""}`);
  }

  throw new Error(`Dynamic client registration failed: ${responseBody.error} - ${(_d = responseBody.error_description) !== null && _d !== void 0 ? _d : ""}`);
}

function validateRegistrationResponse(responseBody, options) {
  if (responseBody.client_id === undefined) {
    throw new Error(`Dynamic client registration failed: no client_id has been found on ${JSON.stringify(responseBody)}`);
  }

  if (options.redirectUrl && (responseBody.redirect_uris === undefined || responseBody.redirect_uris[0] !== options.redirectUrl.toString())) {
    throw new Error(`Dynamic client registration failed: the returned redirect URIs ${JSON.stringify(responseBody.redirect_uris)} don't match the provided ${JSON.stringify([options.redirectUrl.toString()])}`);
  }
}

async function registerClient(options, issuerConfig) {
  var _a;

  if (!issuerConfig.registrationEndpoint) {
    throw new Error("Dynamic Registration could not be completed because the issuer has no registration endpoint.");
  }

  if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) {
    throw new Error("The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.");
  }

  const signingAlg = (0, _solidClientAuthnCore.determineSigningAlg)(issuerConfig.idTokenSigningAlgValuesSupported, _solidClientAuthnCore.PREFERRED_SIGNING_ALG);
  const config = {
    client_name: options.clientName,
    application_type: "web",
    redirect_uris: [(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()],
    subject_type: "public",
    token_endpoint_auth_method: "client_secret_basic",
    id_token_signed_response_alg: signingAlg,
    grant_types: ["authorization_code", "refresh_token"]
  };
  const headers = {
    "Content-Type": "application/json"
  };

  if (options.registrationAccessToken) {
    headers.Authorization = `Bearer ${options.registrationAccessToken}`;
  }

  const registerResponse = await fetch(issuerConfig.registrationEndpoint.toString(), {
    method: "POST",
    headers,
    body: JSON.stringify(config)
  });

  if (registerResponse.ok) {
    const responseBody = await registerResponse.json();
    validateRegistrationResponse(responseBody, options);
    return {
      clientId: responseBody.client_id,
      clientSecret: responseBody.client_secret,
      idTokenSignedResponseAlg: responseBody.id_token_signed_response_alg,
      clientType: "dynamic"
    };
  }

  if (registerResponse.status === 400) {
    processErrorResponse(await registerResponse.json(), options);
  }

  throw new Error(`Dynamic client registration failed: the server returned ${registerResponse.status} ${registerResponse.statusText} - ${await registerResponse.text()}`);
}

function hasError(value) {
  return value.error !== undefined && typeof value.error === "string";
}

function hasErrorDescription(value) {
  return value.error_description !== undefined && typeof value.error_description === "string";
}

function hasErrorUri(value) {
  return value.error_uri !== undefined && typeof value.error_uri === "string";
}

function hasAccessToken(value) {
  return value.access_token !== undefined && typeof value.access_token === "string";
}

function hasIdToken(value) {
  return value.id_token !== undefined && typeof value.id_token === "string";
}

function hasRefreshToken(value) {
  return value.refresh_token !== undefined && typeof value.refresh_token === "string";
}

function hasTokenType(value) {
  return value.token_type !== undefined && typeof value.token_type === "string";
}

function hasExpiresIn(value) {
  return value.expires_in === undefined || typeof value.expires_in === "number";
}

function validatePreconditions(issuer, data) {
  if (data.grantType && (!issuer.grantTypesSupported || !issuer.grantTypesSupported.includes(data.grantType))) {
    throw new Error(`The issuer [${issuer.issuer}] does not support the [${data.grantType}] grant`);
  }

  if (!issuer.tokenEndpoint) {
    throw new Error(`This issuer [${issuer.issuer}] does not have a token endpoint`);
  }
}

function validateTokenEndpointResponse(tokenResponse, dpop) {
  if (hasError(tokenResponse)) {
    throw new _solidClientAuthnCore.OidcProviderError(`Token endpoint returned error [${tokenResponse.error}]${hasErrorDescription(tokenResponse) ? `: ${tokenResponse.error_description}` : ""}${hasErrorUri(tokenResponse) ? ` (see ${tokenResponse.error_uri})` : ""}`, tokenResponse.error, hasErrorDescription(tokenResponse) ? tokenResponse.error_description : undefined);
  }

  if (!hasAccessToken(tokenResponse)) {
    throw new _solidClientAuthnCore.InvalidResponseError(["access_token"]);
  }

  if (!hasIdToken(tokenResponse)) {
    throw new _solidClientAuthnCore.InvalidResponseError(["id_token"]);
  }

  if (!hasTokenType(tokenResponse)) {
    throw new _solidClientAuthnCore.InvalidResponseError(["token_type"]);
  }

  if (!hasExpiresIn(tokenResponse)) {
    throw new _solidClientAuthnCore.InvalidResponseError(["expires_in"]);
  }

  if (!dpop && tokenResponse.token_type.toLowerCase() !== "bearer") {
    throw new Error(`Invalid token endpoint response: requested a [Bearer] token, but got a 'token_type' value of [${tokenResponse.token_type}].`);
  }

  return tokenResponse;
}

async function getTokens(issuer, client, data, dpop) {
  validatePreconditions(issuer, data);
  const headers = {
    "content-type": "application/x-www-form-urlencoded"
  };
  let dpopKey;

  if (dpop) {
    dpopKey = await (0, _solidClientAuthnCore.generateDpopKeyPair)();
    headers.DPoP = await (0, _solidClientAuthnCore.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey);
  }

  if (client.clientSecret) {
    headers.Authorization = `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`;
  }

  const tokenRequestInit = {
    method: "POST",
    headers,
    body: (0, _formUrlencoded.default)({
      grant_type: data.grantType,
      redirect_uri: data.redirectUrl,
      code: data.code,
      code_verifier: data.codeVerifier,
      client_id: client.clientId
    })
  };
  const rawTokenResponse = await await fetch(issuer.tokenEndpoint, tokenRequestInit);
  const jsonTokenResponse = await rawTokenResponse.json();
  const tokenResponse = validateTokenEndpointResponse(jsonTokenResponse, dpop);
  const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(tokenResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
  return {
    accessToken: tokenResponse.access_token,
    idToken: tokenResponse.id_token,
    refreshToken: hasRefreshToken(tokenResponse) ? tokenResponse.refresh_token : undefined,
    webId,
    dpopKey,
    expiresIn: tokenResponse.expires_in
  };
}

async function getBearerToken(redirectUrl) {
  let signinResponse;

  try {
    const client = new _oidcClient.OidcClient({
      response_mode: "query",
      loadUserInfo: false
    });
    signinResponse = await client.processSigninResponse(redirectUrl);

    if (client.settings.metadata === undefined) {
      throw new Error("Cannot retrieve issuer metadata from client information in storage.");
    }

    if (client.settings.metadata.jwks_uri === undefined) {
      throw new Error("Missing some issuer metadata from client information in storage: 'jwks_uri' is undefined");
    }

    if (client.settings.metadata.issuer === undefined) {
      throw new Error("Missing some issuer metadata from client information in storage: 'issuer' is undefined");
    }

    if (client.settings.client_id === undefined) {
      throw new Error("Missing some client information in storage: 'client_id' is undefined");
    }

    const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(signinResponse.id_token, client.settings.metadata.jwks_uri, client.settings.metadata.issuer, client.settings.client_id);
    return {
      accessToken: signinResponse.access_token,
      idToken: signinResponse.id_token,
      webId,
      refreshToken: signinResponse.refresh_token
    };
  } catch (err) {
    throw new Error(`Problem handling Auth Code Grant (Flow) redirect - URL [${redirectUrl}]: ${err}`);
  }
}

async function getDpopToken(issuer, client, data) {
  return getTokens(issuer, client, data, true);
}

async function refresh(refreshToken, issuer, client, dpopKey) {
  const requestBody = {
    grant_type: "refresh_token",
    refresh_token: refreshToken,
    scope: "openid offline_access"
  };
  let dpopHeader = {};

  if (dpopKey !== undefined) {
    dpopHeader = {
      DPoP: await (0, _solidClientAuthnCore.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey)
    };
  }

  let authHeader = {};

  if (client.clientSecret !== undefined) {
    authHeader = {
      Authorization: `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`
    };
  }

  const rawResponse = await fetch(issuer.tokenEndpoint, {
    method: "POST",
    body: (0, _formUrlencoded.default)(requestBody),
    headers: { ...dpopHeader,
      ...authHeader,
      "Content-Type": "application/x-www-form-urlencoded"
    }
  });
  let response;

  try {
    response = await rawResponse.json();
  } catch (e) {
    throw new Error(`The token endpoint of issuer ${issuer.issuer} returned a malformed response.`);
  }

  const validatedResponse = validateTokenEndpointResponse(response, dpopKey !== undefined);
  const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(validatedResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
  return {
    accessToken: validatedResponse.access_token,
    idToken: validatedResponse.id_token,
    refreshToken: typeof validatedResponse.refresh_token === "string" ? validatedResponse.refresh_token : undefined,
    webId,
    dpopKey,
    expiresIn: validatedResponse.expires_in
  };
}

function removeOidcQueryParam(redirectUrl) {
  const cleanedUrl = new URL(redirectUrl);
  cleanedUrl.searchParams.delete("code");
  cleanedUrl.searchParams.delete("state");
  cleanedUrl.hash = "";
  return cleanedUrl.toString();
}

async function clearOidcPersistentStorage() {
  const client = new _oidcClient.OidcClient({
    response_mode: "query"
  });
  await client.clearStaleState(new _oidcClient.WebStorageStateStore({}));
  const myStorage = window.localStorage;
  const itemsToRemove = [];

  for (let i = 0; i <= myStorage.length; i += 1) {
    const key = myStorage.key(i);

    if (key && (key.match(/^oidc\..+$/) || key.match(/^solidClientAuthenticationUser:.+$/))) {
      itemsToRemove.push(key);
    }
  }

  itemsToRemove.forEach(key => myStorage.removeItem(key));
}
},{"@inrupt/oidc-client":"node_modules/@inrupt/oidc-client/lib/oidc-client.min.js","@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","form-urlencoded":"node_modules/form-urlencoded/form-urlencoded.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
const globalFetch = (request, init) => window.fetch(request, init);
class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.login = async (options, eventEmitter) => {
            var _a, _b;
            await this.sessionInfoManager.clear(options.sessionId);
            const redirectUrl = (0, oidc_client_ext_1.removeOidcQueryParam)((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);
            await this.loginHandler.handle({
                ...options,
                redirectUrl,
                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,
                eventEmitter,
            });
        };
        this.fetch = globalFetch;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = globalFetch;
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.validateCurrentSession = async (currentSessionId) => {
            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);
            if (sessionInfo === undefined ||
                sessionInfo.clientAppId === undefined ||
                sessionInfo.issuer === undefined) {
                return null;
            }
            return sessionInfo;
        };
        this.handleIncomingRedirect = async (url, eventEmitter) => {
            const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);
            this.fetch = redirectInfo.fetch.bind(window);
            const cleanedUpUrl = new URL(url);
            cleanedUpUrl.searchParams.delete("state");
            cleanedUpUrl.searchParams.delete("code");
            cleanedUpUrl.searchParams.delete("id_token");
            cleanedUpUrl.searchParams.delete("access_token");
            cleanedUpUrl.searchParams.delete("error");
            cleanedUpUrl.searchParams.delete("error_description");
            window.history.replaceState(null, "", cleanedUpUrl.toString());
            return {
                isLoggedIn: redirectInfo.isLoggedIn,
                webId: redirectInfo.webId,
                sessionId: redirectInfo.sessionId,
                expirationDate: redirectInfo.expirationDate,
            };
        };
    }
}
exports.default = ClientAuthentication;

},{"@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
function hasIssuer(options) {
    return typeof options.oidcIssuer === "string";
}
function hasRedirectUrl(options) {
    return typeof options.redirectUrl === "string";
}
class OidcLoginHandler {
    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(options) {
        return hasIssuer(options) && hasRedirectUrl(options);
    }
    async handle(options) {
        if (!hasIssuer(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
        }
        if (!hasRedirectUrl(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);
        }
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
        const clientRegistration = await (0, solid_client_authn_core_1.handleRegistration)(options, issuerConfig, this.storageUtility, this.clientRegistrar);
        const OidcOptions = {
            issuer: issuerConfig.issuer,
            dpop: options.tokenType.toLowerCase() === "dpop",
            ...options,
            issuerConfiguration: issuerConfig,
            client: clientRegistration,
        };
        return this.oidcHandler.handle(OidcOptions);
    }
}
exports.default = OidcLoginHandler;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
class AuthorizationCodeWithPkceOidcHandler {
    constructor(storageUtility, redirector) {
        this.storageUtility = storageUtility;
        this.redirector = redirector;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&
            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
    }
    async handle(oidcLoginOptions) {
        var _a;
        const oidcOptions = {
            authority: oidcLoginOptions.issuer.toString(),
            client_id: oidcLoginOptions.client.clientId,
            client_secret: oidcLoginOptions.client.clientSecret,
            redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            response_type: "code",
            scope: "openid offline_access webid",
            filterProtocolClaims: true,
            loadUserInfo: false,
            code_verifier: true,
            prompt: (_a = oidcLoginOptions.prompt) !== null && _a !== void 0 ? _a : "consent",
        };
        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);
        const { redirector } = this;
        const storage = this.storageUtility;
        try {
            const signingRequest = await oidcClientLibrary.createSigninRequest();
            await Promise.all([
                storage.setForUser(signingRequest.state._id, {
                    sessionId: oidcLoginOptions.sessionId,
                }),
                storage.setForUser(oidcLoginOptions.sessionId, {
                    codeVerifier: signingRequest.state._code_verifier,
                    issuer: oidcLoginOptions.issuer.toString(),
                    redirectUrl: oidcLoginOptions.redirectUrl,
                    dpop: oidcLoginOptions.dpop ? "true" : "false",
                }),
            ]);
            redirector.redirect(signingRequest.url.toString(), {
                handleRedirect: oidcLoginOptions.handleRedirect,
                redirectInIframe: oidcLoginOptions.inIframe,
            });
        }
        catch (err) {
            console.error(err);
        }
        return undefined;
    }
}
exports.default = AuthorizationCodeWithPkceOidcHandler;

},{"@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/util/urlPath.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendToUrlPathname = void 0;
function appendToUrlPathname(url, append) {
    const parsedUrl = new URL(url);
    const path = parsedUrl.pathname;
    parsedUrl.pathname = `${path}${path.endsWith("/") ? "" : "/"}${append.startsWith("/") ? append.substring(1) : append}`;
    return parsedUrl.toString();
}
exports.appendToUrlPathname = appendToUrlPathname;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WELL_KNOWN_OPENID_CONFIG = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const urlPath_1 = require("../../util/urlPath");
exports.WELL_KNOWN_OPENID_CONFIG = ".well-known/openid-configuration";
const issuerConfigKeyMap = {
    issuer: {
        toKey: "issuer",
        convertToUrl: true,
    },
    authorization_endpoint: {
        toKey: "authorizationEndpoint",
        convertToUrl: true,
    },
    token_endpoint: {
        toKey: "tokenEndpoint",
        convertToUrl: true,
    },
    userinfo_endpoint: {
        toKey: "userinfoEndpoint",
        convertToUrl: true,
    },
    jwks_uri: {
        toKey: "jwksUri",
        convertToUrl: true,
    },
    registration_endpoint: {
        toKey: "registrationEndpoint",
        convertToUrl: true,
    },
    scopes_supported: { toKey: "scopesSupported" },
    response_types_supported: { toKey: "responseTypesSupported" },
    response_modes_supported: { toKey: "responseModesSupported" },
    grant_types_supported: { toKey: "grantTypesSupported" },
    acr_values_supported: { toKey: "acrValuesSupported" },
    subject_types_supported: { toKey: "subjectTypesSupported" },
    id_token_signing_alg_values_supported: {
        toKey: "idTokenSigningAlgValuesSupported",
    },
    id_token_encryption_alg_values_supported: {
        toKey: "idTokenEncryptionAlgValuesSupported",
    },
    id_token_encryption_enc_values_supported: {
        toKey: "idTokenEncryptionEncValuesSupported",
    },
    userinfo_signing_alg_values_supported: {
        toKey: "userinfoSigningAlgValuesSupported",
    },
    userinfo_encryption_alg_values_supported: {
        toKey: "userinfoEncryptionAlgValuesSupported",
    },
    userinfo_encryption_enc_values_supported: {
        toKey: "userinfoEncryptionEncValuesSupported",
    },
    request_object_signing_alg_values_supported: {
        toKey: "requestObjectSigningAlgValuesSupported",
    },
    request_object_encryption_alg_values_supported: {
        toKey: "requestObjectEncryptionAlgValuesSupported",
    },
    request_object_encryption_enc_values_supported: {
        toKey: "requestObjectEncryptionEncValuesSupported",
    },
    token_endpoint_auth_methods_supported: {
        toKey: "tokenEndpointAuthMethodsSupported",
    },
    token_endpoint_auth_signing_alg_values_supported: {
        toKey: "tokenEndpointAuthSigningAlgValuesSupported",
    },
    display_values_supported: { toKey: "displayValuesSupported" },
    claim_types_supported: { toKey: "claimTypesSupported" },
    claims_supported: { toKey: "claimsSupported" },
    service_documentation: { toKey: "serviceDocumentation" },
    claims_locales_supported: { toKey: "claimsLocalesSupported" },
    ui_locales_supported: { toKey: "uiLocalesSupported" },
    claims_parameter_supported: { toKey: "claimsParameterSupported" },
    request_parameter_supported: { toKey: "requestParameterSupported" },
    request_uri_parameter_supported: { toKey: "requestUriParameterSupported" },
    require_request_uri_registration: { toKey: "requireRequestUriRegistration" },
    op_policy_uri: {
        toKey: "opPolicyUri",
        convertToUrl: true,
    },
    op_tos_uri: {
        toKey: "opTosUri",
        convertToUrl: true,
    },
};
function processConfig(config) {
    const parsedConfig = {};
    Object.keys(config).forEach((key) => {
        if (issuerConfigKeyMap[key]) {
            parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];
        }
    });
    if (!Array.isArray(parsedConfig.scopesSupported)) {
        parsedConfig.scopesSupported = ["openid"];
    }
    return parsedConfig;
}
class IssuerConfigFetcher {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    static getLocalStorageKey(issuer) {
        return `issuerConfig:${issuer}`;
    }
    async fetchConfig(issuer) {
        let issuerConfig;
        const openIdConfigUrl = (0, urlPath_1.appendToUrlPathname)(issuer, exports.WELL_KNOWN_OPENID_CONFIG);
        const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);
        try {
            issuerConfig = processConfig(await issuerConfigRequestBody.json());
        }
        catch (err) {
            throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);
        }
        await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));
        return issuerConfig;
    }
}
exports.default = IssuerConfigFetcher;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","../../util/urlPath":"node_modules/@inrupt/solid-client-authn-browser/dist/util/urlPath.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionInfoManager = exports.clear = exports.getUnauthenticatedSession = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const uuid_1 = require("uuid");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
function getUnauthenticatedSession() {
    return {
        isLoggedIn: false,
        sessionId: (0, uuid_1.v4)(),
        fetch,
    };
}
exports.getUnauthenticatedSession = getUnauthenticatedSession;
async function clear(sessionId, storage) {
    const storedSessionCookieReference = await storage.get("tmp-resource-server-session-info");
    const reference = JSON.parse(storedSessionCookieReference !== null && storedSessionCookieReference !== void 0 ? storedSessionCookieReference : "{}");
    const { webId } = reference;
    if (webId !== undefined) {
        const webIdAsUrl = new URL(webId);
        const resourceServerIri = webIdAsUrl.origin;
        await storage.clearResourceServerSessionInfo(resourceServerIri);
    }
    await Promise.all([
        storage.deleteAllUserData(sessionId, { secure: false }),
        storage.deleteAllUserData(sessionId, { secure: true }),
        storage.delete("clientKey", { secure: false }),
    ]);
    await (0, oidc_client_ext_1.clearOidcPersistentStorage)();
}
exports.clear = clear;
class SessionInfoManager {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    update(_sessionId, _options) {
        throw new Error("Not Implemented");
    }
    async get(sessionId) {
        var _a;
        const isLoggedIn = await this.storageUtility.getForUser(sessionId, "isLoggedIn", {
            secure: true,
        });
        const webId = await this.storageUtility.getForUser(sessionId, "webId", {
            secure: true,
        });
        const clientId = await this.storageUtility.getForUser(sessionId, "clientId", {
            secure: false,
        });
        const clientSecret = await this.storageUtility.getForUser(sessionId, "clientSecret", {
            secure: false,
        });
        const redirectUrl = await this.storageUtility.getForUser(sessionId, "redirectUrl", {
            secure: false,
        });
        const refreshToken = await this.storageUtility.getForUser(sessionId, "refreshToken", {
            secure: true,
        });
        const issuer = await this.storageUtility.getForUser(sessionId, "issuer", {
            secure: false,
        });
        const tokenType = (_a = (await this.storageUtility.getForUser(sessionId, "tokenType", {
            secure: false,
        }))) !== null && _a !== void 0 ? _a : "DPoP";
        if (!(0, solid_client_authn_core_1.isSupportedTokenType)(tokenType)) {
            throw new Error(`Tokens of type [${tokenType}] are not supported.`);
        }
        if (clientId === undefined &&
            isLoggedIn === undefined &&
            webId === undefined &&
            refreshToken === undefined) {
            return undefined;
        }
        return {
            sessionId,
            webId,
            isLoggedIn: isLoggedIn === "true",
            redirectUrl,
            refreshToken,
            issuer,
            clientAppId: clientId,
            clientAppSecret: clientSecret,
            tokenType,
        };
    }
    async getAll() {
        throw new Error("Not implemented");
    }
    async clear(sessionId) {
        return clear(sessionId, this.storageUtility);
    }
    async register(_sessionId) {
        throw new Error("Not implemented");
    }
    async getRegisteredSessionIdAll() {
        throw new Error("Not implemented");
    }
    async clearAll() {
        throw new Error("Not implemented");
    }
}
exports.SessionInfoManager = SessionInfoManager;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","uuid":"node_modules/uuid/dist/esm-browser/index.js","@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/FallbackRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FallbackRedirectHandler = void 0;
const SessionInfoManager_1 = require("../../../sessionInfo/SessionInfoManager");
class FallbackRedirectHandler {
    async canHandle(redirectUrl) {
        try {
            new URL(redirectUrl);
            return true;
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(_redirectUrl) {
        return (0, SessionInfoManager_1.getUnauthenticatedSession)();
    }
}
exports.FallbackRedirectHandler = FallbackRedirectHandler;

},{"../../../sessionInfo/SessionInfoManager":"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/logout/GeneralLogoutHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GeneralLogoutHandler {
    constructor(sessionInfoManager) {
        this.sessionInfoManager = sessionInfoManager;
    }
    async canHandle() {
        return true;
    }
    async handle(userId) {
        await this.sessionInfoManager.clear(userId);
    }
}
exports.default = GeneralLogoutHandler;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AuthCodeRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthCodeRedirectHandler = exports.DEFAULT_LIFESPAN = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
exports.DEFAULT_LIFESPAN = 30 * 60 * 1000;
async function setupResourceServerSession(webId, authenticatedFetch, storageUtility) {
    const webIdAsUrl = new URL(webId);
    const resourceServerIri = webIdAsUrl.origin;
    await authenticatedFetch(webId);
    try {
        const resourceServerResponse = await authenticatedFetch(`${resourceServerIri}/session`);
        if (resourceServerResponse.status === 200) {
            await storageUtility.storeResourceServerSessionInfo(webId, resourceServerIri, Date.now() + exports.DEFAULT_LIFESPAN);
            return;
        }
        await storageUtility.clearResourceServerSessionInfo(resourceServerIri);
    }
    catch (_e) {
        await storageUtility.clearResourceServerSessionInfo(resourceServerIri);
    }
}
class AuthCodeRedirectHandler {
    constructor(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokerRefresher) {
        this.storageUtility = storageUtility;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
        this.tokerRefresher = tokerRefresher;
    }
    async canHandle(redirectUrl) {
        try {
            const myUrl = new URL(redirectUrl);
            return (myUrl.searchParams.get("code") !== null &&
                myUrl.searchParams.get("state") !== null);
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(redirectUrl, eventEmitter) {
        if (!(await this.canHandle(redirectUrl))) {
            throw new Error(`AuthCodeRedirectHandler cannot handle [${redirectUrl}]: it is missing one of [code, state].`);
        }
        const url = new URL(redirectUrl);
        const oauthState = url.searchParams.get("state");
        const storedSessionId = (await this.storageUtility.getForUser(oauthState, "sessionId", {
            errorIfNull: true,
        }));
        const { issuerConfig, codeVerifier, redirectUrl: storedRedirectIri, dpop: isDpop, } = await (0, solid_client_authn_core_1.loadOidcContextFromStorage)(storedSessionId, this.storageUtility, this.issuerConfigFetcher);
        if (codeVerifier === undefined) {
            throw new Error(`The code verifier for session ${storedSessionId} is missing from storage.`);
        }
        if (storedRedirectIri === undefined) {
            throw new Error(`The redirect URL for session ${storedSessionId} is missing from storage.`);
        }
        const client = await this.clientRegistrar.getClient({ sessionId: storedSessionId }, issuerConfig);
        let tokens;
        const tokenCreatedAt = Date.now();
        if (isDpop) {
            tokens = await (0, oidc_client_ext_1.getDpopToken)(issuerConfig, client, {
                grantType: "authorization_code",
                code: url.searchParams.get("code"),
                codeVerifier,
                redirectUrl: storedRedirectIri,
            });
            window.localStorage.removeItem(`oidc.${oauthState}`);
        }
        else {
            tokens = await (0, oidc_client_ext_1.getBearerToken)(url.toString());
        }
        let refreshOptions;
        if (tokens.refreshToken !== undefined) {
            refreshOptions = {
                sessionId: storedSessionId,
                refreshToken: tokens.refreshToken,
                tokenRefresher: this.tokerRefresher,
            };
        }
        const authFetch = await (0, solid_client_authn_core_1.buildAuthenticatedFetch)(fetch, tokens.accessToken, {
            dpopKey: tokens.dpopKey,
            refreshOptions,
            eventEmitter,
            expiresIn: tokens.expiresIn,
        });
        await this.storageUtility.setForUser(storedSessionId, {
            webId: tokens.webId,
            isLoggedIn: "true",
        }, { secure: true });
        url.searchParams.delete("code");
        await this.storageUtility.setForUser(storedSessionId, {
            redirectUrl: url.toString(),
        }, {
            secure: false,
        });
        const essWorkaroundDisabled = window.localStorage.getItem("tmp-resource-server-session-enabled") ===
            "false";
        if (!essWorkaroundDisabled) {
            await setupResourceServerSession(tokens.webId, authFetch, this.storageUtility);
        }
        const sessionInfo = await this.sessionInfoManager.get(storedSessionId);
        if (!sessionInfo) {
            throw new Error(`Could not retrieve session: [${storedSessionId}].`);
        }
        return Object.assign(sessionInfo, {
            fetch: authFetch,
            expirationDate: typeof tokens.expiresIn === "number"
                ? tokenCreatedAt + tokens.expiresIn * 1000
                : null,
        });
    }
}
exports.AuthCodeRedirectHandler = AuthCodeRedirectHandler;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AggregateRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
class AggregateRedirectHandler extends solid_client_authn_core_1.AggregateHandler {
    constructor(redirectHandlers) {
        super(redirectHandlers);
    }
}
exports.default = AggregateRedirectHandler;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/storage/BrowserStorage.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BrowserStorage {
    get storage() {
        return window.localStorage;
    }
    async get(key) {
        return this.storage.getItem(key) || undefined;
    }
    async set(key, value) {
        this.storage.setItem(key, value);
    }
    async delete(key) {
        this.storage.removeItem(key);
    }
}
exports.default = BrowserStorage;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/iframe.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postRedirectUrlToParent = exports.setupIframeListener = exports.redirectInIframe = void 0;
let redirectIframe;
function getRedirectIframe() {
    if (typeof redirectIframe === "undefined") {
        redirectIframe = window.document.createElement("iframe");
        redirectIframe.setAttribute("hidden", "true");
        redirectIframe.setAttribute("sandbox", "allow-scripts allow-same-origin");
    }
    return redirectIframe;
}
function redirectInIframe(redirectUrl) {
    const iframe = getRedirectIframe();
    window.document.body.appendChild(iframe);
    iframe.src = redirectUrl;
}
exports.redirectInIframe = redirectInIframe;
function setupIframeListener(handleIframeRedirect) {
    if (typeof window === "undefined") {
        return;
    }
    window.addEventListener("message", async (evt) => {
        const iframe = getRedirectIframe();
        if (evt.origin === window.location.origin &&
            evt.source === iframe.contentWindow) {
            if (typeof evt.data.redirectUrl === "string") {
                await handleIframeRedirect(evt.data.redirectUrl);
            }
        }
        if (window.document.body.contains(iframe)) {
            window.document.body.removeChild(iframe);
        }
    });
}
exports.setupIframeListener = setupIframeListener;
function postRedirectUrlToParent(redirectUrl) {
    window.top.postMessage({
        redirectUrl,
    }, window.location.origin);
}
exports.postRedirectUrlToParent = postRedirectUrlToParent;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/Redirector.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iframe_1 = require("../../iframe");
class Redirector {
    redirect(redirectUrl, options) {
        if (options && options.handleRedirect) {
            options.handleRedirect(redirectUrl);
        }
        else if (options && options.redirectByReplacingState) {
            window.history.replaceState({}, "", redirectUrl);
        }
        else if (options === null || options === void 0 ? void 0 : options.redirectInIframe) {
            (0, iframe_1.redirectInIframe)(redirectUrl);
        }
        else {
            window.location.href = redirectUrl;
        }
    }
}
exports.default = Redirector;

},{"../../iframe":"node_modules/@inrupt/solid-client-authn-browser/dist/iframe.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/ClientRegistrar.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
class ClientRegistrar {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    async getClient(options, issuerConfig) {
        var _a;
        const [storedClientId, storedClientSecret,] = await Promise.all([
            this.storageUtility.getForUser(options.sessionId, "clientId", {
                secure: false,
            }),
            this.storageUtility.getForUser(options.sessionId, "clientSecret", {
                secure: false,
            }),
        ]);
        if (storedClientId) {
            return {
                clientId: storedClientId,
                clientSecret: storedClientSecret,
                clientType: "dynamic",
            };
        }
        const extendedOptions = { ...options };
        extendedOptions.registrationAccessToken =
            (_a = extendedOptions.registrationAccessToken) !== null && _a !== void 0 ? _a : (await this.storageUtility.getForUser(options.sessionId, "registrationAccessToken"));
        try {
            const registeredClient = await (0, oidc_client_ext_1.registerClient)(extendedOptions, issuerConfig);
            const infoToSave = {
                clientId: registeredClient.clientId,
            };
            if (registeredClient.clientSecret) {
                infoToSave.clientSecret = registeredClient.clientSecret;
            }
            if (registeredClient.idTokenSignedResponseAlg) {
                infoToSave.idTokenSignedResponseAlg =
                    registeredClient.idTokenSignedResponseAlg;
            }
            await this.storageUtility.setForUser(extendedOptions.sessionId, infoToSave, {
                secure: false,
            });
            return registeredClient;
        }
        catch (error) {
            throw new Error(`Client registration failed: [${error}]`);
        }
    }
}
exports.default = ClientRegistrar;

},{"@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ErrorOidcHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorOidcHandler = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const SessionInfoManager_1 = require("../../../sessionInfo/SessionInfoManager");
class ErrorOidcHandler {
    async canHandle(redirectUrl) {
        try {
            return new URL(redirectUrl).searchParams.has("error");
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(redirectUrl, eventEmitter) {
        if (eventEmitter !== undefined) {
            const url = new URL(redirectUrl);
            const errorUrl = url.searchParams.get("error");
            const errorDescriptionUrl = url.searchParams.get("error_description");
            eventEmitter.emit(solid_client_authn_core_1.EVENTS.ERROR, errorUrl, errorDescriptionUrl);
        }
        return (0, SessionInfoManager_1.getUnauthenticatedSession)();
    }
}
exports.ErrorOidcHandler = ErrorOidcHandler;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","../../../sessionInfo/SessionInfoManager":"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/refresh/TokenRefresher.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
class TokenRefresher {
    constructor(storageUtility, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async refresh(sessionId, refreshToken, dpopKey, eventEmitter) {
        const oidcContext = await (0, solid_client_authn_core_1.loadOidcContextFromStorage)(sessionId, this.storageUtility, this.issuerConfigFetcher);
        const clientInfo = await this.clientRegistrar.getClient({ sessionId }, oidcContext.issuerConfig);
        if (refreshToken === undefined) {
            throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);
        }
        if (oidcContext.dpop && dpopKey === undefined) {
            throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);
        }
        const tokenSet = await (0, oidc_client_ext_1.refresh)(refreshToken, oidcContext.issuerConfig, clientInfo, dpopKey);
        if (tokenSet.refreshToken !== undefined) {
            eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(solid_client_authn_core_1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
            await this.storageUtility.setForUser(sessionId, {
                refreshToken: tokenSet.refreshToken,
            });
        }
        return tokenSet;
    }
}
exports.default = TokenRefresher;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/dependencies.js":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientAuthenticationWithDependencies = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const StorageUtility_1 = __importDefault(require("./storage/StorageUtility"));
const ClientAuthentication_1 = __importDefault(require("./ClientAuthentication"));
const OidcLoginHandler_1 = __importDefault(require("./login/oidc/OidcLoginHandler"));
const AuthorizationCodeWithPkceOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler"));
const IssuerConfigFetcher_1 = __importDefault(require("./login/oidc/IssuerConfigFetcher"));
const FallbackRedirectHandler_1 = require("./login/oidc/redirectHandler/FallbackRedirectHandler");
const GeneralLogoutHandler_1 = __importDefault(require("./logout/GeneralLogoutHandler"));
const SessionInfoManager_1 = require("./sessionInfo/SessionInfoManager");
const AuthCodeRedirectHandler_1 = require("./login/oidc/redirectHandler/AuthCodeRedirectHandler");
const AggregateRedirectHandler_1 = __importDefault(require("./login/oidc/redirectHandler/AggregateRedirectHandler"));
const BrowserStorage_1 = __importDefault(require("./storage/BrowserStorage"));
const Redirector_1 = __importDefault(require("./login/oidc/Redirector"));
const ClientRegistrar_1 = __importDefault(require("./login/oidc/ClientRegistrar"));
const ErrorOidcHandler_1 = require("./login/oidc/redirectHandler/ErrorOidcHandler");
const TokenRefresher_1 = __importDefault(require("./login/oidc/refresh/TokenRefresher"));
function getClientAuthenticationWithDependencies(dependencies) {
    const inMemoryStorage = new solid_client_authn_core_1.InMemoryStorage();
    const secureStorage = dependencies.secureStorage || inMemoryStorage;
    const insecureStorage = dependencies.insecureStorage || new BrowserStorage_1.default();
    const storageUtility = new StorageUtility_1.default(secureStorage, insecureStorage);
    const issuerConfigFetcher = new IssuerConfigFetcher_1.default(storageUtility);
    const clientRegistrar = new ClientRegistrar_1.default(storageUtility);
    const sessionInfoManager = new SessionInfoManager_1.SessionInfoManager(storageUtility);
    const tokenRefresher = new TokenRefresher_1.default(storageUtility, issuerConfigFetcher, clientRegistrar);
    const loginHandler = new OidcLoginHandler_1.default(storageUtility, new AuthorizationCodeWithPkceOidcHandler_1.default(storageUtility, new Redirector_1.default()), issuerConfigFetcher, clientRegistrar);
    const redirectHandler = new AggregateRedirectHandler_1.default([
        new ErrorOidcHandler_1.ErrorOidcHandler(),
        new AuthCodeRedirectHandler_1.AuthCodeRedirectHandler(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher),
        new FallbackRedirectHandler_1.FallbackRedirectHandler(),
    ]);
    return new ClientAuthentication_1.default(loginHandler, redirectHandler, new GeneralLogoutHandler_1.default(sessionInfoManager), sessionInfoManager, issuerConfigFetcher);
}
exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","./storage/StorageUtility":"node_modules/@inrupt/solid-client-authn-browser/dist/storage/StorageUtility.js","./ClientAuthentication":"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","./login/oidc/OidcLoginHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","./login/oidc/IssuerConfigFetcher":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","./login/oidc/redirectHandler/FallbackRedirectHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/FallbackRedirectHandler.js","./logout/GeneralLogoutHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/logout/GeneralLogoutHandler.js","./sessionInfo/SessionInfoManager":"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js","./login/oidc/redirectHandler/AuthCodeRedirectHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AuthCodeRedirectHandler.js","./login/oidc/redirectHandler/AggregateRedirectHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AggregateRedirectHandler.js","./storage/BrowserStorage":"node_modules/@inrupt/solid-client-authn-browser/dist/storage/BrowserStorage.js","./login/oidc/Redirector":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/Redirector.js","./login/oidc/ClientRegistrar":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/ClientRegistrar.js","./login/oidc/redirectHandler/ErrorOidcHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ErrorOidcHandler.js","./login/oidc/refresh/TokenRefresher":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/refresh/TokenRefresher.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/constant.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CURRENT_URL = exports.KEY_CURRENT_SESSION = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
exports.KEY_CURRENT_SESSION = `${solid_client_authn_core_1.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentSession`;
exports.KEY_CURRENT_URL = `${solid_client_authn_core_1.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentUrl`;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/Session.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = exports.silentlyAuthenticate = void 0;
const events_1 = require("events");
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const uuid_1 = require("uuid");
const dependencies_1 = require("./dependencies");
const constant_1 = require("./constant");
const iframe_1 = require("./iframe");
async function silentlyAuthenticate(sessionId, clientAuthn, options = {
    inIframe: false,
}, session) {
    var _a;
    const storedSessionInfo = await clientAuthn.validateCurrentSession(sessionId);
    if (storedSessionInfo !== null) {
        window.localStorage.setItem(constant_1.KEY_CURRENT_URL, window.location.href);
        await clientAuthn.login({
            sessionId,
            prompt: "none",
            oidcIssuer: storedSessionInfo.issuer,
            redirectUrl: storedSessionInfo.redirectUrl,
            clientId: storedSessionInfo.clientAppId,
            clientSecret: storedSessionInfo.clientAppSecret,
            tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            inIframe: options.inIframe,
        }, session);
        return true;
    }
    return false;
}
exports.silentlyAuthenticate = silentlyAuthenticate;
function isLoggedIn(sessionInfo) {
    return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);
}
class Session extends events_1.EventEmitter {
    constructor(sessionOptions = {}, sessionId) {
        super();
        this.tokenRequestInProgress = false;
        this.tmpFetchWithCookies = false;
        this.login = async (options) => {
            var _a;
            await this.clientAuthentication.login({
                sessionId: this.info.sessionId,
                ...options,
                tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            }, this);
            return new Promise(() => undefined);
        };
        this.fetch = async (url, init) => {
            return this.clientAuthentication.fetch(url, {
                ...init,
                credentials: this.tmpFetchWithCookies
                    ?
                        "include"
                    :
                        init === null || init === void 0 ? void 0 : init.credentials,
            });
        };
        this.internalLogout = async (emitSignal) => {
            window.localStorage.removeItem(constant_1.KEY_CURRENT_SESSION);
            await this.clientAuthentication.logout(this.info.sessionId);
            this.info.isLoggedIn = false;
            this.tmpFetchWithCookies = false;
            if (emitSignal) {
                this.emit(solid_client_authn_core_1.EVENTS.LOGOUT);
            }
        };
        this.logout = async () => this.internalLogout(true);
        this.handleIncomingRedirect = async (inputOptions = {}) => {
            var _a;
            if (this.info.isLoggedIn) {
                return this.info;
            }
            if (this.tokenRequestInProgress) {
                return undefined;
            }
            const options = typeof inputOptions === "string" ? { url: inputOptions } : inputOptions;
            const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;
            if (window.frameElement !== null) {
                (0, iframe_1.postRedirectUrlToParent)(url);
                return undefined;
            }
            if (options.useEssSession !== true ||
                options.restorePreviousSession === true) {
                window.localStorage.setItem("tmp-resource-server-session-enabled", "false");
            }
            else {
                window.localStorage.setItem("tmp-resource-server-session-enabled", "true");
            }
            const storedSessionCookieReference = window.localStorage.getItem("tmp-resource-server-session-info");
            if (typeof storedSessionCookieReference === "string" &&
                options.restorePreviousSession !== true &&
                options.useEssSession === true) {
                function isValidSessionCookieReference(reference) {
                    var _a;
                    const resourceServers = Object.keys((_a = reference.sessions) !== null && _a !== void 0 ? _a : {});
                    return (typeof reference.webId === "string" &&
                        resourceServers.length > 0 &&
                        typeof reference.sessions[resourceServers[0]].expiration === "number");
                }
                const reference = JSON.parse(storedSessionCookieReference);
                if (isValidSessionCookieReference(reference)) {
                    const resourceServers = Object.keys(reference.sessions);
                    const webIdOrigin = new URL(reference.webId).hostname;
                    const ownResourceServer = resourceServers.find((resourceServer) => {
                        return new URL(resourceServer).hostname === webIdOrigin;
                    });
                    const relevantServer = ownResourceServer !== null && ownResourceServer !== void 0 ? ownResourceServer : resourceServers[0];
                    if (reference.sessions[relevantServer].expiration - Date.now() >
                        5 * 60 * 1000) {
                        this.info.isLoggedIn = true;
                        this.info.webId = reference.webId;
                        this.tmpFetchWithCookies = true;
                        return this.info;
                    }
                }
            }
            this.tokenRequestInProgress = true;
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url, this);
            if (isLoggedIn(sessionInfo)) {
                this.setSessionInfo(sessionInfo);
                const currentUrl = window.localStorage.getItem(constant_1.KEY_CURRENT_URL);
                if (currentUrl === null) {
                    this.emit(solid_client_authn_core_1.EVENTS.LOGIN);
                }
                else {
                    window.localStorage.removeItem(constant_1.KEY_CURRENT_URL);
                    this.emit(solid_client_authn_core_1.EVENTS.SESSION_RESTORED, currentUrl);
                }
            }
            else if (options.restorePreviousSession === true) {
                const storedSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
                if (storedSessionId !== null) {
                    const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication, undefined, this);
                    if (attemptedSilentAuthentication) {
                        return new Promise(() => { });
                    }
                }
            }
            this.tokenRequestInProgress = false;
            return sessionInfo;
        };
        if (sessionOptions.clientAuthentication) {
            this.clientAuthentication = sessionOptions.clientAuthentication;
        }
        else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {
            this.clientAuthentication = (0, dependencies_1.getClientAuthenticationWithDependencies)({
                secureStorage: sessionOptions.secureStorage,
                insecureStorage: sessionOptions.insecureStorage,
            });
        }
        else {
            this.clientAuthentication = (0, dependencies_1.getClientAuthenticationWithDependencies)({});
        }
        if (sessionOptions.sessionInfo) {
            this.info = {
                sessionId: sessionOptions.sessionInfo.sessionId,
                isLoggedIn: false,
                webId: sessionOptions.sessionInfo.webId,
            };
        }
        else {
            this.info = {
                sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : (0, uuid_1.v4)(),
                isLoggedIn: false,
            };
        }
        (0, iframe_1.setupIframeListener)(async (redirectUrl) => {
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(redirectUrl, this);
            if (!isLoggedIn(sessionInfo)) {
                return;
            }
            this.setSessionInfo(sessionInfo);
        });
        this.on("tokenRenewal", () => silentlyAuthenticate(this.info.sessionId, this.clientAuthentication, {
            inIframe: true,
        }, this));
        this.on(solid_client_authn_core_1.EVENTS.LOGIN, () => window.localStorage.setItem(constant_1.KEY_CURRENT_SESSION, this.info.sessionId));
        this.on(solid_client_authn_core_1.EVENTS.SESSION_EXPIRED, () => this.internalLogout(false));
        this.on(solid_client_authn_core_1.EVENTS.ERROR, () => this.internalLogout(false));
    }
    onLogin(callback) {
        this.on(solid_client_authn_core_1.EVENTS.LOGIN, callback);
    }
    onLogout(callback) {
        this.on(solid_client_authn_core_1.EVENTS.LOGOUT, callback);
    }
    onError(callback) {
        this.on(solid_client_authn_core_1.EVENTS.ERROR, callback);
    }
    onSessionRestore(callback) {
        this.on(solid_client_authn_core_1.EVENTS.SESSION_RESTORED, callback);
    }
    onSessionExpiration(callback) {
        this.on(solid_client_authn_core_1.EVENTS.SESSION_EXPIRED, callback);
    }
    setSessionInfo(sessionInfo) {
        this.info.isLoggedIn = sessionInfo.isLoggedIn;
        this.info.webId = sessionInfo.webId;
        this.info.sessionId = sessionInfo.sessionId;
        this.info.expirationDate = sessionInfo.expirationDate;
        this.on(solid_client_authn_core_1.EVENTS.SESSION_EXTENDED, (expiresIn) => {
            this.info.expirationDate = Date.now() + expiresIn * 1000;
        });
    }
}
exports.Session = Session;

},{"events":"node_modules/events/events.js","@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","uuid":"node_modules/uuid/dist/esm-browser/index.js","./dependencies":"node_modules/@inrupt/solid-client-authn-browser/dist/dependencies.js","./constant":"node_modules/@inrupt/solid-client-authn-browser/dist/constant.js","./iframe":"node_modules/@inrupt/solid-client-authn-browser/dist/iframe.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/defaultSession.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onSessionRestore = exports.onLogout = exports.onLogin = exports.handleIncomingRedirect = exports.logout = exports.login = exports.fetch = exports.getDefaultSession = void 0;
const Session_1 = require("./Session");
let defaultSession;
function getDefaultSession() {
    if (typeof defaultSession === "undefined") {
        defaultSession = new Session_1.Session();
    }
    return defaultSession;
}
exports.getDefaultSession = getDefaultSession;
const fetch = (...args) => {
    const session = getDefaultSession();
    return session.fetch(...args);
};
exports.fetch = fetch;
const login = (...args) => {
    const session = getDefaultSession();
    return session.login(...args);
};
exports.login = login;
const logout = (...args) => {
    const session = getDefaultSession();
    return session.logout(...args);
};
exports.logout = logout;
const handleIncomingRedirect = (...args) => {
    const session = getDefaultSession();
    return session.handleIncomingRedirect(...args);
};
exports.handleIncomingRedirect = handleIncomingRedirect;
const onLogin = (...args) => {
    const session = getDefaultSession();
    return session.onLogin(...args);
};
exports.onLogin = onLogin;
const onLogout = (...args) => {
    const session = getDefaultSession();
    return session.onLogout(...args);
};
exports.onLogout = onLogout;
const onSessionRestore = (...args) => {
    const session = getDefaultSession();
    return session.onSessionRestore(...args);
};
exports.onSessionRestore = onSessionRestore;

},{"./Session":"node_modules/@inrupt/solid-client-authn-browser/dist/Session.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/index.js":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryStorage = exports.ConfigurationError = exports.NotImplementedError = exports.getClientAuthenticationWithDependencies = exports.Session = void 0;
var Session_1 = require("./Session");
Object.defineProperty(exports, "Session", { enumerable: true, get: function () { return Session_1.Session; } });
var dependencies_1 = require("./dependencies");
Object.defineProperty(exports, "getClientAuthenticationWithDependencies", { enumerable: true, get: function () { return dependencies_1.getClientAuthenticationWithDependencies; } });
__exportStar(require("./defaultSession"), exports);
var solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
Object.defineProperty(exports, "NotImplementedError", { enumerable: true, get: function () { return solid_client_authn_core_1.NotImplementedError; } });
Object.defineProperty(exports, "ConfigurationError", { enumerable: true, get: function () { return solid_client_authn_core_1.ConfigurationError; } });
Object.defineProperty(exports, "InMemoryStorage", { enumerable: true, get: function () { return solid_client_authn_core_1.InMemoryStorage; } });

},{"./Session":"node_modules/@inrupt/solid-client-authn-browser/dist/Session.js","./dependencies":"node_modules/@inrupt/solid-client-authn-browser/dist/dependencies.js","./defaultSession":"node_modules/@inrupt/solid-client-authn-browser/dist/defaultSession.js","@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/vocab-common-rdf/dist/index.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XSD = exports.VS = exports.VOID = exports.VCARD = exports.VANN = exports.UI_INRUPT = exports.UI = exports.SKOS_XL = exports.SKOS = exports.SHEX = exports.SEC = exports.SDMX_DIMENSION = exports.SD = exports.SCHEMA_INRUPT = exports.RLOG = exports.RDFS = exports.RDF = exports.QB = exports.PROV_O = exports.POSIX = exports.OWL = exports.OLO = exports.ODRL = exports.LDP = exports.JSONLD = exports.ICAL = exports.HYDRA = exports.HTTPH_INRUPT = exports.HTTP = exports.FOAF = exports.EARL = exports.DOAP = exports.DCTERMS = exports.DCAT = exports.CRED = exports.BOOKMARK = exports.AS = exports.ALTR = exports.ACL = void 0;

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Web Access Control Vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$C = "http://www.w3.org/ns/auth/acl#";

function _NS$C(localName) {
  return _NAMESPACE$C + localName;
}
/**
 * [Generator provided] - Web Access Control Vocabulary
 */


var ACL = {
  PREFIX: "acl",
  NAMESPACE: _NAMESPACE$C,
  PREFIX_AND_NAMESPACE: {
    "acl": "http://www.w3.org/ns/auth/acl#"
  },
  NS: _NS$C,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Any kind of access to a resource. Don't use this, use R W and RW
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [NoLocale].
   */
  Access: _NS$C("Access"),

  /**
   * Append accesses are specific write access which only add information, and do not remove information.
    For text files, for example, append access allows bytes to be added onto the end of the file.
    For RDF graphs, Append access allows adds triples to the graph but does not remove any.
    Append access is useful for dropbox functionality.
    Dropbox can be used for link notification, which the information added is a notification
    that a some link has been made elsewhere relevant to the given resource.
    
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Append: _NS$C("Append"),

  /**
   * write
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  Write: _NS$C("Write"),

  /**
   * A class of agents who have been authenticated.
  In other words, anyone can access this resource, but not anonymously.
  The social expectation is that the authentication process will provide an
  identify and a name, or pseudonym.
  (A new ID should not be minted for every access: the intent is that the user
  is able to continue to use the ID for continues interactions with peers,
  and for example to develop a reputation)
      *
   * This term provides descriptions only with no explicit locale.
   */
  AuthenticatedAgent: _NS$C("AuthenticatedAgent"),

  /**
   * An element of access control,
    allowing agent to agents access of some kind to resources or classes of resources
   *
   * This term provides descriptions only with no explicit locale.
   */
  Authorization: _NS$C("Authorization"),

  /**
   * Allows read/write access to the ACL for the resource(s)
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Control: _NS$C("Control"),

  /**
   * An Origin is basically a web site
        (Note WITHOUT the trailing slash after the domain name and port in its URI)
        and is the basis for controlling access to data by web apps
        in the Same Origin Model of web security.
        All scripts from the same origin are given the same right.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
   */
  Origin: _NS$C("Origin"),

  /**
   * The class of read operations
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Read: _NS$C("Read"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The Access Control file for this information resource.
        This may of course be a virtual resource implemented by the access control system.
        Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.
   *
   * This term provides descriptions only with no explicit locale.
   */
  accessControl: _NS$C("accessControl"),

  /**
   * The information resource to which access is being granted.
   *
   * This term provides descriptions only with no explicit locale.
   */
  accessTo: _NS$C("accessTo"),

  /**
   * A class of information resources to which access is being granted.
   *
   * This term provides descriptions only with no explicit locale.
   */
  accessToClass: _NS$C("accessToClass"),

  /**
   * A person or social entity to being given the right
   *
   * This term provides descriptions only with no explicit locale.
   */
  agent: _NS$C("agent"),

  /**
   * A class of persons or social entities to being given the right
   *
   * This term provides descriptions only with no explicit locale.
   */
  agentClass: _NS$C("agentClass"),

  /**
   * A group of persons or social entities to being given the right.
          The right is given to any entity which is a vcard:member of the group,
          as defined by the document received when the Group is dereferenced.
   *
   * This term provides descriptions only with no explicit locale.
   */
  agentGroup: _NS$C("agentGroup"),

  /**
   * If a resource has no ACL file (it is 404),
        then access to the resource if given by the ACL of the immediately
        containing directory, or failing that (404) the ACL of the recursively next
        containing directory which has an ACL file.
        Within that ACL file,
        any Authentication which has that directory as its acl:default applies to the
        resource. (The highest directory must have an ACL file.)
      *
   * This term provides descriptions only with no explicit locale.
   */
  default: _NS$C("default"),

  /**
   * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
        Was: A directory for which this authorization is used for new files in the directory.
   *
   * This term provides descriptions only with no explicit locale.
   */
  defaultForNew: _NS$C("defaultForNew"),

  /**
   * Delegates a person or another agent to act on behalf of the agent.
    For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  delegates: _NS$C("delegates"),

  /**
   * A mode of access such as read or write.
   *
   * This term provides descriptions only with no explicit locale.
   */
  mode: _NS$C("mode"),

  /**
   * A web application, identified by its Origin, such as
        <https://scripts.example.com>, being given the right.
        When a user of the web application at a certain origin accesses the server,
        then the browser sets the Origin: header to warn that a possibly untrusted webapp
        is being used.
        Then, BOTH the user AND the origin must have the required access.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
   */
  origin: _NS$C("origin"),

  /**
   * The person or other agent which owns this.
    For example, the owner of a file in a filesystem.
    There is a sense of right to control.   Typically defaults to the agent who craeted
    something but can be changed.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  owner: _NS$C("owner")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This ontology allows for the description of representations of Internet resources.

Representations may conform to prof:Profile instances and may have the format of a particular dct:MediaType.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.ACL = ACL;
var _NAMESPACE$B = "http://www.w3.org/ns/dx/conneg/altr#";

function _NS$B(localName) {
  return _NAMESPACE$B + localName;
}
/**
 * This ontology allows for the description of representations of Internet resources.

Representations may conform to prof:Profile instances and may have the format of a particular dct:MediaType.
 */


var ALTR = {
  PREFIX: "altr",
  NAMESPACE: _NAMESPACE$B,
  PREFIX_AND_NAMESPACE: {
    "altr": "http://www.w3.org/ns/dx/conneg/altr#"
  },
  NS: _NS$B,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An abstraction of the current or desired state of a thing in HTTP communications.
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/dx/connegp/altp
   */
  Representation: _NS$B("Representation"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates a Representation of a Resource.
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  hasRepresentation: _NS$B("hasRepresentation"),

  /**
   * Indicates the default Representation of a Resource.
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  hasDefaultRepresentation: _NS$B("hasDefaultRepresentation")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Extended Activity Streams 2.0 Vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.ALTR = ALTR;
var _NAMESPACE$A = "https://www.w3.org/ns/activitystreams#";

function _NS$A(localName) {
  return _NAMESPACE$A + localName;
}
/**
 * Extended Activity Streams 2.0 Vocabulary
 */


var AS = {
  PREFIX: "as",
  NAMESPACE: _NAMESPACE$A,
  PREFIX_AND_NAMESPACE: {
    "as": "https://www.w3.org/ns/activitystreams#"
  },
  NS: _NS$A,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An Object representing some form of Action that has been taken
   *
   * This term provides descriptions only in English.
   */
  Activity: _NS$A("Activity"),

  /**
   * Object
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  Object: _NS$A("Object"),

  /**
   * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model
   *
   * This term provides descriptions only in English.
   */
  Link: _NS$A("Link"),

  /**
   * A rdf:List variant for Objects and Links
   *
   * This term provides descriptions only in English.
   */
  OrderedItems: _NS$A("OrderedItems"),

  /**
   * An ordered or unordered collection of Objects or Links
   *
   * This term provides descriptions only in English.
   */
  Collection: _NS$A("Collection"),

  /**
   * A subset of items from a Collection
   *
   * This term provides descriptions only in English.
   */
  CollectionPage: _NS$A("CollectionPage"),

  /**
   * An Image file
   *
   * This term provides descriptions only in English.
   */
  Image: _NS$A("Image"),

  /**
   * Represents a digital document/file of any sort
   *
   * This term provides descriptions only in English.
   */
  Document: _NS$A("Document"),

  /**
   * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)
   *
   * This term provides descriptions only in English.
   */
  Relationship: _NS$A("Relationship"),

  /**
   * A question of any sort.
   *
   * This term provides descriptions only in English.
   */
  Question: _NS$A("Question"),

  /**
   * An Activity that has no direct object
   *
   * This term provides descriptions only in English.
   */
  IntransitiveActivity: _NS$A("IntransitiveActivity"),

  /**
   * A Profile Document
   *
   * This term provides descriptions only in English.
   */
  Profile: _NS$A("Profile"),

  /**
   * A placeholder for a deleted object
   *
   * This term provides descriptions only in English.
   */
  Tombstone: _NS$A("Tombstone"),

  /**
   * A physical or logical location
   *
   * This term provides descriptions only in English.
   */
  Place: _NS$A("Place"),

  /**
   * An ordered subset of items from an OrderedCollection
   *
   * This term provides descriptions only in English.
   */
  OrderedCollectionPage: _NS$A("OrderedCollectionPage"),

  /**
   * A variation of Collection in which items are strictly ordered
   *
   * This term provides descriptions only in English.
   */
  OrderedCollection: _NS$A("OrderedCollection"),

  /**
   * Actor accepts the Object
   *
   * This term provides descriptions only in English.
   */
  Accept: _NS$A("Accept"),

  /**
   * Block
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  Block: _NS$A("Block"),

  /**
   * Actor is ignoring the Object
   *
   * This term provides descriptions only in English.
   */
  Ignore: _NS$A("Ignore"),

  /**
   * To Add an Object or Link to Something
   *
   * This term provides descriptions only in English.
   */
  Add: _NS$A("Add"),

  /**
   * Actor announces the object to the target
   *
   * This term provides descriptions only in English.
   */
  Announce: _NS$A("Announce"),

  /**
   * Represents a software application of any sort
   *
   * This term provides descriptions only in English.
   */
  Application: _NS$A("Application"),

  /**
   * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a "check-in")
   *
   * This term provides descriptions only in English.
   */
  Arrive: _NS$A("Arrive"),

  /**
   * A written work. Typically several paragraphs long. For example, a blog post or a news article.
   *
   * This term provides descriptions only in English.
   */
  Article: _NS$A("Article"),

  /**
   * An audio file
   *
   * This term provides descriptions only in English.
   */
  Audio: _NS$A("Audio"),

  /**
   * To Create Something
   *
   * This term provides descriptions only in English.
   */
  Create: _NS$A("Create"),

  /**
   * To Delete Something
   *
   * This term provides descriptions only in English.
   */
  Delete: _NS$A("Delete"),

  /**
   * The actor dislikes the object
   *
   * This term provides descriptions only in English.
   */
  Dislike: _NS$A("Dislike"),

  /**
   * An Event of any kind
   *
   * This term provides descriptions only in English.
   */
  Event: _NS$A("Event"),

  /**
   * To flag something (e.g. flag as inappropriate, flag as spam, etc)
   *
   * This term provides descriptions only in English.
   */
  Flag: _NS$A("Flag"),

  /**
   * To Express Interest in Something
   *
   * This term provides descriptions only in English.
   */
  Follow: _NS$A("Follow"),

  /**
   * A Group of any kind.
   *
   * This term provides descriptions only in English.
   */
  Group: _NS$A("Group"),

  /**
   * To invite someone or something to something
   *
   * This term provides descriptions only in English.
   */
  Invite: _NS$A("Invite"),

  /**
   * To Offer something to someone or something
   *
   * This term provides descriptions only in English.
   */
  Offer: _NS$A("Offer"),

  /**
   * To Join Something
   *
   * This term provides descriptions only in English.
   */
  Join: _NS$A("Join"),

  /**
   * To Leave Something
   *
   * This term provides descriptions only in English.
   */
  Leave: _NS$A("Leave"),

  /**
   * To Like Something
   *
   * This term provides descriptions only in English.
   */
  Like: _NS$A("Like"),

  /**
   * The actor viewed the object
   *
   * This term provides descriptions only in English.
   */
  View: _NS$A("View"),

  /**
   * The actor listened to the object
   *
   * This term provides descriptions only in English.
   */
  Listen: _NS$A("Listen"),

  /**
   * The actor read the object
   *
   * This term provides descriptions only in English.
   */
  Read: _NS$A("Read"),

  /**
   * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Move: _NS$A("Move"),

  /**
   * The actor is traveling to the target. The origin specifies where the actor is traveling from.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Travel: _NS$A("Travel"),

  /**
   * A specialized Link that represents an @mention
   *
   * This term provides descriptions only in English.
   */
  Mention: _NS$A("Mention"),

  /**
   * A Short note, typically less than a single paragraph. A "tweet" is an example, or a "status update"
   *
   * This term provides descriptions only in English.
   */
  Note: _NS$A("Note"),

  /**
   * A Web Page
   *
   * This term provides descriptions only in English.
   */
  Page: _NS$A("Page"),

  /**
   * A Person
   *
   * This term provides descriptions only in English.
   */
  Person: _NS$A("Person"),

  /**
   * An Organization
   *
   * This term provides descriptions only in English.
   */
  Organization: _NS$A("Organization"),

  /**
   * Actor rejects the Object
   *
   * This term provides descriptions only in English.
   */
  Reject: _NS$A("Reject"),

  /**
   * To Remove Something
   *
   * This term provides descriptions only in English.
   */
  Remove: _NS$A("Remove"),

  /**
   * A service provided by some entity
   *
   * This term provides descriptions only in English.
   */
  Service: _NS$A("Service"),

  /**
   * Actor tentatively accepts the Object
   *
   * This term provides descriptions only in English.
   */
  TentativeAccept: _NS$A("TentativeAccept"),

  /**
   * Actor tentatively rejects the object
   *
   * This term provides descriptions only in English.
   */
  TentativeReject: _NS$A("TentativeReject"),

  /**
   * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.
   *
   * This term provides descriptions only in English.
   */
  Undo: _NS$A("Undo"),

  /**
   * To Update/Modify Something
   *
   * This term provides descriptions only in English.
   */
  Update: _NS$A("Update"),

  /**
   * A Video document of any kind.
   *
   * This term provides descriptions only in English.
   */
  Video: _NS$A("Video"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Subproperty of as:attributedTo that identifies the primary actor
   *
   * This term provides descriptions only in English.
   */
  actor: _NS$A("actor"),

  /**
   * Identifies an entity to which an object is attributed
   *
   * This term provides descriptions only in English.
   */
  attributedTo: _NS$A("attributedTo"),

  /**
   * attachment
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  attachment: _NS$A("attachment"),

  /**
   * attachments
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  attachments: _NS$A("attachments"),

  /**
   * Identifies the author of an object. Deprecated. Use as:attributedTo instead
   *
   * This term provides descriptions only in English.
   */
  author: _NS$A("author"),

  /**
   * bcc
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  bcc: _NS$A("bcc"),

  /**
   * bto
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  bto: _NS$A("bto"),

  /**
   * cc
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  cc: _NS$A("cc"),

  /**
   * Specifies the context within which an object exists or an activity was performed
   *
   * This term provides descriptions only in English.
   */
  context: _NS$A("context"),

  /**
   * current
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  current: _NS$A("current"),

  /**
   * first
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  first: _NS$A("first"),

  /**
   * generator
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  generator: _NS$A("generator"),

  /**
   * icon
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  icon: _NS$A("icon"),

  /**
   * image
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  image: _NS$A("image"),

  /**
   * inReplyTo
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  inReplyTo: _NS$A("inReplyTo"),

  /**
   * items
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  items: _NS$A("items"),

  /**
   * last
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  last: _NS$A("last"),

  /**
   * location
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  location: _NS$A("location"),

  /**
   * next
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  next: _NS$A("next"),

  /**
   * object
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  object: _NS$A("object"),

  /**
   * Describes a possible exclusive answer or option for a question.
   *
   * This term provides descriptions only in English.
   */
  oneOf: _NS$A("oneOf"),

  /**
   * Describes a possible inclusive answer or option for a question.
   *
   * This term provides descriptions only in English.
   */
  anyOf: _NS$A("anyOf"),

  /**
   * prev
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  prev: _NS$A("prev"),

  /**
   * preview
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  preview: _NS$A("preview"),

  /**
   * provider
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  provider: _NS$A("provider"),

  /**
   * replies
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  replies: _NS$A("replies"),

  /**
   * result
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  result: _NS$A("result"),

  /**
   * audience
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  audience: _NS$A("audience"),

  /**
   * partOf
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  partOf: _NS$A("partOf"),

  /**
   * tag
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  tag: _NS$A("tag"),

  /**
   * tags
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  tags: _NS$A("tags"),

  /**
   * target
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  target: _NS$A("target"),

  /**
   * For certain activities, specifies the entity from which the action is directed.
   *
   * This term provides descriptions only in English.
   */
  origin: _NS$A("origin"),

  /**
   * Indentifies an object used (or to be used) to complete an activity
   *
   * This term provides descriptions only in English.
   */
  instrument: _NS$A("instrument"),

  /**
   * to
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  to: _NS$A("to"),

  /**
   * Specifies a link to a specific representation of the Object
   *
   * This term provides descriptions only in English.
   */
  url: _NS$A("url"),

  /**
   * On a Relationship object, identifies the subject. e.g. when saying "John is connected to Sally", 'subject' refers to 'John'
   *
   * This term provides descriptions only in English.
   */
  subject: _NS$A("subject"),

  /**
   * On a Relationship object, describes the type of relationship
   *
   * This term provides descriptions only in English.
   */
  relationship: _NS$A("relationship"),

  /**
   * On a Profile object, describes the object described by the profile
   *
   * This term provides descriptions only in English.
   */
  describes: _NS$A("describes"),

  /**
   * On a Tombstone object, describes the former type of the deleted object
   *
   * This term provides descriptions only in English.
   */
  formerType: _NS$A("formerType"),

  /**
   * Specifies the accuracy around the point established by the longitude and latitude
   *
   * This term provides descriptions only in English.
   */
  accuracy: _NS$A("accuracy"),

  /**
   * The altitude of a place
   *
   * This term provides descriptions only in English.
   */
  altitude: _NS$A("altitude"),

  /**
   * The content of the object.
   *
   * This term provides descriptions only in English.
   */
  content: _NS$A("content"),

  /**
   * name
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  name: _NS$A("name"),

  /**
   * downstreamDuplicates
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  downstreamDuplicates: _NS$A("downstreamDuplicates"),

  /**
   * The duration of the object
   *
   * This term provides descriptions only in English.
   */
  duration: _NS$A("duration"),

  /**
   * The ending time of the object
   *
   * This term provides descriptions only in English.
   */
  endTime: _NS$A("endTime"),

  /**
   * The display height expressed as device independent pixels
   *
   * This term provides descriptions only in English.
   */
  height: _NS$A("height"),

  /**
   * The target URI of the Link
   *
   * This term provides descriptions only in English.
   */
  href: _NS$A("href"),

  /**
   * A hint about the language of the referenced resource
   *
   * This term provides descriptions only in English.
   */
  hreflang: _NS$A("hreflang"),

  /**
   * id
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  id: _NS$A("id"),

  /**
   * The latitude
   *
   * This term provides descriptions only in English.
   */
  latitude: _NS$A("latitude"),

  /**
   * The longitude
   *
   * This term provides descriptions only in English.
   */
  longitude: _NS$A("longitude"),

  /**
   * The MIME Media Type
   *
   * This term provides descriptions only in English.
   */
  mediaType: _NS$A("mediaType"),

  /**
   * objectType
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  objectType: _NS$A("objectType"),

  /**
   * Specifies the date and time the object was published
   *
   * This term provides descriptions only in English.
   */
  published: _NS$A("published"),

  /**
   * Specifies a radius around the point established by the longitude and latitude
   *
   * This term provides descriptions only in English.
   */
  radius: _NS$A("radius"),

  /**
   * A numeric rating (>= 0.0, <= 5.0) for the object
   *
   * This term provides descriptions only in English.
   */
  rating: _NS$A("rating"),

  /**
   * The RFC 5988 or HTML5 Link Relation associated with the Link
   *
   * This term provides descriptions only in English.
   */
  rel: _NS$A("rel"),

  /**
   * In a strictly ordered logical collection, specifies the index position of the first item in the items list
   *
   * This term provides descriptions only in English.
   */
  startIndex: _NS$A("startIndex"),

  /**
   * The starting time of the object
   *
   * This term provides descriptions only in English.
   */
  startTime: _NS$A("startTime"),

  /**
   * A short summary of the object
   *
   * This term provides descriptions only in English.
   */
  summary: _NS$A("summary"),

  /**
   * The total number of items in a logical collection
   *
   * This term provides descriptions only in English.
   */
  totalItems: _NS$A("totalItems"),

  /**
   * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.
   *
   * This term provides descriptions only in English.
   */
  units: _NS$A("units"),

  /**
   * Specifies when the object was last updated
   *
   * This term provides descriptions only in English.
   */
  updated: _NS$A("updated"),

  /**
   * upstreamDuplicates
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  upstreamDuplicates: _NS$A("upstreamDuplicates"),

  /**
   * verb
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  verb: _NS$A("verb"),

  /**
   * Specifies the preferred display width of the content, expressed in terms of device independent pixels.
   *
   * This term provides descriptions only in English.
   */
  width: _NS$A("width"),

  /**
   * Specifies the date and time the object was deleted
   *
   * This term provides descriptions only in English.
   */
  deleted: _NS$A("deleted")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - W3C Bookmark vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.AS = AS;
var _NAMESPACE$z = "http://www.w3.org/2002/01/bookmark#";

function _NS$z(localName) {
  return _NAMESPACE$z + localName;
}
/**
 * [Generator provided] - W3C Bookmark vocabulary
 */


var BOOKMARK = {
  PREFIX: "bookmark",
  NAMESPACE: _NAMESPACE$z,
  PREFIX_AND_NAMESPACE: {
    "bookmark": "http://www.w3.org/2002/01/bookmark#"
  },
  NS: _NS$z,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Topic
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  Topic: _NS$z("Topic"),

  /**
   * Specifies a behavior; when the
                object of type 'Shortcut' is activated, the
                client follows the 'recalls' property and
                activates the object at the end of that
                'recalls' property.  The target object may
                be another Bookmark or may be a Topic.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Shortcut: _NS$z("Shortcut"),

  /**
   * The class to which all bookmarks belong.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Bookmark: _NS$z("Bookmark"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * relates a bookmark to a topic.
                A bookmark must have at least one hasTopic property.
                The typical user operation of following a bookmark link
                will use the value of the b:recalls property. This property
                corresponds to XBEL:href property.
   *
   * This term provides descriptions only with no explicit locale.
   */
  hasTopic: _NS$z("hasTopic"),

  /**
   * connects a Shortcut to the bookmark or topic that is
  being included by reference in some other topic
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   */
  leadsTo: _NS$z("leadsTo"),

  /**
   * This corresponds to XBEL:href an
                object of type Bookmark is expected to have a
                'recalls' relationship to the document being
                bookmarked.  The 'bookmarks' property is an older
                name for the 'recalls' relationship.
   *
   * This term provides descriptions only with no explicit locale.
   */
  bookmarks: _NS$z("bookmarks"),

  /**
   * Relates a bookmark with the resource that
                has been bookmarked.  This corresponds to XBEL:href;
                an object of type Bookmark is expected to have a
                'recalls' relationship to the document being
                bookmarked
   *
   * This term provides descriptions only with no explicit locale.
   */
  recalls: _NS$z("recalls"),

  /**
   * Describes a relationship between Topics.
        When a topic T is a sub-topic of a topic U then all
        bookmarks that have topic T are also considered to have
        topic U. A topic may be a sub-topic of one or more
        topics; trivially, every topic is a sub-topic of itself.
        More formally; for all B, T, and U: b b:hasTopic T,
        T b:subTopicOf U implies B b:hasTopic U.
   *
   * This term provides descriptions only with no explicit locale.
   */
  subTopicOf: _NS$z("subTopicOf")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for the Data Model for W3C Verifiable Credentials.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.BOOKMARK = BOOKMARK;
var _NAMESPACE$y = "https://www.w3.org/2018/credentials#";

function _NS$y(localName) {
  return _NAMESPACE$y + localName;
}
/**
 * A vocabulary for the Data Model for W3C Verifiable Credentials.
 */


var CRED = {
  PREFIX: "cred",
  NAMESPACE: _NAMESPACE$y,
  PREFIX_AND_NAMESPACE: {
    "cred": "https://www.w3.org/2018/credentials#"
  },
  NS: _NS$y,
  // *****************
  // All the Classes.
  // *****************

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  VerifiableCredential: _NS$y("VerifiableCredential"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  JsonSchemaValidator2018: _NS$y("JsonSchemaValidator2018"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  ManualRefreshService2018: _NS$y("ManualRefreshService2018"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  VerifiablePresentation: _NS$y("VerifiablePresentation"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  verifiableCredential: _NS$y("verifiableCredential"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  credentialSchema: _NS$y("credentialSchema"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  credentialStatus: _NS$y("credentialStatus"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  credentialSubject: _NS$y("credentialSubject"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  evidence: _NS$y("evidence"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  expirationDate: _NS$y("expirationDate"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  holder: _NS$y("holder"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  issued: _NS$y("issued"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  issuer: _NS$y("issuer"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  issuanceDate: _NS$y("issuanceDate"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  refreshService: _NS$y("refreshService"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  termsOfUse: _NS$y("termsOfUse"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  validFrom: _NS$y("validFrom"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  validUntil: _NS$y("validUntil")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * DCAT is an RDF vocabulary designed to facilitate interoperability between data catalogs published on the Web. By using DCAT to describe datasets in data catalogs, publishers increase discoverability and enable applications easily to consume metadata from multiple catalogs. It further enables decentralized publishing of catalogs and facilitates federated dataset search across sites. Aggregated DCAT metadata can serve as a manifest file to facilitate digital preservation. DCAT is defined at http://www.w3.org/TR/vocab-dcat/. Any variance between that normative document and this schema is an error in this schema.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.CRED = CRED;
var _NAMESPACE$x = "http://www.w3.org/ns/dcat#";

function _NS$x(localName) {
  return _NAMESPACE$x + localName;
}
/**
 * DCAT is an RDF vocabulary designed to facilitate interoperability between data catalogs published on the Web. By using DCAT to describe datasets in data catalogs, publishers increase discoverability and enable applications easily to consume metadata from multiple catalogs. It further enables decentralized publishing of catalogs and facilitates federated dataset search across sites. Aggregated DCAT metadata can serve as a manifest file to facilitate digital preservation. DCAT is defined at http://www.w3.org/TR/vocab-dcat/. Any variance between that normative document and this schema is an error in this schema.
 */


var DCAT = {
  PREFIX: "dcat",
  NAMESPACE: _NAMESPACE$x,
  PREFIX_AND_NAMESPACE: {
    "dcat": "http://www.w3.org/ns/dcat#"
  },
  NS: _NS$x,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A curated collection of metadata about resources (e.g., datasets and data services in the context of a data catalog).
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  Catalog: _NS$x("Catalog"),

  /**
   * A collection of data, published or curated by a single source, and available for access or download in one or more representations.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  Dataset: _NS$x("Dataset"),

  /**
   * Resource published or curated by a single agent.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  Resource: _NS$x("Resource"),

  /**
   * A record in a data catalog, describing the registration of a single dataset or data service.
   *
   * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [9] labels in languages [ar, cs, da, el, en, es, fr, it, ja], but [8] comments in languages [cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  CatalogRecord: _NS$x("CatalogRecord"),

  /**
   * A site or end-point providing operations related to the discovery of, access to, or processing functions on, data or related resources.
   *
   * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [4] labels in languages [da, en, es, it], but [5] comments in languages [cs, da, en, es, it].
   */
  DataService: _NS$x("DataService"),

  /**
   * A specific representation of a dataset. A dataset might be available in multiple serializations that may differ in various ways, including natural language, media-type or format, schematic organization, temporal and spatial resolution, level of detail or profiles (which might specify any or all of the above).
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  Distribution: _NS$x("Distribution"),

  /**
   * An association class for attaching additional information to a relationship between DCAT Resources.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  Relationship: _NS$x("Relationship"),

  /**
   * A role is the function of a resource or agent with respect to another resource, in the context of resource attribution or resource relationships.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   *
   * See also:
   *  - http://www.w3.org/ns/dcat#hadRole
   */
  Role: _NS$x("Role"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The function of an entity or agent with respect to another entity or resource.
   *
   * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [4] labels in languages [cs, da, en, it], but [5] comments in languages [cs, da, en, es, it].
   */
  hadRole: _NS$x("hadRole"),

  /**
   * A site or end-point that gives access to the distribution of the dataset.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  accessService: _NS$x("accessService"),

  /**
   * A URL of a resource that gives access to a distribution of the dataset. E.g. landing page, feed, SPARQL endpoint. Use for all cases except a simple download link, in which case downloadURL is preferred.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  accessURL: _NS$x("accessURL"),

  /**
   * The root location or primary endpoint of the service (a web-resolvable IRI).
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  endpointURL: _NS$x("endpointURL"),

  /**
   * The geographic bounding box of a resource.
   *
   * This term has [5] labels (in languages [cs, da, en, es, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  bbox: _NS$x("bbox"),

  /**
   * The size of a distribution in bytes.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  byteSize: _NS$x("byteSize"),

  /**
   * A catalog whose contents are of interest in the context of this catalog.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  catalog: _NS$x("catalog"),

  /**
   * The geographic center (centroid) of a resource.
   *
   * This term has [5] labels (in languages [cs, da, en, es, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  centroid: _NS$x("centroid"),

  /**
   * The compression format of the distribution in which the data is contained in a compressed form, e.g. to reduce the size of the downloadable file.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   *
   * Defined by the vocabulary: https://www.w3.org/TR/vocab-dcat-2/
   */
  compressFormat: _NS$x("compressFormat"),

  /**
   * Relevant contact information for the catalogued resource. Use of vCard is recommended.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  contactPoint: _NS$x("contactPoint"),

  /**
   * A collection of data that is listed in the catalog.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  dataset: _NS$x("dataset"),

  /**
   * An available distribution of the dataset.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  distribution: _NS$x("distribution"),

  /**
   * The URL of the downloadable file in a given format. E.g. CSV file or RDF file. The format is indicated by the distribution's dct:format and/or dcat:mediaType.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  downloadURL: _NS$x("downloadURL"),

  /**
   * The end of the period.
   *
   * This term has [5] labels (in languages [cs, da, en, es, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  endDate: _NS$x("endDate"),

  /**
   * A description of the service end-point, including its operations, parameters etc.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  endpointDescription: _NS$x("endpointDescription"),

  /**
   * A keyword or tag describing a resource.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  keyword: _NS$x("keyword"),

  /**
   * A Web page that can be navigated to in a Web browser to gain access to the catalog, a dataset, its distributions and/or additional information.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  landingPage: _NS$x("landingPage"),

  /**
   * The media type of the distribution as defined by IANA
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  mediaType: _NS$x("mediaType"),

  /**
   * The package format of the distribution in which one or more data files are grouped together, e.g. to enable a set of related files to be downloaded together.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   *
   * Defined by the vocabulary: https://www.w3.org/TR/vocab-dcat-2/
   */
  packageFormat: _NS$x("packageFormat"),

  /**
   * Link to a description of a relationship with another resource.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  qualifiedRelation: _NS$x("qualifiedRelation"),

  /**
   * A record describing the registration of a single dataset or data service that is part of the catalog.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  record: _NS$x("record"),

  /**
   * A collection of data that this DataService can distribute.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  servesDataset: _NS$x("servesDataset"),

  /**
   * A site or endpoint that is listed in the catalog.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  service: _NS$x("service"),

  /**
   * minimum spatial separation resolvable in a dataset, measured in meters.
   *
   * This term has [6] labels and comments, in the languages [cs, da, en-GB, en-US, es, it].
   */
  spatialResolutionInMeters: _NS$x("spatialResolutionInMeters"),

  /**
   * The start of the period
   *
   * This term has [4] labels (in languages [cs, da, en, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  startDate: _NS$x("startDate"),

  /**
   * minimum time period resolvable in a dataset.
   *
   * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
   */
  temporalResolution: _NS$x("temporalResolution"),

  /**
   * A main category of the resource. A resource can have multiple themes.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  theme: _NS$x("theme"),

  /**
   * The knowledge organization system (KOS) used to classify catalog's datasets.
   *
   * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  themeTaxonomy: _NS$x("themeTaxonomy")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Dublin Core Terms - for describing resources
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.DCAT = DCAT;
var _NAMESPACE$w = "http://purl.org/dc/terms/";

function _NS$w(localName) {
  return _NAMESPACE$w + localName;
}
/**
 * [Generator provided] - Dublin Core Terms - for describing resources
 */


var DCTERMS = {
  PREFIX: "dcterms",
  NAMESPACE: _NAMESPACE$w,
  PREFIX_AND_NAMESPACE: {
    "dcterms": "http://purl.org/dc/terms/"
  },
  NS: _NS$w,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A resource that acts or has the power to act.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Agent: _NS$w("Agent"),

  /**
   * A group of agents.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  AgentClass: _NS$w("AgentClass"),

  /**
   * A book, article, or other documentary resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  BibliographicResource: _NS$w("BibliographicResource"),

  /**
   * A digital resource format.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  FileFormat: _NS$w("FileFormat"),

  /**
   * A file format or physical medium.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MediaType: _NS$w("MediaType"),

  /**
   * A media type or extent.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MediaTypeOrExtent: _NS$w("MediaTypeOrExtent"),

  /**
   * A rate at which something recurs.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Frequency: _NS$w("Frequency"),

  /**
   * The extent or range of judicial, law enforcement, or other authority.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Jurisdiction: _NS$w("Jurisdiction"),

  /**
   * A location, period of time, or jurisdiction.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  LocationPeriodOrJurisdiction: _NS$w("LocationPeriodOrJurisdiction"),

  /**
   * A legal document giving official permission to do something with a Resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  LicenseDocument: _NS$w("LicenseDocument"),

  /**
   * A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something with a resource, or a statement about access rights.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RightsStatement: _NS$w("RightsStatement"),

  /**
   * A system of signs, symbols, sounds, gestures, or rules used in communication.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  LinguisticSystem: _NS$w("LinguisticSystem"),

  /**
   * A spatial region or named place.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Location: _NS$w("Location"),

  /**
   * A method by which resources are added to a collection.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MethodOfAccrual: _NS$w("MethodOfAccrual"),

  /**
   * A process that is used to engender knowledge, attitudes, and skills.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MethodOfInstruction: _NS$w("MethodOfInstruction"),

  /**
   * An interval of time that is named or defined by its start and end dates.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  PeriodOfTime: _NS$w("PeriodOfTime"),

  /**
   * A physical material or carrier.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  PhysicalMedium: _NS$w("PhysicalMedium"),

  /**
   * A material thing.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  PhysicalResource: _NS$w("PhysicalResource"),

  /**
   * A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Policy: _NS$w("Policy"),

  /**
   * A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ProvenanceStatement: _NS$w("ProvenanceStatement"),

  /**
   * A dimension or extent, or a time taken to play or execute.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  SizeOrDuration: _NS$w("SizeOrDuration"),

  /**
   * A basis for comparison; a reference point against which other things can be evaluated.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Standard: _NS$w("Standard"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Date on which the resource was changed.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  modified: _NS$w("modified"),

  /**
   * An entity responsible for making the resource available.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  publisher: _NS$w("publisher"),

  /**
   * A name given to the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  title: _NS$w("title"),

  /**
   * A related resource that is a version, edition, or adaptation of the described resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  hasVersion: _NS$w("hasVersion"),

  /**
   * Date of formal issuance (e.g., publication) of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  issued: _NS$w("issued"),

  /**
   * A point or period of time associated with an event in the lifecycle of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  date: _NS$w("date"),

  /**
   * An account of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  description: _NS$w("description"),

  /**
   * A related resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  relation: _NS$w("relation"),

  /**
   * The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://dublincore.org/documents/dcmi-box/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Box: _NS$w("Box"),

  /**
   * The set of codes listed in ISO 3166-1 for the representation of names of countries.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ISO3166: _NS$w("ISO3166"),

  /**
   * The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://lcweb.loc.gov/standards/iso639-2/langhome.html
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ISO639_2: _NS$w("ISO639-2"),

  /**
   * The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.sil.org/iso639-3/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ISO639_3: _NS$w("ISO639-3"),

  /**
   * The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://dublincore.org/documents/dcmi-period/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Period: _NS$w("Period"),

  /**
   * The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://dublincore.org/documents/dcmi-point/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Point: _NS$w("Point"),

  /**
   * The set of tags, constructed according to RFC 1766, for the identification of languages.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc1766.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC1766: _NS$w("RFC1766"),

  /**
   * The set of tags constructed according to RFC 3066 for the identification of languages.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc3066.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC3066: _NS$w("RFC3066"),

  /**
   * The set of tags constructed according to RFC 4646 for the identification of languages.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc4646.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC4646: _NS$w("RFC4646"),

  /**
   * The set of tags constructed according to RFC 5646 for the identification of languages.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc5646.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC5646: _NS$w("RFC5646"),

  /**
   * The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc3986.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  URI: _NS$w("URI"),

  /**
   * The set of dates and times constructed according to the W3C Date and Time Formats Specification.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.w3.org/TR/NOTE-datetime
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  W3CDTF: _NS$w("W3CDTF"),

  /**
   * A summary of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  abstract: _NS$w("abstract"),

  /**
   * Information about who can access the resource or an indication of its security status.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accessRights: _NS$w("accessRights"),

  /**
   * Information about rights held in and over the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  rights: _NS$w("rights"),

  /**
   * The method by which items are added to a collection.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accrualMethod: _NS$w("accrualMethod"),

  /**
   * The frequency with which items are added to a collection.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accrualPeriodicity: _NS$w("accrualPeriodicity"),

  /**
   * The policy governing the addition of items to a collection.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accrualPolicy: _NS$w("accrualPolicy"),

  /**
   * An alternative name for the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  alternative: _NS$w("alternative"),

  /**
   * A class of entity for whom the resource is intended or useful.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  audience: _NS$w("audience"),

  /**
   * Date (often a range) that the resource became or will become available.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  available: _NS$w("available"),

  /**
   * A bibliographic reference for the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  bibliographicCitation: _NS$w("bibliographicCitation"),

  /**
   * An unambiguous reference to the resource within a given context.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  identifier: _NS$w("identifier"),

  /**
   * An established standard to which the described resource conforms.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  conformsTo: _NS$w("conformsTo"),

  /**
   * An entity responsible for making contributions to the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  contributor: _NS$w("contributor"),

  /**
   * The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  coverage: _NS$w("coverage"),

  /**
   * Date of creation of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  created: _NS$w("created"),

  /**
   * An entity primarily responsible for making the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  creator: _NS$w("creator"),

  /**
   * Date of acceptance of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  dateAccepted: _NS$w("dateAccepted"),

  /**
   * Date of copyright.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  dateCopyrighted: _NS$w("dateCopyrighted"),

  /**
   * Date of submission of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  dateSubmitted: _NS$w("dateSubmitted"),

  /**
   * A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  educationLevel: _NS$w("educationLevel"),

  /**
   * The size or duration of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  extent: _NS$w("extent"),

  /**
   * The file format, physical medium, or dimensions of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  format: _NS$w("format"),

  /**
   * A related resource that is substantially the same as the pre-existing described resource, but in another format.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  hasFormat: _NS$w("hasFormat"),

  /**
   * A related resource that is included either physically or logically in the described resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  hasPart: _NS$w("hasPart"),

  /**
   * A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  instructionalMethod: _NS$w("instructionalMethod"),

  /**
   * A related resource that is substantially the same as the described resource, but in another format.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isFormatOf: _NS$w("isFormatOf"),

  /**
   * A related resource in which the described resource is physically or logically included.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isPartOf: _NS$w("isPartOf"),

  /**
   * A related resource that references, cites, or otherwise points to the described resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isReferencedBy: _NS$w("isReferencedBy"),

  /**
   * A related resource that supplants, displaces, or supersedes the described resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isReplacedBy: _NS$w("isReplacedBy"),

  /**
   * A related resource that requires the described resource to support its function, delivery, or coherence.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isRequiredBy: _NS$w("isRequiredBy"),

  /**
   * A related resource of which the described resource is a version, edition, or adaptation.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isVersionOf: _NS$w("isVersionOf"),

  /**
   * A language of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  language: _NS$w("language"),

  /**
   * A legal document giving official permission to do something with the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  license: _NS$w("license"),

  /**
   * An entity that mediates access to the resource and for whom the resource is intended or useful.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  mediator: _NS$w("mediator"),

  /**
   * The material or physical carrier of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  medium: _NS$w("medium"),

  /**
   * A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  provenance: _NS$w("provenance"),

  /**
   * A related resource that is referenced, cited, or otherwise pointed to by the described resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  references: _NS$w("references"),

  /**
   * A related resource that is supplanted, displaced, or superseded by the described resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  replaces: _NS$w("replaces"),

  /**
   * A related resource that is required by the described resource to support its function, delivery, or coherence.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  requires: _NS$w("requires"),

  /**
   * A person or organization owning or managing rights over the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  rightsHolder: _NS$w("rightsHolder"),

  /**
   * A related resource from which the described resource is derived.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  source: _NS$w("source"),

  /**
   * Spatial characteristics of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  spatial: _NS$w("spatial"),

  /**
   * The topic of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  subject: _NS$w("subject"),

  /**
   * A list of subunits of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  tableOfContents: _NS$w("tableOfContents"),

  /**
   * Temporal characteristics of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  temporal: _NS$w("temporal"),

  /**
   * The nature or genre of the resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  type: _NS$w("type"),

  /**
   * Date (often a range) of validity of a resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  valid: _NS$w("valid")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Description of a Project (DOAP) vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.DCTERMS = DCTERMS;
var _NAMESPACE$v = "http://usefulinc.com/ns/doap#";

function _NS$v(localName) {
  return _NAMESPACE$v + localName;
}
/**
 * [Generator provided] - Description of a Project (DOAP) vocabulary
 */


var DOAP = {
  PREFIX: "doap",
  NAMESPACE: _NAMESPACE$v,
  PREFIX_AND_NAMESPACE: {
    "doap": "http://usefulinc.com/ns/doap#"
  },
  NS: _NS$v,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Project: _NS$v("Project"),

  /**
   * Version information of a project release.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Version: _NS$v("Version"),

  /**
   * A specification of a system's aspects, technical or otherwise.
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Specification: _NS$v("Specification"),

  /**
   * Source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Repository: _NS$v("Repository"),

  /**
   * Subversion source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  SVNRepository: _NS$v("SVNRepository"),

  /**
   * Git source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  GitRepository: _NS$v("GitRepository"),

  /**
   * BitKeeper source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  BKRepository: _NS$v("BKRepository"),

  /**
   * CVS source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  CVSRepository: _NS$v("CVSRepository"),

  /**
   * GNU Arch source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  ArchRepository: _NS$v("ArchRepository"),

  /**
   * Bazaar source code branch.
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  BazaarBranch: _NS$v("BazaarBranch"),

  /**
   * Git source code branch.
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  GitBranch: _NS$v("GitBranch"),

  /**
   * Mercurial source code repository.
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  HgRepository: _NS$v("HgRepository"),

  /**
   * darcs source code repository.
   *
   * This term has [4] labels and comments, in the languages [en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  DarcsRepository: _NS$v("DarcsRepository"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A name of something.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  name: _NS$v("name"),

  /**
   * URL of a project's homepage,
        associated with exactly one project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  homepage: _NS$v("homepage"),

  /**
   * URL of a project's past homepage,
        associated with exactly one project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  old_homepage: _NS$v("old-homepage"),

  /**
   * Date when something was created, in YYYY-MM-DD form. e.g. 2004-04-05
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  created: _NS$v("created"),

  /**
   * Short (8 or 9 words) plain text description of a project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  shortdesc: _NS$v("shortdesc"),

  /**
   * Plain text description of a project, of 2-4 sentences in length.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  description: _NS$v("description"),

  /**
   * A project release.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  release: _NS$v("release"),

  /**
   * Mailing list home page or email address.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  mailing_list: _NS$v("mailing-list"),

  /**
   * A forum or community that supports this project.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  support_forum: _NS$v("support-forum"),

  /**
   * A forum or community for developers of this project.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  developer_forum: _NS$v("developer-forum"),

  /**
   * A category of project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  category: _NS$v("category"),

  /**
   * The URI of an RDF description of the license the software is distributed under. E.g. a SPDX reference
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  license: _NS$v("license"),

  /**
   * Source code repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  repository: _NS$v("repository"),

  /**
   * The project that uses a repository.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  repositoryOf: _NS$v("repositoryOf"),

  /**
   * Repository for anonymous access.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  anon_root: _NS$v("anon-root"),

  /**
   * Web browser interface to repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  browse: _NS$v("browse"),

  /**
   * Module name of a Subversion, CVS, BitKeeper or Arch repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  module: _NS$v("module"),

  /**
   * Location of a repository.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  location: _NS$v("location"),

  /**
   * Web page from which the project software can be downloaded.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  download_page: _NS$v("download-page"),

  /**
   * Mirror of software download web page.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  download_mirror: _NS$v("download-mirror"),

  /**
   * Revision identifier of a software release.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  revision: _NS$v("revision"),

  /**
   * URI of download associated with this release.
   *
   * This term has [3] labels and comments, in the languages [cs, en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  file_release: _NS$v("file-release"),

  /**
   * URL of Wiki for collaborative discussion of project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  wiki: _NS$v("wiki"),

  /**
   * Bug tracker for a project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  bug_database: _NS$v("bug-database"),

  /**
   * Web page with screenshots of project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  screenshots: _NS$v("screenshots"),

  /**
   * Maintainer of a project, a project leader.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  maintainer: _NS$v("maintainer"),

  /**
   * Developer of software for the project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  developer: _NS$v("developer"),

  /**
   * Contributor of documentation to the project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  documenter: _NS$v("documenter"),

  /**
   * Contributor of translations to the project.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  translator: _NS$v("translator"),

  /**
   * A tester or other quality control contributor.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  tester: _NS$v("tester"),

  /**
   * Project contributor.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  helper: _NS$v("helper"),

  /**
   * Programming language a project is implemented in or intended for use with.
   *
   * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  programming_language: _NS$v("programming-language"),

  /**
   * Operating system that a project is limited to.  Omit this property if the project is not OS-specific.
   *
   * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [6] labels in languages [cs, de, en, es, fr, pt], but [5] comments in languages [cs, de, en, es, fr].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  os: _NS$v("os"),

  /**
   * A specification that a project implements. Could be a standard, API or legally defined level of conformance.
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  implements: _NS$v("implements"),

  /**
   * The URI of a web service endpoint where software as a service may be accessed
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  service_endpoint: _NS$v("service-endpoint"),

  /**
   * ISO language code a project has been translated into
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  language: _NS$v("language"),

  /**
   * Vendor organization: commercial, free or otherwise
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  vendor: _NS$v("vendor"),

  /**
   * Indicator of software platform (non-OS specific), e.g. Java, Firefox, ECMA CLR
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  platform: _NS$v("platform"),

  /**
   * Description of target user base
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  audience: _NS$v("audience"),

  /**
   * URI of a blog related to a project
   *
   * This term has [2] labels and comments, in the languages [en, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  blog: _NS$v("blog")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Evaluation and Report Language (EARL)
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.DOAP = DOAP;
var _NAMESPACE$u = "http://www.w3.org/ns/earl#";

function _NS$u(localName) {
  return _NAMESPACE$u + localName;
}
/**
 * [Generator provided] - Evaluation and Report Language (EARL)
 */


var EARL = {
  PREFIX: "earl",
  NAMESPACE: _NAMESPACE$u,
  PREFIX_AND_NAMESPACE: {
    "earl": "http://www.w3.org/ns/earl#"
  },
  NS: _NS$u,
  // *****************
  // All the Classes.
  // *****************

  /**
   * a statement that embodies the results of a test
   *
   * This term provides descriptions only in English.
   */
  Assertion: _NS$u("Assertion"),

  /**
   * an entity such as a person, a software tool, an organization, or any other grouping that carries out a test collectively
   *
   * This term provides descriptions only in English.
   */
  Assertor: _NS$u("Assertor"),

  /**
   * the class of things that have been tested against some test criterion
   *
   * This term provides descriptions only in English.
   */
  TestSubject: _NS$u("TestSubject"),

  /**
   * a testable statement, usually one that can be passed or failed
   *
   * This term provides descriptions only in English.
   */
  TestCriterion: _NS$u("TestCriterion"),

  /**
   * a higher-level requirement that is tested by executing one or more sub-tests
   *
   * This term provides descriptions only in English.
   */
  TestRequirement: _NS$u("TestRequirement"),

  /**
   * an atomic test, usually one that is a partial test for a requirement
   *
   * This term provides descriptions only in English.
   */
  TestCase: _NS$u("TestCase"),

  /**
   * the actual result of performing the test
   *
   * This term provides descriptions only in English.
   */
  TestResult: _NS$u("TestResult"),

  /**
   * describes how a test was carried out
   *
   * This term provides descriptions only in English.
   */
  TestMode: _NS$u("TestMode"),

  /**
   * a discrete value that describes a resulting condition from carrying out the test
   *
   * This term provides descriptions only in English.
   */
  OutcomeValue: _NS$u("OutcomeValue"),

  /**
   * the class of outcomes to denote passing a test
   *
   * This term provides descriptions only in English.
   */
  Pass: _NS$u("Pass"),

  /**
   * the class of outcomes to denote failing a test
   *
   * This term provides descriptions only in English.
   */
  Fail: _NS$u("Fail"),

  /**
   * the class of outcomes to denote an undetermined outcome
   *
   * This term provides descriptions only in English.
   */
  CannotTell: _NS$u("CannotTell"),

  /**
   * the class of outcomes to denote the test is not applicable
   *
   * This term provides descriptions only in English.
   */
  NotApplicable: _NS$u("NotApplicable"),

  /**
   * the class of outcomes to denote the test has not been carried out
   *
   * This term provides descriptions only in English.
   */
  NotTested: _NS$u("NotTested"),

  /**
   * any piece of software such as an authoring tool, browser, or evaluation tool
   *
   * This term provides descriptions only in English.
   */
  Software: _NS$u("Software"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * assertor of an assertion
   *
   * This term provides descriptions only in English.
   */
  assertedBy: _NS$u("assertedBy"),

  /**
   * test subject of an assertion
   *
   * This term provides descriptions only in English.
   */
  subject: _NS$u("subject"),

  /**
   * test criterion of an assertion
   *
   * This term provides descriptions only in English.
   */
  test: _NS$u("test"),

  /**
   * result of an assertion
   *
   * This term provides descriptions only in English.
   */
  result: _NS$u("result"),

  /**
   * mode in which the test was performed
   *
   * This term provides descriptions only in English.
   */
  mode: _NS$u("mode"),

  /**
   * assertor that is primarily responsible for performing the test
   *
   * This term provides descriptions only in English.
   */
  mainAssertor: _NS$u("mainAssertor"),

  /**
   * outcome of performing the test
   *
   * This term provides descriptions only in English.
   */
  outcome: _NS$u("outcome"),

  /**
   * location within a test subject that are most relevant to a test result
   *
   * This term provides descriptions only in English.
   */
  pointer: _NS$u("pointer"),

  /**
   * additional warnings or error messages in a human-readable form
   *
   * This term provides descriptions only in English.
   */
  info: _NS$u("info")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Friend of a friend, v0.99
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.EARL = EARL;
var _NAMESPACE$t = "http://xmlns.com/foaf/0.1/";

function _NS$t(localName) {
  return _NAMESPACE$t + localName;
}
/**
 * [Generator provided] - Friend of a friend, v0.99
 */


var FOAF = {
  PREFIX: "foaf",
  NAMESPACE: _NAMESPACE$t,
  PREFIX_AND_NAMESPACE: {
    "foaf": "http://xmlns.com/foaf/0.1/"
  },
  NS: _NS$t,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An agent (eg. person, group, software or physical artifact).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Agent: _NS$t("Agent"),

  /**
   * A document.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Document: _NS$t("Document"),

  /**
   * An organization.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Organization: _NS$t("Organization"),

  /**
   * A project (a collective endeavour of some kind).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Project: _NS$t("Project"),

  /**
   * A person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Person: _NS$t("Person"),

  /**
   * A class of Agents.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Group: _NS$t("Group"),

  /**
   * An image.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Image: _NS$t("Image"),

  /**
   * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  LabelProperty: _NS$t("LabelProperty"),

  /**
   * An online account.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineAccount: _NS$t("OnlineAccount"),

  /**
   * An online chat account.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineChatAccount: _NS$t("OnlineChatAccount"),

  /**
   * An online e-commerce account.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineEcommerceAccount: _NS$t("OnlineEcommerceAccount"),

  /**
   * An online gaming account.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineGamingAccount: _NS$t("OnlineGamingAccount"),

  /**
   * A personal profile RDF document.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  PersonalProfileDocument: _NS$t("PersonalProfileDocument"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates an account held by this agent.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  account: _NS$t("account"),

  /**
   * Indicates the name (identifier) associated with this online account.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  accountName: _NS$t("accountName"),

  /**
   * Indicates a homepage of the service provide for this online account.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  accountServiceHomepage: _NS$t("accountServiceHomepage"),

  /**
   * The age in years of some agent.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  age: _NS$t("age"),

  /**
   * An AIM chat ID
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  aimChatID: _NS$t("aimChatID"),

  /**
   * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  nick: _NS$t("nick"),

  /**
   * A location that something is based near, for some broadly human notion of near.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  based_near: _NS$t("based_near"),

  /**
   * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  birthday: _NS$t("birthday"),

  /**
   * A current project this person works on.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  currentProject: _NS$t("currentProject"),

  /**
   * A depiction of some thing.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  depiction: _NS$t("depiction"),

  /**
   * A thing depicted in this representation.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  depicts: _NS$t("depicts"),

  /**
   * A checksum for the DNA of some thing. Joke.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  dnaChecksum: _NS$t("dnaChecksum"),

  /**
   * The family name of some person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  familyName: _NS$t("familyName"),

  /**
   * The family name of some person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  family_name: _NS$t("family_name"),

  /**
   * The first name of a person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  firstName: _NS$t("firstName"),

  /**
   * The underlying or 'focal' entity associated with some SKOS-described concept.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  focus: _NS$t("focus"),

  /**
   * An organization funding a project or person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  fundedBy: _NS$t("fundedBy"),

  /**
   * A textual geekcode for this person, see http://www.geekcode.com/geek.html
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  geekcode: _NS$t("geekcode"),

  /**
   * The gender of this Agent (typically but not necessarily 'male' or 'female').
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  gender: _NS$t("gender"),

  /**
   * The given name of some person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  givenName: _NS$t("givenName"),

  /**
   * The given name of some person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  givenname: _NS$t("givenname"),

  /**
   * Indicates an account held by this agent.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  holdsAccount: _NS$t("holdsAccount"),

  /**
   * A homepage for some thing.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  homepage: _NS$t("homepage"),

  /**
   * A page or document about this thing.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  page: _NS$t("page"),

  /**
   * A document that this thing is the primary topic of.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  isPrimaryTopicOf: _NS$t("isPrimaryTopicOf"),

  /**
   * A topic of some page or document.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  topic: _NS$t("topic"),

  /**
   * The primary topic of some page or document.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  primaryTopic: _NS$t("primaryTopic"),

  /**
   * An ICQ chat ID
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  icqChatID: _NS$t("icqChatID"),

  /**
   * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  img: _NS$t("img"),

  /**
   * A page about a topic of interest to this person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  interest: _NS$t("interest"),

  /**
   * A jabber ID for something.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  jabberID: _NS$t("jabberID"),

  /**
   * A person known by this person (indicating some level of reciprocated interaction between the parties).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  knows: _NS$t("knows"),

  /**
   * The last name of a person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  lastName: _NS$t("lastName"),

  /**
   * A logo representing some thing.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  logo: _NS$t("logo"),

  /**
   * Something that was made by this agent.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  made: _NS$t("made"),

  /**
   * An agent that made this thing.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  maker: _NS$t("maker"),

  /**
   * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  mbox: _NS$t("mbox"),

  /**
   * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  mbox_sha1sum: _NS$t("mbox_sha1sum"),

  /**
   * Indicates a member of a Group
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  member: _NS$t("member"),

  /**
   * Indicates the class of individuals that are a member of a Group
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  membershipClass: _NS$t("membershipClass"),

  /**
   * An MSN chat ID
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  msnChatID: _NS$t("msnChatID"),

  /**
   * A Myers Briggs (MBTI) personality classification.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  myersBriggs: _NS$t("myersBriggs"),

  /**
   * A name for some thing.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  name: _NS$t("name"),

  /**
   * An OpenID for an Agent.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  openid: _NS$t("openid"),

  /**
   * A project this person has previously worked on.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  pastProject: _NS$t("pastProject"),

  /**
   * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  phone: _NS$t("phone"),

  /**
   * A .plan comment, in the tradition of finger and '.plan' files.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  plan: _NS$t("plan"),

  /**
   * A link to the publications of this person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  publications: _NS$t("publications"),

  /**
   * A homepage of a school attended by the person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  schoolHomepage: _NS$t("schoolHomepage"),

  /**
   * A sha1sum hash, in hex.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  sha1: _NS$t("sha1"),

  /**
   * A Skype ID
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  skypeID: _NS$t("skypeID"),

  /**
   * A string expressing what the user is happy for the general public (normally) to know about their current activity.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  status: _NS$t("status"),

  /**
   * The surname of some person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  surname: _NS$t("surname"),

  /**
   * A theme.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  theme: _NS$t("theme"),

  /**
   * A derived thumbnail image.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  thumbnail: _NS$t("thumbnail"),

  /**
   * A tipjar document for this agent, describing means for payment and reward.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  tipjar: _NS$t("tipjar"),

  /**
   * Title (Mr, Mrs, Ms, Dr. etc)
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  title: _NS$t("title"),

  /**
   * A thing of interest to this person.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  topic_interest: _NS$t("topic_interest"),

  /**
   * A weblog of some thing (whether person, group, company etc.).
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  weblog: _NS$t("weblog"),

  /**
   * A work info homepage of some person; a page about their work for some organization.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  workInfoHomepage: _NS$t("workInfoHomepage"),

  /**
   * A workplace homepage of some person; the homepage of an organization they work for.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  workplaceHomepage: _NS$t("workplaceHomepage"),

  /**
   * A Yahoo chat ID
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  yahooChatID: _NS$t("yahooChatID")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A namespace for describing HTTP messages (http://www.w3.org/Protocols/rfc2616/rfc2616.html)
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.FOAF = FOAF;
var _NAMESPACE$s = "http://www.w3.org/2011/http#";

function _NS$s(localName) {
  return _NAMESPACE$s + localName;
}
/**
 * A namespace for describing HTTP messages (http://www.w3.org/Protocols/rfc2616/rfc2616.html)
 */


var HTTP = {
  PREFIX: "http",
  NAMESPACE: _NAMESPACE$s,
  PREFIX_AND_NAMESPACE: {
    "http": "http://www.w3.org/2011/http#"
  },
  NS: _NS$s,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A connection used for HTTP transfer.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Connection: _NS$s("Connection"),

  /**
   * An entity header in an HTTP message.
   *
   * This term provides descriptions only in English.
   */
  EntityHeader: _NS$s("EntityHeader"),

  /**
   * A header in an HTTP message.
   *
   * This term provides descriptions only in English.
   */
  MessageHeader: _NS$s("MessageHeader"),

  /**
   * A general header in an HTTP message.
   *
   * This term provides descriptions only in English.
   */
  GeneralHeader: _NS$s("GeneralHeader"),

  /**
   * A part of a deconstructed header value.
   *
   * This term provides descriptions only in English.
   */
  HeaderElement: _NS$s("HeaderElement"),

  /**
   * A header name.
   *
   * This term provides descriptions only in English.
   */
  HeaderName: _NS$s("HeaderName"),

  /**
   * An HTTP message.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Message: _NS$s("Message"),

  /**
   * The HTTP method used for the request.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Method: _NS$s("Method"),

  /**
   * A parameter for a part of a header value.
   *
   * This term provides descriptions only in English.
   */
  Parameter: _NS$s("Parameter"),

  /**
   * An HTTP request.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Request: _NS$s("Request"),

  /**
   * A header in an HTTP request message.
   *
   * This term provides descriptions only in English.
   */
  RequestHeader: _NS$s("RequestHeader"),

  /**
   * An HTTP response.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Response: _NS$s("Response"),

  /**
   * A header in an HTTP response message.
   *
   * This term provides descriptions only in English.
   */
  ResponseHeader: _NS$s("ResponseHeader"),

  /**
   * The status code of an HTTP response.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  StatusCode: _NS$s("StatusCode"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The absolute request URI.
   *
   * This term provides descriptions only in English.
   */
  absoluteURI: _NS$s("absoluteURI"),

  /**
   * The request URI of an HTTP request.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  requestURI: _NS$s("requestURI"),

  /**
   * The absolute path sort of request URI.
   *
   * This term provides descriptions only in English.
   */
  absolutePath: _NS$s("absolutePath"),

  /**
   * The authority sort of request URI.
   *
   * This term provides descriptions only in English.
   */
  authority: _NS$s("authority"),

  /**
   * The entity body of an HTTP message.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  body: _NS$s("body"),

  /**
   * The authority of a connection used for the HTTP transfer.
   *
   * This term provides descriptions only in English.
   */
  connectionAuthority: _NS$s("connectionAuthority"),

  /**
   * The name of a header element.
   *
   * This term provides descriptions only in English.
   */
  elementName: _NS$s("elementName"),

  /**
   * The value of a header element.
   *
   * This term provides descriptions only in English.
   */
  elementValue: _NS$s("elementValue"),

  /**
   * The name of an HTTP header field.
   *
   * This term provides descriptions only in English.
   */
  fieldName: _NS$s("fieldName"),

  /**
   * The value of an HTTP header field.
   *
   * This term provides descriptions only in English.
   */
  fieldValue: _NS$s("fieldValue"),

  /**
   * The deconstructed parts of an HTTP header value.
   *
   * This term provides descriptions only in English.
   */
  headerElements: _NS$s("headerElements"),

  /**
   * The name of an HTTP header.
   *
   * This term provides descriptions only in English.
   */
  hdrName: _NS$s("hdrName"),

  /**
   * The headers in an HTTP message.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  headers: _NS$s("headers"),

  /**
   * The HTTP version of an HTTP message.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  httpVersion: _NS$s("httpVersion"),

  /**
   * The HTTP method used for the HTTP request.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  mthd: _NS$s("mthd"),

  /**
   * The HTTP method name used for the HTTP request.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  methodName: _NS$s("methodName"),

  /**
   * The name of a parameter in a part of a deconstructed HTTP header value.
   *
   * This term provides descriptions only in English.
   */
  paramName: _NS$s("paramName"),

  /**
   * The parameters in a part of a deconstructed HTTP header value.
   *
   * This term provides descriptions only in English.
   */
  params: _NS$s("params"),

  /**
   * The value of a parameter in a part of a deconstructed HTTP header value.
   *
   * This term provides descriptions only in English.
   */
  paramValue: _NS$s("paramValue"),

  /**
   * The reason phrase (status text) of an HTTP response.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  reasonPhrase: _NS$s("reasonPhrase"),

  /**
   * The HTTP requests made via a connection.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  requests: _NS$s("requests"),

  /**
   * The HTTP response sent in answer to an HTTP request.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  resp: _NS$s("resp"),

  /**
   * The status code of an HTTP response.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  sc: _NS$s("sc"),

  /**
   * The status code number.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  statusCodeNumber: _NS$s("statusCodeNumber"),

  /**
   * The status code value of an HTTP response.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  statusCodeValue: _NS$s("statusCodeValue")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This vocabulary is a one deemed to contain all HTTP headers.
The rdflib.js library uses it as for relationships between an HTTP response
and the  content (value) of the HTTP header in that response.     The ontology
is deemed to contain one property for every HTTP header, standard or not.
The property in this ontology has a localname which is the header field converted
to lower case.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.HTTP = HTTP;
var _NAMESPACE$r = "http://www.w3.org/2007/ont/httph#";

function _NS$r(localName) {
  return _NAMESPACE$r + localName;
}
/**
 * This vocabulary is a one deemed to contain all HTTP headers.
The rdflib.js library uses it as for relationships between an HTTP response
and the  content (value) of the HTTP header in that response.     The ontology
is deemed to contain one property for every HTTP header, standard or not.
The property in this ontology has a localname which is the header field converted
to lower case.
 */


var HTTPH_INRUPT = {
  PREFIX: "httph-inrupt",
  NAMESPACE: _NAMESPACE$r,
  PREFIX_AND_NAMESPACE: {
    "httph-inrupt": "http://www.w3.org/2007/ont/httph#"
  },
  NS: _NS$r,
  // *******************
  // All the Properties.
  // *******************

  /**
   * See the HTTP specification
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2007/ont/httph
   */
  content_type: _NS$r("content-type"),

  /**
   * See the HTTP specification
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2007/ont/httph#
   */
  accept: _NS$r("accept"),

  /**
   * See the HTTP specification
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2007/ont/httph#
   */
  accept_language: _NS$r("accept-language")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.HTTPH_INRUPT = HTTPH_INRUPT;
var _NAMESPACE$q = "http://www.w3.org/ns/hydra/core#";

function _NS$q(localName) {
  return _NAMESPACE$q + localName;
}
/**
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */


var HYDRA = {
  PREFIX: "hydra",
  NAMESPACE: _NAMESPACE$q,
  PREFIX_AND_NAMESPACE: {
    "hydra": "http://www.w3.org/ns/hydra/core#"
  },
  NS: _NS$q,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of Hydra classes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Class: _NS$q("Class"),

  /**
   * The class of properties representing links.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Link: _NS$q("Link"),

  /**
   * The Hydra API documentation class
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  ApiDocumentation: _NS$q("ApiDocumentation"),

  /**
   * A templated link.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  TemplatedLink: _NS$q("TemplatedLink"),

  /**
   * A runtime error, used to report information beyond the returned status code.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Error: _NS$q("Error"),

  /**
   * A collection holding references to a number of related resources.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Collection: _NS$q("Collection"),

  /**
   * A PartialCollectionView describes a partial view of a Collection. Multiple PartialCollectionViews can be connected with the the next/previous properties to allow a client to retrieve all members of the collection.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  PartialCollectionView: _NS$q("PartialCollectionView"),

  /**
   * Provides a base abstract for base Uri source for Iri template resolution.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  BaseUriSource: _NS$q("BaseUriSource"),

  /**
   * Specifies a possible either expected or returned header values
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  HeaderSpecification: _NS$q("HeaderSpecification"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A property
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  property: _NS$q("property"),

  /**
   * True if the property is required, false otherwise.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  required: _NS$q("required"),

  /**
   * True if the client can retrieve the property's value, false otherwise.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  readable: _NS$q("readable"),

  /**
   * True if the client can change the property's value, false otherwise.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  writable: _NS$q("writable"),

  /**
   * This property is left for compatibility purposes and hydra:writable should be used instead.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  writeable: _NS$q("writeable"),

  /**
   * The HTTP method.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  method: _NS$q("method"),

  /**
   * The HTTP status code. Please note it may happen this value will be different to actual status code received.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  statusCode: _NS$q("statusCode"),

  /**
   * A title, often used along with a description.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  title: _NS$q("title"),

  /**
   * A description.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  description: _NS$q("description"),

  /**
   * This predicate is left for compatibility purposes and hydra:memberAssertion should be used instead.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  manages: _NS$q("manages"),

  /**
   * The total number of items referenced by a collection.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  totalItems: _NS$q("totalItems"),

  /**
   * A property representing a freetext query.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  freetextQuery: _NS$q("freetextQuery"),

  /**
   * A templated string with placeholders. The literal's datatype indicates the template syntax; if not specified, hydra:Rfc6570Template is assumed.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - http://www.w3.org/ns/hydra/core#Rfc6570Template
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  template: _NS$q("template"),

  /**
   * An IRI template as defined by RFC6570.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - http://tools.ietf.org/html/rfc6570
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Rfc6570Template: _NS$q("Rfc6570Template"),

  /**
   * The representation format to use when expanding the IRI template.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  variableRepresentation: _NS$q("variableRepresentation"),

  /**
   * A variable-to-property mapping of the IRI template.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  mapping: _NS$q("mapping"),

  /**
   * An IRI template variable
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  variable: _NS$q("variable"),

  /**
   * relative Uri resolution
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  resolveRelativeUsing: _NS$q("resolveRelativeUsing"),

  /**
   * Instructs to skip N elements of the set.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  offset: _NS$q("offset"),

  /**
   * Instructs to limit set only to N elements.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  limit: _NS$q("limit"),

  /**
   * Instructs to provide a specific page of the collection at a given index.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  pageIndex: _NS$q("pageIndex"),

  /**
   * Instructs to provide a specific page reference of the collection.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  pageReference: _NS$q("pageReference"),

  /**
   * Name of the header returned by the operation.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  returnsHeader: _NS$q("returnsHeader"),

  /**
   * Specification of the header expected by the operation.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  expectsHeader: _NS$q("expectsHeader"),

  /**
   * Name of the header.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  headerName: _NS$q("headerName"),

  /**
   * Possible value of the header.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  possibleValue: _NS$q("possibleValue"),

  /**
   * Determines whether the provided set of header values is closed or not.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  closedSet: _NS$q("closedSet"),

  /**
   * Hint on what kind of extensions are in use.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  extension: _NS$q("extension")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - iCal - a vocabulary for description of events and calendars
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.HYDRA = HYDRA;
var _NAMESPACE$p = "https://www.w3.org/2002/12/cal/ical#";

function _NS$p(localName) {
  return _NAMESPACE$p + localName;
}
/**
 * [Generator provided] - iCal - a vocabulary for description of events and calendars
 */


var ICAL = {
  PREFIX: "ical",
  NAMESPACE: _NAMESPACE$p,
  PREFIX_AND_NAMESPACE: {
    "ical": "https://www.w3.org/2002/12/cal/ical#"
  },
  NS: _NS$p,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Provide a grouping of component properties that define an alarm.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Valarm: _NS$p("Valarm"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Value_DURATION: _NS$p("Value_DURATION"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Value_CAL_ADDRESS: _NS$p("Value_CAL-ADDRESS"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Value_DATE: _NS$p("Value_DATE"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Value_DATE_TIME: _NS$p("Value_DATE-TIME"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Value_PERIOD: _NS$p("Value_PERIOD"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Value_RECUR: _NS$p("Value_RECUR"),

  /**
   * Provide a grouping of component properties that describe an event.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Vevent: _NS$p("Vevent"),

  /**
   * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Vfreebusy: _NS$p("Vfreebusy"),

  /**
   * Provide a grouping of component properties that describe a journal entry.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Vjournal: _NS$p("Vjournal"),

  /**
   * Provide a grouping of component properties that defines a time zone.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Vtimezone: _NS$p("Vtimezone"),

  /**
   * Provide a grouping of calendar properties that describe a to-do.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Vtodo: _NS$p("Vtodo"),
  // *******************
  // All the Properties.
  // *******************

  /**
   *
        default value type: URI
   *
   * This term provides descriptions only with no explicit locale.
   */
  attach: _NS$p("attach"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  description: _NS$p("description"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  summary: _NS$p("summary"),

  /**
   *
        value type: DURATION
   *
   * This term provides descriptions only with no explicit locale.
   */
  duration: _NS$p("duration"),

  /**
   *
        value type: CAL-ADDRESS
   *
   * This term provides descriptions only with no explicit locale.
   */
  attendee: _NS$p("attendee"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  action: _NS$p("action"),

  /**
   *
        value type: INTEGER
   *
   * This term provides descriptions only with no explicit locale.
   */
  repeat: _NS$p("repeat"),

  /**
   *
        default value type: DURATION
   *
   * This term provides descriptions only with no explicit locale.
   */
  trigger: _NS$p("trigger"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  categories: _NS$p("categories"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  class: _NS$p("class"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  comment: _NS$p("comment"),

  /**
   * This property specifies information related to the global position for the activity specified by a calendar component.
   *
   * This term provides descriptions only with no explicit locale.
   */
  geo: _NS$p("geo"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  location: _NS$p("location"),

  /**
   *
        value type: INTEGER
   *
   * This term provides descriptions only with no explicit locale.
   */
  priority: _NS$p("priority"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  resources: _NS$p("resources"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  status: _NS$p("status"),

  /**
   *
        default value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  dtend: _NS$p("dtend"),

  /**
   *
        default value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  dtstart: _NS$p("dtstart"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  transp: _NS$p("transp"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  contact: _NS$p("contact"),

  /**
   *
        value type: CAL-ADDRESS
   *
   * This term provides descriptions only with no explicit locale.
   */
  organizer: _NS$p("organizer"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  relatedTo: _NS$p("relatedTo"),

  /**
   *
        value type: URI
   *
   * This term provides descriptions only with no explicit locale.
   */
  url: _NS$p("url"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  uid: _NS$p("uid"),

  /**
   *
        value type: RECUR
   *
   * This term provides descriptions only with no explicit locale.
   */
  exrule: _NS$p("exrule"),

  /**
   *
        default value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  rdate: _NS$p("rdate"),

  /**
   *
        value type: RECUR
   *
   * This term provides descriptions only with no explicit locale.
   */
  rrule: _NS$p("rrule"),

  /**
   *
        value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  created: _NS$p("created"),

  /**
   *
        value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  dtstamp: _NS$p("dtstamp"),

  /**
   *
        value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  lastModified: _NS$p("lastModified"),

  /**
   *
        value type: integer
   *
   * This term provides descriptions only with no explicit locale.
   */
  sequence: _NS$p("sequence"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  requestStatus: _NS$p("requestStatus"),

  /**
   *
        value type: PERIOD
   *
   * This term provides descriptions only with no explicit locale.
   */
  freebusy: _NS$p("freebusy"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  tzid: _NS$p("tzid"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  tzname: _NS$p("tzname"),

  /**
   *
        value type: UTC-OFFSET
   *
   * This term provides descriptions only with no explicit locale.
   */
  tzoffsetfrom: _NS$p("tzoffsetfrom"),

  /**
   *
        value type: UTC-OFFSET
   *
   * This term provides descriptions only with no explicit locale.
   */
  tzoffsetto: _NS$p("tzoffsetto"),

  /**
   *
        value type: URI
   *
   * This term provides descriptions only with no explicit locale.
   */
  tzurl: _NS$p("tzurl"),

  /**
   *
        value type: INTEGER
   *
   * This term provides descriptions only with no explicit locale.
   */
  percentComplete: _NS$p("percentComplete"),

  /**
   *
        value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  completed: _NS$p("completed"),

  /**
   *
        default value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  due: _NS$p("due"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  X_: _NS$p("X-"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  calscale: _NS$p("calscale"),

  /**
   *
        default value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  exdate: _NS$p("exdate"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  method: _NS$p("method"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  prodid: _NS$p("prodid"),

  /**
   *
        default value type: DATE-TIME
   *
   * This term provides descriptions only with no explicit locale.
   */
  recurrenceId: _NS$p("recurrenceId"),

  /**
   *
        value type: TEXT
   *
   * This term provides descriptions only with no explicit locale.
   */
  version: _NS$p("version")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This is a vocabulary document and is used to achieve certain features of the JSON-LD language.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.ICAL = ICAL;
var _NAMESPACE$o = "http://www.w3.org/ns/json-ld#";

function _NS$o(localName) {
  return _NAMESPACE$o + localName;
}
/**
 * This is a vocabulary document and is used to achieve certain features of the JSON-LD language.
 */


var JSONLD = {
  PREFIX: "jsonld",
  NAMESPACE: _NAMESPACE$o,
  PREFIX_AND_NAMESPACE: {
    "jsonld": "http://www.w3.org/ns/json-ld#"
  },
  NS: _NS$o,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Defines term definitions and other aspects of a JSON-LD `Context`.
   A [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) MUST be a map whose keys MUST be either _terms_, _compact IRIs_, _IRIs_, or one of the keywords `@base`, `@import`, `@language`, `@propagate`, `@protected`, `@type`, `@version`, or `@vocab`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  Context: _NS$o("Context"),

  /**
   * A string ([simple term definition](http://www.w3.org/TR/json-ld11/#dfn-simple-term-definitions)), expanding to an IRI.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  PrefixDefinition: _NS$o("PrefixDefinition"),

  /**
   * A [term definition](http://www.w3.org/TR/json-ld11/#dfn-term-definitions) is an entry in a [context](#Context), where the key defines a term which may be used within a dictionary as a key, type, or elsewhere that a string is interpreted as a vocabulary item. Its value is an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
   
   An [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definition) MUST be a map composed of zero or more keys from `@id`, `@reverse`, `@type`, `@language`, `@container`, `@context`, `@prefix`, `@propagate`, or `@protected`. An expanded term definition SHOULD NOT contain any other keys.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  TermDefinition: _NS$o("TermDefinition"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) has an `@base` key, its value MUST be an _IRI reference_, or `null`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  base: _NS$o("base"),

  /**
   * This profile IRI is used to request or specify compacted JSON-LD document form.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  compacted: _NS$o("compacted"),

  /**
   * The associated `@container` value in an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
   If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@container` keyword, its value MUST be either `@list`, `@set`, `@language`, `@index`, `@id`, `@graph`, `@type`, or be `null` or an array containing exactly any one of those keywords, or a combination of `@set` and any of `@index`, `@id`, `@graph`, `@type`, `@language` in any order.
   `@container` may also be an array containing `@graph` along with either `@id` or `@index` and also optionally including `@set`.
   If the value is `@language`, when the term is used outside of the `@context`, the associated value MUST be a language map.
   If the value is `@index`, when the term is used outside of the `@context`, the associated value MUST be an index map.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  container: _NS$o("container"),

  /**
   * As an IRI, this link relation is used to associate a JSON-LD context with a JSON document so that it can be interpreted as JSON-LD. In an HTTP request header, specifies the location of a context to use for compaction. As a Context, defines an inline `context definition`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  context: _NS$o("context"),

  /**
   * Term definition(s) associated with this context.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  definition: _NS$o("definition"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) has an `@direction` key, its value MUST be one of `"ltr"` or `"rtl"`, or be `null`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  direction: _NS$o("direction"),

  /**
   * This profile URI is used to request or specify expanded JSON-LD document form.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  expanded: _NS$o("expanded"),

  /**
   * This profile URI is used to request or specify flattened JSON-LD document form.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  flattened: _NS$o("flattened"),

  /**
   * As an IRI, this link relation is used to associate a JSON-LD frame with a JSON-LD document. In an HTTP request header, specifies the location of a frame to use for framing.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  frame: _NS$o("frame"),

  /**
   * This profile URI is used to request or specify framed JSON-LD document form.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  framed: _NS$o("framed"),

  /**
   * The `@id` mapping of a [term definition](#TermDefinition).
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  id: _NS$o("id"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@import` keyword, its value MUST be an _IRI reference_. When used as a reference from an `@import`, the referenced context definition MUST NOT include an `@import` key, itself.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  import: _NS$o("import"),

  /**
   * The [default language](https://www.w3.org/TR/json-ld11/#dfn-default-language) is set in the context using the `@language` key whose value MUST be a string representing a [BCP47](https://tools.ietf.org/html/bcp47) language code or null.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-default-language
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  language: _NS$o("language"),

  /**
   * If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@nest` keyword, its value MUST be either `@nest`, or a _term_ which expands to `@nest`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  nest: _NS$o("nest"),

  /**
   * With the value `true`, allows this term to be used to construct a compact IRI when compacting.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  prefix: _NS$o("prefix"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@propagate` keyword, its value MUST be `true` or `false`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  propagate: _NS$o("propagate"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@protected` keyword, its value MUST be `true` or `false`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  protected: _NS$o("protected"),

  /**
   * The `@reverse` mapping of an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  reverse: _NS$o("reverse"),

  /**
   * This profile URI is used to request or specify streaming JSON-LD document form.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11-streaming/#streaming-profile
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  streaming: _NS$o("streaming"),

  /**
   * The term associated with a [term definition](#TermDefinition).
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-term
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  term: _NS$o("term"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@type` keyword, its value MUST be a map with only the entry `@container` set to `@set`, and optionally an entry `@protected`.
   
   If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@type` keyword, its value MUST be an _IRI reference_, a _term_, `null`, or one of the keywords `@id`, `@json`, `@none`, or `@vocab`.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  type: _NS$o("type"),

  /**
   * The [processing mode](https://www.w3.org/TR/json-ld11/#dfn-processing-mode) defines how a JSON-LD document is processed. By default, all documents are assumed to be conformant with [JSON-LD 1.1`](http://www.w3.org/TR/json-ld11). By defining a different version via explicit API option, other processing modes can be accessed. This specification defines extensions for the `json-ld-1.1` processing mode.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-processing-mode
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  version: _NS$o("version"),

  /**
   * Used to expand properties and values in `@type` with a common prefix IRI.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#default-vocabulary
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  vocab: _NS$o("vocab")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.JSONLD = JSONLD;
var _NAMESPACE$n = "http://www.w3.org/ns/ldp#";

function _NS$n(localName) {
  return _NAMESPACE$n + localName;
}
/**
 * Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */


var LDP = {
  PREFIX: "ldp",
  NAMESPACE: _NAMESPACE$n,
  PREFIX_AND_NAMESPACE: {
    "ldp": "http://www.w3.org/ns/ldp#"
  },
  NS: _NS$n,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Resource: _NS$n("Resource"),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  RDFSource: _NS$n("RDFSource"),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  NonRDFSource: _NS$n("NonRDFSource"),

  /**
   * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Container: _NS$n("Container"),

  /**
   * An LDPC that uses a predefined predicate to simply link to its contained resources.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  BasicContainer: _NS$n("BasicContainer"),

  /**
   * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  DirectContainer: _NS$n("DirectContainer"),

  /**
   * An LDPC that has the flexibility of choosing what form the membership triples take.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  IndirectContainer: _NS$n("IndirectContainer"),

  /**
   * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Page: _NS$n("Page"),

  /**
   * Element in the list of sorting criteria used by the server to assign container members to pages.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  PageSortCriterion: _NS$n("PageSortCriterion"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  hasMemberRelation: _NS$n("hasMemberRelation"),

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  isMemberOfRelation: _NS$n("isMemberOfRelation"),

  /**
   * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  membershipResource: _NS$n("membershipResource"),

  /**
   * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  insertedContentRelation: _NS$n("insertedContentRelation"),

  /**
   * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  member: _NS$n("member"),

  /**
   * Links a container with resources created through the container.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  contains: _NS$n("contains"),

  /**
   * Links a resource with constraints that the server requires requests like creation and update to conform to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  constrainedBy: _NS$n("constrainedBy"),

  /**
   * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortCriteria: _NS$n("pageSortCriteria"),

  /**
   * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortPredicate: _NS$n("pageSortPredicate"),

  /**
   * The ascending/descending/etc order used to order the members across pages in a page sequence.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortOrder: _NS$n("pageSortOrder"),

  /**
   * The collation used to order the members across pages in a page sequence when comparing strings.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortCollation: _NS$n("pageSortCollation"),

  /**
   * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSequence: _NS$n("pageSequence"),

  /**
   * Links a resource to a container where notifications for the resource can be created and discovered.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: https://www.w3.org/TR/ldn/
   */
  inbox: _NS$n("inbox")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * The ODRL Vocabulary and Expression defines a set of concepts and terms (the vocabulary) and encoding mechanism (the expression) for permissions and obligations statements describing digital content usage based on the ODRL Information Model.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.LDP = LDP;
var _NAMESPACE$m = "http://www.w3.org/ns/odrl/2/";

function _NS$m(localName) {
  return _NAMESPACE$m + localName;
}
/**
 * The ODRL Vocabulary and Expression defines a set of concepts and terms (the vocabulary) and encoding mechanism (the expression) for permissions and obligations statements describing digital content usage based on the ODRL Information Model.
 */


var ODRL = {
  PREFIX: "odrl",
  NAMESPACE: _NAMESPACE$m,
  PREFIX_AND_NAMESPACE: {
    "odrl": "http://www.w3.org/ns/odrl/2/"
  },
  NS: _NS$m,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A non-empty group of Permissions and/or Prohibitions.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Policy: _NS$m("Policy"),

  /**
   * An unambiguous identifier
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  uid: _NS$m("uid"),

  /**
   * The identifier(s) of an ODRL Profile that the Policy conforms to.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  profile: _NS$m("profile"),

  /**
   * Relates a (child) policy to another (parent) policy from which terms are inherited.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inheritFrom: _NS$m("inheritFrom"),

  /**
   * An abstract concept that represents the common characteristics of Permissions, Prohibitions, and Duties.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Rule: _NS$m("Rule"),

  /**
   * Relation is an abstract property which creates an explicit link between an Action and an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relation: _NS$m("relation"),

  /**
   * Function is an abstract property whose sub-properties define the functional roles which may be fulfilled by a party in relation to a Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  function: _NS$m("function"),

  /**
   * Failure is an abstract property that defines the violation (or unmet) relationship between Rules.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  failure: _NS$m("failure"),

  /**
   * A resource or a collection of resources that are the subject of a Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Asset: _NS$m("Asset"),

  /**
   * An entity or a collection of entities that undertake Roles in a Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Party: _NS$m("Party"),

  /**
   * Used to establish strategies to resolve conflicts that arise from the merging of Policies or conflicts between Permissions and Prohibitions in the same Policy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  ConflictTerm: _NS$m("ConflictTerm"),

  /**
   * The conflict-resolution strategy for a Policy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  conflict: _NS$m("conflict"),

  /**
   * Permissions take preference over prohibitions.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  perm: _NS$m("perm"),

  /**
   * Prohibitions take preference over permissions.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  prohibit: _NS$m("prohibit"),

  /**
   * The policy is void.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  invalid: _NS$m("invalid"),

  /**
   * A Policy that grants the assignee a Rule over an Asset from an assigner.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Agreement: _NS$m("Agreement"),

  /**
   * A Policy that proposes a Rule over an Asset from an assigner.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Offer: _NS$m("Offer"),

  /**
   * A Policy that expresses a Rule over an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Set: _NS$m("Set"),

  /**
   * A Policy that asserts a Rule over an Asset from parties.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Assertion: _NS$m("Assertion"),

  /**
   * A Policy that expresses a Rule over an Asset containing personal information.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Privacy: _NS$m("Privacy"),

  /**
   * A Policy that proposes a Rule over an Asset from an assignee.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Request: _NS$m("Request"),

  /**
   * A Policy that grants the holder a Rule over an Asset from an assigner.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Ticket: _NS$m("Ticket"),

  /**
   * An Asset that is collection of individual resources
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AssetCollection: _NS$m("AssetCollection"),

  /**
   * The target property indicates the Asset that is the primary subject to which the Rule action directly applies.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  target: _NS$m("target"),

  /**
   * Identifies an ODRL Policy for which the identified Asset is the target Asset to all the Rules.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  hasPolicy: _NS$m("hasPolicy"),

  /**
   * The output property specifies the Asset which is created from the output of the Action.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  output: _NS$m("output"),

  /**
   * A Party that is a group of individual entities
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  PartyCollection: _NS$m("PartyCollection"),

  /**
   * The Party is the recipient of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assignee: _NS$m("assignee"),

  /**
   * The Party is the issuer of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assigner: _NS$m("assigner"),

  /**
   * Identifies an ODRL Policy for which the identified Party undertakes the assignee functional role.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assigneeOf: _NS$m("assigneeOf"),

  /**
   * Identifies an ODRL Policy for which the identified Party undertakes the assigner functional role.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assignerOf: _NS$m("assignerOf"),

  /**
   * The Party to be attributed.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attributedParty: _NS$m("attributedParty"),

  /**
   * The Party who undertakes the attribution.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attributingParty: _NS$m("attributingParty"),

  /**
   * The Party is the recipient of the compensation.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  compensatedParty: _NS$m("compensatedParty"),

  /**
   * The Party that is the provider of the compensation.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  compensatingParty: _NS$m("compensatingParty"),

  /**
   * The Party to obtain consent from.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  consentingParty: _NS$m("consentingParty"),

  /**
   * The Party who obtains the consent.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  consentedParty: _NS$m("consentedParty"),

  /**
   * The Party who is offering the contract.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  contractingParty: _NS$m("contractingParty"),

  /**
   * The Party who is being contracted.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  contractedParty: _NS$m("contractedParty"),

  /**
   * The Party to be informed of all uses.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  informedParty: _NS$m("informedParty"),

  /**
   * The Party who provides the inform use data.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  informingParty: _NS$m("informingParty"),

  /**
   * The Party who is tracking usage.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  trackingParty: _NS$m("trackingParty"),

  /**
   * The Party whose usage is being tracked.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  trackedParty: _NS$m("trackedParty"),

  /**
   * Identifies an Asset/PartyCollection that the Asset/Party is a member of.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  partOf: _NS$m("partOf"),

  /**
   * Reference to a Asset/PartyCollection
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  source: _NS$m("source"),

  /**
   * An operation on an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Action: _NS$m("Action"),

  /**
   * The operation relating to the Asset for which the Rule is being subjected.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  action: _NS$m("action"),

  /**
   * An Action transitively asserts that another Action that encompasses its operational semantics.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  includedIn: _NS$m("includedIn"),

  /**
   * An Action asserts that another Action is not prohibited to enable its operational semantics.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  implies: _NS$m("implies"),

  /**
   * The ability to perform an Action over an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Permission: _NS$m("Permission"),

  /**
   * Relates an individual Permission to a Policy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  permission: _NS$m("permission"),

  /**
   * The inability to perform an Action over an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Prohibition: _NS$m("Prohibition"),

  /**
   * The obligation to perform an Action
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Duty: _NS$m("Duty"),

  /**
   * Relates an individual Prohibition to a Policy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  prohibition: _NS$m("prohibition"),

  /**
   * To use the Asset
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  use: _NS$m("use"),

  /**
   * To transfer the ownership of the Asset in perpetuity.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  transfer: _NS$m("transfer"),

  /**
   * To accept that the use of the Asset may be tracked.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  acceptTracking: _NS$m("acceptTracking"),

  /**
   * To use the Asset or parts of it as part of a composite collection.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  aggregate: _NS$m("aggregate"),

  /**
   * To add explanatory notations/commentaries to the Asset without modifying the Asset in any other way.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  annotate: _NS$m("annotate"),

  /**
   * To anonymize all or parts of the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  anonymize: _NS$m("anonymize"),

  /**
   * To store the Asset (in a non-transient form).
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  archive: _NS$m("archive"),

  /**
   * To attribute the use of the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attribute: _NS$m("attribute"),

  /**
   * To compensate by transfer of some amount of value, if defined, for using or selling the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  compensate: _NS$m("compensate"),

  /**
   * To create multiple copies of the Asset that are being concurrently used.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  concurrentUse: _NS$m("concurrentUse"),

  /**
   * To permanently remove all copies of the Asset after it has been used.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  delete: _NS$m("delete"),

  /**
   * To create a new derivative Asset from this Asset and to edit or modify the derivative.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  derive: _NS$m("derive"),

  /**
   * To produce a digital copy of (or otherwise digitize) the Asset from its analogue form.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  digitize: _NS$m("digitize"),

  /**
   * To create a static and transient rendition of an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  display: _NS$m("display"),

  /**
   * To supply the Asset to third-parties.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  distribute: _NS$m("distribute"),

  /**
   * To ensure that the Rule on the Asset is exclusive.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  ensureExclusivity: _NS$m("ensureExclusivity"),

  /**
   * To run the computer program Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  execute: _NS$m("execute"),

  /**
   * To extract parts of the Asset and to use it as a new Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extract: _NS$m("extract"),

  /**
   * To transfer the ownership of the Asset to a third party without compensation and while deleting the original asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  give: _NS$m("give"),

  /**
   * To grant the use of the Asset to third parties.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  grantUse: _NS$m("grantUse"),

  /**
   * To include other related assets in the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  include: _NS$m("include"),

  /**
   * To record the Asset in an index.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  index: _NS$m("index"),

  /**
   * To inform that an action has been performed on or in relation to the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inform: _NS$m("inform"),

  /**
   * To load the computer program Asset onto a storage device which allows operating or running the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  install: _NS$m("install"),

  /**
   * To change existing content of the Asset. A new asset is not created by this action.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  modify: _NS$m("modify"),

  /**
   * To move the Asset from one digital location to another including deleting the original copy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  move: _NS$m("move"),

  /**
   * To grant the specified Policy to a third party for their use of the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  nextPolicy: _NS$m("nextPolicy"),

  /**
   * To obtain verifiable consent to perform the requested action in relation to the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  obtainConsent: _NS$m("obtainConsent"),

  /**
   * To create a sequential and transient rendition of an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  play: _NS$m("play"),

  /**
   * To publicly perform the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  present: _NS$m("present"),

  /**
   * To create a tangible and permanent rendition of an Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  print: _NS$m("print"),

  /**
   * To obtain data from the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  read: _NS$m("read"),

  /**
   * To make duplicate copies the Asset in any material form.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  reproduce: _NS$m("reproduce"),

  /**
   * To review the Policy applicable to the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  reviewPolicy: _NS$m("reviewPolicy"),

  /**
   * To transfer the ownership of the Asset to a third party with compensation and while deleting the original asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  sell: _NS$m("sell"),

  /**
   * To deliver the Asset in real-time.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  stream: _NS$m("stream"),

  /**
   * To use the Asset in timed relations with media (audio/visual) elements of another Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  synchronize: _NS$m("synchronize"),

  /**
   * To have a text Asset read out loud.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  textToSpeech: _NS$m("textToSpeech"),

  /**
   * To convert the Asset into a different format.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  transform: _NS$m("transform"),

  /**
   * To translate the original natural language of an Asset into another natural language.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  translate: _NS$m("translate"),

  /**
   * To unload and delete the computer program Asset from a storage device and disable its readiness for operation.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  uninstall: _NS$m("uninstall"),

  /**
   * To apply a watermark to the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  watermark: _NS$m("watermark"),

  /**
   * Relates an individual Duty to a Policy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  obligation: _NS$m("obligation"),

  /**
   * Relates an individual Duty to a Permission.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  duty: _NS$m("duty"),

  /**
   * Relates a Duty to another Duty, the latter being a consequence of not fulfilling the former.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  consequence: _NS$m("consequence"),

  /**
   * Relates an individual remedy Duty to a Prohibition.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  remedy: _NS$m("remedy"),

  /**
   * A boolean expression that refines the semantics of an Action and Party/Asset Collection or declare the conditions applicable to a Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Constraint: _NS$m("Constraint"),

  /**
   * Constraint applied to a Rule
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  constraint: _NS$m("constraint"),

  /**
   * Constraint used to refine the semantics of an Action, or Party/Asset Collection
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  refinement: _NS$m("refinement"),

  /**
   * Operator for constraint expression.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Operator: _NS$m("Operator"),

  /**
   * The operator function applied to operands of a Constraint
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  operator: _NS$m("operator"),

  /**
   * Right operand for constraint expression.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  RightOperand: _NS$m("RightOperand"),

  /**
   * The value of the right operand in a constraint expression.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  rightOperand: _NS$m("rightOperand"),

  /**
   * A reference to a web resource providing the value for the right operand of a Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  rightOperandReference: _NS$m("rightOperandReference"),

  /**
   * Left operand for a constraint expression.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  LeftOperand: _NS$m("LeftOperand"),

  /**
   * The left operand in a constraint expression.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  leftOperand: _NS$m("leftOperand"),

  /**
   * The datatype of the value of the rightOperand or rightOperandReference of a Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  dataType: _NS$m("dataType"),

  /**
   * the value generated from the leftOperand action or a value related to the leftOperand set as the reference for the comparison.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  status: _NS$m("status"),

  /**
   * A logical expression that refines the semantics of an Action and Party/Asset Collection or declare the conditions applicable to a Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  LogicalConstraint: _NS$m("LogicalConstraint"),

  /**
   * Operand is an abstract property for a logical relationship.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  operand: _NS$m("operand"),

  /**
   * A point in space or time defined with absolute coordinates for the positioning of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absolutePosition: _NS$m("absolutePosition"),

  /**
   * The absolute spatial positions of four corners of a rectangle on a 2D-canvas or the eight corners of a cuboid in a 3D-space for the target Asset to fit.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absoluteSpatialPosition: _NS$m("absoluteSpatialPosition"),

  /**
   * The absolute temporal positions in a media stream the target Asset has to fit.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absoluteTemporalPosition: _NS$m("absoluteTemporalPosition"),

  /**
   * Measure(s) of one or two axes for 2D-objects or measure(s) of one to tree axes for 3D-objects of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absoluteSize: _NS$m("absoluteSize"),

  /**
   * Numeric count of executions of the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  count: _NS$m("count"),

  /**
   * The date (and optional time and timezone) of exercising the action of the Rule. Right operand value MUST be an xsd:date or xsd:dateTime as defined by [[xmlschema11-2]].
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  dateTime: _NS$m("dateTime"),

  /**
   * A time delay period prior to exercising the action of the Rule. The point in time triggering this period MAY be defined by another temporal Constraint combined by a Logical Constraint (utilising the odrl:andSequence operand). Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  delayPeriod: _NS$m("delayPeriod"),

  /**
   * The delivery channel used for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  deliveryChannel: _NS$m("deliveryChannel"),

  /**
   * A continuous elapsed time period which may be used for exercising of the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  elapsedTime: _NS$m("elapsedTime"),

  /**
   * An identified event setting a context for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  event: _NS$m("event"),

  /**
   * A transformed file format of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  fileFormat: _NS$m("fileFormat"),

  /**
   * A defined industry sector setting a context for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  industry: _NS$m("industry"),

  /**
   * A natural language used by the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  language: _NS$m("language"),

  /**
   * Category of a media asset setting a context for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  media: _NS$m("media"),

  /**
   * An accumulated amount of one to many metered time periods which were used for exercising the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  meteredTime: _NS$m("meteredTime"),

  /**
   * The amount of a financial payment. Right operand value MUST be an xsd:decimal.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  payAmount: _NS$m("payAmount"),

  /**
   * A percentage amount of the target Asset relevant for exercising the action of the Rule. Right operand value MUST be an xsd:decimal from 0 to 100.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  percentage: _NS$m("percentage"),

  /**
   * Category of product or service setting a context for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  product: _NS$m("product"),

  /**
   * A defined purpose for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  purpose: _NS$m("purpose"),

  /**
   * The party receiving the result/outcome of exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  recipient: _NS$m("recipient"),

  /**
   * A point in space or time defined with coordinates relative to full measures the positioning of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativePosition: _NS$m("relativePosition"),

  /**
   * The relative spatial positions - expressed as percentages of full values - of four corners of a rectangle on a 2D-canvas or the eight corners of a cuboid in a 3D-space of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativeSpatialPosition: _NS$m("relativeSpatialPosition"),

  /**
   * A point in space or time defined with coordinates relative to full measures the positioning of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativeTemporalPosition: _NS$m("relativeTemporalPosition"),

  /**
   * Measure(s) of one or two axes for 2D-objects or measure(s) of one to tree axes for 3D-objects - expressed as percentages of full values - of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativeSize: _NS$m("relativeSize"),

  /**
   * Resolution of the rendition of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  resolution: _NS$m("resolution"),

  /**
   * A named and identified geospatial area with defined borders which is used for exercising the action of the Rule. An IRI MUST be used to represent this value.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  spatial: _NS$m("spatial"),

  /**
   * A set of coordinates setting the borders of a geospatial area used for exercising the action of the Rule. The coordinates MUST include longitude and latitude, they MAY include altitude and the geodetic datum.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  spatialCoordinates: _NS$m("spatialCoordinates"),

  /**
   * An identified computing system or computing device used for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  systemDevice: _NS$m("systemDevice"),

  /**
   * A recurring period of time before the next execution of the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  timeInterval: _NS$m("timeInterval"),

  /**
   * The unit of measure used for counting the executions of the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  unitOfCount: _NS$m("unitOfCount"),

  /**
   * The version of the target Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  version: _NS$m("version"),

  /**
   * An identified location of the IT communication space which is relevant for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  virtualLocation: _NS$m("virtualLocation"),

  /**
   * An identified device used for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  device: _NS$m("device"),

  /**
   * An identified computing system used for exercising the action of the Rule.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  system: _NS$m("system"),

  /**
   * The relation is satisfied when at least one of the Constraints is satisfied.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  or: _NS$m("or"),

  /**
   * The relation is satisfied when only one, and not more, of the Constaints is satisfied
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  xone: _NS$m("xone"),

  /**
   * The relation is satisfied when all of the Constraints are satisfied.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  and: _NS$m("and"),

  /**
   * The relation is satisfied when each of the Constraints are satisfied in the order specified.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  andSequence: _NS$m("andSequence"),

  /**
   * Indicating that a given value equals the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  eq: _NS$m("eq"),

  /**
   * Indicating that a given value is greater than the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  gt: _NS$m("gt"),

  /**
   * Indicating that a given value is greater than or equal to the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  gteq: _NS$m("gteq"),

  /**
   * Indicating that a given value is less than the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lt: _NS$m("lt"),

  /**
   * Indicating that a given value is less than or equal to the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lteq: _NS$m("lteq"),

  /**
   * Indicating that a given value is not equal to the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  neq: _NS$m("neq"),

  /**
   * A set-based operator indicating that a given value is an instance of the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isA: _NS$m("isA"),

  /**
   * A set-based operator indicating that a given value contains the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  hasPart: _NS$m("hasPart"),

  /**
   * A set-based operator indicating that a given value is contained by the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isPartOf: _NS$m("isPartOf"),

  /**
   * A set-based operator indicating that a given value is all of the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isAllOf: _NS$m("isAllOf"),

  /**
   * A set-based operator indicating that a given value is any of the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isAnyOf: _NS$m("isAnyOf"),

  /**
   * A set-based operator indicating that a given value is none of the right operand of the Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isNoneOf: _NS$m("isNoneOf"),

  /**
   * Indicates the actual datetime the action of the Rule was exercised.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  policyUsage: _NS$m("policyUsage"),

  /**
   * An value indicating the closeness or nearness.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  proximity: _NS$m("proximity"),

  /**
   * The act of adding to the end of an asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  append: _NS$m("append"),

  /**
   * The act of appending data to the Asset without modifying the Asset in any other way.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  appendTo: _NS$m("appendTo"),

  /**
   * The act of making an exact reproduction of the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  copy: _NS$m("copy"),

  /**
   * The act of transforming the asset into a new form.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  export: _NS$m("export"),

  /**
   * The act of making available the asset to a third-party for a fixed period of time with exchange of value.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lease: _NS$m("lease"),

  /**
   * The act of granting the right to use the asset to a third-party.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  license: _NS$m("license"),

  /**
   * The act of making available the asset to a third-party for a fixed period of time without exchange of value.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lend: _NS$m("lend"),

  /**
   * The act of paying a financial amount to a party for use of the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  pay: _NS$m("pay"),

  /**
   * The Party is the recipient of the payment.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  payeeParty: _NS$m("payeeParty"),

  /**
   * The act of providing a short preview of the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  preview: _NS$m("preview"),

  /**
   * The act of using the asset for a purpose other than the purpose it was intended for.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  secondaryUse: _NS$m("secondaryUse"),

  /**
   * The act of writing to the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  write: _NS$m("write"),

  /**
   * The act of adding data to the Asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  writeTo: _NS$m("writeTo"),

  /**
   * The act of sharing the asset to parties in close proximity to the owner.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  adHocShare: _NS$m("adHocShare"),

  /**
   * The act of extracting (replicating) unchanged characters from the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extractChar: _NS$m("extractChar"),

  /**
   * The act of extracting (replicating) unchanged pages from the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extractPage: _NS$m("extractPage"),

  /**
   * The act of extracting (replicating) unchanged words from the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extractWord: _NS$m("extractWord"),

  /**
   * The number of seconds after which timed metering use of the asset begins.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  timedCount: _NS$m("timedCount"),

  /**
   * Indentifies the type of inheritance.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inheritRelation: _NS$m("inheritRelation"),

  /**
   * Indicates if the Policy entity can be inherited.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inheritAllowed: _NS$m("inheritAllowed"),

  /**
   * Is used to indicate how to support Actions that are not part of any vocabulary or profile in the policy expression system.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  UndefinedTerm: _NS$m("UndefinedTerm"),

  /**
   * Relates the strategy used for handling undefined actions to a Policy.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  undefined: _NS$m("undefined"),

  /**
   * The Action is to be ignored and is not part of the policy – and the policy remains valid.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  ignore: _NS$m("ignore"),

  /**
   * The Action is to be supported as part of the policy – and the policy remains valid.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  support: _NS$m("support"),

  /**
   * Scopes for Asset Scope expressions.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AssetScope: _NS$m("AssetScope"),

  /**
   * Scopes for Party Scope expressions.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  PartyScope: _NS$m("PartyScope"),

  /**
   * The identifier of a scope that provides context to the extent of the entity.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  scope: _NS$m("scope"),

  /**
   * Specifies that the scope of the relationship is the defined group with multiple individual members.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Group: _NS$m("Group"),

  /**
   * Specifies that the scope of the relationship is the single Party individual.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Individual: _NS$m("Individual"),

  /**
   * Specifies that the scope of the relationship is all of the collective individuals within a context.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  All: _NS$m("All"),

  /**
   * Specifies that the scope of the relationship is all of the first-level connections of the Party.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AllConnections: _NS$m("AllConnections"),

  /**
   * Specifies that the scope of the relationship is all of the second-level connections to the Party.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  All2ndConnections: _NS$m("All2ndConnections"),

  /**
   * Specifies that the scope of the relationship is all of the group connections of the Party.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AllGroups: _NS$m("AllGroups"),

  /**
   * The act of keeping the policy notice with the asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attachPolicy: _NS$m("attachPolicy"),

  /**
   * The act of attaching the source of the asset and its derivatives.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attachSource: _NS$m("attachSource"),

  /**
   * The act of distributing any derivative asset under the same terms as the original asset.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  shareAlike: _NS$m("shareAlike"),

  /**
   * The act of using the asset in a business environment.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  commercialize: _NS$m("commercialize"),

  /**
   * The act of the non-commercial reproduction and distribution of the asset to third-parties.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  share: _NS$m("share"),

  /**
   * Identifier for the ODRL Core Profile
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  core: _NS$m("core"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The unit of measurement of the value of the rightOperand or rightOperandReference of a Constraint.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  unit: _NS$m("unit")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - OLO (Ordered List Ontology) - for describing ordered lists
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.ODRL = ODRL;
var _NAMESPACE$l = "http://purl.org/ontology/olo/core#";

function _NS$l(localName) {
  return _NAMESPACE$l + localName;
}
/**
 * [Generator provided] - OLO (Ordered List Ontology) - for describing ordered lists
 */


var OLO = {
  PREFIX: "olo",
  NAMESPACE: _NAMESPACE$l,
  PREFIX_AND_NAMESPACE: {
    "olo": "http://purl.org/ontology/olo/core#"
  },
  NS: _NS$l,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An ordered list with a given length an indexed items.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  OrderedList: _NS$l("OrderedList"),

  /**
   * A slot in an ordered list with a fixed index.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  Slot: _NS$l("Slot"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The length of an ordered list.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  length: _NS$l("length"),

  /**
   * Associates the next slot in an ordered list.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  next: _NS$l("next"),

  /**
   * An index of a slot in an ordered list.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  index: _NS$l("index"),

  /**
   * An ordered list of an slot.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  ordered_list: _NS$l("ordered_list"),

  /**
   * Associates the previous slot in an ordered list
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  previous: _NS$l("previous"),

  /**
   * A slot in an ordered list.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  slot: _NS$l("slot"),

  /**
   * An item of a slot in an ordered list.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  item: _NS$l("item")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 *
  This ontology partially describes the built-in classes and
  properties that together form the basis of the RDF/XML syntax of OWL 2.
  The content of this ontology is based on Tables 6.1 and 6.2
  in Section 6.4 of the OWL 2 RDF-Based Semantics specification,
  available at http://www.w3.org/TR/owl2-rdf-based-semantics/.
  Please note that those tables do not include the different annotations
  (labels, comments and rdfs:isDefinedBy links) used in this file.
  Also note that the descriptions provided in this ontology do not
  provide a complete and correct formal description of either the syntax
  or the semantics of the introduced terms (please see the OWL 2
  recommendations for the complete and normative specifications).
  Furthermore, the information provided by this ontology may be
  misleading if not used with care. This ontology SHOULD NOT be imported
  into OWL ontologies. Importing this file into an OWL 2 DL ontology
  will cause it to become an OWL 2 Full ontology and may have other,
  unexpected, consequences.
   
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.OLO = OLO;
var _NAMESPACE$k = "http://www.w3.org/2002/07/owl#";

function _NS$k(localName) {
  return _NAMESPACE$k + localName;
}
/**
 *
  This ontology partially describes the built-in classes and
  properties that together form the basis of the RDF/XML syntax of OWL 2.
  The content of this ontology is based on Tables 6.1 and 6.2
  in Section 6.4 of the OWL 2 RDF-Based Semantics specification,
  available at http://www.w3.org/TR/owl2-rdf-based-semantics/.
  Please note that those tables do not include the different annotations
  (labels, comments and rdfs:isDefinedBy links) used in this file.
  Also note that the descriptions provided in this ontology do not
  provide a complete and correct formal description of either the syntax
  or the semantics of the introduced terms (please see the OWL 2
  recommendations for the complete and normative specifications).
  Furthermore, the information provided by this ontology may be
  misleading if not used with care. This ontology SHOULD NOT be imported
  into OWL ontologies. Importing this file into an OWL 2 DL ontology
  will cause it to become an OWL 2 Full ontology and may have other,
  unexpected, consequences.
   
 */


var OWL = {
  PREFIX: "owl",
  NAMESPACE: _NAMESPACE$k,
  PREFIX_AND_NAMESPACE: {
    "owl": "http://www.w3.org/2002/07/owl#"
  },
  NS: _NS$k,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of ontologies.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Ontology: _NS$k("Ontology"),

  /**
   * The class of ontology properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  OntologyProperty: _NS$k("OntologyProperty"),

  /**
   * The class of annotation properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AnnotationProperty: _NS$k("AnnotationProperty"),

  /**
   * The class of collections of pairwise different individuals.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AllDifferent: _NS$k("AllDifferent"),

  /**
   * The class of collections of pairwise disjoint classes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AllDisjointClasses: _NS$k("AllDisjointClasses"),

  /**
   * The class of collections of pairwise disjoint properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AllDisjointProperties: _NS$k("AllDisjointProperties"),

  /**
   * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Annotation: _NS$k("Annotation"),

  /**
   * The class of asymmetric properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AsymmetricProperty: _NS$k("AsymmetricProperty"),

  /**
   * The class of object properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  ObjectProperty: _NS$k("ObjectProperty"),

  /**
   * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Axiom: _NS$k("Axiom"),

  /**
   * The class of OWL classes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Class: _NS$k("Class"),

  /**
   * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DataRange: _NS$k("DataRange"),

  /**
   * The class of data properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DatatypeProperty: _NS$k("DatatypeProperty"),

  /**
   * The class of deprecated classes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DeprecatedClass: _NS$k("DeprecatedClass"),

  /**
   * The class of deprecated properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DeprecatedProperty: _NS$k("DeprecatedProperty"),

  /**
   * The class of functional properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  FunctionalProperty: _NS$k("FunctionalProperty"),

  /**
   * The class of inverse-functional properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  InverseFunctionalProperty: _NS$k("InverseFunctionalProperty"),

  /**
   * The class of irreflexive properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  IrreflexiveProperty: _NS$k("IrreflexiveProperty"),

  /**
   * The class of named individuals.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  NamedIndividual: _NS$k("NamedIndividual"),

  /**
   * The class of OWL individuals.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Thing: _NS$k("Thing"),

  /**
   * The class of negative property assertions.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  NegativePropertyAssertion: _NS$k("NegativePropertyAssertion"),

  /**
   * This is the empty class.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Nothing: _NS$k("Nothing"),

  /**
   * The class of reflexive properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  ReflexiveProperty: _NS$k("ReflexiveProperty"),

  /**
   * The class of property restrictions.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Restriction: _NS$k("Restriction"),

  /**
   * The class of symmetric properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  SymmetricProperty: _NS$k("SymmetricProperty"),

  /**
   * The class of transitive properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  TransitiveProperty: _NS$k("TransitiveProperty"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The annotation property that provides version information for an ontology or another OWL construct.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  versionInfo: _NS$k("versionInfo"),

  /**
   * The property that determines the class that a universal property restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  allValuesFrom: _NS$k("allValuesFrom"),

  /**
   * The property that determines the predicate of an annotated axiom or annotated annotation.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  annotatedProperty: _NS$k("annotatedProperty"),

  /**
   * The property that determines the subject of an annotated axiom or annotated annotation.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  annotatedSource: _NS$k("annotatedSource"),

  /**
   * The property that determines the object of an annotated axiom or annotated annotation.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  annotatedTarget: _NS$k("annotatedTarget"),

  /**
   * The property that determines the predicate of a negative property assertion.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  assertionProperty: _NS$k("assertionProperty"),

  /**
   * The annotation property that indicates that a given ontology is backward compatible with another ontology.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  backwardCompatibleWith: _NS$k("backwardCompatibleWith"),

  /**
   * The data property that does not relate any individual to any data value.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  bottomDataProperty: _NS$k("bottomDataProperty"),

  /**
   * The object property that does not relate any two individuals.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  bottomObjectProperty: _NS$k("bottomObjectProperty"),

  /**
   * The property that determines the cardinality of an exact cardinality restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  cardinality: _NS$k("cardinality"),

  /**
   * The property that determines that a given class is the complement of another class.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  complementOf: _NS$k("complementOf"),

  /**
   * The property that determines that a given data range is the complement of another data range with respect to the data domain.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  datatypeComplementOf: _NS$k("datatypeComplementOf"),

  /**
   * The annotation property that indicates that a given entity has been deprecated.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  deprecated: _NS$k("deprecated"),

  /**
   * The property that determines that two given individuals are different.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  differentFrom: _NS$k("differentFrom"),

  /**
   * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  disjointUnionOf: _NS$k("disjointUnionOf"),

  /**
   * The property that determines that two given classes are disjoint.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  disjointWith: _NS$k("disjointWith"),

  /**
   * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  distinctMembers: _NS$k("distinctMembers"),

  /**
   * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  equivalentClass: _NS$k("equivalentClass"),

  /**
   * The property that determines that two given properties are equivalent.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  equivalentProperty: _NS$k("equivalentProperty"),

  /**
   * The property that determines the collection of properties that jointly build a key.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  hasKey: _NS$k("hasKey"),

  /**
   * The property that determines the property that a self restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  hasSelf: _NS$k("hasSelf"),

  /**
   * The property that determines the individual that a has-value restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  hasValue: _NS$k("hasValue"),

  /**
   * The annotation property that indicates that a given ontology is incompatible with another ontology.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  incompatibleWith: _NS$k("incompatibleWith"),

  /**
   * The property that determines the collection of classes or data ranges that build an intersection.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  intersectionOf: _NS$k("intersectionOf"),

  /**
   * The property that determines that two given properties are inverse.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  inverseOf: _NS$k("inverseOf"),

  /**
   * The property that determines the cardinality of a maximum cardinality restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  maxCardinality: _NS$k("maxCardinality"),

  /**
   * The property that determines the cardinality of a maximum qualified cardinality restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  maxQualifiedCardinality: _NS$k("maxQualifiedCardinality"),

  /**
   * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  members: _NS$k("members"),

  /**
   * The property that determines the cardinality of a minimum cardinality restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  minCardinality: _NS$k("minCardinality"),

  /**
   * The property that determines the cardinality of a minimum qualified cardinality restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  minQualifiedCardinality: _NS$k("minQualifiedCardinality"),

  /**
   * The property that determines the class that a qualified object cardinality restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onClass: _NS$k("onClass"),

  /**
   * The property that determines the data range that a qualified data cardinality restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onDataRange: _NS$k("onDataRange"),

  /**
   * The property that determines the datatype that a datatype restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onDatatype: _NS$k("onDatatype"),

  /**
   * The property that determines the collection of individuals or data values that build an enumeration.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  oneOf: _NS$k("oneOf"),

  /**
   * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onProperties: _NS$k("onProperties"),

  /**
   * The property that determines the property that a property restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onProperty: _NS$k("onProperty"),

  /**
   * The annotation property that indicates the predecessor ontology of a given ontology.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  priorVersion: _NS$k("priorVersion"),

  /**
   * The property that determines the n-tuple of properties that build a sub property chain of a given property.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  propertyChainAxiom: _NS$k("propertyChainAxiom"),

  /**
   * The property that determines that two given properties are disjoint.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  propertyDisjointWith: _NS$k("propertyDisjointWith"),

  /**
   * The property that determines the cardinality of an exact qualified cardinality restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  qualifiedCardinality: _NS$k("qualifiedCardinality"),

  /**
   * The property that determines that two given individuals are equal.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  sameAs: _NS$k("sameAs"),

  /**
   * The property that determines the class that an existential property restriction refers to.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  someValuesFrom: _NS$k("someValuesFrom"),

  /**
   * The property that determines the subject of a negative property assertion.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  sourceIndividual: _NS$k("sourceIndividual"),

  /**
   * The property that determines the object of a negative object property assertion.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  targetIndividual: _NS$k("targetIndividual"),

  /**
   * The property that determines the value of a negative data property assertion.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  targetValue: _NS$k("targetValue"),

  /**
   * The data property that relates every individual to every data value.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  topDataProperty: _NS$k("topDataProperty"),

  /**
   * The object property that relates every two individuals.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  topObjectProperty: _NS$k("topObjectProperty"),

  /**
   * The property that determines the collection of classes or data ranges that build a union.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  unionOf: _NS$k("unionOf"),

  /**
   * The property that determines the collection of facet-value pairs that define a datatype restriction.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  withRestrictions: _NS$k("withRestrictions")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for the basic POSIX terms.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.OWL = OWL;
var _NAMESPACE$j = "http://www.w3.org/ns/posix/stat#";

function _NS$j(localName) {
  return _NAMESPACE$j + localName;
}
/**
 * A vocabulary for the basic POSIX terms.
 */


var POSIX = {
  PREFIX: "posix",
  NAMESPACE: _NAMESPACE$j,
  PREFIX_AND_NAMESPACE: {
    "posix": "http://www.w3.org/ns/posix/stat#"
  },
  NS: _NS$j,
  // *******************
  // All the Properties.
  // *******************

  /**
   * Time of last access
   *
   * This term provides descriptions only in English.
   */
  atime: _NS$j("atime"),

  /**
   * Blocksize for file system I/O
   *
   * This term provides descriptions only in English.
   */
  blksize: _NS$j("blksize"),

  /**
   * Number of 512B blocks allocated
   *
   * This term provides descriptions only in English.
   */
  blocks: _NS$j("blocks"),

  /**
   * Time of last status change
   *
   * This term provides descriptions only in English.
   */
  ctime: _NS$j("ctime"),

  /**
   * ID of device containing file
   *
   * This term provides descriptions only in English.
   */
  dev: _NS$j("dev"),

  /**
   * Group ID of owner
   *
   * This term provides descriptions only in English.
   */
  gid: _NS$j("gid"),

  /**
   * inode number
   *
   * This term provides descriptions only in English.
   */
  ino: _NS$j("ino"),

  /**
   * Protection
   *
   * This term provides descriptions only in English.
   */
  mode: _NS$j("mode"),

  /**
   * Time of last modification
   *
   * This term provides descriptions only in English.
   */
  mtime: _NS$j("mtime"),

  /**
   * Number of hard links
   *
   * This term provides descriptions only in English.
   */
  nlink: _NS$j("nlink"),

  /**
   * Device ID (if special file)
   *
   * This term provides descriptions only in English.
   */
  rdev: _NS$j("rdev"),

  /**
   * Total size, in bytes
   *
   * This term provides descriptions only in English.
   */
  size: _NS$j("size"),

  /**
   * User ID of owner
   *
   * This term provides descriptions only in English.
   */
  uid: _NS$j("uid")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This document is published by the Provenance Working Group (http://www.w3.org/2011/prov/wiki/Main_Page).

If you wish to make comments regarding this document, please send them to public-prov-comments@w3.org (subscribe public-prov-comments-request@w3.org, archives http://lists.w3.org/Archives/Public/public-prov-comments/). All feedback is welcome.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.POSIX = POSIX;
var _NAMESPACE$i = "http://www.w3.org/ns/prov#";

function _NS$i(localName) {
  return _NAMESPACE$i + localName;
}
/**
 * This document is published by the Provenance Working Group (http://www.w3.org/2011/prov/wiki/Main_Page).

If you wish to make comments regarding this document, please send them to public-prov-comments@w3.org (subscribe public-prov-comments-request@w3.org, archives http://lists.w3.org/Archives/Public/public-prov-comments/). All feedback is welcome.
 */


var PROV_O = {
  PREFIX: "prov-o",
  NAMESPACE: _NAMESPACE$i,
  PREFIX_AND_NAMESPACE: {
    "prov-o": "http://www.w3.org/ns/prov#"
  },
  NS: _NS$i,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Entity
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Entity: _NS$i("Entity"),

  /**
   * An instance of prov:Revision provides additional descriptions about the binary prov:wasRevisionOf relation from some newer prov:Entity to an earlier prov:Entity. For example, :draft_2 prov:wasRevisionOf :draft_1; prov:qualifiedRevision [ a prov:Revision; prov:entity :draft_1; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Revision: _NS$i("Revision"),

  /**
   * Activity
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Activity: _NS$i("Activity"),

  /**
   * An instantaneous event, or event for short, happens in the world and marks a change in the world, in its activities and in its entities. The term 'event' is commonly used in process algebra with a similar meaning. Events represent communications or interactions; they are assumed to be atomic and instantaneous.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  InstantaneousEvent: _NS$i("InstantaneousEvent"),

  /**
   * ActivityInfluence provides additional descriptions of an Activity's binary influence upon any other kind of resource. Instances of ActivityInfluence use the prov:activity property to cite the influencing Activity.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#activity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  ActivityInfluence: _NS$i("ActivityInfluence"),

  /**
   * EntityInfluence provides additional descriptions of an Entity's binary influence upon any other kind of resource. Instances of EntityInfluence use the prov:entity property to cite the influencing Entity.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#entity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  EntityInfluence: _NS$i("EntityInfluence"),

  /**
   * An instance of prov:Influence provides additional descriptions about the binary prov:wasInfluencedBy relation from some influenced Activity, Entity, or Agent to the influencing Activity, Entity, or Agent. For example, :stomach_ache prov:wasInfluencedBy :spoon; prov:qualifiedInfluence [ a prov:Influence; prov:entity :spoon; :foo :bar ] . Because prov:Influence is a broad relation, the more specific relations (Communication, Delegation, End, etc.) should be used when applicable.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Influence: _NS$i("Influence"),

  /**
   * Agent
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Agent: _NS$i("Agent"),

  /**
   * AgentInfluence provides additional descriptions of an Agent's binary influence upon any other kind of resource. Instances of AgentInfluence use the prov:agent property to cite the influencing Agent.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#agent
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  AgentInfluence: _NS$i("AgentInfluence"),

  /**
   * An instance of prov:Association provides additional descriptions about the binary prov:wasAssociatedWith relation from an prov:Activity to some prov:Agent that had some responsiblity for it. For example, :baking prov:wasAssociatedWith :baker; prov:qualifiedAssociation [ a prov:Association; prov:agent :baker; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Association: _NS$i("Association"),

  /**
   * An instance of prov:Attribution provides additional descriptions about the binary prov:wasAttributedTo relation from an prov:Entity to some prov:Agent that had some responsible for it. For example, :cake prov:wasAttributedTo :baker; prov:qualifiedAttribution [ a prov:Attribution; prov:entity :baker; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Attribution: _NS$i("Attribution"),

  /**
   * Note that there are kinds of bundles (e.g. handwritten letters, audio recordings, etc.) that are not expressed in PROV-O, but can be still be described by PROV-O.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Bundle: _NS$i("Bundle"),

  /**
   * Collection
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Collection: _NS$i("Collection"),

  /**
   * An instance of prov:Communication provides additional descriptions about the binary prov:wasInformedBy relation from an informed prov:Activity to the prov:Activity that informed it. For example, :you_jumping_off_bridge prov:wasInformedBy :everyone_else_jumping_off_bridge; prov:qualifiedCommunication [ a prov:Communication; prov:activity :everyone_else_jumping_off_bridge; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Communication: _NS$i("Communication"),

  /**
   * An instance of prov:Delegation provides additional descriptions about the binary prov:actedOnBehalfOf relation from a performing prov:Agent to some prov:Agent for whom it was performed. For example, :mixing prov:wasAssociatedWith :toddler . :toddler prov:actedOnBehalfOf :mother; prov:qualifiedDelegation [ a prov:Delegation; prov:entity :mother; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Delegation: _NS$i("Delegation"),

  /**
   * An instance of prov:Derivation provides additional descriptions about the binary prov:wasDerivedFrom relation from some derived prov:Entity to another prov:Entity from which it was derived. For example, :chewed_bubble_gum prov:wasDerivedFrom :unwrapped_bubble_gum; prov:qualifiedDerivation [ a prov:Derivation; prov:entity :unwrapped_bubble_gum; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Derivation: _NS$i("Derivation"),

  /**
   * EmptyCollection
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  EmptyCollection: _NS$i("EmptyCollection"),

  /**
   * An instance of prov:End provides additional descriptions about the binary prov:wasEndedBy relation from some ended prov:Activity to an prov:Entity that ended it. For example, :ball_game prov:wasEndedBy :buzzer; prov:qualifiedEnd [ a prov:End; prov:entity :buzzer; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  End: _NS$i("End"),

  /**
   * An instance of prov:Generation provides additional descriptions about the binary prov:wasGeneratedBy relation from a generated prov:Entity to the prov:Activity that generated it. For example, :cake prov:wasGeneratedBy :baking; prov:qualifiedGeneration [ a prov:Generation; prov:activity :baking; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Generation: _NS$i("Generation"),

  /**
   * An instance of prov:Invalidation provides additional descriptions about the binary prov:wasInvalidatedBy relation from an invalidated prov:Entity to the prov:Activity that invalidated it. For example, :uncracked_egg prov:wasInvalidatedBy :baking; prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :baking; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Invalidation: _NS$i("Invalidation"),

  /**
   * Location
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#atLocation
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Location: _NS$i("Location"),

  /**
   * Organization
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Organization: _NS$i("Organization"),

  /**
   * Person
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Person: _NS$i("Person"),

  /**
   * There exist no prescriptive requirement on the nature of plans, their representation, the actions or steps they consist of, or their intended goals. Since plans may evolve over time, it may become necessary to track their provenance, so plans themselves are entities. Representing the plan explicitly in the provenance can be useful for various tasks: for example, to validate the execution as represented in the provenance record, to manage expectation failures, or to provide explanations.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Plan: _NS$i("Plan"),

  /**
   * An instance of prov:PrimarySource provides additional descriptions about the binary prov:hadPrimarySource relation from some secondary prov:Entity to an earlier, primary prov:Entity. For example, :blog prov:hadPrimarySource :newsArticle; prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :newsArticle; :foo :bar ] .
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  PrimarySource: _NS$i("PrimarySource"),

  /**
   * An instance of prov:Quotation provides additional descriptions about the binary prov:wasQuotedFrom relation from some taken prov:Entity from an earlier, larger prov:Entity. For example, :here_is_looking_at_you_kid prov:wasQuotedFrom :casablanca_script; prov:qualifiedQuotation [ a prov:Quotation; prov:entity :casablanca_script; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Quotation: _NS$i("Quotation"),

  /**
   * Role
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#hadRole
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Role: _NS$i("Role"),

  /**
   * SoftwareAgent
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  SoftwareAgent: _NS$i("SoftwareAgent"),

  /**
   * An instance of prov:Start provides additional descriptions about the binary prov:wasStartedBy relation from some started prov:Activity to an prov:Entity that started it. For example, :foot_race prov:wasStartedBy :bang; prov:qualifiedStart [ a prov:Start; prov:entity :bang; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ] .
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Start: _NS$i("Start"),

  /**
   * An instance of prov:Usage provides additional descriptions about the binary prov:used relation from some prov:Activity to an prov:Entity that it used. For example, :keynote prov:used :podium; prov:qualifiedUsage [ a prov:Usage; prov:entity :podium; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Usage: _NS$i("Usage"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A revision is a derivation that revises an entity into a revised version.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasRevisionOf: _NS$i("wasRevisionOf"),

  /**
   * specializationOf
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#alternateOf
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  specializationOf: _NS$i("specializationOf"),

  /**
   * Classify prov-o terms into three categories, including 'starting-point', 'qualifed', and 'extended'. This classification is used by the prov-o html document to gently introduce prov-o terms to its users.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  category: _NS$i("category"),

  /**
   * Classify prov-o terms into six components according to prov-dm, including 'agents-responsibility', 'alternate', 'annotations', 'collections', 'derivations', and 'entities-activities'. This classification is used so that readers of prov-o specification can find its correspondence with the prov-dm specification.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  component: _NS$i("component"),

  /**
   * The more specific subproperties of prov:wasDerivedFrom (i.e., prov:wasQuotedFrom, prov:wasRevisionOf, prov:hadPrimarySource) should be used when applicable.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasDerivedFrom: _NS$i("wasDerivedFrom"),

  /**
   * PROV-O does not define all property inverses. The directionalities defined in PROV-O should be given preference over those not defined. However, if users wish to name the inverse of a PROV-O property, the local name given by prov:inverse should be used.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * See also:
   *  - http://www.w3.org/TR/prov-o/#names-of-inverse-properties
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  inverse: _NS$i("inverse"),

  /**
   * This annotation property links a subproperty of prov:wasInfluencedBy with the subclass of prov:Influence and the qualifying property that are used to qualify it.
   Example annotation:
       prov:wasGeneratedBy prov:qualifiedForm prov:qualifiedGeneration, prov:Generation .
   Then this unqualified assertion:
       :entity1 prov:wasGeneratedBy :activity1 .
   can be qualified by adding:
      :entity1 prov:qualifiedGeneration :entity1Gen .
   :entity1Gen
       a prov:Generation, prov:Influence;
       prov:activity :activity1;
       :customValue 1337 .
   Note how the value of the unqualified influence (prov:wasGeneratedBy :activity1) is mirrored as the value of the prov:activity (or prov:entity, or prov:agent) property on the influence class.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedForm: _NS$i("qualifiedForm"),

  /**
   * If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was revised using prov:qualifiedRevision [ a prov:Revision;  prov:entity :e; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedRevision: _NS$i("qualifiedRevision"),

  /**
   * alternateOf
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * See also:
   *  - http://www.w3.org/ns/prov#specializationOf
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  alternateOf: _NS$i("alternateOf"),

  /**
   * A reference to the principal section of the PROV-CONSTRAINTS document that describes this concept.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  constraints: _NS$i("constraints"),

  /**
   * A definition quoted from PROV-DM or PROV-CONSTRAINTS that describes the concept expressed with this OWL term.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  definition: _NS$i("definition"),

  /**
   * A reference to the principal section of the PROV-DM document that describes this concept.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  dm: _NS$i("dm"),

  /**
   * A reference to the principal section of the PROV-DM document that describes this concept.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  n: _NS$i("n"),

  /**
   * activity
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  activity: _NS$i("activity"),

  /**
   * When the prov-o term does not have a definition drawn from prov-dm, and the prov-o editor provides one.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  editorsDefinition: _NS$i("editorsDefinition"),

  /**
   * Subproperties of prov:influencer are used to cite the object of an unqualified PROV-O triple whose predicate is a subproperty of prov:wasInfluencedBy (e.g. prov:used, prov:wasGeneratedBy). prov:influencer is used much like rdf:object is used.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  influencer: _NS$i("influencer"),

  /**
   * A note by the OWL development team about how this term expresses the PROV-DM concept, or how it should be used in context of semantic web or linked data.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  editorialNote: _NS$i("editorialNote"),

  /**
   * entity
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  entity: _NS$i("entity"),

  /**
   * Classes and properties used to qualify relationships are annotated with prov:unqualifiedForm to indicate the property used to assert an unqualified provenance relation.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  unqualifiedForm: _NS$i("unqualifiedForm"),

  /**
   * Because prov:wasInfluencedBy is a broad relation, its more specific subproperties (e.g. prov:wasInformedBy, prov:actedOnBehalfOf, prov:wasEndedBy, etc.) should be used when applicable.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasInfluencedBy: _NS$i("wasInfluencedBy"),

  /**
   * The _optional_ Activity of an Influence, which used, generated, invalidated, or was the responsibility of some Entity. This property is _not_ used by ActivityInfluence (use prov:activity instead).
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadActivity: _NS$i("hadActivity"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  sharesDefinitionWith: _NS$i("sharesDefinitionWith"),

  /**
   * Because prov:qualifiedInfluence is a broad relation, the more specific relations (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be used when applicable.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedInfluence: _NS$i("qualifiedInfluence"),

  /**
   * agent
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  agent: _NS$i("agent"),

  /**
   * An prov:Agent that had some (unspecified) responsibility for the occurrence of this prov:Activity.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasAssociatedWith: _NS$i("wasAssociatedWith"),

  /**
   * If this Activity prov:wasAssociatedWith Agent :ag, then it can qualify the Association using prov:qualifiedAssociation [ a prov:Association;  prov:agent :ag; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedAssociation: _NS$i("qualifiedAssociation"),

  /**
   * Attribution is the ascribing of an entity to an agent.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasAttributedTo: _NS$i("wasAttributedTo"),

  /**
   * If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was influenced using prov:qualifiedAttribution [ a prov:Attribution;  prov:agent :ag; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedAttribution: _NS$i("qualifiedAttribution"),

  /**
   * An activity a2 is dependent on or informed by another activity a1, by way of some unspecified entity that is generated by a1 and used by a2.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasInformedBy: _NS$i("wasInformedBy"),

  /**
   * If this Activity prov:wasInformedBy Activity :a, then it can qualify how it was influenced using prov:qualifiedCommunication [ a prov:Communication;  prov:activity :a; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedCommunication: _NS$i("qualifiedCommunication"),

  /**
   * An object property to express the accountability of an agent towards another agent. The subordinate agent acted on behalf of the responsible agent in an actual activity.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  actedOnBehalfOf: _NS$i("actedOnBehalfOf"),

  /**
   * If this Agent prov:actedOnBehalfOf Agent :ag, then it can qualify how with prov:qualifiedResponsibility [ a prov:Responsibility;  prov:agent :ag; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedDelegation: _NS$i("qualifiedDelegation"),

  /**
   * If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was derived using prov:qualifiedDerivation [ a prov:Derivation;  prov:entity :e; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedDerivation: _NS$i("qualifiedDerivation"),

  /**
   * End is when an activity is deemed to have ended. An end may refer to an entity, known as trigger, that terminated the activity.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasEndedBy: _NS$i("wasEndedBy"),

  /**
   * If this Activity prov:wasEndedBy Entity :e1, then it can qualify how it was ended using prov:qualifiedEnd [ a prov:End;  prov:entity :e1; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedEnd: _NS$i("qualifiedEnd"),

  /**
   * wasGeneratedBy
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasGeneratedBy: _NS$i("wasGeneratedBy"),

  /**
   * If this Activity prov:generated Entity :e, then it can qualify how it performed the Generation using prov:qualifiedGeneration [ a prov:Generation;  prov:entity :e; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedGeneration: _NS$i("qualifiedGeneration"),

  /**
   * wasInvalidatedBy
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasInvalidatedBy: _NS$i("wasInvalidatedBy"),

  /**
   * If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation;  prov:activity :a; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedInvalidation: _NS$i("qualifiedInvalidation"),

  /**
   * The Location of any resource.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  atLocation: _NS$i("atLocation"),

  /**
   * hadPrimarySource
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadPrimarySource: _NS$i("hadPrimarySource"),

  /**
   * If this Entity prov:hadPrimarySource Entity :e, then it can qualify how using prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :e; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedPrimarySource: _NS$i("qualifiedPrimarySource"),

  /**
   * An entity is derived from an original entity by copying, or 'quoting', some or all of it.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasQuotedFrom: _NS$i("wasQuotedFrom"),

  /**
   * If this Entity prov:wasQuotedFrom Entity :e, then it can qualify how using prov:qualifiedQuotation [ a prov:Quotation;  prov:entity :e; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedQuotation: _NS$i("qualifiedQuotation"),

  /**
   * The _optional_ Role that an Entity assumed in the context of an Activity. For example, :baking prov:used :spoon; prov:qualified [ a prov:Usage; prov:entity :spoon; prov:hadRole roles:mixing_implement ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadRole: _NS$i("hadRole"),

  /**
   * Start is when an activity is deemed to have started. A start may refer to an entity, known as trigger, that initiated the activity.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasStartedBy: _NS$i("wasStartedBy"),

  /**
   * If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was started using prov:qualifiedStart [ a prov:Start;  prov:entity :e1; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedStart: _NS$i("qualifiedStart"),

  /**
   * A prov:Entity that was used by this prov:Activity. For example, :baking prov:used :spoon, :egg, :oven .
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  used: _NS$i("used"),

  /**
   * If this Activity prov:used Entity :e, then it can qualify how it used it using prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ].
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedUsage: _NS$i("qualifiedUsage"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  aq: _NS$i("aq"),

  /**
   * The time at which an InstantaneousEvent occurred, in the form of xsd:dateTime.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  atTime: _NS$i("atTime"),

  /**
   * The time at which an activity ended. See also prov:startedAtTime.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  endedAtTime: _NS$i("endedAtTime"),

  /**
   * The time at which an entity was completely created and is available for use.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  generatedAtTime: _NS$i("generatedAtTime"),

  /**
   * The time at which an entity was invalidated (i.e., no longer usable).
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  invalidatedAtTime: _NS$i("invalidatedAtTime"),

  /**
   * The time at which an activity started. See also prov:endedAtTime.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  startedAtTime: _NS$i("startedAtTime"),

  /**
   * generated
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  generated: _NS$i("generated"),

  /**
   * influenced
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  influenced: _NS$i("influenced"),

  /**
   * The _optional_ Generation involved in an Entity's Derivation.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadGeneration: _NS$i("hadGeneration"),

  /**
   * hadMember
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadMember: _NS$i("hadMember"),

  /**
   * The _optional_ Plan adopted by an Agent in Association with some Activity. Plan specifications are out of the scope of this specification.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadPlan: _NS$i("hadPlan"),

  /**
   * The _optional_ Usage involved in an Entity's Derivation.
   *
   * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadUsage: _NS$i("hadUsage"),

  /**
   * invalidated
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  invalidated: _NS$i("invalidated"),

  /**
   * The position that this OWL term should be listed within documentation. The scope of the documentation (e.g., among all terms, among terms within a prov:category, among properties applying to a particular class, etc.) is unspecified.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  order: _NS$i("order"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  todo: _NS$i("todo"),

  /**
   * value
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  value: _NS$i("value")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This vocabulary allows multi-dimensional data, such as statistics, to be published in RDF. It is based on the core information model from SDMX (and thus also DDI).
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.PROV_O = PROV_O;
var _NAMESPACE$h = "http://purl.org/linked-data/cube#";

function _NS$h(localName) {
  return _NAMESPACE$h + localName;
}
/**
 * This vocabulary allows multi-dimensional data, such as statistics, to be published in RDF. It is based on the core information model from SDMX (and thus also DDI).
 */


var QB = {
  PREFIX: "qb",
  NAMESPACE: _NAMESPACE$h,
  PREFIX_AND_NAMESPACE: {
    "qb": "http://purl.org/linked-data/cube#"
  },
  NS: _NS$h,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  DataSet: _NS$h("DataSet"),

  /**
   * Abstract superclass for everything that can have attributes and dimensions
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  Attachable: _NS$h("Attachable"),

  /**
   * A single observation in the cube, may have one or more associated measured values
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  Observation: _NS$h("Observation"),

  /**
   * A, possibly arbitrary, group of observations.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ObservationGroup: _NS$h("ObservationGroup"),

  /**
   * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  Slice: _NS$h("Slice"),

  /**
   * Abstract super-property of all properties representing dimensions, attributes or measures
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ComponentProperty: _NS$h("ComponentProperty"),

  /**
   * The class of components which represent the dimensions of the cube
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  DimensionProperty: _NS$h("DimensionProperty"),

  /**
   * Superclass of all coded ComponentProperties
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  CodedProperty: _NS$h("CodedProperty"),

  /**
   * The class of components which represent the measured value of the phenomenon being observed
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  MeasureProperty: _NS$h("MeasureProperty"),

  /**
   * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  AttributeProperty: _NS$h("AttributeProperty"),

  /**
   * Defines the structure of a DataSet or slice
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  DataStructureDefinition: _NS$h("DataStructureDefinition"),

  /**
   * Abstract class of things which reference one or more ComponentProperties
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ComponentSet: _NS$h("ComponentSet"),

  /**
   * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ComponentSpecification: _NS$h("ComponentSpecification"),

  /**
   * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  SliceKey: _NS$h("SliceKey"),

  /**
   * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  HierarchicalCodeList: _NS$h("HierarchicalCodeList"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * indicates the data set of which this observation is a part
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  dataSet: _NS$h("dataSet"),

  /**
   * indicates a observation contained within this slice of the data set
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  observation: _NS$h("observation"),

  /**
   * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  observationGroup: _NS$h("observationGroup"),

  /**
   * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  slice: _NS$h("slice"),

  /**
   * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  measureType: _NS$h("measureType"),

  /**
   * indicates the structure to which this data set conforms
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  structure: _NS$h("structure"),

  /**
   * indicates a component specification which is included in the structure of the dataset
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  component: _NS$h("component"),

  /**
   * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  componentProperty: _NS$h("componentProperty"),

  /**
   * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  order: _NS$h("order"),

  /**
   * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
    to components correspond to an attribute. Defaults to false (optional).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  componentRequired: _NS$h("componentRequired"),

  /**
   * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  componentAttachment: _NS$h("componentAttachment"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a dimension
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  dimension: _NS$h("dimension"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a measure
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  measure: _NS$h("measure"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a attribute
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  attribute: _NS$h("attribute"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  measureDimension: _NS$h("measureDimension"),

  /**
   * indicates the sub-key corresponding to this slice
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  sliceStructure: _NS$h("sliceStructure"),

  /**
   * indicates a slice key which is used for slices in this dataset
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  sliceKey: _NS$h("sliceKey"),

  /**
   * gives the concept which is being measured or indicated by a ComponentProperty
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  concept: _NS$h("concept"),

  /**
   * gives the code list associated with a CodedProperty
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  codeList: _NS$h("codeList"),

  /**
   * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  hierarchyRoot: _NS$h("hierarchyRoot"),

  /**
   * Specifies a property which relates a parent concept in the hierarchy to a child concept.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  parentChildProperty: _NS$h("parentChildProperty")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - RDF (Resource Description Framework) - a framework for representing information in the Web
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.QB = QB;
var _NAMESPACE$g = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

function _NS$g(localName) {
  return _NAMESPACE$g + localName;
}
/**
 * [Generator provided] - RDF (Resource Description Framework) - a framework for representing information in the Web
 */


var RDF = {
  PREFIX: "rdf",
  NAMESPACE: _NAMESPACE$g,
  PREFIX_AND_NAMESPACE: {
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  },
  NS: _NS$g,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of RDF properties.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Property: _NS$g("Property"),

  /**
   * The datatype of RDF literals storing fragments of HTML content
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - http://www.w3.org/TR/rdf11-concepts/#section-html
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  HTML: _NS$g("HTML"),

  /**
   * The datatype of language-tagged string values
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - http://www.w3.org/TR/rdf11-concepts/#section-Graph-Literal
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  langString: _NS$g("langString"),

  /**
   * The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - http://www.w3.org/TR/rdf-plain-literal/
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  PlainLiteral: _NS$g("PlainLiteral"),

  /**
   * The class of RDF statements.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Statement: _NS$g("Statement"),

  /**
   * The class of unordered containers.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Bag: _NS$g("Bag"),

  /**
   * The class of ordered containers.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Seq: _NS$g("Seq"),

  /**
   * The class of containers of alternatives.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Alt: _NS$g("Alt"),

  /**
   * The class of RDF Lists.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  List: _NS$g("List"),

  /**
   * The datatype of XML literal values.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  XMLLiteral: _NS$g("XMLLiteral"),

  /**
   * The datatype of RDF literals storing JSON content.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-json-datatype
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  JSON: _NS$g("JSON"),

  /**
   * A class representing a compound literal.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  CompoundLiteral: _NS$g("CompoundLiteral"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The subject is an instance of a class.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  type: _NS$g("type"),

  /**
   * The subject of the subject RDF statement.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  subject: _NS$g("subject"),

  /**
   * The predicate of the subject RDF statement.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  predicate: _NS$g("predicate"),

  /**
   * The object of the subject RDF statement.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  object: _NS$g("object"),

  /**
   * Idiomatic property used for structured values.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  value: _NS$g("value"),

  /**
   * The empty list, with no items in it. If the rest of a list is nil then the list has no more items in it.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  nil: _NS$g("nil"),

  /**
   * The first item in the subject RDF list.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  first: _NS$g("first"),

  /**
   * The rest of the subject RDF list after the first item.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  rest: _NS$g("rest"),

  /**
   * The language component of a CompoundLiteral.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  language: _NS$g("language"),

  /**
   * The base direction component of a CompoundLiteral.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  direction: _NS$g("direction")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - RDFS (RDF Schema) - a data-modelling vocabulary for RDF data
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.RDF = RDF;
var _NAMESPACE$f = "http://www.w3.org/2000/01/rdf-schema#";

function _NS$f(localName) {
  return _NAMESPACE$f + localName;
}
/**
 * [Generator provided] - RDFS (RDF Schema) - a data-modelling vocabulary for RDF data
 */


var RDFS = {
  PREFIX: "rdfs",
  NAMESPACE: _NAMESPACE$f,
  PREFIX_AND_NAMESPACE: {
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#"
  },
  NS: _NS$f,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class resource, everything.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Resource: _NS$f("Resource"),

  /**
   * The class of classes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Class: _NS$f("Class"),

  /**
   * The class of literal values, eg. textual strings and integers.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Literal: _NS$f("Literal"),

  /**
   * The class of RDF containers.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Container: _NS$f("Container"),

  /**
   * The class of container membership properties, rdf:_1, rdf:_2, ...,
                    all of which are sub-properties of 'member'.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  ContainerMembershipProperty: _NS$f("ContainerMembershipProperty"),

  /**
   * The class of RDF datatypes.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Datatype: _NS$f("Datatype"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Further information about the subject resource.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  seeAlso: _NS$f("seeAlso"),

  /**
   * The defininition of the subject resource.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  isDefinedBy: _NS$f("isDefinedBy"),

  /**
   * A human-readable name for the subject.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  label: _NS$f("label"),

  /**
   * A description of the subject resource.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  comment: _NS$f("comment"),

  /**
   * A range of the subject property.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  range: _NS$f("range"),

  /**
   * A domain of the subject property.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  domain: _NS$f("domain"),

  /**
   * The subject is a subclass of a class.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  subClassOf: _NS$f("subClassOf"),

  /**
   * The subject is a subproperty of a property.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  subPropertyOf: _NS$f("subPropertyOf"),

  /**
   * A member of the subject resource.
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  member: _NS$f("member")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.RDFS = RDFS;
var _NAMESPACE$e = "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#";

function _NS$e(localName) {
  return _NAMESPACE$e + localName;
}
/**
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */


var RLOG = {
  PREFIX: "rlog",
  NAMESPACE: _NAMESPACE$e,
  PREFIX_AND_NAMESPACE: {
    "rlog": "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#"
  },
  NS: _NS$e,
  // *****************
  // All the Classes.
  // *****************

  /**
   * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html
   *
   * This term provides descriptions only in English.
   */
  Level: _NS$e("Level"),

  /**
   * An entry in a log.
   *
   * This term provides descriptions only in English.
   */
  Entry: _NS$e("Entry"),

  /**
   * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.
   *
   * This term provides descriptions only in English.
   */
  StatusCode: _NS$e("StatusCode"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The ALL has the lowest possible rank and is intended to turn on all logging.
   *
   * This term provides descriptions only in English.
   */
  ALL: _NS$e("ALL"),

  /**
   * Attention: the ids here can change, they are just used to define an order over the levels!
   *
   * This term provides descriptions only in English.
   */
  priority: _NS$e("priority"),

  /**
   * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
   *
   * This term provides descriptions only in English.
   */
  DEBUG: _NS$e("DEBUG"),

  /**
   * The ERROR level designates error events that might still allow the application to continue running.
   *
   * This term provides descriptions only in English.
   */
  ERROR: _NS$e("ERROR"),

  /**
   * The FATAL level designates very severe error events that will presumably lead the application to abort.
   *
   * This term provides descriptions only in English.
   */
  FATAL: _NS$e("FATAL"),

  /**
   * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
   *
   * This term provides descriptions only in English.
   */
  INFO: _NS$e("INFO"),

  /**
   * The OFF has the highest possible rank and is intended to turn off logging.
   *
   * This term provides descriptions only in English.
   */
  OFF: _NS$e("OFF"),

  /**
   * The TRACE Level designates finer-grained informational events than the DEBUG.
   *
   * This term provides descriptions only in English.
   */
  TRACE: _NS$e("TRACE"),

  /**
   * The WARN level designates potentially harmful situations.
   *
   * This term provides descriptions only in English.
   */
  WARN: _NS$e("WARN"),

  /**
   * Outputs the fully qualified class name of the caller issuing the logging request.
   *
   * This term provides descriptions only in English.
   */
  className: _NS$e("className"),

  /**
   * The numerical value of the code, e.g. 200, 404 or 42.
   *
   * This term provides descriptions only in English.
   */
  codeId: _NS$e("codeId"),

  /**
   * Logging datetime (or just date)
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  date: _NS$e("date"),

  /**
   * Links a log message to a status code.
   *
   * This term provides descriptions only in English.
   */
  hasCode: _NS$e("hasCode"),

  /**
   * logLevel
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  level: _NS$e("level"),

  /**
   * Logging message
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  message: _NS$e("message"),

  /**
   * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to.
   *
   * This term provides descriptions only in English.
   */
  resource: _NS$e("resource")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e., labels) and translations for comments
 (e.g., for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.RLOG = RLOG;
var _NAMESPACE$d = "http://schema.org/";

function _NS$d(localName) {
  return _NAMESPACE$d + localName;
}
/**
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e., labels) and translations for comments
 (e.g., for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */


var SCHEMA_INRUPT = {
  PREFIX: "schema-inrupt",
  NAMESPACE: _NAMESPACE$d,
  PREFIX_AND_NAMESPACE: {
    "schema-inrupt": "http://schema.org/"
  },
  NS: _NS$d,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A person (alive, dead, undead, or fictional).
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  Person: _NS$d("Person"),

  /**
   * Data type: URL.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  URL: _NS$d("URL"),

  /**
   * Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  MedicalTherapy: _NS$d("MedicalTherapy"),

  /**
   * An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  EducationalOccupationalCredential: _NS$d("EducationalOccupationalCredential"),

  /**
   * The mailing address.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  PostalAddress: _NS$d("PostalAddress"),

  /**
   * Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
   *
   * This term has [5] labels and comments, in the languages [NoLocale, de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  Product: _NS$d("Product"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * An alias for the item.
   *
   * This term has [6] labels and comments, in the languages [NoLocale, de, en, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  alternateName: _NS$d("alternateName"),

  /**
   * Given name. In the U.S., the first name of a Person.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  givenName: _NS$d("givenName"),

  /**
   * Family name. In the U.S., the last name of a Person.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  familyName: _NS$d("familyName"),

  /**
   * An additional name for a Person, can be used for a middle name.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  additionalName: _NS$d("additionalName"),

  /**
   * A license document that applies to this content, typically indicated by URL.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  license: _NS$d("license"),

  /**
   * The name of the item.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  name: _NS$d("name"),

  /**
   * The textual content of this CreativeWork.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  text: _NS$d("text"),

  /**
   * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
        
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * See also:
   *  - https://schema.org/docs/datamodel.html#identifierBg
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  identifier: _NS$d("identifier"),

  /**
   * A description of the item.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  description: _NS$d("description"),

  /**
   * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * See also:
   *  - https://schema.org/ImageObject
   *  - https://schema.org/URL
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  image: _NS$d("image"),

  /**
   * URL of the item.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  url: _NS$d("url"),

  /**
   * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  startTime: _NS$d("startTime"),

  /**
   * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  endTime: _NS$d("endTime"),

  /**
   * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  startDate: _NS$d("startDate"),

  /**
   * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  endDate: _NS$d("endDate"),

  /**
   * Email address.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  email: _NS$d("email"),

  /**
   * A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  primaryPrevention: _NS$d("primaryPrevention"),

  /**
   * Specific qualifications required for this role or Occupation.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  qualifications: _NS$d("qualifications"),

  /**
   * A person or organization attending the event.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  attendee: _NS$d("attendee"),

  /**
   * Physical address of the item.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  address: _NS$d("address"),

  /**
   * The street address. For example, 1600 Amphitheatre Pkwy.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  streetAddress: _NS$d("streetAddress"),

  /**
   * The locality in which the street address is, and which is in the region. For example, Mountain View.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  addressLocality: _NS$d("addressLocality"),

  /**
   * The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country)
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  addressRegion: _NS$d("addressRegion"),

  /**
   * The postal code. For example, 94043.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  postalCode: _NS$d("postalCode"),

  /**
   * The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  addressCountry: _NS$d("addressCountry"),

  /**
   * Password, PIN, or access code needed for delivery (e.g. from a locker).
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  accessCode: _NS$d("accessCode"),

  /**
   * The identifier for the account the payment will be applied to.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  accountId: _NS$d("accountId"),

  /**
   * The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  serialNumber: _NS$d("serialNumber"),

  /**
   * The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  productID: _NS$d("productID")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - SPARQL Service Description vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SCHEMA_INRUPT = SCHEMA_INRUPT;
var _NAMESPACE$c = "http://www.w3.org/ns/sparql-service-description#";

function _NS$c(localName) {
  return _NAMESPACE$c + localName;
}
/**
 * [Generator provided] - SPARQL Service Description vocabulary
 */


var SD = {
  PREFIX: "sd",
  NAMESPACE: _NAMESPACE$c,
  PREFIX_AND_NAMESPACE: {
    "sd": "http://www.w3.org/ns/sparql-service-description#"
  },
  NS: _NS$c,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An instance of sd:Service represents a SPARQL service made available via the SPARQL Protocol.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Service: _NS$c("Service"),

  /**
   * An instance of sd:Feature represents a feature of a SPARQL service. Specific types of features include functions, aggregates, languages, and entailment regimes and profiles. This document defines five instances of sd:Feature: sd:DereferencesURIs, sd:UnionDefaultGraph, sd:RequiresDataset, sd:EmptyGraphs, and sd:BasicFederatedQuery.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Feature: _NS$c("Feature"),

  /**
   * An instance of sd:EntailmentRegime represents an entailment regime used in basic graph pattern matching (as described by SPARQL 1.1 Query Language).
   *
   * This term provides descriptions only with no explicit locale.
   */
  EntailmentRegime: _NS$c("EntailmentRegime"),

  /**
   * An instance of sd:NamedGraph represents a named graph having a name (via sd:name) and an optional graph description (via sd:graph).
   *
   * This term provides descriptions only with no explicit locale.
   */
  NamedGraph: _NS$c("NamedGraph"),

  /**
   * An instance of sd:EntailmentProfile represents a profile of an entailment regime. An entailment profile MAY impose restrictions on what constitutes valid RDF with respect to entailment.
   *
   * This term provides descriptions only with no explicit locale.
   */
  EntailmentProfile: _NS$c("EntailmentProfile"),

  /**
   * An instance of sd:Function represents a function that may be used in a SPARQL SELECT expression or a FILTER, HAVING, GROUP BY, ORDER BY, or BIND clause.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Function: _NS$c("Function"),

  /**
   * An instance of sd:Aggregate represents an aggregate that may be used in a SPARQL aggregate query (for instance in a HAVING clause or SELECT expression) besides the standard list of supported aggregates COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT, and SAMPLE.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Aggregate: _NS$c("Aggregate"),

  /**
   * An instance of sd:Language represents one of the SPARQL languages, including specific configurations providing particular features or extensions. This document defines three instances of sd:Language: sd:SPARQL10Query, sd:SPARQL11Query, and sd:SPARQL11Update.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Language: _NS$c("Language"),

  /**
   * An instance of sd:Dataset represents a RDF Dataset comprised of a default graph and zero or more named graphs.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Dataset: _NS$c("Dataset"),

  /**
   * An instance of sd:GraphCollection represents a collection of zero or more named graph descriptions. Each named graph description belonging to an sd:GraphCollection MUST be linked with the sd:namedGraph predicate.
   *
   * This term provides descriptions only with no explicit locale.
   */
  GraphCollection: _NS$c("GraphCollection"),

  /**
   * An instance of sd:Graph represents the description of an RDF graph.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Graph: _NS$c("Graph"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The SPARQL endpoint of an sd:Service that implements the SPARQL Protocol service. The object of the sd:endpoint property is an IRI.
   *
   * This term provides descriptions only with no explicit locale.
   */
  endpoint: _NS$c("endpoint"),

  /**
   * Relates an instance of sd:Service with a resource representing a supported feature.
   *
   * This term provides descriptions only with no explicit locale.
   */
  feature: _NS$c("feature"),

  /**
   * Relates an instance of sd:Service with a resource representing an entailment regime used for basic graph pattern matching. This property is intended for use when a single entailment regime by default applies to all graphs in the default dataset of the service. In situations where a different entailment regime applies to a specific graph in the dataset, the sd:entailmentRegime property should be used to indicate this fact in the description of that graph.
   *
   * This term provides descriptions only with no explicit locale.
   */
  defaultEntailmentRegime: _NS$c("defaultEntailmentRegime"),

  /**
   * Relates a named graph description with a resource representing an entailment regime used for basic graph pattern matching over that graph.
   *
   * This term provides descriptions only with no explicit locale.
   */
  entailmentRegime: _NS$c("entailmentRegime"),

  /**
   * Relates an instance of sd:Service with a resource representing a supported profile of the default entailment regime (as declared by sd:defaultEntailmentRegime).
   *
   * This term provides descriptions only with no explicit locale.
   */
  defaultSupportedEntailmentProfile: _NS$c("defaultSupportedEntailmentProfile"),

  /**
   * Relates a named graph description with a resource representing a supported profile of the entailment regime (as declared by sd:entailmentRegime) used for basic graph pattern matching over that graph.
   *
   * This term provides descriptions only with no explicit locale.
   */
  supportedEntailmentProfile: _NS$c("supportedEntailmentProfile"),

  /**
   * Relates an instance of sd:Service to a function that may be used in a SPARQL SELECT expression or a FILTER, HAVING, GROUP BY, ORDER BY, or BIND clause.
   *
   * This term provides descriptions only with no explicit locale.
   */
  extensionFunction: _NS$c("extensionFunction"),

  /**
   * Relates an instance of sd:Service to an aggregate that may be used in a SPARQL aggregate query (for instance in a HAVING clause or SELECT expression) besides the standard list of supported aggregates COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT, and SAMPLE
   *
   * This term provides descriptions only with no explicit locale.
   */
  extensionAggregate: _NS$c("extensionAggregate"),

  /**
   * Relates an instance of sd:Service to a resource representing an implemented extension to the SPARQL Query or Update language.
   *
   * This term provides descriptions only with no explicit locale.
   */
  languageExtension: _NS$c("languageExtension"),

  /**
   * Relates an instance of sd:Service to a SPARQL language (e.g. Query and Update) that it implements.
   *
   * This term provides descriptions only with no explicit locale.
   */
  supportedLanguage: _NS$c("supportedLanguage"),

  /**
   * Relates an instance of sd:Service to a resource representing an implemented feature that extends the SPARQL Query or Update language and that is accessed by using the named property.
   *
   * This term provides descriptions only with no explicit locale.
   */
  propertyFeature: _NS$c("propertyFeature"),

  /**
   * Relates an instance of sd:Service to a description of the default dataset available when no explicit dataset is specified in the query, update request or via protocol parameters.
   *
   * This term provides descriptions only with no explicit locale.
   */
  defaultDataset: _NS$c("defaultDataset"),

  /**
   * Relates an instance of sd:Service to a description of the graphs which are allowed in the construction of a dataset either via the SPARQL Protocol, with FROM/FROM NAMED clauses in a query, or with USING/USING NAMED in an update request, if the service limits the scope of dataset construction.
   *
   * This term provides descriptions only with no explicit locale.
   */
  availableGraphs: _NS$c("availableGraphs"),

  /**
   * Relates an instance of sd:Service to a format that is supported for serializing query results.
   *
   * This term provides descriptions only with no explicit locale.
   */
  resultFormat: _NS$c("resultFormat"),

  /**
   * Relates an instance of sd:Service to a format that is supported for parsing RDF input; for example, via a SPARQL 1.1 Update LOAD statement, or when URIs are dereferenced in FROM/FROM NAMED/USING/USING NAMED clauses.
   *
   * This term provides descriptions only with no explicit locale.
   */
  inputFormat: _NS$c("inputFormat"),

  /**
   * Relates an instance of sd:Dataset to the description of its default graph.
   *
   * This term provides descriptions only with no explicit locale.
   */
  defaultGraph: _NS$c("defaultGraph"),

  /**
   * Relates an instance of sd:GraphCollection (or its subclass sd:Dataset) to the description of one of its named graphs. The description of such a named graph MUST include the sd:name property and MAY include the sd:graph property.
   *
   * This term provides descriptions only with no explicit locale.
   */
  namedGraph: _NS$c("namedGraph"),

  /**
   * Relates a named graph to the name by which it may be referenced in a FROM/FROM NAMED clause. The object of the sd:name property is an IRI.
   *
   * This term provides descriptions only with no explicit locale.
   */
  name: _NS$c("name"),

  /**
   * Relates a named graph to its graph description.
   *
   * This term provides descriptions only with no explicit locale.
   */
  graph: _NS$c("graph")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - SDMX Dimension Vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SD = SD;
var _NAMESPACE$b = "http://purl.org/linked-data/sdmx/2009/dimension#";

function _NS$b(localName) {
  return _NAMESPACE$b + localName;
}
/**
 * [Generator provided] - SDMX Dimension Vocabulary
 */


var SDMX_DIMENSION = {
  PREFIX: "sdmx-dimension",
  NAMESPACE: _NAMESPACE$b,
  PREFIX_AND_NAMESPACE: {
    "sdmx-dimension": "http://purl.org/linked-data/sdmx/2009/dimension#"
  },
  NS: _NS$b,
  // *******************
  // All the Properties.
  // *******************

  /**
   * The length of time that a person has lived or a thing has existed.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  age: _NS$b("age"),

  /**
   * Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  civilStatus: _NS$b("civilStatus"),

  /**
   * Monetary denomination of the object being measured.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  currency: _NS$b("currency"),

  /**
   * The highest level of an educational programme the person has successfully completed.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  educationLev: _NS$b("educationLev"),

  /**
   * The time interval at which observations occur over a given time period.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  freq: _NS$b("freq"),

  /**
   * Job or position held by an individual who performs a set of tasks and duties.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  occupation: _NS$b("occupation"),

  /**
   * The country or geographic area to which the measured statistical phenomenon relates.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  refArea: _NS$b("refArea"),

  /**
   * The period of time or point in time to which the measured observation is intended to refer.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  refPeriod: _NS$b("refPeriod"),

  /**
   * The state of being male or female.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  sex: _NS$b("sex"),

  /**
   * The period of time or point in time to which the measured observation refers.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  timePeriod: _NS$b("timePeriod")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Security vocabulary
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SDMX_DIMENSION = SDMX_DIMENSION;
var _NAMESPACE$a = "https://w3id.org/security#";

function _NS$a(localName) {
  return _NAMESPACE$a + localName;
}
/**
 * [Generator provided] - Security vocabulary
 */


var SEC = {
  PREFIX: "sec",
  NAMESPACE: _NAMESPACE$a,
  PREFIX_AND_NAMESPACE: {
    "sec": "https://w3id.org/security#"
  },
  NS: _NS$a,
  // *****************
  // All the Classes.
  // *****************

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EcdsaSecp256k1Signature2019: _NS$a("EcdsaSecp256k1Signature2019"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EcdsaSecp256k1RecoverySignature2020: _NS$a("EcdsaSecp256k1RecoverySignature2020"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EcdsaSecp256k1VerificationKey2019: _NS$a("EcdsaSecp256k1VerificationKey2019"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EcdsaSecp256k1RecoveryMethod2020: _NS$a("EcdsaSecp256k1RecoveryMethod2020"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  RsaSignature2018: _NS$a("RsaSignature2018"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  RsaVerificationKey2018: _NS$a("RsaVerificationKey2018"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  SchnorrSecp256k1Signature2019: _NS$a("SchnorrSecp256k1Signature2019"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  SchnorrSecp256k1VerificationKey2019: _NS$a("SchnorrSecp256k1VerificationKey2019"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  ServiceEndpointProxyService: _NS$a("ServiceEndpointProxyService"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Digest: _NS$a("Digest"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EncryptedMessage: _NS$a("EncryptedMessage"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Signature: _NS$a("Signature"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  LinkedDataSignature2015: _NS$a("LinkedDataSignature2015"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  X25519KeyAgreementKey2019: _NS$a("X25519KeyAgreementKey2019"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Ed25519VerificationKey2018: _NS$a("Ed25519VerificationKey2018"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  BbsBlsSignature2020: _NS$a("BbsBlsSignature2020"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  BbsBlsSignatureProof2020: _NS$a("BbsBlsSignatureProof2020"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Bls12381G1Key2020: _NS$a("Bls12381G1Key2020"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Bls12381G2Key2020: _NS$a("Bls12381G2Key2020"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Key: _NS$a("Key"),
  // *******************
  // All the Properties.
  // *******************

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  cipherAlgorithm: _NS$a("cipherAlgorithm"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  cipherData: _NS$a("cipherData"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  digestAlgorithm: _NS$a("digestAlgorithm"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  digestValue: _NS$a("digestValue"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  cipherKey: _NS$a("cipherKey"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  blockchainAccountId: _NS$a("blockchainAccountId"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  ethereumAddress: _NS$a("ethereumAddress"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  expires: _NS$a("expires"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  initializationVector: _NS$a("initializationVector"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  nonce: _NS$a("nonce"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  canonicalizationAlgorithm: _NS$a("canonicalizationAlgorithm"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  owner: _NS$a("owner"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  password: _NS$a("password"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  privateKeyPem: _NS$a("privateKeyPem"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  verificationMethod: _NS$a("verificationMethod"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKey: _NS$a("publicKey"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  assertionMethod: _NS$a("assertionMethod"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  authentication: _NS$a("authentication"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  capabilityDelegation: _NS$a("capabilityDelegation"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  capabilityInvocation: _NS$a("capabilityInvocation"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  keyAgreement: _NS$a("keyAgreement"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKeyBase58: _NS$a("publicKeyBase58"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKeyJwk: _NS$a("publicKeyJwk"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKeyPem: _NS$a("publicKeyPem"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKeyHex: _NS$a("publicKeyHex"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKeyMultibase: _NS$a("publicKeyMultibase"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  publicKeyService: _NS$a("publicKeyService"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  revoked: _NS$a("revoked"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  proof: _NS$a("proof"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  jws: _NS$a("jws"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  proofPurpose: _NS$a("proofPurpose"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  challenge: _NS$a("challenge"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  domain: _NS$a("domain"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  expiration: _NS$a("expiration"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  proofValue: _NS$a("proofValue"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  signature: _NS$a("signature"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  signatureValue: _NS$a("signatureValue"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  signatureAlgorithm: _NS$a("signatureAlgorithm"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  service: _NS$a("service"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  serviceEndpoint: _NS$a("serviceEndpoint"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  x509CertificateChain: _NS$a("x509CertificateChain"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  x509CertificateFingerprint: _NS$a("x509CertificateFingerprint"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  allowedAction: _NS$a("allowedAction"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  capability: _NS$a("capability"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  capabilityAction: _NS$a("capabilityAction"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  capabilityChain: _NS$a("capabilityChain"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  caveat: _NS$a("caveat"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  delegator: _NS$a("delegator"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  invocationTarget: _NS$a("invocationTarget"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  invoker: _NS$a("invoker")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Shape Expressions (ShEx) - for validating RDF
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SEC = SEC;
var _NAMESPACE$9 = "http://www.w3.org/ns/shex#";

function _NS$9(localName) {
  return _NAMESPACE$9 + localName;
}
/**
 * [Generator provided] - Shape Expressions (ShEx) - for validating RDF
 */


var SHEX = {
  PREFIX: "shex",
  NAMESPACE: _NAMESPACE$9,
  PREFIX_AND_NAMESPACE: {
    "shex": "http://www.w3.org/ns/shex#"
  },
  NS: _NS$9,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Annotations provide a format-independent way to provide additional information about elements in a schema.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Annotation: _NS$9("Annotation"),

  /**
   * A TripleExpression composed of one or more sub-expressions, all of which must match.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  EachOf: _NS$9("EachOf"),

  /**
   * The abstract class of Triple Expressions.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  TripleExpression: _NS$9("TripleExpression"),

  /**
   * An IRI prefix used for matching IRIs.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  IriStem: _NS$9("IriStem"),

  /**
   * Abstract class for Stems
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Stem: _NS$9("Stem"),

  /**
   * An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  IriStemRange: _NS$9("IriStemRange"),

  /**
   * Abstract Class for Stem Ranges
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  StemRange: _NS$9("StemRange"),

  /**
   * An Language tag used for matching Literal Languages.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Language: _NS$9("Language"),

  /**
   * An Language prefix used for matching Literal Languages.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LanguageStem: _NS$9("LanguageStem"),

  /**
   * An Language prefix (or wildcard) along with a set of excluded values, used for node matching.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LanguageStemRange: _NS$9("LanguageStemRange"),

  /**
   * An Literal prefix used for matching Literals.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LiteralStem: _NS$9("LiteralStem"),

  /**
   * An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LiteralStemRange: _NS$9("LiteralStemRange"),

  /**
   * A constraint on the type or value of an RDF Node.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  NodeConstraint: _NS$9("NodeConstraint"),

  /**
   * The abstract class of Shape Expressions.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeExpression: _NS$9("ShapeExpression"),

  /**
   * The set of kinds of RDF Nodes.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  NodeKind: _NS$9("NodeKind"),

  /**
   * A TripleExpression composed of one or more sub-expressions, one of which must match.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  OneOf: _NS$9("OneOf"),

  /**
   * A Schema contains the set of shapes, used for matching a focus node.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Schema: _NS$9("Schema"),

  /**
   * A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  SemAct: _NS$9("SemAct"),

  /**
   * A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Shape: _NS$9("Shape"),

  /**
   * A ShapeExpression composed of one or more sub-expressions, all of which must match.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeAnd: _NS$9("ShapeAnd"),

  /**
   * A reference to a shape defined in some external Schema.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeExternal: _NS$9("ShapeExternal"),

  /**
   * A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeNot: _NS$9("ShapeNot"),

  /**
   * A ShapeExpression composed of one or more sub-expressions, one of which must match.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeOr: _NS$9("ShapeOr"),

  /**
   * A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  TripleConstraint: _NS$9("TripleConstraint"),

  /**
   * Indicates that a stem is a Wildcard, rather than a URI prefix.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Wildcard: _NS$9("Wildcard"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Annotations on a TripleExpression.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  annotation: _NS$9("annotation"),

  /**
   * Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  closed: _NS$9("closed"),

  /**
   * Code executed by Semantic Action.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  code: _NS$9("code"),

  /**
   * A datatype constraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  datatype: _NS$9("datatype"),

  /**
   * Values that are excluded from value matching.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  exclusion: _NS$9("exclusion"),

  /**
   * Expression associated with the TripleExpression.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  expression: _NS$9("expression"),

  /**
   * List of 2 or more expressions associated with the TripleExpression.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  expressions: _NS$9("expressions"),

  /**
   * Properties which may have extra values beyond those matched through a constraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  extra: _NS$9("extra"),

  /**
   * Regular expression flags
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  flags: _NS$9("flags"),

  /**
   * for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  fractiondigits: _NS$9("fractiondigits"),

  /**
   * Abstract property of numeric facets on a NodeConstraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  numericFacet: _NS$9("numericFacet"),

  /**
   * An abstract property of string and numeric facets on a NodeConstraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  xsFacet: _NS$9("xsFacet"),

  /**
   * Constrains the subject of a triple, rather than the object.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  inverse: _NS$9("inverse"),

  /**
   * The value used to match the language tag of a language-tagged string.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  languageTag: _NS$9("languageTag"),

  /**
   * The exact length of the value of the cell.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  length: _NS$9("length"),

  /**
   * An abstract property of string facets on a NodeConstraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  stringFacet: _NS$9("stringFacet"),

  /**
   * Maximum number of times this TripleExpression may match; -1 for “*”
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  max: _NS$9("max"),

  /**
   * An atomic property that contains a single number that is the maximum valid value (exclusive).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  maxexclusive: _NS$9("maxexclusive"),

  /**
   * An atomic property that contains a single number that is the maximum valid value (inclusive).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  maxinclusive: _NS$9("maxinclusive"),

  /**
   * A numeric atomic property that contains a single integer that is the maximum length of the value.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  maxlength: _NS$9("maxlength"),

  /**
   * Minimum number of times this TripleExpression may match.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  min: _NS$9("min"),

  /**
   * An atomic property that contains a single number that is the minimum valid value (exclusive).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  minexclusive: _NS$9("minexclusive"),

  /**
   * An atomic property that contains a single number that is the minimum valid value (inclusive).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  mininclusive: _NS$9("mininclusive"),

  /**
   * An atomic property that contains a single integer that is the minimum length of the value.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  minlength: _NS$9("minlength"),

  /**
   * Identifier of SemAct extension.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  name: _NS$9("name"),

  /**
   * Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  nodeKind: _NS$9("nodeKind"),

  /**
   * The object of an Annotation.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  object: _NS$9("object"),

  /**
   * A regular expression used for matching a value.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  pattern: _NS$9("pattern"),

  /**
   * The predicate of a TripleConstraint or Annotation.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  predicate: _NS$9("predicate"),

  /**
   * Semantic Actions on this TripleExpression.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  semActs: _NS$9("semActs"),

  /**
   * Shape Expression referenced by this shape.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  shapeExpr: _NS$9("shapeExpr"),

  /**
   * A list of 2 or more Shape Expressions referenced by this shape.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  shapeExprs: _NS$9("shapeExprs"),

  /**
   * Shapes in this Schema.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  shapes: _NS$9("shapes"),

  /**
   * A ShapeExpression matched against the focus node prior to any other mapped expressions.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  start: _NS$9("start"),

  /**
   * Semantic Actions run on the Schema.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  startActs: _NS$9("startActs"),

  /**
   * A stem value used for matching or excluding values.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  stem: _NS$9("stem"),

  /**
   * for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  totaldigits: _NS$9("totaldigits"),

  /**
   * A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  valueExpr: _NS$9("valueExpr"),

  /**
   * A value restriction on a NodeConstraint.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  values: _NS$9("values")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SHEX = SHEX;
var _NAMESPACE$8 = "http://www.w3.org/2004/02/skos/core#";

function _NS$8(localName) {
  return _NAMESPACE$8 + localName;
}
/**
 * An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */


var SKOS = {
  PREFIX: "skos",
  NAMESPACE: _NAMESPACE$8,
  PREFIX_AND_NAMESPACE: {
    "skos": "http://www.w3.org/2004/02/skos/core#"
  },
  NS: _NS$8,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An idea or notion; a unit of thought.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  Concept: _NS$8("Concept"),

  /**
   * A set of concepts, optionally including statements about semantic relationships between those concepts.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  ConceptScheme: _NS$8("ConceptScheme"),

  /**
   * A meaningful collection of concepts.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  Collection: _NS$8("Collection"),

  /**
   * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  OrderedCollection: _NS$8("OrderedCollection"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A statement or formal explanation of the meaning of a concept.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  definition: _NS$8("definition"),

  /**
   * A general note, for any purpose.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  note: _NS$8("note"),

  /**
   * A note that helps to clarify the meaning and/or the use of a concept.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  scopeNote: _NS$8("scopeNote"),

  /**
   * An example of the use of a concept.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  example: _NS$8("example"),

  /**
   * Relates a resource (for example a concept) to a concept scheme in which it is included.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  inScheme: _NS$8("inScheme"),

  /**
   * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  hasTopConcept: _NS$8("hasTopConcept"),

  /**
   * Relates a concept to the concept scheme that it is a top level concept of.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  topConceptOf: _NS$8("topConceptOf"),

  /**
   * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  prefLabel: _NS$8("prefLabel"),

  /**
   * The range of skos:altLabel is the class of RDF plain literals.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  altLabel: _NS$8("altLabel"),

  /**
   * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  hiddenLabel: _NS$8("hiddenLabel"),

  /**
   * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  notation: _NS$8("notation"),

  /**
   * A note about a modification to a concept.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  changeNote: _NS$8("changeNote"),

  /**
   * A note for an editor, translator or maintainer of the vocabulary.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  editorialNote: _NS$8("editorialNote"),

  /**
   * A note about the past state/use/meaning of a concept.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  historyNote: _NS$8("historyNote"),

  /**
   * Links a concept to a concept related by meaning.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  semanticRelation: _NS$8("semanticRelation"),

  /**
   * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  broader: _NS$8("broader"),

  /**
   * skos:broaderTransitive is a transitive superproperty of skos:broader.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  broaderTransitive: _NS$8("broaderTransitive"),

  /**
   * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  narrower: _NS$8("narrower"),

  /**
   * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  narrowerTransitive: _NS$8("narrowerTransitive"),

  /**
   * skos:related is disjoint with skos:broaderTransitive
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  related: _NS$8("related"),

  /**
   * Relates a collection to one of its members.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  member: _NS$8("member"),

  /**
   * For any resource, every item in the list given as the value of the
      skos:memberList property is also a value of the skos:member property.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  memberList: _NS$8("memberList"),

  /**
   * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  mappingRelation: _NS$8("mappingRelation"),

  /**
   * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  broadMatch: _NS$8("broadMatch"),

  /**
   * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  narrowMatch: _NS$8("narrowMatch"),

  /**
   * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  relatedMatch: _NS$8("relatedMatch"),

  /**
   * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  exactMatch: _NS$8("exactMatch"),

  /**
   * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  closeMatch: _NS$8("closeMatch")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * An RDF vocabulary extending SKOS and allowing the description and linking of lexical entities.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SKOS = SKOS;
var _NAMESPACE$7 = "http://www.w3.org/2008/05/skos-xl#";

function _NS$7(localName) {
  return _NAMESPACE$7 + localName;
}
/**
 * An RDF vocabulary extending SKOS and allowing the description and linking of lexical entities.
 */


var SKOS_XL = {
  PREFIX: "skos-xl",
  NAMESPACE: _NAMESPACE$7,
  PREFIX_AND_NAMESPACE: {
    "skos-xl": "http://www.w3.org/2008/05/skos-xl#"
  },
  NS: _NS$7,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A special class of lexical entities.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  Label: _NS$7("Label"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * If two instances of the class skosxl:Label have the same literal form, they are not necessarily the same resource.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  literalForm: _NS$7("literalForm"),

  /**
   * If C skosxl:prefLabel L and L skosxl:literalForm V, then X skos:prefLabel V.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.w3.org/2004/02/skos/core#prefLabel
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  prefLabel: _NS$7("prefLabel"),

  /**
   * If C skosxl:altLabel L and L skosxl:literalForm V, then X skos:altLabel V.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.w3.org/2004/02/skos/core#altLabel
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  altLabel: _NS$7("altLabel"),

  /**
   * If C skosxl:hiddenLabel L and L skosxl:literalForm V, then C skos:hiddenLabel V.
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.w3.org/2004/02/skos/core#hiddenLabel
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  hiddenLabel: _NS$7("hiddenLabel"),

  /**
   * The property skosxl:labelRelation is used for representing binary ('direct') relations between instances of the class skosxl:Label.
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  labelRelation: _NS$7("labelRelation")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - UI Ontology
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.SKOS_XL = SKOS_XL;
var _NAMESPACE$6 = "http://www.w3.org/ns/ui#";

function _NS$6(localName) {
  return _NAMESPACE$6 + localName;
}
/**
 * [Generator provided] - UI Ontology
 */


var UI = {
  PREFIX: "ui",
  NAMESPACE: _NAMESPACE$6,
  PREFIX_AND_NAMESPACE: {
    "ui": "http://www.w3.org/ns/ui#"
  },
  NS: _NS$6,
  // *****************
  // All the Classes.
  // *****************

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  BooleanField: _NS$6("BooleanField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  NumericField: _NS$6("NumericField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  ValueField: _NS$6("ValueField"),

  /**
   * A form can be any type of single field, or typically a Group of several fields,
    including interspersed headings and comments.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [NoLocale].
   */
  Form: _NS$6("Form"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Single: _NS$6("Single"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Group: _NS$6("Group"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Choice: _NS$6("Choice"),

  /**
   * A classifier allows the user to select the type of an object.
    The possible types must be subclasses of some overall class, the "category".
    (Ideally, the superclass is also set up as the disjoint union of the subclasses,
    if they are disjoint.)
       The form normally stores the resulting classes using an r:type triple,
    but a different predicate can be used if required, so the classifier field
    needs is 'property' defined too.
       If the subclass selected itself is has subclasses defined, the user can
    recursively select from them in turn, as many levels as needed.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Classifier: _NS$6("Classifier"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  ColorField: _NS$6("ColorField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  TextField: _NS$6("TextField"),

  /**
   * Comment
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  Comment: _NS$6("Comment"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  DateField: _NS$6("DateField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  DateTimeField: _NS$6("DateTimeField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  DecimalField: _NS$6("DecimalField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EmailField: _NS$6("EmailField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Heading: _NS$6("Heading"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  SingleLineTextField: _NS$6("SingleLineTextField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Options: _NS$6("Options"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  IntegerField: _NS$6("IntegerField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  FloatField: _NS$6("FloatField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  PhoneField: _NS$6("PhoneField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Multiple: _NS$6("Multiple"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  MultiLineTextField: _NS$6("MultiLineTextField"),

  /**
   * A NamedNodeURIField is like a SingleLineTextField, except
        that the value it generates is not a literal string but an RDF node with the given URI.
        Normally users should not see URIs. When they do, this a way to do it.
        
   *
   * This term provides descriptions only with no explicit locale.
   */
  NamedNodeURIField: _NS$6("NamedNodeURIField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  TriStateField: _NS$6("TriStateField"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * parts
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  parts: _NS$6("parts"),

  /**
   * A form which may be used to collect information about a
    hitherto locally undocumented instance instance of this class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  creationForm: _NS$6("creationForm"),

  /**
   * from
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  from: _NS$6("from"),

  /**
   * Label
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  label: _NS$6("label"),

  /**
   * Many fields prompt for information about a given property of the subject.
    When field is filled in, this gives which property is written into the data.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  property: _NS$6("property"),

  /**
   * The value for which this case is selected.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  for: _NS$6("for"),

  /**
   * A string for the UI to use if the user needs a longer
        prompts than just a field name, the s:label.
   *
   * This term provides descriptions only with no explicit locale.
   */
  prompt: _NS$6("prompt"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  use: _NS$6("use"),

  /**
   * Must be a valid CSS color string such as one could put in
            an HTML style attribute.  This must be in the #xxxxxx form,
            (with 6 digits of lowercase hex) so that it
            can work eg with Graphviz.
            As this is just an encoded array of RGB values,
            you can do math with these, such as blending, complement, etc.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Color: _NS$6("Color"),

  /**
   * Contents
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  contents: _NS$6("contents"),

  /**
   * size of field
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  size: _NS$6("size"),

  /**
   * Must be a valid CSS style string such as one could put in
        an HTML style attribute.  Depending on the user interface system, this can
        by given to individuals, classes or properties. It is up to a user interface
        which wants to draw on them to pick how it uses styles from which parts
        of the data it has.  For example, the style of a class may be picked
        to distinguish information about things in that class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  style: _NS$6("style"),

  /**
   * The superclass subclasses of which will be selected.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  category: _NS$6("category"),

  /**
   * Many fields prompt for information about a given property of the subject
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  dependingOn: _NS$6("dependingOn"),

  /**
   * Max length
   *
   * This term has [3] labels (in languages [NoLocale, en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  maxLength: _NS$6("maxLength"),

  /**
   * part
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  part: _NS$6("part"),

  /**
   * Time field
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  TimeField: _NS$6("TimeField"),

  /**
   * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
      *
   * This term provides descriptions only with no explicit locale.
   */
  annotationForm: _NS$6("annotationForm"),

  /**
   * background color
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  backgroundColor: _NS$6("backgroundColor"),

  /**
   * URI or base64 representation of an image
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  backgroundImage: _NS$6("backgroundImage"),

  /**
   * Base
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  base: _NS$6("base"),

  /**
   * color
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  color: _NS$6("color"),

  /**
   * Default error
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  defaultError: _NS$6("defaultError"),

  /**
   * A really simple way of enabling user interfaces to
            create new information about a class of things is to make a define of properties
            to be specified when a information about a new item
            ("New item" here means an item which the system
            does not have prvious information about yet,
            not an items which has just been created,
            like new friend as opposed to new baby)
   *
   * This term provides descriptions only with no explicit locale.
   */
  initialProperties: _NS$6("initialProperties"),

  /**
   * Maximum date offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  maxDateOffset: _NS$6("maxDateOffset"),

  /**
   * Maximum datetime offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  maxDatetimeOffset: _NS$6("maxDatetimeOffset"),

  /**
   * max
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  maxValue: _NS$6("maxValue"),

  /**
   * Minimum date offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  minDateOffset: _NS$6("minDateOffset"),

  /**
   * Minimum datetime offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  minDatetimeOffset: _NS$6("minDatetimeOffset"),

  /**
   * Min length
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  minLength: _NS$6("minLength"),

  /**
   * min
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  minValue: _NS$6("minValue"),

  /**
   * Name
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  name: _NS$6("name"),

  /**
   * Old value
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  oldValue: _NS$6("oldValue"),

  /**
   * Parent property
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  parentProperty: _NS$6("parentProperty"),

  /**
   * Parts clone
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  partsClone: _NS$6("partsClone"),

  /**
   * Pattern
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  pattern: _NS$6("pattern"),

  /**
   * Reference
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  reference: _NS$6("reference"),

  /**
   * Required
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  required: _NS$6("required"),

  /**
   * Required error
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  requiredError: _NS$6("requiredError"),

  /**
   * The sequence in which this item is arranged with repect to other parts.
   *
   * This term provides descriptions only with no explicit locale.
   */
  seqeunce: _NS$6("seqeunce"),

  /**
   * A property which typically is used to sort
        members of a given class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  sortBy: _NS$6("sortBy"),

  /**
   * When individuals or classes must be sorted, then
        if they are given different values of sortPriority a user agent can
        use this as a hint to how to present information.
   *
   * This term provides descriptions only with no explicit locale.
   */
  sortPriority: _NS$6("sortPriority"),

  /**
   * This  is a crude way of specifying a table-based
            view for objects of this class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  tableProperties: _NS$6("tableProperties"),

  /**
   * Valid
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  valid: _NS$6("valid"),

  /**
   * Validation error
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  validationError: _NS$6("validationError"),

  /**
   * Value
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  value: _NS$6("value"),

  /**
   * Values
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  values: _NS$6("values")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Extension to UI terms providing multilingual alternative names and translations for comments (e.g., for use directly as labels or tool-tips in user interfaces or error messages)
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.UI = UI;
var _NAMESPACE$5 = "http://www.w3.org/ns/ui#";

function _NS$5(localName) {
  return _NAMESPACE$5 + localName;
}
/**
 * Extension to UI terms providing multilingual alternative names and translations for comments (e.g., for use directly as labels or tool-tips in user interfaces or error messages)
 */


var UI_INRUPT = {
  PREFIX: "ui-inrupt",
  NAMESPACE: _NAMESPACE$5,
  PREFIX_AND_NAMESPACE: {
    "ui-inrupt": "http://www.w3.org/ns/ui#"
  },
  NS: _NS$5,
  // *****************
  // All the Classes.
  // *****************

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  BooleanField: _NS$5("BooleanField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  NumericField: _NS$5("NumericField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  ValueField: _NS$5("ValueField"),

  /**
   * A form can be any type of single field, or typically a Group of several fields,
    including interspersed headings and comments.
   *
   * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [NoLocale].
   */
  Form: _NS$5("Form"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Single: _NS$5("Single"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  TextField: _NS$5("TextField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  TriStateField: _NS$5("TriStateField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Group: _NS$5("Group"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Choice: _NS$5("Choice"),

  /**
   * A classifier allows the user to select the type of an object.
    The possible types must be subclasses of some overall class, the "category".
    (Ideally, the superclass is also set up as the disjoint union of the subclasses,
    if they are disjoint.)
       The form normally stores the resulting classes using an r:type triple,
    but a different predicate can be used if required, so the classifier field
    needs is 'property' defined too.
       If the subclass selected itself is has subclasses defined, the user can
    recursively select from them in turn, as many levels as needed.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Classifier: _NS$5("Classifier"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  ColorField: _NS$5("ColorField"),

  /**
   * Comment
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  Comment: _NS$5("Comment"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  DateField: _NS$5("DateField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  DateTimeField: _NS$5("DateTimeField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  DecimalField: _NS$5("DecimalField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  EmailField: _NS$5("EmailField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Heading: _NS$5("Heading"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  SingleLineTextField: _NS$5("SingleLineTextField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Options: _NS$5("Options"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  IntegerField: _NS$5("IntegerField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  FloatField: _NS$5("FloatField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  PhoneField: _NS$5("PhoneField"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  Multiple: _NS$5("Multiple"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  MultiLineTextField: _NS$5("MultiLineTextField"),

  /**
   * A NamedNodeURIField is like a SingleLineTextField, except
        that the value it generates is not a literal string but an RDF node with the given URI.
        Normally users should not see URIs. When they do, this a way to do it.
        
   *
   * This term provides descriptions only with no explicit locale.
   */
  NamedNodeURIField: _NS$5("NamedNodeURIField"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A form which may be used to collect information about a
    hitherto locally undocumented instance instance of this class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  creationForm: _NS$5("creationForm"),

  /**
   * parts
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  parts: _NS$5("parts"),

  /**
   * from
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  from: _NS$5("from"),

  /**
   * Label
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  label: _NS$5("label"),

  /**
   * Many fields prompt for information about a given property of the subject.
    When field is filled in, this gives which property is written into the data.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  property: _NS$5("property"),

  /**
   * The value for which this case is selected.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  for: _NS$5("for"),

  /**
   * A string for the UI to use if the user needs a longer
        prompts than just a field name, the s:label.
   *
   * This term provides descriptions only with no explicit locale.
   */
  prompt: _NS$5("prompt"),

  /**
   *
   *
   * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
   */
  use: _NS$5("use"),

  /**
   * The superclass subclasses of which will be selected.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  category: _NS$5("category"),

  /**
   * Must be a valid CSS color string such as one could put in
            an HTML style attribute.  This must be in the #xxxxxx form,
            (with 6 digits of lowercase hex) so that it
            can work eg with Graphviz.
            As this is just an encoded array of RGB values,
            you can do math with these, such as blending, complement, etc.
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  Color: _NS$5("Color"),

  /**
   * Contents
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  contents: _NS$5("contents"),

  /**
   * size of field
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  size: _NS$5("size"),

  /**
   * Must be a valid CSS style string such as one could put in
        an HTML style attribute.  Depending on the user interface system, this can
        by given to individuals, classes or properties. It is up to a user interface
        which wants to draw on them to pick how it uses styles from which parts
        of the data it has.  For example, the style of a class may be picked
        to distinguish information about things in that class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  style: _NS$5("style"),

  /**
   * Many fields prompt for information about a given property of the subject
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  dependingOn: _NS$5("dependingOn"),

  /**
   * part
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  part: _NS$5("part"),

  /**
   * Max length
   *
   * This term has [3] labels (in languages [NoLocale, en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  maxLength: _NS$5("maxLength"),

  /**
   * Time field
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  TimeField: _NS$5("TimeField"),

  /**
   * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
      *
   * This term provides descriptions only with no explicit locale.
   */
  annotationForm: _NS$5("annotationForm"),

  /**
   * background color
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  backgroundColor: _NS$5("backgroundColor"),

  /**
   * URI or base64 representation of an image
   *
   * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
   */
  backgroundImage: _NS$5("backgroundImage"),

  /**
   * Base
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  base: _NS$5("base"),

  /**
   * color
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  color: _NS$5("color"),

  /**
   * Default error
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  defaultError: _NS$5("defaultError"),

  /**
   * A really simple way of enabling user interfaces to
            create new information about a class of things is to make a define of properties
            to be specified when a information about a new item
            ("New item" here means an item which the system
            does not have prvious information about yet,
            not an items which has just been created,
            like new friend as opposed to new baby)
   *
   * This term provides descriptions only with no explicit locale.
   */
  initialProperties: _NS$5("initialProperties"),

  /**
   * Maximum date offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  maxDateOffset: _NS$5("maxDateOffset"),

  /**
   * Maximum datetime offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  maxDatetimeOffset: _NS$5("maxDatetimeOffset"),

  /**
   * max
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  maxValue: _NS$5("maxValue"),

  /**
   * Minimum date offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  minDateOffset: _NS$5("minDateOffset"),

  /**
   * Minimum datetime offset
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  minDatetimeOffset: _NS$5("minDatetimeOffset"),

  /**
   * Min length
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  minLength: _NS$5("minLength"),

  /**
   * min
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  minValue: _NS$5("minValue"),

  /**
   * Name
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  name: _NS$5("name"),

  /**
   * Old value
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  oldValue: _NS$5("oldValue"),

  /**
   * Parent property
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  parentProperty: _NS$5("parentProperty"),

  /**
   * Parts clone
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  partsClone: _NS$5("partsClone"),

  /**
   * Pattern
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  pattern: _NS$5("pattern"),

  /**
   * Reference
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  reference: _NS$5("reference"),

  /**
   * Required
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  required: _NS$5("required"),

  /**
   * Required error
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  requiredError: _NS$5("requiredError"),

  /**
   * The sequence in which this item is arranged with repect to other parts.
   *
   * This term provides descriptions only with no explicit locale.
   */
  seqeunce: _NS$5("seqeunce"),

  /**
   * A property which typically is used to sort
        members of a given class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  sortBy: _NS$5("sortBy"),

  /**
   * When individuals or classes must be sorted, then
        if they are given different values of sortPriority a user agent can
        use this as a hint to how to present information.
   *
   * This term provides descriptions only with no explicit locale.
   */
  sortPriority: _NS$5("sortPriority"),

  /**
   * This  is a crude way of specifying a table-based
            view for objects of this class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  tableProperties: _NS$5("tableProperties"),

  /**
   * Valid
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  valid: _NS$5("valid"),

  /**
   * Validation error
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  validationError: _NS$5("validationError"),

  /**
   * Value
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  value: _NS$5("value"),

  /**
   * Values
   *
   * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  values: _NS$5("values")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for annotating vocabulary descriptions (VANN).
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.UI_INRUPT = UI_INRUPT;
var _NAMESPACE$4 = "http://purl.org/vocab/vann/";

function _NS$4(localName) {
  return _NAMESPACE$4 + localName;
}
/**
 * A vocabulary for annotating vocabulary descriptions (VANN).
 */


var VANN = {
  PREFIX: "vann",
  NAMESPACE: _NAMESPACE$4,
  PREFIX_AND_NAMESPACE: {
    "vann": "http://purl.org/vocab/vann/"
  },
  NS: _NS$4,
  // *******************
  // All the Properties.
  // *******************

  /**
   * The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.
   *
   * This term provides descriptions only in English.
   */
  preferredNamespacePrefix: _NS$4("preferredNamespacePrefix"),

  /**
   * The preferred namespace URI to use when using terms from this vocabulary in an XML document.
   *
   * This term provides descriptions only in English.
   */
  preferredNamespaceUri: _NS$4("preferredNamespaceUri"),

  /**
   * A reference to a resource that describes changes between this version of a vocabulary and the previous.
   *
   * This term provides descriptions only in English.
   */
  changes: _NS$4("changes"),

  /**
   * A reference to a resource that provides an example of how this resource can be used.
   *
   * This term provides descriptions only in English.
   */
  example: _NS$4("example"),

  /**
   * A group of related terms in a vocabulary.
   *
   * This term provides descriptions only in English.
   */
  termGroup: _NS$4("termGroup"),

  /**
   * A reference to a resource that provides information on how this resource is to be used.
   *
   * This term provides descriptions only in English.
   */
  usageNote: _NS$4("usageNote")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Ontology for vCard based on RFC6350
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.VANN = VANN;
var _NAMESPACE$3 = "http://www.w3.org/2006/vcard/ns#";

function _NS$3(localName) {
  return _NAMESPACE$3 + localName;
}
/**
 * Ontology for vCard based on RFC6350
 */


var VCARD = {
  PREFIX: "vcard",
  NAMESPACE: _NAMESPACE$3,
  PREFIX_AND_NAMESPACE: {
    "vcard": "http://www.w3.org/2006/vcard/ns#"
  },
  NS: _NS$3,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Acquaintance
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Acquaintance: _NS$3("Acquaintance"),

  /**
   * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  RelatedType: _NS$3("RelatedType"),

  /**
   * Agent
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Agent: _NS$3("Agent"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  BBS: _NS$3("BBS"),

  /**
   * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  TelephoneType: _NS$3("TelephoneType"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Car: _NS$3("Car"),

  /**
   * Also called mobile telephone
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Cell: _NS$3("Cell"),

  /**
   * Child
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Child: _NS$3("Child"),

  /**
   * Colleague
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Colleague: _NS$3("Colleague"),

  /**
   * Contact
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Contact: _NS$3("Contact"),

  /**
   * Coresident
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Coresident: _NS$3("Coresident"),

  /**
   * Coworker
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Coworker: _NS$3("Coworker"),

  /**
   * Crush
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Crush: _NS$3("Crush"),

  /**
   * Date
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Date: _NS$3("Date"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Dom: _NS$3("Dom"),

  /**
   * Used for type codes. The URI of the type code must be used as the value for Type.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Type: _NS$3("Type"),

  /**
   * Emergency
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Emergency: _NS$3("Emergency"),

  /**
   * Fax
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Fax: _NS$3("Fax"),

  /**
   * Female
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Female: _NS$3("Female"),

  /**
   * Used for gender codes. The URI of the gender code must be used as the value for Gender.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Gender: _NS$3("Gender"),

  /**
   * Friend
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Friend: _NS$3("Friend"),

  /**
   * This implies that the property is related to an individual's personal life
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Home: _NS$3("Home"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  ISDN: _NS$3("ISDN"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Internet: _NS$3("Internet"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Intl: _NS$3("Intl"),

  /**
   * Kin
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Kin: _NS$3("Kin"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Label: _NS$3("Label"),

  /**
   * Male
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Male: _NS$3("Male"),

  /**
   * Me
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Me: _NS$3("Me"),

  /**
   * Met
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Met: _NS$3("Met"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Modem: _NS$3("Modem"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Msg: _NS$3("Msg"),

  /**
   * Muse
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Muse: _NS$3("Muse"),

  /**
   * Neighbor
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Neighbor: _NS$3("Neighbor"),

  /**
   * None
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  None: _NS$3("None"),

  /**
   * Other
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Other: _NS$3("Other"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  PCS: _NS$3("PCS"),

  /**
   * Pager
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Pager: _NS$3("Pager"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Parcel: _NS$3("Parcel"),

  /**
   * Parent
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Parent: _NS$3("Parent"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Postal: _NS$3("Postal"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Pref: _NS$3("Pref"),

  /**
   * Sibling
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Sibling: _NS$3("Sibling"),

  /**
   * Spouse
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Spouse: _NS$3("Spouse"),

  /**
   * Sweetheart
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Sweetheart: _NS$3("Sweetheart"),

  /**
   * This class is deprecated. Use the hasTelephone object property.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Tel: _NS$3("Tel"),

  /**
   * Also called sms telephone
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Text: _NS$3("Text"),

  /**
   * Text phone
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  TextPhone: _NS$3("TextPhone"),

  /**
   * Unknown
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Unknown: _NS$3("Unknown"),

  /**
   * Video
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Video: _NS$3("Video"),

  /**
   * Voice
   *
   * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Voice: _NS$3("Voice"),

  /**
   * This implies that the property is related to an individual's work place
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Work: _NS$3("Work"),

  /**
   * This class is deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  X400: _NS$3("X400"),

  /**
   * To specify the components of the delivery address for the  object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Address: _NS$3("Address"),

  /**
   * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Email: _NS$3("Email"),

  /**
   * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Group: _NS$3("Group"),

  /**
   * The parent class for all objects
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Kind: _NS$3("Kind"),

  /**
   * An object representing a single person or entity
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Individual: _NS$3("Individual"),

  /**
   * An object representing a named geographical place
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Location: _NS$3("Location"),

  /**
   * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.
      *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Organization: _NS$3("Organization"),

  /**
   * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  VCard: _NS$3("VCard"),

  /**
   * To specify the components of the name of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Name: _NS$3("Name"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  adr: _NS$3("adr"),

  /**
   * To specify the components of the delivery address for the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasAddress: _NS$3("hasAddress"),

  /**
   * This object property has been deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  agent: _NS$3("agent"),

  /**
   * The date of marriage, or equivalent, of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  anniversary: _NS$3("anniversary"),

  /**
   * To specify the birth date of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  bday: _NS$3("bday"),

  /**
   * The category information about the object, also known as tags
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  category: _NS$3("category"),

  /**
   * This data property has been deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  class: _NS$3("class"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  email: _NS$3("email"),

  /**
   * To specify the electronic mail address for communication with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasEmail: _NS$3("hasEmail"),

  /**
   * This data property has been deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  extended_address: _NS$3("extended-address"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  geo: _NS$3("geo"),

  /**
   * To specify information related to the global positioning of the object. May also be used as a property parameter.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasGeo: _NS$3("hasGeo"),

  /**
   * Used to support property parameters for the additional name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasAdditionalName: _NS$3("hasAdditionalName"),

  /**
   * To specify the busy time associated with the object. (Was called FBURL in RFC6350)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCalendarBusy: _NS$3("hasCalendarBusy"),

  /**
   * To specify the calendar associated with the object. (Was called CALURI in RFC6350)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCalendarLink: _NS$3("hasCalendarLink"),

  /**
   * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCalendarRequest: _NS$3("hasCalendarRequest"),

  /**
   * Used to support property parameters for the category data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCategory: _NS$3("hasCategory"),

  /**
   * Used to support property parameters for the country name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCountryName: _NS$3("hasCountryName"),

  /**
   * Used to support property parameters for the formatted name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasFN: _NS$3("hasFN"),

  /**
   * Used to support property parameters for the family name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasFamilyName: _NS$3("hasFamilyName"),

  /**
   * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasGender: _NS$3("hasGender"),

  /**
   * Used to support property parameters for the given name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasGivenName: _NS$3("hasGivenName"),

  /**
   * Used to support property parameters for the honorific prefix data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasHonorificPrefix: _NS$3("hasHonorificPrefix"),

  /**
   * Used to support property parameters for the honorific suffix data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasHonorificSuffix: _NS$3("hasHonorificSuffix"),

  /**
   * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasInstantMessage: _NS$3("hasInstantMessage"),

  /**
   * Used to support property parameters for the language data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasLanguage: _NS$3("hasLanguage"),

  /**
   * Used to support property parameters for the locality data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasLocality: _NS$3("hasLocality"),

  /**
   * Used to support property parameters for the nickname data property
   *
   * This term provides descriptions only in English.
   *
   * See also:
   *  - http://www.w3.org/2006/vcard/ns#nickname
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasNickname: _NS$3("hasNickname"),

  /**
   * The nick name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  nickname: _NS$3("nickname"),

  /**
   * Used to support property parameters for the note data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasNote: _NS$3("hasNote"),

  /**
   * Used to support property parameters for the organization name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasOrganizationName: _NS$3("hasOrganizationName"),

  /**
   * Used to support property parameters for the organization unit name data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasOrganizationUnit: _NS$3("hasOrganizationUnit"),

  /**
   * Used to support property parameters for the postal code data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasPostalCode: _NS$3("hasPostalCode"),

  /**
   * Used to support property parameters for the region data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasRegion: _NS$3("hasRegion"),

  /**
   * To specify a relationship between another entity and the entity represented by this object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasRelated: _NS$3("hasRelated"),

  /**
   * Used to support property parameters for the role data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasRole: _NS$3("hasRole"),

  /**
   * To identify the source of directory information of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasSource: _NS$3("hasSource"),

  /**
   * Used to support property parameters for the street address data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasStreetAddress: _NS$3("hasStreetAddress"),

  /**
   * Used to support property parameters for the title data property
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasTitle: _NS$3("hasTitle"),

  /**
   * To specify a value that represents a globally unique identifier corresponding to the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasUID: _NS$3("hasUID"),

  /**
   * Used to indicate the resource value of an object property that requires property parameters
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasValue: _NS$3("hasValue"),

  /**
   * This data property has been deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  label: _NS$3("label"),

  /**
   * To specify the language that may be used for contacting the object. May also be used as a property parameter.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  language: _NS$3("language"),

  /**
   * This data property has been deprecated. See hasGeo
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  latitude: _NS$3("latitude"),

  /**
   * This data property has been deprecated. See hasGeo
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  longitude: _NS$3("longitude"),

  /**
   * This data property has been deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  mailer: _NS$3("mailer"),

  /**
   * A note associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  note: _NS$3("note"),

  /**
   * This object property has been mapped. Use the organization-name data property.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  org: _NS$3("org"),

  /**
   * To specify the organizational name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  organization_name: _NS$3("organization-name"),

  /**
   * To specify the organizational unit name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  organization_unit: _NS$3("organization-unit"),

  /**
   * This data property has been deprecated
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  post_office_box: _NS$3("post-office-box"),

  /**
   * To specify the identifier for the product that created the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  prodid: _NS$3("prodid"),

  /**
   * To specify revision information about the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  rev: _NS$3("rev"),

  /**
   * To specify the function or part played in a particular situation by the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  role: _NS$3("role"),

  /**
   * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  sort_string: _NS$3("sort-string"),

  /**
   * To specify the position or job of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  title: _NS$3("title"),

  /**
   * To indicate time zone information that is specific to the object. May also be used as a property parameter.
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  tz: _NS$3("tz"),

  /**
   * Used to indicate the literal value of a data property that requires property parameters
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  value: _NS$3("value"),

  /**
   * The country name associated with the address of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  country_name: _NS$3("country-name"),

  /**
   * The locality (e.g. city or town) associated with the address of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  locality: _NS$3("locality"),

  /**
   * The postal code associated with the address of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  postal_code: _NS$3("postal-code"),

  /**
   * The region (e.g. state or province) associated with the address of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  region: _NS$3("region"),

  /**
   * The street address associated with the address of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  street_address: _NS$3("street-address"),

  /**
   * The formatted text corresponding to the name of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  fn: _NS$3("fn"),

  /**
   * To include a member in the group this object represents. (This property can only be used by Group individuals)
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasMember: _NS$3("hasMember"),

  /**
   * The additional name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  additional_name: _NS$3("additional-name"),

  /**
   * The family name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  family_name: _NS$3("family-name"),

  /**
   * The given name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  given_name: _NS$3("given-name"),

  /**
   * The honorific prefix of the name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  honorific_prefix: _NS$3("honorific-prefix"),

  /**
   * The honorific suffix of the name associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  honorific_suffix: _NS$3("honorific-suffix"),

  /**
   * To specify a public key or authentication certificate associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasKey: _NS$3("hasKey"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  key: _NS$3("key"),

  /**
   * To specify a graphic image of a logo associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasLogo: _NS$3("hasLogo"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  logo: _NS$3("logo"),

  /**
   * To specify the components of the name of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasName: _NS$3("hasName"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  n: _NS$3("n"),

  /**
   * To specify an image or photograph information that annotates some aspect of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasPhoto: _NS$3("hasPhoto"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  photo: _NS$3("photo"),

  /**
   * To specify a digital sound content information that annotates some aspect of the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasSound: _NS$3("hasSound"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  sound: _NS$3("sound"),

  /**
   * To specify the telephone number for telephony communication with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasTelephone: _NS$3("hasTelephone"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  tel: _NS$3("tel"),

  /**
   * To specify a uniform resource locator associated with the object
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasURL: _NS$3("hasURL"),

  /**
   * This object property has been mapped
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  url: _NS$3("url")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.VCARD = VCARD;
var _NAMESPACE$2 = "http://rdfs.org/ns/void#";

function _NS$2(localName) {
  return _NAMESPACE$2 + localName;
}
/**
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */


var VOID = {
  PREFIX: "void",
  NAMESPACE: _NAMESPACE$2,
  PREFIX_AND_NAMESPACE: {
    "void": "http://rdfs.org/ns/void#"
  },
  NS: _NS$2,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A set of RDF triples that are published, maintained or aggregated by a single provider.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Dataset: _NS$2("Dataset"),

  /**
   * A collection of RDF links between two void:Datasets.
   *
   * This term provides descriptions only with no explicit locale.
   */
  Linkset: _NS$2("Linkset"),

  /**
   * A technical feature of a void:Dataset, such as a supported RDF serialization format.
   *
   * This term provides descriptions only with no explicit locale.
   */
  TechnicalFeature: _NS$2("TechnicalFeature"),

  /**
   * A web resource whose foaf:primaryTopic or foaf:topics include void:Datasets.
   *
   * This term provides descriptions only with no explicit locale.
   */
  DatasetDescription: _NS$2("DatasetDescription"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * feature
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  feature: _NS$2("feature"),

  /**
   * has subset
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  subset: _NS$2("subset"),

  /**
   * One of the two datasets linked by the Linkset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  target: _NS$2("target"),

  /**
   * has a SPARQL endpoint at
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  sparqlEndpoint: _NS$2("sparqlEndpoint"),

  /**
   * a link predicate
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  linkPredicate: _NS$2("linkPredicate"),

  /**
   * example resource of dataset
   *
   * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
   */
  exampleResource: _NS$2("exampleResource"),

  /**
   * A vocabulary that is used in the dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  vocabulary: _NS$2("vocabulary"),

  /**
   * The dataset describing the subjects of triples contained in the Linkset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  subjectsTarget: _NS$2("subjectsTarget"),

  /**
   * The dataset describing the objects of the triples contained in the Linkset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  objectsTarget: _NS$2("objectsTarget"),

  /**
   * An RDF dump, partial or complete, of a void:Dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  dataDump: _NS$2("dataDump"),

  /**
   * Defines a simple URI look-up protocol for accessing a dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  uriLookupEndpoint: _NS$2("uriLookupEndpoint"),

  /**
   * Defines a regular expression pattern matching URIs in the dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  uriRegexPattern: _NS$2("uriRegexPattern"),

  /**
   * The rdfs:Class that is the rdf:type of all entities in a class-based partition.
   *
   * This term provides descriptions only with no explicit locale.
   */
  class: _NS$2("class"),

  /**
   * The total number of distinct classes in a void:Dataset. In other words, the number of distinct resources occuring as objects of rdf:type triples in the dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  classes: _NS$2("classes"),

  /**
   * A subset of a void:Dataset that contains only the entities of a certain rdfs:Class.
   *
   * This term provides descriptions only with no explicit locale.
   */
  classPartition: _NS$2("classPartition"),

  /**
   * The total number of distinct objects in a void:Dataset. In other words, the number of distinct resources that occur in the object position of triples in the dataset. Literals are included in this count.
   *
   * This term provides descriptions only with no explicit locale.
   */
  distinctObjects: _NS$2("distinctObjects"),

  /**
   * The total number of distinct subjects in a void:Dataset. In other words, the number of distinct resources that occur in the subject position of triples in the dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  distinctSubjects: _NS$2("distinctSubjects"),

  /**
   * The total number of documents, for datasets that are published as a set of individual documents, such as RDF/XML documents or RDFa-annotated web pages. Non-RDF documents, such as web pages in HTML or images, are usually not included in this count. This property is intended for datasets where the total number of triples or entities is hard to determine. void:triples or void:entities should be preferred where practical.
   *
   * This term provides descriptions only with no explicit locale.
   */
  documents: _NS$2("documents"),

  /**
   * The total number of entities that are described in a void:Dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  entities: _NS$2("entities"),

  /**
   * Points to the void:Dataset that a document is a part of.
   *
   * This term provides descriptions only with no explicit locale.
   */
  inDataset: _NS$2("inDataset"),

  /**
   * An OpenSearch description document for a free-text search service over a void:Dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  openSearchDescription: _NS$2("openSearchDescription"),

  /**
   * The total number of distinct properties in a void:Dataset. In other words, the number of distinct resources that occur in the predicate position of triples in the dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  properties: _NS$2("properties"),

  /**
   * The rdf:Property that is the predicate of all triples in a property-based partition.
   *
   * This term provides descriptions only with no explicit locale.
   */
  property: _NS$2("property"),

  /**
   * A subset of a void:Dataset that contains only the triples of a certain rdf:Property.
   *
   * This term provides descriptions only with no explicit locale.
   */
  propertyPartition: _NS$2("propertyPartition"),

  /**
   * A top concept or entry point for a void:Dataset that is structured in a tree-like fashion. All resources in a dataset can be reached by following links from its root resources in a small number of steps.
   *
   * This term provides descriptions only with no explicit locale.
   */
  rootResource: _NS$2("rootResource"),

  /**
   * The total number of triples contained in a void:Dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  triples: _NS$2("triples"),

  /**
   * A URI that is a common string prefix of all the entity URIs in a void:Dataset.
   *
   * This term provides descriptions only with no explicit locale.
   */
  uriSpace: _NS$2("uriSpace")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This vocabulary was created in the FOAF project, based on experience with FOAF, Dublin Core and other early RDF vocabularies. Deployment experience shows that changing namespace URIs is expensive and unrewarding, so this vocabulary provides terms to support in-place evolution of structured data vocabularies. By indicating status at the level of terms rather than vocabularies, dictionary-style, fine grained improvements become easier. Different organizations and parties can agree or disagree on the status of a vocabulary term; however the status published alongside the term may deserve special attention. Future work could include patterns for citing announcements and decisions, or using SKOS to decentralise the extension of the basic status levels.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.VOID = VOID;
var _NAMESPACE$1 = "http://www.w3.org/2003/06/sw-vocab-status/ns#";

function _NS$1(localName) {
  return _NAMESPACE$1 + localName;
}
/**
 * This vocabulary was created in the FOAF project, based on experience with FOAF, Dublin Core and other early RDF vocabularies. Deployment experience shows that changing namespace URIs is expensive and unrewarding, so this vocabulary provides terms to support in-place evolution of structured data vocabularies. By indicating status at the level of terms rather than vocabularies, dictionary-style, fine grained improvements become easier. Different organizations and parties can agree or disagree on the status of a vocabulary term; however the status published alongside the term may deserve special attention. Future work could include patterns for citing announcements and decisions, or using SKOS to decentralise the extension of the basic status levels.
 */


var VS = {
  PREFIX: "vs",
  NAMESPACE: _NAMESPACE$1,
  PREFIX_AND_NAMESPACE: {
    "vs": "http://www.w3.org/2003/06/sw-vocab-status/ns#"
  },
  NS: _NS$1,
  // *******************
  // All the Properties.
  // *******************

  /**
   * the status of a vocabulary term, expressed as a short symbolic string; known values include 'unstable','testing', 'stable' and 'archaic'
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
   */
  term_status: _NS$1("term_status"),

  /**
   * more information about the status etc of a term, typically human oriented
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
   */
  moreinfo: _NS$1("moreinfo"),

  /**
   * human-oriented documentation, examples etc for use of this term
   *
   * This term provides descriptions only with no explicit locale.
   *
   * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
   */
  userdocs: _NS$1("userdocs")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.3]
 * on 'Sunday, October 3, 2021 12:33 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for describing XML Schema datatypes.
 */
// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.

exports.VS = VS;
var _NAMESPACE = "http://www.w3.org/2001/XMLSchema#";

function _NS(localName) {
  return _NAMESPACE + localName;
}
/**
 * A vocabulary for describing XML Schema datatypes.
 */


var XSD = {
  PREFIX: "xsd",
  NAMESPACE: _NAMESPACE,
  PREFIX_AND_NAMESPACE: {
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  NS: _NS,
  // *******************
  // All the Properties.
  // *******************

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  changes: _NS("changes"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  string: _NS("string"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  boolean: _NS("boolean"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  float: _NS("float"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  double: _NS("double"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  decimal: _NS("decimal"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  dateTime: _NS("dateTime"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  duration: _NS("duration"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  hexBinary: _NS("hexBinary"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  base64Binary: _NS("base64Binary"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  anyURI: _NS("anyURI"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ID: _NS("ID"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  IDREF: _NS("IDREF"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ENTITY: _NS("ENTITY"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NOTATION: _NS("NOTATION"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  normalizedString: _NS("normalizedString"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  token: _NS("token"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  language: _NS("language"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  IDREFS: _NS("IDREFS"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ENTITIES: _NS("ENTITIES"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NMTOKEN: _NS("NMTOKEN"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NMTOKENS: _NS("NMTOKENS"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  Name: _NS("Name"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  QName: _NS("QName"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NCName: _NS("NCName"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  integer: _NS("integer"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  nonNegativeInteger: _NS("nonNegativeInteger"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  positiveInteger: _NS("positiveInteger"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  nonPositiveInteger: _NS("nonPositiveInteger"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  negativeInteger: _NS("negativeInteger"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  byte: _NS("byte"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  int: _NS("int"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  long: _NS("long"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  short: _NS("short"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedByte: _NS("unsignedByte"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedInt: _NS("unsignedInt"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedLong: _NS("unsignedLong"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedShort: _NS("unsignedShort"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  date: _NS("date"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  time: _NS("time"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gYearMonth: _NS("gYearMonth"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gYear: _NS("gYear"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gMonthDay: _NS("gMonthDay"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gDay: _NS("gDay"),

  /**
   * .
   *
   * This term provides descriptions only in English.
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gMonth: _NS("gMonth")
};
exports.XSD = XSD;
},{}],"index.js":[function(require,module,exports) {
"use strict";

var _solidClient = require("@inrupt/solid-client");

var _solidClientAuthnBrowser = require("@inrupt/solid-client-authn-browser");

var _vocabCommonRdf = require("@inrupt/vocab-common-rdf");

// If your Pod is *not* on `solidcommunity.net`, change this to your identity provider.
//const SOLID_IDENTITY_PROVIDER = "https://solidcommunity.net";
const SOLID_IDENTITY_PROVIDER = "http://localhost:3000";
document.getElementById("solid_identity_provider").innerHTML = `[<a target="_blank" href="${SOLID_IDENTITY_PROVIDER}">${SOLID_IDENTITY_PROVIDER}</a>]`;
const NOT_ENTERED_WEBID = "...not logged in yet - but enter any WebID to read from its profile...";
const session = new _solidClientAuthnBrowser.Session();
const buttonLogin = document.getElementById("btnLogin");
const writeForm = document.getElementById("writeForm");
const readForm = document.getElementById("readForm"); // 1a. Start Login Process. Call session.login() function.

async function login() {
  if (!session.info.isLoggedIn) {
    await session.login({
      oidcIssuer: SOLID_IDENTITY_PROVIDER,
      clientName: "Inrupt tutorial client app",
      redirectUrl: window.location.href
    });
  }
} // 1b. Login Redirect. Call session.handleIncomingRedirect() function.
// When redirected after login, finish the process by retrieving session information.


async function handleRedirectAfterLogin() {
  await session.handleIncomingRedirect(window.location.href);

  if (session.info.isLoggedIn) {
    // Update the page with the status.
    document.getElementById("labelStatus").innerHTML = `Your session is logged in with the WebID [<a target="_blank" href="${session.info.webId}">${session.info.webId}</a>].`;
    document.getElementById("labelStatus").setAttribute("role", "alert");
    document.getElementById("webID").value = session.info.webId;
  }
} // The example has the login redirect back to the index.html.
// This calls the function to process login information.
// If the function is called when not part of the login redirect, the function is a no-op.


handleRedirectAfterLogin(); // 2. Write to profile

async function writeProfile() {
  const name = document.getElementById("input_name").value;

  if (!session.info.isLoggedIn) {
    // You must be authenticated to write.
    document.getElementById("labelWriteStatus").textContent = `...you can't write [${name}] until you first login!`;
    document.getElementById("labelWriteStatus").setAttribute("role", "alert");
    return;
  }

  const webID = session.info.webId; // The WebID can contain a hash fragment (e.g. `#me`) to refer to profile data
  // in the profile dataset. If we strip the hash, we get the URL of the full
  // dataset.

  const profileDocumentUrl = new URL(webID);
  profileDocumentUrl.hash = ""; // To write to a profile, you must be authenticated. That is the role of the fetch
  // parameter in the following call.

  let myProfileDataset = await (0, _solidClient.getSolidDataset)(profileDocumentUrl.href, {
    fetch: session.fetch
  }); // The profile data is a "Thing" in the profile dataset.

  let profile = (0, _solidClient.getThing)(myProfileDataset, webID); // Using the name provided in text field, update the name in your profile.
  // VCARD.fn object is a convenience object that includes the identifier string "http://www.w3.org/2006/vcard/ns#fn".
  // As an alternative, you can pass in the "http://www.w3.org/2006/vcard/ns#fn" string instead of VCARD.fn.

  profile = (0, _solidClient.setStringNoLocale)(profile, _vocabCommonRdf.VCARD.fn, name); // Write back the profile to the dataset.

  myProfileDataset = (0, _solidClient.setThing)(myProfileDataset, profile); // Write back the dataset to your Pod.

  await (0, _solidClient.saveSolidDatasetAt)(profileDocumentUrl.href, myProfileDataset, {
    fetch: session.fetch
  }); // Update the page with the retrieved values.

  document.getElementById("labelWriteStatus").textContent = `Wrote [${name}] as name successfully!`;
  document.getElementById("labelWriteStatus").setAttribute("role", "alert");
  document.getElementById("labelFN").textContent = `...click the 'Read Profile' button to to see what the name might be now...?!`;
} // 3. Read profile


async function readProfile() {
  const webID = document.getElementById("webID").value;

  if (webID === NOT_ENTERED_WEBID) {
    document.getElementById("labelFN").textContent = `Login first, or enter a WebID (any WebID!) to read from its profile`;
    return false;
  }

  try {
    new URL(webID);
  } catch (_) {
    document.getElementById("labelFN").textContent = `Provided WebID [${webID}] is not a valid URL - please try again`;
    return false;
  }

  const profileDocumentUrl = new URL(webID);
  profileDocumentUrl.hash = ""; // Profile is public data; i.e., you do not need to be logged in to read the data.
  // For illustrative purposes, shows both an authenticated and non-authenticated reads.

  let myDataset;

  try {
    if (session.info.isLoggedIn) {
      myDataset = await (0, _solidClient.getSolidDataset)(profileDocumentUrl.href, {
        fetch: session.fetch
      });
    } else {
      myDataset = await (0, _solidClient.getSolidDataset)(profileDocumentUrl.href);
    }
  } catch (error) {
    document.getElementById("labelFN").textContent = `Entered value [${webID}] does not appear to be a WebID. Error: [${error}]`;
    return false;
  }

  const profile = (0, _solidClient.getThing)(myDataset, webID); // Get the formatted name (fn) using the property identifier "http://www.w3.org/2006/vcard/ns#fn".
  // VCARD.fn object is a convenience object that includes the identifier string "http://www.w3.org/2006/vcard/ns#fn".
  // As an alternative, you can pass in the "http://www.w3.org/2006/vcard/ns#fn" string instead of VCARD.fn.

  const formattedName = (0, _solidClient.getStringNoLocale)(profile, _vocabCommonRdf.VCARD.fn); // Update the page with the retrieved values.

  document.getElementById("labelFN").textContent = `[${formattedName}]`;
}

buttonLogin.onclick = function () {
  login();
};

writeForm.addEventListener("submit", event => {
  event.preventDefault();
  writeProfile();
});
readForm.addEventListener("submit", event => {
  event.preventDefault();
  readProfile();
});
},{"@inrupt/solid-client":"node_modules/@inrupt/solid-client/dist/index.es.js","@inrupt/solid-client-authn-browser":"node_modules/@inrupt/solid-client-authn-browser/dist/index.js","@inrupt/vocab-common-rdf":"node_modules/@inrupt/vocab-common-rdf/dist/index.es.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "52329" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/demo-solid-app.e31bb0bc.js.map